import os
import requests
import json
import time
import pandas as pd
from typing import Dict, Optional, List
import logging
import ollama

# Configuration
MITRE_CSV_URL = "https://raw.githubusercontent.com/sduff/mitre_attack_csv/main/enterprise-attack.csv"
LOCAL_CSV_PATH = "./enterprise-attack.csv"
OLLAMA_API_URL = "http://localhost:11434/api/generate"
OLLAMA_MODEL = "deepseek-r1:7b"
BASE_DIR = "MITRE_ATT&CK_Analysis"

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

PROMPT_TEMPLATES = {
    "adversary_emulation": """
Analyze this MITRE ATT&CK technique for red team emulation:
Technique: {name}
ID: {id}
Description: {description}
Platforms: {platforms}
Data Sources: {data_sources}

Generate a detailed adversary emulation plan including:
1. Prerequisites and setup
2. Step-by-step execution procedure
3. Expected system impacts
4. Detection artifacts generated
5. Success criteria
6. Cleanup procedures

Include specific commands and tools where applicable.
Format as a structured technical analysis.
""",
    
    "defense_analysis": """
Provide a defensive analysis for this MITRE ATT&CK technique:
Technique: {name}
ID: {id}
Description: {description}
Platforms: {platforms}
Data Sources: {data_sources}
Detection: {detection}

Include:
1. Required monitoring capabilities
2. Key detection points
3. Potential false positives
4. Incident response procedures
5. Mitigation strategies
6. Detection rules (pseudo-code)

Format as a technical defense guide.
""",

    "purple_team": """
Design a purple team exercise for this technique:
Technique: {name}
ID: {id}
Description: {description}
Platforms: {platforms}
Kill Chain Phases: {kill_chain_phases}
Data Sources: {data_sources}

Provide:
1. Exercise Prerequisites
2. Red Team Procedure
3. Blue Team Detection Points
4. Success Criteria for Both Teams
5. Common Evasion Methods
6. Validation Steps
7. Risk Assessment

Format as a comprehensive exercise plan.
""",

    "red_team_assessment": """
Perform a red team assessment on this MITRE ATT&CK technique:
Technique: {name}
ID: {id}
Description: {description}
Platforms: {platforms}
Data Sources: {data_sources}

Include:
1. Attack scenario simulation
2. Exploitation methods
3. Lateral movement opportunities
4. Privilege escalation tactics
5. Evasion techniques
6. Real-world attack examples

Format as an offensive security assessment.
"""
}

class OllamaEnricher:
    def __init__(self, model: str, max_retries: int = 3, retry_delay: int = 10):
        self.model = model
        self.max_retries = max_retries
        self.retry_delay = retry_delay
        
    def _call_ollama(self, prompt: str) -> Optional[str]:
        """Make a request to Ollama with retry logic."""
        payload = {
            "model": self.model,
            "prompt": prompt,
            "stream": False
        }
        
        for attempt in range(self.max_retries):
            try:
                response = requests.post(OLLAMA_API_URL, json=payload, timeout=60)
                
                if response.status_code == 200:
                    return response.json().get("response", "").strip()
                logger.warning(f"Attempt {attempt + 1} failed with status code: {response.status_code}")
            except Exception as e:
                logger.error(f"Attempt {attempt + 1} failed with error: {str(e)}")
            
            if attempt < self.max_retries - 1:
                logger.info(f"Waiting {self.retry_delay} seconds before retry...")
                time.sleep(self.retry_delay)
        
        return None

    def enrich_technique(self, technique_data: Dict) -> Dict[str, str]:
        """Enrich a technique with multiple analysis perspectives."""
        enriched_data = {}
        
        for analysis_type, template in PROMPT_TEMPLATES.items():
            prompt = template.format(**technique_data)
            result = self._call_ollama(prompt)
            if result:
                enriched_data[analysis_type] = result
            else:
                enriched_data[analysis_type] = f"Failed to generate {analysis_type} analysis"
            # Add longer delay between requests
            time.sleep(5)
        
        return enriched_data

def download_mitre_csv():
    """Download the MITRE ATT&CK CSV file if it doesn't exist."""
    if os.path.exists(LOCAL_CSV_PATH):
        logger.info("MITRE ATT&CK CSV is up to date.")
        return True
    
    logger.info(f"Downloading MITRE ATT&CK data from {MITRE_CSV_URL}...")
    try:
        response = requests.get(MITRE_CSV_URL, timeout=30)
        if response.status_code == 200:
            with open(LOCAL_CSV_PATH, "wb") as f:
                f.write(response.content)
            logger.info("Download complete.")
            return True
        else:
            logger.error(f"Failed to download MITRE ATT&CK CSV. Status Code: {response.status_code}")
            return False
    except requests.RequestException as e:
        logger.error(f"Download error: {e}")
        return False

def process_technique(technique_row: pd.Series, enricher: OllamaEnricher):
    """Process a single technique and save results."""
    try:
        technique_data = {
            'name': technique_row['name'],
            'id': technique_row['id'],
            'description': technique_row['description'],
            'platforms': technique_row['platforms'],
            'kill_chain_phases': technique_row['kill chain phases'],
            'data_sources': technique_row['data sources'],
            'detection': technique_row.get('detection', 'No detection information available')
        }

        # Get enriched data
        enriched_data = enricher.enrich_technique(technique_data)
        
        # Combine all data
        full_data = {
            **technique_data,
            'enrichments': enriched_data,
        }

        # Create directories based on kill chain phases
        phases = [phase.strip() for phase in technique_row['kill chain phases'].split(',') if phase.strip()]
        for phase in phases:
            phase_dir = os.path.join(BASE_DIR, phase.lower().replace(' ', '_'))
            os.makedirs(phase_dir, exist_ok=True)
            
            file_path = os.path.join(phase_dir, f"{technique_row['id']}.json")
            with open(file_path, 'w') as f:
                json.dump(full_data, f, indent=4)
            
            logger.info(f"Processed {technique_row['id']} for phase {phase}")

        return True

    except Exception as e:
        logger.error(f"Error processing technique {technique_row['id']}: {e}")
        return False

def main():
    if not download_mitre_csv():
        return
    
    logger.info("Reading MITRE ATT&CK data from local CSV...")
    try:
        mitre_df = pd.read_csv(LOCAL_CSV_PATH)
    except Exception as e:
        logger.error(f"Error reading CSV file: {e}")
        return

    os.makedirs(BASE_DIR, exist_ok=True)
    enricher = OllamaEnricher(OLLAMA_MODEL, max_retries=3, retry_delay=10)

    success_count = sum(process_technique(row, enricher) for _, row in mitre_df.iterrows())

    summary = {
        "total_techniques": len(mitre_df),
        "successful_processes": success_count,
        "failed_processes": len(mitre_df) - success_count,
    }
    
    with open(os.path.join(BASE_DIR, "summary.json"), "w") as f:
        json.dump(summary, f, indent=4)

    logger.info("Processing complete.")

if __name__ == "__main__":
    main()
