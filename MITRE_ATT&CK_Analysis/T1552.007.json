{
    "id": "T1552.007",
    "name": "Container API",
    "description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components.",
    "platforms": "Containers",
    "kill_chain_phases": "Credential Access",
    "data_sources": "Command: Command Execution, File: File Access, User Account: User Account Authentication",
    "detection": "Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs.\nIt may be possible to detect adversary use of credentials they have obtained such as in [Valid Accounts](T1078).",
    "url": "https://attack.mitre.org/techniques/T1552/007",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "6ad91e31-53df-4826-bd27-0166171c8040",
                    "f8ef3a62-3f44-40a4-abca-761ab235c436",
                    "a61a3c56-4ce2-4351-a079-88ae4cbd2b58"
                ],
                "lookup_results": [
                    {
                        "uuid": "6ad91e31-53df-4826-bd27-0166171c8040",
                        "lookup_data": {
                            "description": "Identifies when an admission controller is executed in GCP Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod. An adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
                            "raw": "author: Austin Songer @austinsonger\ndate: 2021/11/25\ndescription: 'Identifies when an admission controller is executed in GCP Kubernetes.\n\n  A Kubernetes Admission controller intercepts, and possibly modifies, requests to\n  the Kubernetes API server.\n\n  The behavior of this admission controller is determined by an admission webhook\n  (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in\n  the cluster.\n\n  An adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining\n  persistence in the cluster.\n\n  For example, attackers can intercept and modify the pod creation operations in the\n  cluster and add their malicious container to every created pod. An adversary can\n  use the webhook ValidatingAdmissionWebhook, which could be used to obtain access\n  credentials.\n\n  An adversary could use the webhook to intercept the requests to the API server,\n  record secrets, and other sensitive information.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    gcp.audit.method_name|contains:\n    - .mutatingwebhookconfigurations.\n    - .validatingwebhookconfigurations.\n    gcp.audit.method_name|endswith:\n    - create\n    - patch\n    - replace\n    gcp.audit.method_name|startswith: admissionregistration.k8s.io.v\nfalsepositives:\n- Google Cloud Kubernetes Admission Controller may be done by a system administrator.\n- If known behavior is causing false positives, it can be exempted from the rule.\nid: 6ad91e31-53df-4826-bd27-0166171c8040\nlevel: medium\nlogsource:\n  product: gcp\n  service: gcp.audit\nmodified: 2022/12/18\nreferences:\n- https://cloud.google.com/kubernetes-engine/docs\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1078\n- attack.credential_access\n- attack.t1552\n- attack.t1552.007\ntitle: Google Cloud Kubernetes Admission Controller\n",
                            "sigma:id": "6ad91e31-53df-4826-bd27-0166171c8040",
                            "title": "Google Cloud Kubernetes Admission Controller",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f8ef3a62-3f44-40a4-abca-761ab235c436",
                        "lookup_data": {
                            "mitre-attack-id": "T1552.007",
                            "mitre-cti:description": "Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\n\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components. ",
                            "mitre-cti:name": "Container API",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Containers'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Center for Threat-Informed Defense (CTID)', 'Jay Chen, Palo Alto Networks', 'Yossi Weizman, Azure Defender Research Team'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--f8ef3a62-3f44-40a4-abca-761ab235c436', 'type': 'attack-pattern', 'created': '2021-03-31T14:01:52.321Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1552.007', 'url': 'https://attack.mitre.org/techniques/T1552/007'}, {'source_name': 'Docker API', 'url': 'https://docs.docker.com/engine/api/v1.41/', 'description': 'Docker. (n.d.). Docker Engine API v1.41 Reference. Retrieved March 31, 2021.'}, {'source_name': 'Kubernetes API', 'url': 'https://kubernetes.io/docs/concepts/overview/kubernetes-api/', 'description': 'The Kubernetes Authors. (n.d.). The Kubernetes API. Retrieved March 29, 2021.'}, {'source_name': 'Unit 42 Unsecured Docker Daemons', 'url': 'https://unit42.paloaltonetworks.com/attackers-tactics-and-techniques-in-unsecured-docker-daemons-revealed/', 'description': \"Chen, J.. (2020, January 29). Attacker's Tactics and Techniques in Unsecured Docker Daemons Revealed. Retrieved March 31, 2021.\"}], 'modified': '2022-04-01T13:11:10.849Z', 'name': 'Container API', 'description': \"Adversaries may gather credentials via APIs within a containers environment. APIs in these environments, such as the Docker API and Kubernetes APIs, allow a user to remotely manage their container resources and cluster components.(Citation: Docker API)(Citation: Kubernetes API)\\n\\nAn adversary may access the Docker API to collect logs that contain credentials to cloud, container, and various other resources in the environment.(Citation: Unit 42 Unsecured Docker Daemons) An adversary with sufficient permissions, such as via a pod's service account, may also use the Kubernetes API to retrieve credentials from the Kubernetes API server. These credentials may include those needed for Docker API authentication or secrets from Kubernetes cluster components. \", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_detection': 'Establish centralized logging for the activity of container and Kubernetes cluster components. Monitor logs for actions that could be taken to gather credentials to container and cloud infrastructure, including the use of discovery API calls by new or unexpected users and APIs that access Docker logs.\\n\\nIt may be possible to detect adversary use of credentials they have obtained such as in [Valid Accounts](https://attack.mitre.org/techniques/T1078).', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'User Account: User Account Authentication'], 'x_mitre_permissions_required': ['User', 'Administrator']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a61a3c56-4ce2-4351-a079-88ae4cbd2b58",
                        "lookup_data": {
                            "description": "Identifies when an admission controller is executed in Azure Kubernetes.\nA Kubernetes Admission controller intercepts, and possibly modifies, requests to the Kubernetes API server.\nThe behavior of this admission controller is determined by an admission webhook (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in the cluster.\nAn adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining persistence in the cluster.\nFor example, attackers can intercept and modify the pod creation operations in the cluster and add their malicious container to every created pod.\nAn adversary can use the webhook ValidatingAdmissionWebhook, which could be used to obtain access credentials.\nAn adversary could use the webhook to intercept the requests to the API server, record secrets, and other sensitive information.\n",
                            "raw": "author: Austin Songer @austinsonger\ndate: 2021/11/25\ndescription: 'Identifies when an admission controller is executed in Azure Kubernetes.\n\n  A Kubernetes Admission controller intercepts, and possibly modifies, requests to\n  the Kubernetes API server.\n\n  The behavior of this admission controller is determined by an admission webhook\n  (MutatingAdmissionWebhook or ValidatingAdmissionWebhook) that the user deploys in\n  the cluster.\n\n  An adversary can use such webhooks as the MutatingAdmissionWebhook for obtaining\n  persistence in the cluster.\n\n  For example, attackers can intercept and modify the pod creation operations in the\n  cluster and add their malicious container to every created pod.\n\n  An adversary can use the webhook ValidatingAdmissionWebhook, which could be used\n  to obtain access credentials.\n\n  An adversary could use the webhook to intercept the requests to the API server,\n  record secrets, and other sensitive information.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    operationName|endswith:\n    - /MUTATINGWEBHOOKCONFIGURATIONS/WRITE\n    - /VALIDATINGWEBHOOKCONFIGURATIONS/WRITE\n    operationName|startswith:\n    - MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/ADMISSIONREGISTRATION.K8S.IO\n    - MICROSOFT.CONTAINERSERVICE/MANAGEDCLUSTERS/ADMISSIONREGISTRATION.K8S.IO\nfalsepositives:\n- Azure Kubernetes Admissions Controller may be done by a system administrator.\n- If known behavior is causing false positives, it can be exempted from the rule.\nid: a61a3c56-4ce2-4351-a079-88ae4cbd2b58\nlevel: medium\nlogsource:\n  product: azure\n  service: activitylogs\nmodified: 2022/12/18\nreferences:\n- https://docs.microsoft.com/en-us/azure/role-based-access-control/resource-provider-operations#microsoftkubernetes\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1078\n- attack.credential_access\n- attack.t1552\n- attack.t1552.007\ntitle: Azure Kubernetes Admission Controller\n",
                            "sigma:id": "a61a3c56-4ce2-4351-a079-88ae4cbd2b58",
                            "title": "Azure Kubernetes Admission Controller",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1552.007",
                "display_name": "Kubernetes List Secrets",
                "atomic_tests": [
                    {
                        "name": "List All Secrets",
                        "auto_generated_guid": "31e794c4-48fd-4a76-aca4-6587c155bc11",
                        "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services or provide further access to the cluster.\n[More information about secrets](https://kubernetes.io/docs/concepts/configuration/secret/).\n\nThis test will make a request to the Kubernetes api at the `/api/v1/secrets` endpoint requesting every secret stored within the cluster.\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "dependencies": [
                            {
                                "description": "kubectl must be installed\n",
                                "prereq_command": "which kubectl\n",
                                "get_prereq_command": "echo \"kubectl not installed, please install kubectl (https://kubernetes.io/docs/tasks/tools/)\"\n"
                            }
                        ],
                        "executor": {
                            "command": "kubectl get secrets --all-namespaces\n",
                            "name": "bash",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "ListSecrets",
                        "auto_generated_guid": "43c3a49d-d15c-45e6-b303-f6e177e44a9a",
                        "description": "A Kubernetes secret is an object that lets users store and manage sensitive information, such as passwords and connection strings in the cluster. Secrets can be consumed by reference in the pod configuration. Attackers who have permissions to retrieve the secrets from the API server (by using the pod service account, for example) can access sensitive information that might include credentials to various services.\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "input_arguments": {
                            "namespace": {
                                "description": "K8s namespace to list",
                                "type": "string",
                                "default": "default"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "kubectl must be installed\n",
                                "get_prereq_command": "echo \"kubectl must be installed manually\"\n",
                                "prereq_command": "which kubectl\n"
                            }
                        ],
                        "executor": {
                            "command": "kubectl get secrets -n #{namespace}\n",
                            "name": "bash",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Cat the contents of a Kubernetes service account token file",
                        "auto_generated_guid": "788e0019-a483-45da-bcfe-96353d46820f",
                        "description": "Access the Kubernetes service account access token stored within a container in a cluster.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify docker is installed.",
                                "prereq_command": "which docker\n",
                                "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
                            },
                            {
                                "description": "Verify docker service is running.",
                                "prereq_command": "sudo systemctl status docker\n",
                                "get_prereq_command": "sudo systemctl start docker\n"
                            },
                            {
                                "description": "Verify kind is in the path.",
                                "prereq_command": "which kind\n",
                                "get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"
                            },
                            {
                                "description": "Verify kind-atomic-cluster is created",
                                "prereq_command": "sudo kind get clusters\n",
                                "get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"
                            },
                            {
                                "description": "Verify kubectl is in path",
                                "prereq_command": "which kubectl\n",
                                "get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"
                            },
                            {
                                "description": "Verify atomic-pod is running.",
                                "prereq_command": "kubectl --context kind-atomic-cluster get pods |grep atomic-pod\n",
                                "get_prereq_command": "kubectl --context kind-atomic-cluster run atomic-pod --image=alpine --command -- sleep infinity\n"
                            }
                        ],
                        "executor": {
                            "command": "kubectl --context kind-atomic-cluster exec atomic-pod -- cat /run/secrets/kubernetes.io/serviceaccount/token\n",
                            "name": "sh",
                            "cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-pod\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:05:16"
}