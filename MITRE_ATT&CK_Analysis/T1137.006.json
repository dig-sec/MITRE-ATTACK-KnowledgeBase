{
    "id": "T1137.006",
    "name": "Add-ins",
    "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts.",
    "platforms": "Windows, Office 365",
    "kill_chain_phases": "Persistence",
    "data_sources": "Process: Process Creation, Command: Command Execution, Windows Registry: Windows Registry Key Creation, Windows Registry: Windows Registry Key Modification, File: File Creation, File: File Modification",
    "detection": "Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.(Citation: GlobalDotName Jun 2019)(Citation: MRWLabs Office Persistence Add-ins)\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior",
    "url": "https://attack.mitre.org/techniques/T1137/006",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "34f1d81d-fe88-4f97-bd3b-a3164536255d",
                    "961e33d1-4f86-4fcf-80ab-930a708b2f82",
                    "36fbec91-fa1b-4d5d-8df1-8d8edcb632ad",
                    "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
                    "9d15044a-7cfe-4d23-8085-6ebc11df7685"
                ],
                "lookup_results": [
                    {
                        "uuid": "34f1d81d-fe88-4f97-bd3b-a3164536255d",
                        "lookup_data": {
                            "mitre-attack-id": "T1137.006",
                            "mitre-cti:description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\n\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ",
                            "mitre-cti:name": "Add-ins",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Office 365'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--34f1d81d-fe88-4f97-bd3b-a3164536255d', 'type': 'attack-pattern', 'created': '2019-11-07T19:52:52.801Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1137.006', 'url': 'https://attack.mitre.org/techniques/T1137/006'}, {'url': 'https://support.office.com/article/Add-or-remove-add-ins-0af570c4-5cf3-4fa9-9b88-403625a0b460', 'description': 'Microsoft. (n.d.). Add or remove add-ins. Retrieved July 3, 2017.', 'source_name': 'Microsoft Office Add-ins'}, {'url': 'https://labs.mwrinfosecurity.com/blog/add-in-opportunities-for-office-persistence/', 'description': 'Knowles, W. (2017, April 21). Add-In Opportunities for Office Persistence. Retrieved July 3, 2017.', 'source_name': 'MRWLabs Office Persistence Add-ins'}, {'source_name': 'FireEye Mail CDS 2018', 'url': 'https://summit.fireeye.com/content/dam/fireeye-www/summit/cds-2018/presentations/cds18-technical-s03-youve-got-mail.pdf', 'description': 'Caban, D. and Hirani, M. (2018, October 3). Youâ€™ve Got Mail! Enterprise Email Compromise. Retrieved April 22, 2019.'}, {'source_name': 'GlobalDotName Jun 2019', 'url': 'https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique', 'description': 'Shukrun, S. (2019, June 2). Office Templates and GlobalDotName - A Stealthy Office Persistence Technique. Retrieved August 26, 2019.'}], 'modified': '2021-08-16T21:26:09.296Z', 'name': 'Add-ins', 'description': 'Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system. Office add-ins can be used to add functionality to Office programs. (Citation: Microsoft Office Add-ins) There are different types of add-ins that can be used by the various Office products; including Word/Excel add-in Libraries (WLL/XLL), VBA add-ins, Office Component Object Model (COM) add-ins, automation add-ins, VBA Editor (VBE), Visual Studio Tools for Office (VSTO) add-ins, and Outlook add-ins. (Citation: MRWLabs Office Persistence Add-ins)(Citation: FireEye Mail CDS 2018)\\n\\nAdd-ins can be used to obtain persistence because they can be set to execute code when an Office application starts. ', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}], 'x_mitre_detection': 'Monitor and validate the Office trusted locations on the file system and audit the Registry entries relevant for enabling add-ins.(Citation: GlobalDotName Jun 2019)(Citation: MRWLabs Office Persistence Add-ins)\\n\\nCollect process execution information including process IDs (PID) and parent process IDs (PPID) and look for abnormal chains of activity resulting from Office processes. Non-standard process execution trees may also indicate suspicious or malicious behavior', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['File: File Modification', 'Command: Command Execution', 'File: File Creation', 'Windows Registry: Windows Registry Key Modification', 'Windows Registry: Windows Registry Key Creation', 'Process: Process Creation'], 'x_mitre_permissions_required': ['Administrator', 'User']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
                        "lookup_data": {
                            "description": "Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.",
                            "raw": "author: frack113\ndate: 2023/01/15\ndescription: Detect potential persistence via the creation of an excel add-in (XLL)\n  file to make it run automatically when Excel is started.\ndetection:\n  condition: selection\n  selection:\n    Details|endswith: .xll\n    Details|startswith: '/R '\n    EventType: SetValue\n    TargetObject|contains: Software\\Microsoft\\Office\\\n    TargetObject|endswith: \\Excel\\Options\nfalsepositives:\n- Unknown\nid: 961e33d1-4f86-4fcf-80ab-930a708b2f82\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md\n- https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1137.006\ntitle: Potential Persistence Via Excel Add-in - Registry\n",
                            "sigma:id": "961e33d1-4f86-4fcf-80ab-930a708b2f82",
                            "title": "Potential Persistence Via Excel Add-in - Registry",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36fbec91-fa1b-4d5d-8df1-8d8edcb632ad",
                        "lookup_data": {
                            "description": "Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.\nOffice add-ins can be used to add functionality to Office programs\n",
                            "raw": "author: frack113\ndate: 2021/12/28\ndescription: 'Adversaries may abuse Microsoft Office add-ins to obtain persistence\n  on a compromised system.\n\n  Office add-ins can be used to add functionality to Office programs\n\n  '\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - 'new-object '\n    - '-ComObject '\n    - .application\n    - .RegisterXLL\nfalsepositives:\n- Unknown\nid: 36fbec91-fa1b-4d5d-8df1-8d8edcb632ad\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1137.006/T1137.006.md\nstatus: test\ntags:\n- attack.persistence\n- attack.t1137.006\ntitle: Code Executed Via Office Add-in XLL File\n",
                            "sigma:id": "36fbec91-fa1b-4d5d-8df1-8d8edcb632ad",
                            "title": "Code Executed Via Office Add-in XLL File",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
                        "lookup_data": {
                            "description": "Detects add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).",
                            "raw": "author: NVISO\ndate: 2020/05/11\ndescription: Detects add-ins that load when Microsoft Office starts (.wll/.xll are\n  simply .dll fit for Word or Excel).\ndetection:\n  condition: 1 of selection*\n  selection_generic:\n    TargetFilename|contains: \\Microsoft\\Addins\\\n    TargetFilename|endswith:\n    - .xlam\n    - .xla\n    - .ppam\n  selection_wlldropped:\n    TargetFilename|contains: \\Microsoft\\Word\\Startup\\\n    TargetFilename|endswith: .wll\n  selection_xladropped:\n    TargetFilename|contains: Microsoft\\Excel\\XLSTART\\\n    TargetFilename|endswith: .xlam\n  selection_xlldropped:\n    TargetFilename|contains: \\Microsoft\\Excel\\Startup\\\n    TargetFilename|endswith: .xll\nfalsepositives:\n- Legitimate add-ins\nid: 8e1cb247-6cf6-42fa-b440-3f27d57e9936\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2023/01/15\nreferences:\n- Internal Research\n- https://labs.withsecure.com/publications/add-in-opportunities-for-office-persistence\n- https://github.com/redcanaryco/atomic-red-team/blob/4ae9580a1a8772db87a1b6cdb0d03e5af231e966/atomics/T1137.006/T1137.006.md\nstatus: test\ntags:\n- attack.persistence\n- attack.t1137.006\ntitle: Microsoft Office Add-In Loading\n",
                            "sigma:id": "8e1cb247-6cf6-42fa-b440-3f27d57e9936",
                            "title": "Microsoft Office Add-In Loading",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9d15044a-7cfe-4d23-8085-6ebc11df7685",
                        "lookup_data": {
                            "description": "Detects persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.",
                            "raw": "author: Bhabesh Raj\ndate: 2021/01/10\ndescription: Detects persistence via Visual Studio Tools for Office (VSTO) add-ins\n  in Office applications.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_avg:\n    Image: C:\\Program Files\\AVG\\Antivirus\\RegSvr.exe\n    TargetObject|contains: \\Microsoft\\Office\\Outlook\\Addins\\Antivirus.AsOutExt\\\n  filter_image:\n    Image|endswith:\n    - \\msiexec.exe\n    - \\regsvr32.exe\n  filter_office:\n    Image|endswith:\n    - \\winword.exe\n    - \\integrator.exe\n    - \\OfficeClickToRun.exe\n  selection:\n    EventType: SetValue\n    TargetObject|contains:\n    - \\Software\\Microsoft\\Office\\Outlook\\Addins\\\n    - \\Software\\Microsoft\\Office\\Word\\Addins\\\n    - \\Software\\Microsoft\\Office\\Excel\\Addins\\\n    - \\Software\\Microsoft\\Office\\Powerpoint\\Addins\\\n    - \\Software\\Microsoft\\VSTO\\Security\\Inclusion\\\nfalsepositives:\n- Legitimate Addin Installation\nid: 9d15044a-7cfe-4d23-8085-6ebc11df7685\nlevel: medium\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2023/01/10\nreferences:\n- https://twitter.com/_vivami/status/1347925307643355138\n- https://vanmieghem.io/stealth-outlook-persistence/\nstatus: experimental\ntags:\n- attack.t1137.006\n- attack.persistence\ntitle: Potential Persistence Via Visual Studio Tools for Office\n",
                            "sigma:id": "9d15044a-7cfe-4d23-8085-6ebc11df7685",
                            "title": "Potential Persistence Via Visual Studio Tools for Office",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1137.006",
                "display_name": "Office Application Startup: Add-ins",
                "atomic_tests": [
                    {
                        "name": "Code Executed Via Excel Add-in File (XLL)",
                        "auto_generated_guid": "441b1a0f-a771-428a-8af0-e99e4698cda3",
                        "description": "Loads an XLL file using the excel add-ins library.\nThis causes excel to launch Notepad.exe as a child process. This atomic test does not include persistent code execution as you would typically see when this is implemented in malware.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Excel must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
                            },
                            {
                                "description": "XLL files must exist on disk at specified location",
                                "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\")\n}\nelse{\n  Write-Host \"32-bit Office\"\n  $excelApp.RegisterXLL(\"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")\n}\n",
                            "cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Persistent Code Execution Via Excel Add-in File (XLL)",
                        "auto_generated_guid": "9c307886-9fef-41d5-b344-073a0f5b2f5f",
                        "description": "Creates an Excel Add-in file (XLL) and sets a registry key to make it run automatically when Excel is started\nThe sample XLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Excel must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
                            },
                            {
                                "description": "XLL files must exist on disk at specified location",
                                "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\")) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x64.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/excelxll_x86.xll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\""
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$excelApp = New-Object -COMObject \"Excel.Application\"\nif(-not $excelApp.path.contains(\"Program Files (x86)\")){\n    Write-Host \"64-bit Office\"\n    Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x64.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\excelxll_x86.xll\" \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\"\n}\n$ver = $excelApp.version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\"\nRemove-Item $ExcelRegPath -ErrorAction Ignore\nNew-Item -type Directory $ExcelRegPath | Out-Null\nNew-ItemProperty $ExcelRegPath OPEN -value \"/R notepad.xll\" -propertyType string | Out-Null\n$excelApp.Quit()\nStart-Process \"Excel\"\n",
                            "cleanup_command": "$ver = (New-Object -COMObject \"Excel.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\Excel\\Options\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.xll\" -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Persistent Code Execution Via Word Add-in File (WLL)",
                        "auto_generated_guid": "95408a99-4fa7-4cd6-a7ef-cb65f86351cf",
                        "description": "Creates a Word Add-in file (WLL) which runs automatically when Word is started\nThe sample WLL provided launches the notepad as a proof-of-concept for persistent execution from Office.\nSuccessfully tested on 32-bit Office 2016. Not successful from microsoft 365 version of Office. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Word must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
                            },
                            {
                                "description": "WLL files must exist on disk at specified location",
                                "prereq_command": "if ((Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\") -and (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\")) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x64.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\"\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/wordwll_x86.wll\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\""
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$wdApp = New-Object -COMObject \"Word.Application\"\nif(-not $wdApp.path.contains(\"Program Files (x86)\"))  \n{\n  Write-Host \"64-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x64.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"        \n}\nelse{\n  Write-Host \"32-bit Office\"\n  Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\wordwll_x86.wll\" \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\"\n}\nStop-Process -Name \"WinWord\" \nStart-Process \"WinWord\"\n",
                            "cleanup_command": "Stop-Process -Name \"notepad\",\"WinWord\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Word\\Startup\\notepad.wll\" -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Persistent Code Execution Via Excel VBA Add-in File (XLAM)",
                        "auto_generated_guid": "082141ed-b048-4c86-99c7-2b8da5b5bf48",
                        "description": "Creates an Excel VBA Add-in file (XLAM) which runs automatically when Excel is started\nThe sample XLAM provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Excel must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
                            },
                            {
                                "description": "XLAM file must exist on disk at specified location",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/ExcelVBAaddin.xlam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\""
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\ExcelVBAaddin.xlam\" \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\"        \nStart-Process \"Excel\"\n",
                            "cleanup_command": "Stop-Process -Name \"notepad\",\"Excel\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\Excel\\XLSTART\\notepad.xlam\" -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Persistent Code Execution Via PowerPoint VBA Add-in File (PPAM)",
                        "auto_generated_guid": "f89e58f9-2b49-423b-ac95-1f3e7cfd8277",
                        "description": "Creates a PowerPoint VBA Add-in file (PPAM) which runs automatically when PowerPoint is started\nThe sample PPA provided launches the notepad as a proof-of-concept for persistent execution from Office.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Excel must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"PowerPoint.Application\" | Out-Null\n  Stop-Process -Name \"PowerPnt\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft PowerPoint manually to meet this requirement\"\n"
                            },
                            {
                                "description": "PPAM file must exist on disk at specified location",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\\" -Force | Out-Null\nInvoke-Webrequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1137.006/bin/Addins/PptVBAaddin.ppam\" -UseBasicParsing -OutFile \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\""
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "Copy \"PathToAtomicsFolder\\T1137.006\\bin\\Addins\\PptVBAaddin.ppam\" \"$env:APPDATA\\Microsoft\\Addins\\notepad.ppam\"\n$ver = (New-Object -COMObject \"PowerPoint.Application\").version\n$ExcelRegPath=\"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\"\nNew-Item -type Directory $ExcelRegPath -Force | Out-Null\nNew-ItemProperty $ExcelRegPath \"Autoload\" -value \"1\" -propertyType DWORD  | Out-Null\nNew-ItemProperty $ExcelRegPath \"Path\" -value \"notepad.ppam\" -propertyType string | Out-Null\nStop-Process -Name \"PowerPnt\" -ErrorAction Ignore\nStart-Process \"PowerPnt\"\n",
                            "cleanup_command": "$ver = (New-Object -COMObject \"PowerPoint.Application\").version\nRemove-Item \"HKCU:\\Software\\Microsoft\\Office\\$Ver\\PowerPoint\\AddIns\\notepad\" -ErrorAction Ignore\nStop-Process -Name \"notepad\",\"PowerPnt\" -ErrorAction Ignore\nStart-Sleep 3\nRemove-Item \"$env:APPDATA\\Microsoft\\AddIns\\notepad.ppam\"  -ErrorAction Ignore"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:39:02"
}