{
    "id": "T1614.001",
    "name": "System Language Discovery",
    "description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](T1012) and calls to [Native API](T1106) functions.(Citation: CrowdStrike Ryuk January 2019)\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key `HKEY_LOCAL_MACHINESYSTEMCurrentControlSetControlNlsLanguage` or parsing the outputs of Windows API functions `GetUserDefaultUILanguage`, `GetSystemDefaultUILanguage`, `GetKeyboardLayoutList` and `GetUserDefaultLangID`.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\nOn a macOS or Linux system, adversaries may query `locale` to retrieve the value of the `$LANG` environment variable.",
    "platforms": "Windows, Linux, macOS",
    "kill_chain_phases": "Discovery",
    "data_sources": "Windows Registry: Windows Registry Key Access, Process: Process Creation, Process: OS API Execution, Command: Command Execution",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.",
    "url": "https://attack.mitre.org/techniques/T1614/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "7090adee-82e2-4269-bd59-80691e7c6338",
                    "c1b68a96-3c48-49ea-a6c0-9b27359f9c19"
                ],
                "lookup_results": [
                    {
                        "uuid": "7090adee-82e2-4269-bd59-80691e7c6338",
                        "lookup_data": {
                            "description": "Detects use of chcp to look up the system locale value as part of host discovery",
                            "raw": "author: _pete_0, TheDFIRReport\ndate: 2022/02/21\ndescription: Detects use of chcp to look up the system locale value as part of host\n  discovery\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_anaconda:\n    GrandparentCommandLine|contains: /c C:\\ProgramData\\Anaconda3\n  selection:\n    CommandLine|endswith:\n    - chcp\n    - 'chcp '\n    - 'chcp  '\n    Image|endswith: \\chcp.com\n    ParentCommandLine|contains:\n    - ' /c '\n    - ' /r '\n    - ' /k '\n    ParentImage|endswith: \\cmd.exe\nfalsepositives:\n- During Anaconda update the 'conda.exe' process will eventually launch the command\n  described in the detection section\nfields:\n- CommandLine\n- ParentCommandLine\nid: 7090adee-82e2-4269-bd59-80691e7c6338\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/18\nreferences:\n- https://thedfirreport.com/2022/04/04/stolen-images-campaign-ends-in-conti-ransomware/\n- https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/chcp\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1614.001\ntitle: CHCP CodePage Locale Lookup\n",
                            "sigma:id": "7090adee-82e2-4269-bd59-80691e7c6338",
                            "title": "CHCP CodePage Locale Lookup",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c1b68a96-3c48-49ea-a6c0-9b27359f9c19",
                        "lookup_data": {
                            "mitre-attack-id": "T1614.001",
                            "mitre-cti:description": "Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\n\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) \n\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\n\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.",
                            "mitre-cti:name": "System Language Discovery",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Linux', 'macOS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Harshal Tupsamudre, Qualys'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--c1b68a96-3c48-49ea-a6c0-9b27359f9c19', 'type': 'attack-pattern', 'created': '2021-08-18T14:06:45.244Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1614.001', 'url': 'https://attack.mitre.org/techniques/T1614/001'}, {'source_name': 'Malware System Language Check', 'url': 'https://www.welivesecurity.com/2009/01/15/malware-trying-to-avoid-some-countries/', 'description': 'Pierre-Marc Bureau. (2009, January 15). Malware Trying to Avoid Some Countries. Retrieved August 18, 2021.'}, {'source_name': 'CrowdStrike Ryuk January 2019', 'url': 'https://www.crowdstrike.com/blog/big-game-hunting-with-ryuk-another-lucrative-targeted-ransomware/', 'description': 'Hanel, A. (2019, January 10). Big Game Hunting with Ryuk: Another Lucrative Targeted Ransomware. Retrieved May 12, 2020.'}, {'source_name': 'Darkside Ransomware Cybereason', 'url': 'https://www.cybereason.com/blog/cybereason-vs-darkside-ransomware', 'description': 'Cybereason Nocturnus. (2021, April 1). Cybereason vs. Darkside Ransomware. Retrieved August 18, 2021.'}, {'source_name': 'Securelist JSWorm', 'url': 'https://securelist.com/evolution-of-jsworm-ransomware/102428/', 'description': 'Fedor Sinitsyn. (2021, May 25). Evolution of JSWorm Ransomware. Retrieved August 18, 2021.'}, {'source_name': 'SecureList SynAck Doppelgänging May 2018', 'description': 'Ivanov, A. et al. (2018, May 7). SynAck targeted ransomware uses the Doppelgänging technique. Retrieved May 22, 2018.', 'url': 'https://securelist.com/synack-targeted-ransomware-uses-the-doppelganging-technique/85431/'}], 'modified': '2021-10-15T22:00:56.174Z', 'name': 'System Language Discovery', 'description': 'Adversaries may attempt to gather information about the system language of a victim in order to infer the geographical location of that host. This information may be used to shape follow-on behaviors, including whether the adversary infects the target and/or attempts specific actions. This decision may be employed by malware developers and operators to reduce their risk of attracting the attention of specific law enforcement agencies or prosecution/scrutiny from other entities.(Citation: Malware System Language Check)\\n\\nThere are various sources of data an adversary could use to infer system language, such as system defaults and keyboard layouts. Specific checks will vary based on the target and/or adversary, but may involve behaviors such as [Query Registry](https://attack.mitre.org/techniques/T1012) and calls to [Native API](https://attack.mitre.org/techniques/T1106) functions.(Citation: CrowdStrike Ryuk January 2019) \\n\\nFor example, on a Windows system adversaries may attempt to infer the language of a system by querying the registry key <code>HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Nls\\\\Language</code> or parsing the outputs of Windows API functions <code>GetUserDefaultUILanguage</code>, <code>GetSystemDefaultUILanguage</code>, <code>GetKeyboardLayoutList</code> and <code>GetUserDefaultLangID</code>.(Citation: Darkside Ransomware Cybereason)(Citation: Securelist JSWorm)(Citation: SecureList SynAck Doppelgänging May 2018)\\n\\nOn a macOS or Linux system, adversaries may query <code>locale</code> to retrieve the value of the <code>$LANG</code> environment variable.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_detection': 'System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\\n\\nMonitor processes and command-line arguments for actions that could be taken to gather system language information. This may include calls to various API functions and interaction with system configuration settings such as the Windows Registry.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Windows Registry: Windows Registry Key Access', 'Command: Command Execution', 'Process: OS API Execution', 'Process: Process Creation'], 'x_mitre_permissions_required': ['User']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1614.001",
                "display_name": "System Location Discovery: System Language Discovery",
                "atomic_tests": [
                    {
                        "name": "Discover System Language by Registry Query",
                        "auto_generated_guid": "631d4cf1-42c9-4209-8fe9-6bd4de9421be",
                        "description": "Identify System language by querying the registry on an endpoint. \n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "reg query HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Nls\\Language\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Discover System Language with chcp",
                        "auto_generated_guid": "d91473ca-944e-477a-b484-0e80217cd789",
                        "description": "Identify System language with the chcp command.\n\nUpon successful execution, result in number format can be looked up to correlate the language.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "chcp\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Discover System Language with locale",
                        "auto_generated_guid": "837d609b-845e-4519-90ce-edc3b4b0e138",
                        "description": "Identify System language with the `locale` command.\n\nUpon successful execution, the output will contain the environment variables that indicate\nthe 5 character locale that can be looked up to correlate the language and territory.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "command": "locale\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Discover System Language with localectl",
                        "auto_generated_guid": "07ce871a-b3c3-44a3-97fa-a20118fdc7c9",
                        "description": "Identify System language with the `localectl` command.\n\nUpon successful execution, the key `System Locale` from the output will contain the\n`LANG` environment variable that has the 5 character locale result that can be looked\nup to correlate the language and territory.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "command": "localectl status\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Discover System Language by locale file",
                        "auto_generated_guid": "5d7057c9-2c8a-4026-91dd-13b5584daa69",
                        "description": "Identify System language with the by reading the locale configuration file.\n\nThe locale configuration file contains the `LANG` environment variable which\nwill contain the 5 character locale that can be looked up to correlate the\nlanguage and territory.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check the location of the locale configuration file.\n",
                                "prereq_command": "[ -f /etc/locale.conf ] || [ -f /etc/default/locale ] && exit 0 || exit 1\n",
                                "get_prereq_command": "echo \"Test only valid for systems that have locale file\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[ -f /etc/locale.conf ] && cat /etc/locale.conf || cat /etc/default/locale\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Discover System Language by Environment Variable Query",
                        "auto_generated_guid": "cb8f7cdc-36c4-4ed0-befc-7ad7d24dfd7a",
                        "description": "Identify System language by checking the environment variables\n\nUpon successful execution, the 5 character locale result can be looked up to\ncorrelate the language and territory. Environment query commands are likely\nto run with a pattern match command e.g. `env | grep LANG`\n\nNote: `env` and `printenv` will usually provide the same results. `set` is\nalso used as a builtin command that does not generate syscall telemetry but\ndoes provide a list of the environment variables.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if printenv command exists on the machine\n",
                                "prereq_command": "[ -x \"$(command -v printenv)\" ] && exit 0 || exit 1\n",
                                "get_prereq_command": "echo \"printenv command does not exist\"\nexit 1\n"
                            }
                        ],
                        "executor": {
                            "command": "env | grep LANG\nprintenv LANG\nset | grep LANG\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Discover System Language with dism.exe",
                        "auto_generated_guid": "69f625ba-938f-4900-bdff-82ada3df5d9c",
                        "description": "The Windows utility DISM (Deployment Image Servicing and Management) can be used to display information about international settings and languages on the currently installed Windows image using an elevated terminal.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": true,
                            "command": "dism.exe /online /Get-Intl\n"
                        }
                    },
                    {
                        "name": "Discover System Language by Windows API Query",
                        "auto_generated_guid": "e39b99e9-ce7f-4b24-9c88-0fbad069e6c6",
                        "description": "This test executes a custom script called LanguageKeyboardLayout.exe which outputs the values of the following Windows API functions to the user terminal: \n\n`GetKeyboardLayout`, `GetKeyboardLayoutList`, `GetUserDefaultUILanguage`, `GetSystemDefaultUILanguage`, `GetUserDefaultLangID`.\n\nDocumentation for these functions is located [here](https://learn.microsoft.com/en-us/windows/win32/api/winuser/).    \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "LanguageKeyboardLayout.exe must exist on disk (default location: PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe)\n",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1614.001/bin/LanguageKeyboardLayout.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\"\n"
                            }
                        ],
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": false,
                            "command": "PathToAtomicsFolder\\..\\ExternalPayloads\\LanguageKeyboardLayout.exe\n"
                        }
                    },
                    {
                        "name": "Discover System Language with WMIC",
                        "auto_generated_guid": "4758003d-db14-4959-9c0f-9e87558ac69e",
                        "description": "WMIC (Windows Management Instrumentation Command-line) is a command-line tool that provides a simplified interface to query and manage Windows system configurations, processes, and hardware information using WMI. \n\nThe command in this test retrieves information about the system's locale, operating system language, and multilingual user interface (MUI) languages.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "target_host": {
                                "description": "The host that will be queried.\n\nIf the host contains special characters, it may need to be wrapped in double quotes or double + single quotes. \n\nFor example: \"DESKTOP-123\" or \"'DESKTOP-123'\".\n",
                                "type": "string",
                                "default": "localhost"
                            },
                            "format_style": {
                                "description": "You can specify multipe output formats for wmic such as table, list and csv.",
                                "type": "string",
                                "default": "table"
                            }
                        },
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": false,
                            "command": "wmic /node:#{target_host} os get Locale,OSLanguage,MUILanguages /format:#{format_style}\n"
                        }
                    },
                    {
                        "name": "Discover System Language with Powershell",
                        "auto_generated_guid": "1f23bfe8-36d4-49ce-903a-19a1e8c6631b",
                        "description": "This PowerShell script collects key system settings, such as the UI language, user language preferences, system locale, current culture, UI culture, and time zone, into a hash table. \n\nIt then outputs these settings in a readable key-value format directly to the terminal. The script is simple and efficient for quickly displaying system configuration details.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "$info = @{\n  UILanguage     = Get-WinUILanguageOverride\n  UserLanguages  = (Get-WinUserLanguageList).LanguageTag -join ', '\n  SystemLocale   = Get-WinSystemLocale\n  CurrentCulture = [System.Globalization.CultureInfo]::CurrentCulture.Name\n  CurrentUICulture = [System.Globalization.CultureInfo]::CurrentUICulture.Name\n  TimeZone       = (Get-TimeZone).Id\n}\n$info.GetEnumerator() | ForEach-Object { \"$($_.Name): $($_.Value)\" }"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 19:06:35"
}