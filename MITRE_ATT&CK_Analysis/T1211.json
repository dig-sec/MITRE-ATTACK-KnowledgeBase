{
    "id": "T1211",
    "name": "Exploitation for Defense Evasion",
    "description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](T1518.001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",
    "platforms": "Linux, Windows, macOS",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "",
    "detection": "Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of [Process Injection](T1055) for attempts to hide execution or evidence of Discovery.",
    "url": "https://attack.mitre.org/techniques/T1211",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "48d91a3a-2363-43ba-a456-ca71ac3da5c2",
                    "abfb5a93-e695-4ee9-bc10-541290bcd663",
                    "6c82cf5c-090d-4d57-9188-533577631108",
                    "37a3f3f5-76e6-43fe-b935-f1f494c95725",
                    "fe926152-f431-4baf-956c-4ad3cb0bf23b",
                    "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                    "ae9b0bd7-8888-4606-b444-0ed7410cb728"
                ],
                "lookup_results": [
                    {
                        "uuid": "48d91a3a-2363-43ba-a456-ca71ac3da5c2",
                        "lookup_data": {
                            "description": "Detects events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited.\nMS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.\nUnfortunately, that is about the only instance of CVEs being written to this log.\n",
                            "raw": "author: Florian Roth (Nextron Systems), Zach Mathis\ndate: 2020/01/15\ndescription: 'Detects events generated by user-mode applications when they call the\n  CveEventWrite API when a known vulnerability is trying to be exploited.\n\n  MS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.\n\n  Unfortunately, that is about the only instance of CVEs being written to this log.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    EventID: 1\n    Provider_Name:\n    - Microsoft-Windows-Audit-CVE\n    - Audit-CVE\nfalsepositives:\n- Unknown\nid: 48d91a3a-2363-43ba-a456-ca71ac3da5c2\nlevel: critical\nlogsource:\n  product: windows\n  service: application\nmodified: 2022/10/22\nreferences:\n- https://twitter.com/VM_vivisector/status/1217190929330655232\n- https://twitter.com/DidierStevens/status/1217533958096924676\n- https://twitter.com/FlemmingRiis/status/1217147415482060800\n- https://www.youtube.com/watch?v=ebmW42YYveI\n- https://nullsec.us/windows-event-log-audit-cve/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1203\n- attack.privilege_escalation\n- attack.t1068\n- attack.defense_evasion\n- attack.t1211\n- attack.credential_access\n- attack.t1212\n- attack.lateral_movement\n- attack.t1210\n- attack.impact\n- attack.t1499.004\ntitle: Audit CVE Event\n",
                            "sigma:id": "48d91a3a-2363-43ba-a456-ca71ac3da5c2",
                            "title": "Audit CVE Event",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "abfb5a93-e695-4ee9-bc10-541290bcd663",
                        "lookup_data": {
                            "description": "Aoqin Dragon | Newly-Discovered Chinese-linked APT Has Been Quietly Spying On Organizations For 10 Years",
                            "link": "http://www.botvrij.eu/data/feed-osint/abfb5a93-e695-4ee9-bc10-541290bcd663.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1655839499",
                            "uuid": "abfb5a93-e695-4ee9-bc10-541290bcd663",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6c82cf5c-090d-4d57-9188-533577631108",
                        "lookup_data": {
                            "description": "This rule detects a suspicious crash of the Microsoft Malware Protection Engine",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/05/09\ndescription: This rule detects a suspicious crash of the Microsoft Malware Protection\n  Engine\ndetection:\n  condition: 1 of selection* and malware_engine\n  malware_engine:\n    Data|contains|all:\n    - MsMpEng.exe\n    - mpengine.dll\n  selection1:\n    EventID: 1000\n    Provider_Name: Application Error\n  selection2:\n    EventID: 1001\n    Provider_Name: Windows Error Reporting\nfalsepositives:\n- MsMpEng.exe can crash when C:\\ is full\nid: 6c82cf5c-090d-4d57-9188-533577631108\nlevel: high\nlogsource:\n  product: windows\n  service: application\nmodified: 2022/07/12\nreferences:\n- https://bugs.chromium.org/p/project-zero/issues/detail?id=1252&desc=5\n- https://technet.microsoft.com/en-us/library/security/4022344\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1211\n- attack.t1562.001\ntitle: Microsoft Malware Protection Engine Crash\n",
                            "sigma:id": "6c82cf5c-090d-4d57-9188-533577631108",
                            "title": "Microsoft Malware Protection Engine Crash",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "37a3f3f5-76e6-43fe-b935-f1f494c95725",
                        "lookup_data": {
                            "mitre-attack-id": "T1211",
                            "mitre-cti:description": "Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)\n\nSecurity applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.",
                            "mitre-cti:name": "Exploitation for Defense Evasion Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--37a3f3f5-76e6-43fe-b935-f1f494c95725', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1211', 'external_id': 'T1211'}, {'url': 'https://arstechnica.com/information-technology/2017/03/hack-that-escapes-vm-by-exploiting-edge-browser-fetches-105000-at-pwn2own/', 'description': 'Goodin, D. (2017, March 17). Virtual machine escape fetches $105,000 at Pwn2Own hacking contest - updated. Retrieved March 12, 2018.', 'source_name': 'Ars Technica Pwn2Own 2017 VM Escape'}, {'url': 'https://blogs.technet.microsoft.com/srd/2017/08/09/moving-beyond-emet-ii-windows-defender-exploit-guard/', 'description': 'Nunez, N. (2017, August 9). Moving Beyond EMET II – Windows Defender Exploit Guard. Retrieved March 12, 2018.', 'source_name': 'TechNet Moving Beyond EMET'}, {'url': 'https://en.wikipedia.org/wiki/Control-flow_integrity', 'description': 'Wikipedia. (2018, January 11). Control-flow integrity. Retrieved March 12, 2018.', 'source_name': 'Wikipedia Control Flow Integrity'}], 'modified': '2019-07-24T19:25:39.532Z', 'name': 'Exploitation for Defense Evasion Mitigation', 'description': 'Update software regularly by employing patch management for internal enterprise endpoints and servers. Develop a robust cyber threat intelligence capability to determine what types and levels of threat may use software exploits and 0-days against a particular organization. Make it difficult for adversaries to advance their operation through exploitation of undiscovered or unpatched vulnerabilities by using sandboxing, if available. Other types of virtualization and application microsegmentation may also mitigate the impact of some types of exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)\\n\\nSecurity applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility and may not work for software targeted for defense evasion.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe926152-f431-4baf-956c-4ad3cb0bf23b",
                        "lookup_data": {
                            "mitre-attack-id": "T1211",
                            "mitre-cti:description": "Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code. Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\n\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.",
                            "mitre-cti:name": "Exploitation for Defense Evasion",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'Windows', 'macOS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['John Lambert, Microsoft Threat Intelligence Center'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--fe926152-f431-4baf-956c-4ad3cb0bf23b', 'created': '2018-04-18T17:59:24.739Z', 'x_mitre_version': '1.3', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1211', 'url': 'https://attack.mitre.org/techniques/T1211'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may exploit a system or application vulnerability to bypass security features. Exploitation of a software vulnerability occurs when an adversary takes advantage of a programming error in a program, service, or within the operating system software or kernel itself to execute adversary-controlled code.\\xa0Vulnerabilities may exist in defensive security software that can be used to disable or circumvent them.\\n\\nAdversaries may have prior knowledge through reconnaissance that security software exists within an environment or they may perform checks during or shortly after the system is compromised for [Security Software Discovery](https://attack.mitre.org/techniques/T1518/001). The security software will likely be targeted directly for exploitation. There are examples of antivirus software being targeted by persistent threat groups to avoid detection.', 'modified': '2022-04-28T16:10:16.632Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Exploitation for Defense Evasion', 'x_mitre_detection': 'Exploitation for defense evasion may happen shortly after the system has been compromised to prevent detection during later actions for for additional tools that may be brought in and used. Detecting software exploitation may be difficult depending on the tools available. Software exploits may not always succeed or may cause the exploited process to become unstable or crash. Also look for behavior on the system that might indicate successful compromise, such as abnormal behavior of processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution or evidence of Discovery.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Process: Process Creation', 'Application Log: Application Log Content'], 'x_mitre_defense_bypassed': ['Anti-virus', 'System access controls'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                        "lookup_data": {
                            "description": "SectorJ04 Groupâ€™s Increased Activity in 2019",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5d6e7aa3-aca4-46cc-b96a-46ac950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1568039252",
                            "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ae9b0bd7-8888-4606-b444-0ed7410cb728",
                        "lookup_data": {
                            "description": "Monitors for the hiding possible malicious files in the C:\\Windows\\Fonts\\ location. This folder doesn't require admin privillege to be written and executed from.",
                            "raw": "author: Sreeman\ndate: 2020/04/21\ndescription: Monitors for the hiding possible malicious files in the C:\\Windows\\Fonts\\\n  location. This folder doesn't require admin privillege to be written and executed\n  from.\ndetection:\n  condition: all of selection_*\n  selection_1:\n    CommandLine|contains:\n    - echo\n    - copy\n    - type\n    - file createnew\n    - cacls\n  selection_2:\n    CommandLine|contains: C:\\Windows\\Fonts\\\n  selection_3:\n    CommandLine|contains:\n    - .sh\n    - .exe\n    - .dll\n    - .bin\n    - .bat\n    - .cmd\n    - .js\n    - .msh\n    - .reg\n    - .scr\n    - .ps\n    - .vb\n    - .jar\n    - .pl\n    - '.inf'\n    - .cpl\n    - .hta\n    - .msi\n    - .vbs\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentProcess\n- CommandLine\nid: ae9b0bd7-8888-4606-b444-0ed7410cb728\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/08\nreferences:\n- https://thedfirreport.com/2020/04/20/sqlserver-or-the-miner-in-the-basement/\nstatus: test\ntags:\n- attack.t1211\n- attack.t1059\n- attack.defense_evasion\n- attack.persistence\ntitle: Writing Of Malicious Files To The Fonts Folder\n",
                            "sigma:id": "ae9b0bd7-8888-4606-b444-0ed7410cb728",
                            "title": "Writing Of Malicious Files To The Fonts Folder",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": []
    },
    "timestamp": "2025-02-28 14:02:14"
}