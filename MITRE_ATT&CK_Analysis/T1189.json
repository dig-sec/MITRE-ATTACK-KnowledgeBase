{
    "id": "T1189",
    "name": "Drive-by Compromise",
    "description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](T1550.001).\nMultiple ways of delivering exploit code to a browser exist, including:\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted attack is referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\nTypical drive-by compromise process:\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version.\n* The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n* In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\nUnlike [Exploit Public-Facing Application](T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
    "platforms": "Windows, Linux, macOS, SaaS",
    "kill_chain_phases": "Initial Access",
    "data_sources": "File: File Creation, Process: Process Creation, Network Traffic: Network Connection Creation, Network Traffic: Network Traffic Content, Application Log: Application Log Content",
    "detection": "Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.\nNetwork intrusion detection systems, sometimes with SSL/TLS inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.\nDetecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of [Process Injection](T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.",
    "url": "https://attack.mitre.org/techniques/T1189",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "eb07e747-2552-44cd-af36-b659ae0958e4",
                    "4922a5dd-6743-4fc2-8e81-144374280997",
                    "d742a578-d70e-4d0e-96a6-02a9c30204e6",
                    "7a4d0054-53cd-476f-88af-955dddc80ee0",
                    "095c4227-2a9e-45da-9268-cec186be53b1"
                ],
                "lookup_results": [
                    {
                        "uuid": "eb07e747-2552-44cd-af36-b659ae0958e4",
                        "lookup_data": {
                            "description": "Detects several different DNS-answers by one domain with IPs from internal and external networks. Normally, DNS-answer contain TTL >100. (DNS-record will saved in host cache for a while TTL).",
                            "raw": "author: Ilyas Ochkov, oscd.community\ndate: 2019/10/25\ndescription: Detects several different DNS-answers by one domain with IPs from internal\n  and external networks. Normally, DNS-answer contain TTL >100. (DNS-record will saved\n  in host cache for a while TTL).\ndetection:\n  condition: (dns_answer and filter_int_ip) and (dns_answer and not filter_int_ip)\n    | count(QueryName) by ComputerName > 3\n  dns_answer:\n    QueryName: '*'\n    QueryStatus: '0'\n  filter_int_ip:\n    QueryResults|startswith:\n    - (::ffff:)?10.\n    - (::ffff:)?192.168.\n    - (::ffff:)?172.16.\n    - (::ffff:)?172.17.\n    - (::ffff:)?172.18.\n    - (::ffff:)?172.19.\n    - (::ffff:)?172.20.\n    - (::ffff:)?172.21.\n    - (::ffff:)?172.22.\n    - (::ffff:)?172.23.\n    - (::ffff:)?172.24.\n    - (::ffff:)?172.25.\n    - (::ffff:)?172.26.\n    - (::ffff:)?172.27.\n    - (::ffff:)?172.28.\n    - (::ffff:)?172.29.\n    - (::ffff:)?172.30.\n    - (::ffff:)?172.31.\n    - (::ffff:)?127.\n  timeframe: 30s\nid: eb07e747-2552-44cd-af36-b659ae0958e4\nlevel: medium\nlogsource:\n  category: dns_query\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/@brannondorsey/attacking-private-networks-from-the-internet-with-dns-rebinding-ea7098a2d325\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1189\ntitle: Possible DNS Rebinding\n",
                            "sigma:id": "eb07e747-2552-44cd-af36-b659ae0958e4",
                            "title": "Possible DNS Rebinding",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4922a5dd-6743-4fc2-8e81-144374280997",
                        "lookup_data": {
                            "description": "Detects a flashplayer update from an unofficial location",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/10/25\ndescription: Detects a flashplayer update from an unofficial location\ndetection:\n  condition: selection and not filter\n  filter:\n    cs-host|endswith: .adobe.com\n  selection:\n  - c-uri|contains: /flash_install.php\n  - c-uri|endswith: /install_flash_player.exe\nfalsepositives:\n- Unknown flash download locations\nid: 4922a5dd-6743-4fc2-8e81-144374280997\nlevel: high\nlogsource:\n  category: proxy\nmodified: 2022/08/08\nreferences:\n- https://gist.github.com/roycewilliams/a723aaf8a6ac3ba4f817847610935cfb\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1189\n- attack.execution\n- attack.t1204.002\n- attack.defense_evasion\n- attack.t1036.005\ntitle: Flash Player Update from Suspicious Location\n",
                            "sigma:id": "4922a5dd-6743-4fc2-8e81-144374280997",
                            "title": "Flash Player Update from Suspicious Location",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d742a578-d70e-4d0e-96a6-02a9c30204e6",
                        "lookup_data": {
                            "mitre-attack-id": "T1189",
                            "mitre-cti:description": "Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\n\nMultiple ways of delivering exploit code to a browser exist, including:\n\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\n* Malicious ads are paid for and served through legitimate ad providers.\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\n\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\n\nTypical drive-by compromise process:\n\n1. A user visits a website that is used to host the adversary controlled content.\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\n\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\n\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)",
                            "mitre-cti:name": "Drive-by Compromise",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Linux', 'macOS', 'SaaS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services)', 'Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC)'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--d742a578-d70e-4d0e-96a6-02a9c30204e6', 'type': 'attack-pattern', 'created': '2018-04-18T17:59:24.739Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1189', 'url': 'https://attack.mitre.org/techniques/T1189'}, {'url': 'http://blog.shadowserver.org/2012/05/15/cyber-espionage-strategic-web-compromises-trusted-websites-serving-dangerous-results/', 'description': 'Adair, S., Moran, N. (2012, May 15). Cyber Espionage & Strategic Web Compromises – Trusted Websites Serving Dangerous Results. Retrieved March 13, 2018.', 'source_name': 'Shadowserver Strategic Web Compromise'}, {'source_name': 'Volexity OceanLotus Nov 2017', 'description': 'Lassalle, D., et al. (2017, November 6). OceanLotus Blossoms: Mass Digital Surveillance and Attacks Targeting ASEAN, Asian Nations, the Media, Human Rights Groups, and Civil Society. Retrieved November 6, 2017.', 'url': 'https://www.volexity.com/blog/2017/11/06/oceanlotus-blossoms-mass-digital-surveillance-and-exploitation-of-asean-nations-the-media-human-rights-and-civil-society/'}], 'modified': '2022-03-08T21:11:47.798Z', 'name': 'Drive-by Compromise', 'description': \"Adversaries may gain access to a system through a user visiting a website over the normal course of browsing. With this technique, the user's web browser is typically targeted for exploitation, but adversaries may also use compromised websites for non-exploitation behavior such as acquiring [Application Access Token](https://attack.mitre.org/techniques/T1550/001).\\n\\nMultiple ways of delivering exploit code to a browser exist, including:\\n\\n* A legitimate website is compromised where adversaries have injected some form of malicious code such as JavaScript, iFrames, and cross-site scripting.\\n* Malicious ads are paid for and served through legitimate ad providers.\\n* Built-in web application interfaces are leveraged for the insertion of any other kind of object that can be used to display web content or contain a script that executes on the visiting client (e.g. forum posts, comments, and other user controllable web content).\\n\\nOften the website used by an adversary is one visited by a specific community, such as government, a particular industry, or region, where the goal is to compromise a specific user or set of users based on a shared interest. This kind of targeted campaign is often referred to a strategic web compromise or watering hole attack. There are several known examples of this occurring.(Citation: Shadowserver Strategic Web Compromise)\\n\\nTypical drive-by compromise process:\\n\\n1. A user visits a website that is used to host the adversary controlled content.\\n2. Scripts automatically execute, typically searching versions of the browser and plugins for a potentially vulnerable version. \\n    * The user may be required to assist in this process by enabling scripting or active website components and ignoring warning dialog boxes.\\n3. Upon finding a vulnerable version, exploit code is delivered to the browser.\\n4. If exploitation is successful, then it will give the adversary code execution on the user's system unless other protections are in place.\\n    * In some cases a second visit to the website after the initial scan is required before exploit code is delivered.\\n\\nUnlike [Exploit Public-Facing Application](https://attack.mitre.org/techniques/T1190), the focus of this technique is to exploit software on a client endpoint upon visiting a website. This will commonly give an adversary access to systems on the internal network instead of external systems that may be in a DMZ.\\n\\nAdversaries may also use compromised websites to deliver a user to a malicious application designed to [Steal Application Access Token](https://attack.mitre.org/techniques/T1528)s, like OAuth tokens, to gain access to protected applications and information. These malicious applications have been delivered through popups on legitimate websites.(Citation: Volexity OceanLotus Nov 2017)\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'initial-access'}], 'x_mitre_detection': \"Firewalls and proxies can inspect URLs for potentially known-bad domains or parameters. They can also do reputation-based analytics on websites and their requested resources such as how old a domain is, who it's registered to, if it's on a known bad list, or how many other users have connected to it before.\\n\\nNetwork intrusion detection systems, sometimes with SSL/TLS inspection, can be used to look for known malicious scripts (recon, heap spray, and browser identification scripts have been frequently reused), common script obfuscation, and exploit code.\\n\\nDetecting compromise based on the drive-by exploit from a legitimate website may be difficult. Also look for behavior on the endpoint system that might indicate successful compromise, such as abnormal behavior of browser processes. This could include suspicious files written to disk, evidence of [Process Injection](https://attack.mitre.org/techniques/T1055) for attempts to hide execution, evidence of Discovery, or other unusual network traffic that may indicate additional tools transferred to the system.\", 'x_mitre_version': '1.4', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Connection Creation', 'Network Traffic: Network Traffic Content', 'File: File Creation', 'Process: Process Creation', 'Application Log: Application Log Content'], 'x_mitre_permissions_required': ['User'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7a4d0054-53cd-476f-88af-955dddc80ee0",
                        "lookup_data": {
                            "mitre-attack-id": "T1189",
                            "mitre-cti:description": "Drive-by compromise relies on there being a vulnerable piece of software on the client end systems. Use modern browsers with security features turned on. Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique.\n\nFor malicious code served up through ads, adblockers can help prevent that code from executing in the first place. Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.\n\nBrowser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. (Citation: Windows Blogs Microsoft Edge Sandbox) (Citation: Ars Technica Pwn2Own 2017 VM Escape)\n\nOther types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)\n\nSecurity applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility.",
                            "mitre-cti:name": "Drive-by Compromise Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--7a4d0054-53cd-476f-88af-955dddc80ee0', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1189', 'external_id': 'T1189'}, {'url': 'https://blogs.windows.com/msedgedev/2017/03/23/strengthening-microsoft-edge-sandbox/', 'description': 'Cowan, C. (2017, March 23). Strengthening the Microsoft Edge Sandbox. Retrieved March 12, 2018.', 'source_name': 'Windows Blogs Microsoft Edge Sandbox'}, {'url': 'https://arstechnica.com/information-technology/2017/03/hack-that-escapes-vm-by-exploiting-edge-browser-fetches-105000-at-pwn2own/', 'description': 'Goodin, D. (2017, March 17). Virtual machine escape fetches $105,000 at Pwn2Own hacking contest - updated. Retrieved March 12, 2018.', 'source_name': 'Ars Technica Pwn2Own 2017 VM Escape'}, {'url': 'https://blogs.technet.microsoft.com/srd/2017/08/09/moving-beyond-emet-ii-windows-defender-exploit-guard/', 'description': 'Nunez, N. (2017, August 9). Moving Beyond EMET II – Windows Defender Exploit Guard. Retrieved March 12, 2018.', 'source_name': 'TechNet Moving Beyond EMET'}, {'url': 'https://en.wikipedia.org/wiki/Control-flow_integrity', 'description': 'Wikipedia. (2018, January 11). Control-flow integrity. Retrieved March 12, 2018.', 'source_name': 'Wikipedia Control Flow Integrity'}], 'modified': '2019-07-24T19:14:33.952Z', 'name': 'Drive-by Compromise Mitigation', 'description': 'Drive-by compromise relies on there being a vulnerable piece of software on the client end systems. Use modern browsers with security features turned on. Ensure all browsers and plugins kept updated can help prevent the exploit phase of this technique.\\n\\nFor malicious code served up through ads, adblockers can help prevent that code from executing in the first place. Script blocking extensions can help prevent the execution of JavaScript that may commonly be used during the exploitation process.\\n\\nBrowser sandboxes can be used to mitigate some of the impact of exploitation, but sandbox escapes may still exist. (Citation: Windows Blogs Microsoft Edge Sandbox) (Citation: Ars Technica Pwn2Own 2017 VM Escape)\\n\\nOther types of virtualization and application microsegmentation may also mitigate the impact of client-side exploitation. The risks of additional exploits and weaknesses in implementation may still exist. (Citation: Ars Technica Pwn2Own 2017 VM Escape)\\n\\nSecurity applications that look for behavior used during exploitation such as Windows Defender Exploit Guard (WDEG) and the Enhanced Mitigation Experience Toolkit (EMET) can be used to mitigate some exploitation behavior. (Citation: TechNet Moving Beyond EMET) Control flow integrity checking is another way to potentially identify and stop a software exploit from occurring. (Citation: Wikipedia Control Flow Integrity) Many of these protections depend on the architecture and target application binary for compatibility.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "095c4227-2a9e-45da-9268-cec186be53b1",
                        "lookup_data": {
                            "description": "Back in Black: Unlocking a LockBit 3.0 Ransomware Attack",
                            "link": "http://www.botvrij.eu/data/feed-osint/095c4227-2a9e-45da-9268-cec186be53b1.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1661104992",
                            "uuid": "095c4227-2a9e-45da-9268-cec186be53b1",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": []
    },
    "timestamp": "2025-02-28 13:43:46"
}