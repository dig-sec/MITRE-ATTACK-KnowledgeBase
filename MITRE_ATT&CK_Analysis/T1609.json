{
    "id": "T1609",
    "name": "Container Administration Command",
    "description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as `docker exec` to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as `kubectl exec`.(Citation: Kubectl Exec Get Shell)",
    "platforms": "Containers",
    "kill_chain_phases": "Execution",
    "data_sources": "Command: Command Execution",
    "detection": "Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster.",
    "url": "https://attack.mitre.org/techniques/T1609",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "7b50a1d3-4ca7-45d1-989d-a6503f04bfe1"
                ],
                "lookup_results": [
                    {
                        "uuid": "7b50a1d3-4ca7-45d1-989d-a6503f04bfe1",
                        "lookup_data": {
                            "mitre-attack-id": "T1609",
                            "mitre-cti:description": "Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\n\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)",
                            "mitre-cti:name": "Container Administration Command",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Containers'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Alfredo Oliveira, Trend Micro', 'David Fiser, @anu4is, Trend Micro', 'Brad Geesaman, @bradgeesaman', 'Center for Threat-Informed Defense (CTID)', 'Magno Logan, @magnologan, Trend Micro', 'Vishwas Manral, McAfee', 'Yossi Weizman, Azure Defender Research Team'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--7b50a1d3-4ca7-45d1-989d-a6503f04bfe1', 'type': 'attack-pattern', 'created': '2021-03-29T16:39:26.183Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1609', 'url': 'https://attack.mitre.org/techniques/T1609'}, {'source_name': 'Docker Daemon CLI', 'url': 'https://docs.docker.com/engine/reference/commandline/dockerd/', 'description': 'Docker. (n.d.). DockerD CLI. Retrieved March 29, 2021.'}, {'source_name': 'Kubernetes API', 'url': 'https://kubernetes.io/docs/concepts/overview/kubernetes-api/', 'description': 'The Kubernetes Authors. (n.d.). The Kubernetes API. Retrieved March 29, 2021.'}, {'source_name': 'Kubernetes Kubelet', 'url': 'https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/', 'description': 'The Kubernetes Authors. (n.d.). Kubelet. Retrieved March 29, 2021.'}, {'source_name': 'Docker Entrypoint', 'url': 'https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime', 'description': 'Docker. (n.d.). Docker run reference. Retrieved March 29, 2021.'}, {'source_name': 'Docker Exec', 'url': 'https://docs.docker.com/engine/reference/commandline/exec/', 'description': 'Docker. (n.d.). Docker Exec. Retrieved March 29, 2021.'}, {'source_name': 'Kubectl Exec Get Shell', 'url': 'https://kubernetes.io/docs/tasks/debug-application-cluster/get-shell-running-container/', 'description': 'The Kubernetes Authors. (n.d.). Get a Shell to a Running Container. Retrieved March 29, 2021.'}], 'modified': '2022-04-01T13:16:14.786Z', 'name': 'Container Administration Command', 'description': 'Adversaries may abuse a container administration service to execute commands within a container. A container administration service such as the Docker daemon, the Kubernetes API server, or the kubelet may allow remote management of containers within an environment.(Citation: Docker Daemon CLI)(Citation: Kubernetes API)(Citation: Kubernetes Kubelet)\\n\\nIn Docker, adversaries may specify an entrypoint during container deployment that executes a script or command, or they may use a command such as <code>docker exec</code> to execute a command within a running container.(Citation: Docker Entrypoint)(Citation: Docker Exec) In Kubernetes, if an adversary has sufficient permissions, they may gain remote execution in a container in the cluster via interaction with the Kubernetes API server, the kubelet, or by running a command such as <code>kubectl exec</code>.(Citation: Kubectl Exec Get Shell)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_detection': 'Container administration service activities and executed commands can be captured through logging of process execution with command-line arguments on the container and the underlying host. In Docker, the daemon log provides insight into events at the daemon and container service level. Kubernetes system component logs may also detect activities running in and out of containers in the cluster. ', 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'Process: Process Creation'], 'x_mitre_remote_support': True, 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1609",
                "display_name": "Kubernetes Exec Into Container",
                "atomic_tests": [
                    {
                        "name": "ExecIntoContainer",
                        "auto_generated_guid": "d03bfcd3-ed87-49c8-8880-44bb772dea4b",
                        "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“kubectl exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “kubectl exec”.\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "input_arguments": {
                            "namespace": {
                                "description": "K8s namespace to use",
                                "type": "string",
                                "default": "default"
                            },
                            "command": {
                                "description": "Command to run",
                                "type": "string",
                                "default": "uname"
                            },
                            "path": {
                                "description": "Path to busybox.yaml file",
                                "type": "string",
                                "default": "$PathtoAtomicsFolder/T1609/src/busybox.yaml"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "kubectl must be installed\n",
                                "get_prereq_command": "echo \"kubectl must be installed manually\"\n",
                                "prereq_command": "which kubectl\n"
                            }
                        ],
                        "executor": {
                            "command": "kubectl create -f #{path} -n #{namespace}\n# wait 3 seconds for the instance to come up\nsleep 3\nkubectl exec -n #{namespace} busybox -- #{command}\n",
                            "cleanup_command": "kubectl delete pod busybox -n #{namespace}\n",
                            "name": "bash",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Docker Exec Into Container",
                        "auto_generated_guid": "900e2c49-221b-42ec-ae3c-4717e41e6219",
                        "description": "Attackers who have permissions, can run malicious commands in containers in the cluster using exec command (“docker exec”). In this method, attackers can use legitimate images, such as an OS image (e.g., Ubuntu) as a backdoor container, and run their malicious code remotely by using “docker exec”. Kinsing (Golang-based malware) was executed with an Ubuntu container entry point that runs shell scripts.\n",
                        "supported_platforms": [
                            "containers"
                        ],
                        "dependencies": [
                            {
                                "description": "docker must be installed\n",
                                "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n",
                                "prereq_command": "which docker\n"
                            }
                        ],
                        "executor": {
                            "command": "docker build -t t1609  $PathtoAtomicsFolder/T1609/src/ \ndocker run --name t1609_container --rm -itd t1609 bash /tmp/script.sh\ndocker exec -i t1609_container bash -c \"cat /tmp/output.txt\"\n",
                            "cleanup_command": "docker stop t1609_container\ndocker rmi -f t1609:latest \n",
                            "name": "bash",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 19:01:25"
}