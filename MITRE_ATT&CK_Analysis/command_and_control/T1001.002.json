{
    "name": "Steganography",
    "id": "T1001.002",
    "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Command and Control",
    "data_sources": "Network Traffic: Network Traffic Content",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
    "enrichments": {
        "ollama": {
            "adversary_emulation": "<think>\nOkay, so I need to analyze the MITRE ATT&CK technique T1001.002 for red team emulation, which is Steganography. Hmm, steganography is hiding data within other data, right? Like putting a secret message inside an image or document.\n\nAlright, first step is to look at the prerequisites and setup. I know that red teams need specific tools to execute this attack. They probably need something like Gnu Image Manipulation Program (GIMP) for images because it's free and widely used. Maybe Tools for Image Processing (TIP) as an alternative if needed. The operating systems involved are Linux, macOS, Windows, so the plan should cover all of them.\n\nFor the execution procedure, I think each platform would have a different approach but similar steps: embedding the hidden data into a file, sending it over network traffic, and then using it for command and control without detection.\n\nI remember that when hiding text in images, you can use methods like least significant bit steganography. So maybe using GIMP to hide a payload in an image. Then, transferring that image via email or some other network method. The receiver would need the correct payload extraction tool to get the hidden message.\n\nWait, but for command and control, maybe the payload is more than just text—perhaps executable files or scripts. Steganographic tools can embed different types of files. I should check if Tools for Image Processing supports embedding .exe files. From what I recall, it does with some extensions like .exe. So maybe that's an option.\n\nNow, regarding detection artifacts, the main issue is that the payload isn't in plain text; it's embedded. So without specific tools, it might be hard to detect. Tools like heuristics for hidden file systems or steganographic detection can flag such files if they're found on a machine.\n\nThe success criteria would involve successfully embedding and transferring the data, then ensuring that command and control is functional using the extracted payload. Also, making sure there's no immediate detection without the right tools.\n\nCleanup would require extracting all hidden data from any relevant files or directories to reset everything for the next test.\n\nI should structure this into prerequisites, setup steps, execution in each OS, expected impacts, artifacts, criteria, and cleanup.\n\nWait, maybe I'm missing some details. For example, on Windows, using something like ocropus instead of GIMP because it's better suited for embedded bitstreams. So the plan needs to include that for different platforms.\n\nAlso, the commands should be specific—like using ocropus on Windows or GIMP on Linux and macOS.\n\nI need to make sure each step is clear and executable. Maybe list out exact tools needed per OS so the red team knows exactly what to use without confusion.\n\nAnother thought: when sending via email, it's important that the receiver can extract the payload only if they have the right tool. So in the plan, I should mention extracting with specific software like GIMP or ocropus depending on the platform.\n\nAnd for command and control, maybe after extraction, an execute command is sent to a remote host, which would show up as network traffic spikes but wouldn't be detected by basic heuristics without specialized tools.\n\nI think that covers most parts. Now I need to format this into a structured analysis with all the required sections.\n</think>\n\n### MITRE ATT&CK Technique: Steganography (T1001.002) - Red Team Emulation Plan\n\n#### 1. Prerequisites and Setup\n- **Tools**: Use Gnu Image Manipulation Program (GIMP) for Linux, macOS; ocropus on Windows.\n- **Operating Systems**: Target systems include Linux, macOS, and Windows.\n\n#### 2. Execution Procedure\n\n**Linux/MacOS:**\n1. **Embed Payload**: Use GIMP to hide a payload (text or .exe file) in an image using LSB steganography.\n   - Command Example: `gimp input.jpg -append \"hidden_payload.txt\"` for text, or `gimp input.jpg -embed /path/to/hidden.exe` for executable files.\n\n2. **Transfer Payload**: Send the modified image via email or network to the target system.\n\n3. **Command Execution**: Extract hidden data using GIMP with appropriate extensions.\n   - Command Example: `gimp extracted_image.jpg -extract_hidden [payload path]`.\n\n**Windows:**\n1. **Embed Payload**: Use ocropus for LSB steganography in images, including embedding .exe files.\n   - Command Example: `ocropus /hidden /path/to/image.jpg -b hidden bitstream.\n\n2. **Transfer Payload**: Share the modified image via email or network.\n\n3. **Command Execution**: Extract payload using ocropus and execute commands as needed to initiate C&C.\n\n#### 3. Expected System Impacts\n- **Network Traffic**: Increased traffic due to file transfer.\n- **System Performance**: Minor overhead from modified files but unlikely to cause detection.\n- **Credibility**: High, as steganographic traffic is undetected without specific tools.\n\n#### 4. Detection Artifacts Generated\n- **Payload Types**: Hiding text, .exe scripts, and command payloads in non-executable files.\n- **Network Traffic**: Modified image or document with hidden payload.\n\n#### 5. Success Criteria\n1. Payload embedded successfully, with extraction confirmed by tools like GIMP or ocropus.\n2. Command and control functionality demonstrated through extracted payload execution.\n3. Network traffic increases without triggering basic detection heuristics.\n\n#### 6. Cleanup Procedures\n- Extract all hidden data from relevant files immediately to ensure test integrity for subsequent exercises.\n\nThis structured plan outlines a methodical approach to emulating steganographic attacks using specific tools and platforms, ensuring red team readiness in detecting such threats."
        },
        "cycat": {
            "cycat_related_uuids": [
                "eec23884-3fa1-4d8a-ac50-6f104d51e235"
            ]
        }
    },
    "timestamp": "2025-02-21 18:50:55",
    "url": "https://attack.mitre.org/techniques/T1001/002"
}