{
    "id": "T1574.008",
    "name": "Path Interception by Search Order Hijacking",
    "description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](T1574.001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument `net user`. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then `cmd.exe /C net user` will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](T1574.001).",
    "platforms": "Windows",
    "kill_chain_phases": "Persistence, Privilege Escalation, Defense Evasion",
    "data_sources": "File: File Creation, File: File Modification, Process: Process Creation",
    "detection": "Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.",
    "url": "https://attack.mitre.org/techniques/T1574/008",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "b2ddd389-f676-4ac4-845a-e00781a48e5f",
                    "58af3705-8740-4c68-9329-ec015a7013c2"
                ],
                "lookup_results": [
                    {
                        "uuid": "b2ddd389-f676-4ac4-845a-e00781a48e5f",
                        "lookup_data": {
                            "description": "Detects using SettingSyncHost.exe to run hijacked binary",
                            "raw": "author: Anton Kutepov, oscd.community\ndate: 2020/02/05\ndescription: Detects using SettingSyncHost.exe to run hijacked binary\ndetection:\n  condition: not system_utility and parent_is_settingsynchost\n  parent_is_settingsynchost:\n    ParentCommandLine|contains|all:\n    - cmd.exe /c\n    - RoamDiag.cmd\n    - -outputpath\n  system_utility:\n    Image|startswith:\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWOW64\\\nfalsepositives:\n- Unknown\nfields:\n- TargetFilename\n- Image\nid: b2ddd389-f676-4ac4-845a-e00781a48e5f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.hexacorn.com/blog/2020/02/02/settingsynchost-exe-as-a-lolbin\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1574.008\ntitle: Using SettingSyncHost.exe as LOLBin\n",
                            "sigma:id": "b2ddd389-f676-4ac4-845a-e00781a48e5f",
                            "title": "Using SettingSyncHost.exe as LOLBin",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "58af3705-8740-4c68-9329-ec015a7013c2",
                        "lookup_data": {
                            "capec": "CAPEC-159",
                            "mitre-attack-id": "T1574.008",
                            "mitre-cti:description": "Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\n\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program's directory.\n\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\n\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).",
                            "mitre-cti:name": "Path Interception by Search Order Hijacking",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Stefan Kanthak'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--58af3705-8740-4c68-9329-ec015a7013c2', 'type': 'attack-pattern', 'created': '2020-03-13T17:48:58.999Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1574.008', 'url': 'https://attack.mitre.org/techniques/T1574/008'}, {'external_id': 'CAPEC-159', 'source_name': 'capec', 'url': 'https://capec.mitre.org/data/definitions/159.html'}, {'url': 'http://msdn.microsoft.com/en-us/library/ms682425', 'description': 'Microsoft. (n.d.). CreateProcess function. Retrieved December 5, 2014.', 'source_name': 'Microsoft CreateProcess'}, {'source_name': 'Windows NT Command Shell', 'url': 'https://docs.microsoft.com/en-us/previous-versions//cc723564(v=technet.10)?redirectedfrom=MSDN#XSLTsection127121120120', 'description': 'Tim Hill. (2014, February 2). The Windows NT Command Shell. Retrieved December 5, 2014.'}, {'url': 'http://msdn.microsoft.com/en-us/library/ms687393', 'description': 'Microsoft. (n.d.). WinExec function. Retrieved December 5, 2014.', 'source_name': 'Microsoft WinExec'}, {'source_name': 'Microsoft Environment Property', 'url': 'https://docs.microsoft.com/en-us/previous-versions//fd7hxfdd(v=vs.85)?redirectedfrom=MSDN', 'description': 'Microsoft. (2011, October 24). Environment Property. Retrieved July 27, 2016.'}], 'modified': '2020-09-17T19:03:35.217Z', 'name': 'Path Interception by Search Order Hijacking', 'description': 'Adversaries may execute their own malicious payloads by hijacking the search order used to load other programs. Because some programs do not call other programs using the full path, adversaries may place their own file in the directory where the calling program is located, causing the operating system to launch their malicious software at the request of the calling program.\\n\\nSearch order hijacking occurs when an adversary abuses the order in which Windows searches for programs that are not given a path. Unlike [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001), the search order differs depending on the method that is used to execute the program. (Citation: Microsoft CreateProcess) (Citation: Windows NT Command Shell) (Citation: Microsoft WinExec) However, it is common for Windows to search in the directory of the initiating program before searching through the Windows system directory. An adversary who finds a program vulnerable to search order hijacking (i.e., a program that does not specify the path to an executable) may take advantage of this vulnerability by creating a program named after the improperly specified program and placing it within the initiating program\\'s directory.\\n\\nFor example, \"example.exe\" runs \"cmd.exe\" with the command-line argument <code>net user</code>. An adversary may place a program called \"net.exe\" within the same directory as example.exe, \"net.exe\" will be run instead of the Windows system utility net. In addition, if an adversary places a program called \"net.com\" in the same directory as \"net.exe\", then <code>cmd.exe /C net user</code> will execute \"net.com\" instead of \"net.exe\" due to the order of executable extensions defined under PATHEXT. (Citation: Microsoft Environment Property)\\n\\nSearch order hijacking is also a common practice for hijacking DLL loads and is covered in [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Monitor file creation for files named after partial directories and in locations that may be searched for common processes through the environment variable, or otherwise should not be user writable. Monitor the executing process for process executable paths that are named for partial directories. Monitor file creation for programs that are named after Windows system programs or programs commonly executed without a path (such as \"findstr,\" \"net,\" and \"python\"). If this activity occurs outside of known administration activity, upgrades, installations, or patches, then it may be suspicious.\\n\\nData and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as network connections made for Command and Control, learning details about the environment through Discovery, and Lateral Movement.\\n', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['File: File Creation', 'Process: Process Creation', 'File: File Modification'], 'x_mitre_permissions_required': ['Administrator', 'User', 'SYSTEM'], 'x_mitre_effective_permissions': ['Administrator', 'SYSTEM', 'User']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1574.008",
                "display_name": "Hijack Execution Flow: Path Interception by Search Order Hijacking",
                "atomic_tests": [
                    {
                        "name": "powerShell Persistence via hijacking default modules - Get-Variable.exe",
                        "auto_generated_guid": "1561de08-0b4b-498e-8261-e922f3494aae",
                        "description": "Colibri leverages PowerShell in a unique way to maintain persistence after a reboot. Depending on the Windows version, Colibri drops its copy in %APPDATA%\\Local\\Microsoft\\WindowsApps and \nnames it Get-Variable.exe for Windows 10 and above.\nhttps://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /out:\"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" \"PathToAtomicsFolder\\T1574.008\\bin\\calc.cs\"\nPowershell -noprofile\n",
                            "cleanup_command": "Remove-Item \"$env:localappdata\\Microsoft\\WindowsApps\\Get-Variable.exe\" -ErrorAction Ignore\nStop-Process -Name \"calculator\"\n",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 17:29:02"
}