{
    "id": "T1553.003",
    "name": "SIP and Trust Provider Hijacking",
    "description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\nSimilar to [Code Signing](T1553.002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n* Modifying the `Dll` and `FuncName` Registry values in `HKLMSOFTWARE[WOW6432Node]MicrosoftCryptographyOIDEncodingType 0CryptSIPDllGetSignedDataMsg{SIP_GUID}` that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the `Dll` and `FuncName` Registry values in `HKLMSOFTWARE[WOW6432Node]MicrosoftCryptographyOIDEncodingType 0CryptSIPDllVerifyIndirectData{SIP_GUID}` that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the `DLL` and `Function` Registry values in `HKLMSOFTWARE[WOW6432Node]MicrosoftCryptographyProvidersTrustFinalPolicy{trust provider GUID}` that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](T1574.001).\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Module: Module Load, Windows Registry: Windows Registry Key Modification, File: File Modification",
    "detection": "Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017)\nEnable CryptoAPI v2 (CAPI) event logging (Citation: Entrust Enable CAPI2 Aug 2017) to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). (Citation: SpectorOps Subverting Trust Sept 2017)\nUtilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing) (Citation: Microsoft Registry Auditing Aug 2016) setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers: (Citation: Microsoft Audit Registry July 2012)\n* HKLMSOFTWAREMicrosoftCryptographyOID\n* HKLMSOFTWAREWOW6432NodeMicrosoftCryptographyOID\n* HKLMSOFTWAREMicrosoftCryptographyProvidersTrust\n* HKLMSOFTWAREWOW6432NodeMicrosoftCryptographyProvidersTrust\n**Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using [Regsvr32](T1218.010). (Citation: SpectorOps Subverting Trust Sept 2017)\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure “Hide Microsoft Entries” and “Hide Windows Entries” are both deselected. (Citation: SpectorOps Subverting Trust Sept 2017)",
    "url": "https://attack.mitre.org/techniques/T1553/003",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1553.003",
                "atomic_attack_guid": "e12f5d8d-574a-4e9d-8a84-c0e8b4a8a675",
                "atomic_attack_name": "SIP (Subject Interface Package) Hijacking via Custom DLL",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Scripting/CommandLine Process Spawned Regsvr32",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_parent.yml",
                        "remote_content": "title: Scripting/CommandLine Process Spawned Regsvr32\nid: ab37a6ec-6068-432b-a64e-2c7bf95b1d22\nrelated:\n    - id: 8e2b24c9-4add-46a0-b4bb-0057b4e6187d\n      type: obsolete\nstatus: test\ndescription: Detects various command line and scripting engines/processes such as \"PowerShell\", \"Wscript\", \"Cmd\", etc. spawning a \"regsvr32\" instance.\nreferences:\n    - https://web.archive.org/web/20171001085340/https://subt0x10.blogspot.com/2017/04/bypass-application-whitelisting-script.html\n    - https://app.any.run/tasks/34221348-072d-4b70-93f3-aa71f6ebecad/\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\cmd.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n            - '\\wscript.exe'\n        Image|endswith: '\\regsvr32.exe'\n    filter_main_rpcproxy:\n        ParentImage: C:\\Windows\\System32\\cmd.exe\n        CommandLine|endswith: ' /s C:\\Windows\\System32\\RpcProxy\\RpcProxy.dll'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - Legitimate \".bat\", \".hta\", \".ps1\" or \".vbs\" scripts leverage legitimately often. Apply additional filter and exclusions as necessary\n    - Some legitimate Windows services\nlevel: medium # Can be reduced to low if you experience a ton of FP\n"
                    },
                    {
                        "rule_name": "Regsvr32 Execution From Highly Suspicious Location",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_exec_path_2.yml",
                        "remote_content": "title: Regsvr32 Execution From Highly Suspicious Location\nid: 327ff235-94eb-4f06-b9de-aaee571324be\nstatus: test\ndescription: Detects execution of regsvr32 where the DLL is located in a highly suspicious locations\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-05-26\ntags:\n    - attack.defense-evasion\n    - attack.t1218.010\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\regsvr32.exe'\n        - OriginalFileName: 'REGSVR32.EXE'\n    selection_path_1:\n        CommandLine|contains:\n            - ':\\PerfLogs\\'\n            - ':\\Temp\\'\n            - '\\Windows\\Registration\\CRMLog'\n            - '\\Windows\\System32\\com\\dmp\\'\n            - '\\Windows\\System32\\FxsTmp\\'\n            - '\\Windows\\System32\\Microsoft\\Crypto\\RSA\\MachineKeys\\'\n            - '\\Windows\\System32\\spool\\drivers\\color\\'\n            - '\\Windows\\System32\\spool\\PRINTERS\\'\n            - '\\Windows\\System32\\spool\\SERVERS\\'\n            - '\\Windows\\System32\\Tasks_Migrated\\'\n            - '\\Windows\\System32\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - '\\Windows\\SysWOW64\\com\\dmp\\'\n            - '\\Windows\\SysWOW64\\FxsTmp\\'\n            - '\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\PLA\\System\\'\n            - '\\Windows\\SysWOW64\\Tasks\\Microsoft\\Windows\\SyncCenter\\'\n            - '\\Windows\\Tasks\\'\n            - '\\Windows\\Tracing\\'\n    selection_path_2:\n        CommandLine|contains:\n            # This is to avoid collisions with CLI starting with \"C:\\\"\n            - ' \"C:\\'\n            - ' C:\\'\n            - \" 'C:\\\\\"\n            - 'D:\\'\n    selection_exclude_known_dirs:\n        CommandLine|contains:\n            # Note: add additional locations that are related to third party applications\n            - 'C:\\Program Files (x86)\\'\n            - 'C:\\Program Files\\'\n            - 'C:\\ProgramData\\'\n            - 'C:\\Users\\'\n            # Note: The space added here are to avoid collisions with the \"regsvr32\" binary full path\n            - ' C:\\Windows\\'\n            - ' \"C:\\Windows\\'\n            - \" 'C:\\\\Windows\\\\\"\n    filter_main_empty:\n        CommandLine: ''\n    filter_main_null:\n        CommandLine: null\n    condition: selection_img and (selection_path_1 or (selection_path_2 and not selection_exclude_known_dirs)) and not 1 of filter_main_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "5a2b21ee-6aaa-4234-ac9d-59a59edf90a1",
                    "543fceb5-cb92-40cb-aacf-6913d4db58bc"
                ],
                "lookup_results": [
                    {
                        "uuid": "5a2b21ee-6aaa-4234-ac9d-59a59edf90a1",
                        "lookup_data": {
                            "description": "Detects when an attacker register a new SIP provider for persistence and defense evasion",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/21\ndescription: Detects when an attacker register a new SIP provider for persistence\n  and defense evasion\ndetection:\n  condition: all of selection_* and not 1 of filter*\n  filter:\n    Details:\n    - WINTRUST.DLL\n    - mso.dll\n  filter_poqexec:\n    Details: C:\\Windows\\System32\\PsfSip.dll\n    Image: C:\\Windows\\System32\\poqexec.exe\n    TargetObject|contains: \\CryptSIPDll\n  selection_dll:\n    TargetObject|contains:\n    - \\Dll\n    - \\$DLL\n  selection_root:\n    EventType: SetValue\n    TargetObject|contains:\n    - \\SOFTWARE\\Microsoft\\Cryptography\\Providers\\\n    - \\SOFTWARE\\Microsoft\\Cryptography\\OID\\EncodingType\n    - \\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\Providers\\\n    - \\SOFTWARE\\WOW6432Node\\Microsoft\\Cryptography\\OID\\EncodingType\nfalsepositives:\n- Legitimate SIP being registered by the OS or different software.\nid: 5a2b21ee-6aaa-4234-ac9d-59a59edf90a1\nlevel: medium\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/09/21\nreferences:\n- https://persistence-info.github.io/Data/codesigning.html\n- https://github.com/gtworek/PSBits/tree/master/SIP\n- https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf\nstatus: experimental\ntags:\n- attack.persistence\n- attack.defense_evasion\n- attack.t1553.003\ntitle: Persistence Via New SIP Provider\n",
                            "sigma:id": "5a2b21ee-6aaa-4234-ac9d-59a59edf90a1",
                            "title": "Persistence Via New SIP Provider",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "543fceb5-cb92-40cb-aacf-6913d4db58bc",
                        "lookup_data": {
                            "mitre-attack-id": "T1553.003",
                            "mitre-cti:description": "Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\n\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\n\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\n\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE[\\WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllGetSignedDataMsg\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\OID\\EncodingType 0\\CryptSIPDllVerifyIndirectData\\{SIP_GUID}</code> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\SOFTWARE\\[WOW6432Node\\]Microsoft\\Cryptography\\Providers\\Trust\\FinalPolicy\\{trust provider GUID}</code> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\n\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)",
                            "mitre-cti:name": "SIP and Trust Provider Hijacking",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Matt Graeber, @mattifestation, SpecterOps'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--543fceb5-cb92-40cb-aacf-6913d4db58bc', 'created': '2020-02-05T19:34:04.910Z', 'x_mitre_version': '1.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1553.003', 'url': 'https://attack.mitre.org/techniques/T1553/003'}, {'source_name': 'Entrust Enable CAPI2 Aug 2017', 'url': 'http://www.entrust.net/knowledge-base/technote.cfm?tn=8165', 'description': 'Entrust Datacard. (2017, August 16). How do I enable CAPI 2.0 logging in Windows Vista, Windows 7 and Windows 2008 Server?. Retrieved January 31, 2018.'}, {'source_name': 'GitHub SIP POC Sept 2017', 'url': 'https://github.com/mattifestation/PoCSubjectInterfacePackage', 'description': 'Graeber, M. (2017, September 14). PoCSubjectInterfacePackage. Retrieved January 31, 2018.'}, {'source_name': 'SpectorOps Subverting Trust Sept 2017', 'url': 'https://specterops.io/assets/resources/SpecterOps_Subverting_Trust_in_Windows.pdf', 'description': 'Graeber, M. (2017, September). Subverting Trust in Windows. Retrieved January 31, 2018.'}, {'source_name': 'Microsoft Catalog Files and Signatures April 2017', 'url': 'https://docs.microsoft.com/windows-hardware/drivers/install/catalog-files', 'description': 'Hudek, T. (2017, April 20). Catalog Files and Digital Signatures. Retrieved January 31, 2018.'}, {'source_name': 'Microsoft Audit Registry July 2012', 'url': 'https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/dd941614(v=ws.10)', 'description': 'Microsoft. (2012, July 2). Audit Registry. Retrieved January 31, 2018.'}, {'source_name': 'Microsoft Registry Auditing Aug 2016', 'url': 'https://docs.microsoft.com/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/dn311461(v=ws.11)', 'description': 'Microsoft. (2016, August 31). Registry (Global Object Access Auditing). Retrieved January 31, 2018.'}, {'source_name': 'Microsoft Authenticode', 'url': 'https://msdn.microsoft.com/library/ms537359.aspx', 'description': 'Microsoft. (n.d.). Authenticode. Retrieved January 31, 2018.'}, {'source_name': 'Microsoft WinVerifyTrust', 'url': 'https://msdn.microsoft.com/library/windows/desktop/aa388208.aspx', 'description': 'Microsoft. (n.d.). WinVerifyTrust function. Retrieved January 31, 2018.'}, {'source_name': 'EduardosBlog SIPs July 2008', 'url': 'https://blogs.technet.microsoft.com/eduardonavarro/2008/07/11/sips-subject-interface-package-and-authenticode/', 'description': 'Navarro, E. (2008, July 11). SIP’s (Subject Interface Package) and Authenticode. Retrieved January 31, 2018.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': \"Adversaries may tamper with SIP and trust provider components to mislead the operating system and application control tools when conducting signature validation checks. In user mode, Windows Authenticode (Citation: Microsoft Authenticode) digital signatures are used to verify a file's origin and integrity, variables that may be used to establish trust in signed code (ex: a driver with a valid Microsoft signature may be handled as safe). The signature validation process is handled via the WinVerifyTrust application programming interface (API) function,  (Citation: Microsoft WinVerifyTrust) which accepts an inquiry and coordinates with the appropriate trust provider, which is responsible for validating parameters of a signature. (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\nBecause of the varying executable file types and corresponding signature formats, Microsoft created software components called Subject Interface Packages (SIPs) (Citation: EduardosBlog SIPs July 2008) to provide a layer of abstraction between API functions and files. SIPs are responsible for enabling API functions to create, retrieve, calculate, and verify signatures. Unique SIPs exist for most file formats (Executable, PowerShell, Installer, etc., with catalog signing providing a catch-all  (Citation: Microsoft Catalog Files and Signatures April 2017)) and are identified by globally unique identifiers (GUIDs). (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\nSimilar to [Code Signing](https://attack.mitre.org/techniques/T1553/002), adversaries may abuse this architecture to subvert trust controls and bypass security policies that allow only legitimately signed code to execute on a system. Adversaries may hijack SIP and trust provider components to mislead operating system and application control tools to classify malicious (or any) code as signed by: (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\\\SOFTWARE[\\\\WOW6432Node\\\\]Microsoft\\\\Cryptography\\\\OID\\\\EncodingType 0\\\\CryptSIPDllGetSignedDataMsg\\\\{SIP_GUID}</code> that point to the dynamic link library (DLL) providing a SIP’s CryptSIPDllGetSignedDataMsg function, which retrieves an encoded digital certificate from a signed file. By pointing to a maliciously-crafted DLL with an exported function that always returns a known good signature value (ex: a Microsoft signature for Portable Executables) rather than the file’s real signature, an adversary can apply an acceptable signature value to all files using that SIP (Citation: GitHub SIP POC Sept 2017) (although a hash mismatch will likely occur, invalidating the signature, since the hash returned by the function will not match the value computed from the file).\\n* Modifying the <code>Dll</code> and <code>FuncName</code> Registry values in <code>HKLM\\\\SOFTWARE\\\\[WOW6432Node\\\\]Microsoft\\\\Cryptography\\\\OID\\\\EncodingType 0\\\\CryptSIPDllVerifyIndirectData\\\\{SIP_GUID}</code> that point to the DLL providing a SIP’s CryptSIPDllVerifyIndirectData function, which validates a file’s computed hash against the signed hash value. By pointing to a maliciously-crafted DLL with an exported function that always returns TRUE (indicating that the validation was successful), an adversary can successfully validate any file (with a legitimate signature) using that SIP (Citation: GitHub SIP POC Sept 2017) (with or without hijacking the previously mentioned CryptSIPDllGetSignedDataMsg function). This Registry value could also be redirected to a suitable exported function from an already present DLL, avoiding the requirement to drop and execute a new file on disk.\\n* Modifying the <code>DLL</code> and <code>Function</code> Registry values in <code>HKLM\\\\SOFTWARE\\\\[WOW6432Node\\\\]Microsoft\\\\Cryptography\\\\Providers\\\\Trust\\\\FinalPolicy\\\\{trust provider GUID}</code> that point to the DLL providing a trust provider’s FinalPolicy function, which is where the decoded and parsed signature is checked and the majority of trust decisions are made. Similar to hijacking SIP’s CryptSIPDllVerifyIndirectData function, this value can be redirected to a suitable exported function from an already present DLL or a maliciously-crafted DLL (though the implementation of a trust provider is complex).\\n* **Note:** The above hijacks are also possible without modifying the Registry via [DLL Search Order Hijacking](https://attack.mitre.org/techniques/T1574/001).\\n\\nHijacking SIP or trust provider components can also enable persistent code execution, since these malicious components may be invoked by any application that performs code signing or signature validation. (Citation: SpectorOps Subverting Trust Sept 2017)\", 'modified': '2022-05-05T04:58:58.214Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'SIP and Trust Provider Hijacking', 'x_mitre_detection': 'Periodically baseline registered SIPs and trust providers (Registry entries and files on disk), specifically looking for new, modified, or non-Microsoft entries. (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\nEnable CryptoAPI v2 (CAPI) event logging (Citation: Entrust Enable CAPI2 Aug 2017) to monitor and analyze error events related to failed trust validation (Event ID 81, though this event can be subverted by hijacked trust provider components) as well as any other provided information events (ex: successful validations). Code Integrity event logging may also provide valuable indicators of malicious SIP or trust provider loads, since protected processes that attempt to load a maliciously-crafted trust validation component will likely fail (Event ID 3033). (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\nUtilize Sysmon detection rules and/or enable the Registry (Global Object Access Auditing) (Citation: Microsoft Registry Auditing Aug 2016) setting in the Advanced Security Audit policy to apply a global system access control list (SACL) and event auditing on modifications to Registry values (sub)keys related to SIPs and trust providers: (Citation: Microsoft Audit Registry July 2012)\\n\\n* HKLM\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\OID\\n* HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\OID\\n* HKLM\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\Providers\\\\Trust\\n* HKLM\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\Providers\\\\Trust\\n\\n**Note:** As part of this technique, adversaries may attempt to manually edit these Registry keys (ex: Regedit) or utilize the legitimate registration process using [Regsvr32](https://attack.mitre.org/techniques/T1218/010). (Citation: SpectorOps Subverting Trust Sept 2017)\\n\\nAnalyze Autoruns data for oddities and anomalies, specifically malicious files attempting persistent execution by hiding within auto-starting locations. Autoruns will hide entries signed by Microsoft or Windows by default, so ensure “Hide Microsoft Entries” and “Hide Windows Entries” are both deselected. (Citation: SpectorOps Subverting Trust Sept 2017)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['File: File Modification', 'Windows Registry: Windows Registry Key Modification', 'Module: Module Load'], 'x_mitre_defense_bypassed': ['Autoruns Analysis', 'Digital Certificate Validation', 'User Mode Signature Validation', 'Application Control'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1553.003",
                "display_name": "Subvert Trust Controls: SIP and Trust Provider Hijacking",
                "atomic_tests": [
                    {
                        "name": "SIP (Subject Interface Package) Hijacking via Custom DLL",
                        "auto_generated_guid": "e12f5d8d-574a-4e9d-8a84-c0e8b4a8a675",
                        "description": "Registers a DLL that logs signature checks, mimicking SIP hijacking. This test uses a DLL from \nhttps://github.com/gtworek/PSBits/tree/master/SIP and registers it using regsvr32, thereby causing\nthe system to utilize it during signature checks, and logging said checks.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "dll_payload": {
                                "description": "Path to GTSIPProvider.dll",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1553.003\\bin\\GTSIPProvider.dll"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "GTSIPProvider.dll must exist on disk at specified location (#{dll_payload})\n",
                                "prereq_command": "if (Test-Path \"#{dll_payload}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{dll_payload}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/gtworek/PSBits/raw/2aa885c7d09f7f100997bfa5ee0c404084177f24/SIP/GTSIPProvider.dll\" -OutFile \"#{dll_payload}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "regsvr32.exe #{dll_payload}\n",
                            "cleanup_command": "regsvr32.exe /u #{dll_payload}\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:09:05"
}