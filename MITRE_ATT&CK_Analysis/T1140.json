{
    "id": "T1140",
    "name": "Deobfuscate/Decode Files or Information",
    "description": "Adversaries may use [Obfuscated Files or Information](T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\nOne such example is use of [certutil](S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows `copy /b` command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)",
    "platforms": "Windows, Linux, macOS",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, File: File Modification, Script: Script Execution",
    "detection": "Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](S0160).\nMonitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.",
    "url": "https://attack.mitre.org/techniques/T1140",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1140",
                "atomic_attack_guid": "3a15c372-67c1-4430-ac8e-ec06d641ce4d",
                "atomic_attack_name": "Linux Base64 Encoded Shebang in CLI",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Linux Base64 Encoded Pipe to Shell",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_execution.yml",
                        "remote_content": "title: Linux Base64 Encoded Pipe to Shell\nid: ba592c6d-6888-43c3-b8c6-689b8fe47337\nstatus: test\ndescription: Detects suspicious process command line that uses base64 encoded input for execution with a shell\nreferences:\n    - https://github.com/arget13/DDexec\n    - https://www.mandiant.com/resources/blog/barracuda-esg-exploited-globally\nauthor: pH-T (Nextron Systems)\ndate: 2022-07-26\nmodified: 2023-06-16\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_base64:\n        CommandLine|contains: 'base64 '\n    selection_exec:\n        - CommandLine|contains:\n              - '| bash '\n              - '| sh '\n              - '|bash '\n              - '|sh '\n        - CommandLine|endswith:\n              - ' |sh'\n              - '| bash'\n              - '| sh'\n              - '|bash'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Linux Base64 Encoded Shebang In CLI",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml",
                        "remote_content": "title: Linux Base64 Encoded Shebang In CLI\nid: fe2f9663-41cb-47e2-b954-8a228f3b9dff\nstatus: test\ndescription: Detects the presence of a base64 version of the shebang in the commandline, which could indicate a malicious payload about to be decoded\nreferences:\n    - https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html\n    - https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - \"IyEvYmluL2Jhc2\" # Note: #!/bin/bash\"\n            - \"IyEvYmluL2Rhc2\" # Note: #!/bin/dash\"\n            - \"IyEvYmluL3pza\" # Note: #!/bin/zsh\"\n            - \"IyEvYmluL2Zpc2\" # Note: #!/bin/fish\n            - \"IyEvYmluL3No\" # Note: # !/bin/sh\"\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Linux Shell Pipe to Shell",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_pipe_shell.yml",
                        "remote_content": "title: Linux Shell Pipe to Shell\nid: 880973f3-9708-491c-a77b-2a35a1921158\nstatus: test\ndescription: Detects suspicious process command line that starts with a shell that executes something and finally gets piped into another shell\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-14\nmodified: 2022-07-26\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|startswith:\n            - 'sh -c '\n            - 'bash -c '\n    selection_exec:\n        - CommandLine|contains:\n              - '| bash '\n              - '| sh '\n              - '|bash '\n              - '|sh '\n        - CommandLine|endswith:\n              - '| bash'\n              - '| sh'\n              - '|bash'\n              - ' |sh'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate software that uses these patterns\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1140",
                "atomic_attack_guid": "18ee2002-66e8-4518-87c5-c0ec9c8299ac",
                "atomic_attack_name": "FreeBSD b64encode Shebang in CLI",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Linux Base64 Encoded Shebang In CLI",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml",
                        "remote_content": "title: Linux Base64 Encoded Shebang In CLI\nid: fe2f9663-41cb-47e2-b954-8a228f3b9dff\nstatus: test\ndescription: Detects the presence of a base64 version of the shebang in the commandline, which could indicate a malicious payload about to be decoded\nreferences:\n    - https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html\n    - https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-09-15\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - \"IyEvYmluL2Jhc2\" # Note: #!/bin/bash\"\n            - \"IyEvYmluL2Rhc2\" # Note: #!/bin/dash\"\n            - \"IyEvYmluL3pza\" # Note: #!/bin/zsh\"\n            - \"IyEvYmluL2Zpc2\" # Note: #!/bin/fish\n            - \"IyEvYmluL3No\" # Note: # !/bin/sh\"\n    condition: selection\nfalsepositives:\n    - Legitimate administration activities\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Linux Shell Pipe to Shell",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_pipe_shell.yml",
                        "remote_content": "title: Linux Shell Pipe to Shell\nid: 880973f3-9708-491c-a77b-2a35a1921158\nstatus: test\ndescription: Detects suspicious process command line that starts with a shell that executes something and finally gets piped into another shell\nreferences:\n    - Internal Research\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-14\nmodified: 2022-07-26\ntags:\n    - attack.defense-evasion\n    - attack.t1140\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|startswith:\n            - 'sh -c '\n            - 'bash -c '\n    selection_exec:\n        - CommandLine|contains:\n              - '| bash '\n              - '| sh '\n              - '|bash '\n              - '|sh '\n        - CommandLine|endswith:\n              - '| bash'\n              - '| sh'\n              - '|bash'\n              - ' |sh'\n    condition: all of selection*\nfalsepositives:\n    - Legitimate software that uses these patterns\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1140",
                "atomic_attack_guid": "71abc534-3c05-4d0c-80f7-cbe93cb2aa94",
                "atomic_attack_name": "Certutil Rename and Decode",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "LOL-Binary Copied From System Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir_lolbin.yml",
                        "remote_content": "title: LOL-Binary Copied From System Directory\nid: f5d19838-41b5-476c-98d8-ba8af4929ee2\nrelated:\n    - id: fff9d2b7-e11c-4a69-93d3-40ef66189767\n      type: derived\nstatus: test\ndescription: |\n    Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.\nreferences:\n    - https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120\n    - https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html\n    - https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-08-29\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_tools_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_tools_other:\n        - Image|endswith:\n              - '\\robocopy.exe'\n              - '\\xcopy.exe'\n        - OriginalFileName:\n              - 'robocopy.exe'\n              - 'XCOPY.EXE'\n    selection_target_path:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n            - '\\WinSxS'\n    selection_target_lolbin:\n        CommandLine|contains:\n            # Note: add more binaries to increase coverage\n            - '\\bitsadmin.exe'\n            - '\\calc.exe'\n            - '\\certutil.exe'\n            - '\\cmdl32.exe'\n            - '\\cscript.exe'\n            - '\\mshta.exe'\n            - '\\rundll32.exe'\n            - '\\wscript.exe'\n    condition: 1 of selection_tools_* and all of selection_target_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious Calculator Usage",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_calc_uncommon_exec.yml",
                        "remote_content": "title: Suspicious Calculator Usage\nid: 737e618a-a410-49b5-bec3-9e55ff7fbc15\nstatus: test\ndescription: |\n    Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.\nreferences:\n    - https://twitter.com/ItsReallyNick/status/1094080242686312448\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-02-09\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: '\\calc.exe '\n    selection_2:\n        Image|endswith: '\\calc.exe'\n    filter_main_known_locations:\n        Image|contains:\n            - ':\\Windows\\System32\\'\n            - ':\\Windows\\SysWOW64\\'\n            - ':\\Windows\\WinSxS\\'\n    condition: selection_1 or ( selection_2 and not filter_main_known_locations )\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious Copy From or To System Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml",
                        "remote_content": "title: Suspicious Copy From or To System Directory\nid: fff9d2b7-e11c-4a69-93d3-40ef66189767\nrelated:\n    - id: 855bc8b5-2ae8-402e-a9ed-b889e6df1900\n      type: derived\nstatus: test\ndescription: |\n    Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.\n    Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.\nreferences:\n    - https://www.hybrid-analysis.com/sample/8da5b75b6380a41eee3a399c43dfe0d99eeefaa1fd21027a07b1ecaa4cd96fdd?environmentId=120\n    - https://web.archive.org/web/20180331144337/https://www.fireeye.com/blog/threat-research/2018/03/sanny-malware-delivery-method-updated-in-recently-observed-attacks.html\n    - https://thedfirreport.com/2023/08/28/html-smuggling-leads-to-domain-wide-ransomware/\nauthor: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)\ndate: 2020-07-03\nmodified: 2023-08-29\ntags:\n    - attack.defense-evasion\n    - attack.t1036.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        Image|endswith: '\\cmd.exe'\n        CommandLine|contains: 'copy '\n    selection_pwsh:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - 'copy-item'\n            - ' copy '\n            - 'cpi '\n            - ' cp '\n    selection_other:\n        - Image|endswith:\n              - '\\robocopy.exe'\n              - '\\xcopy.exe'\n        - OriginalFileName:\n              - 'robocopy.exe'\n              - 'XCOPY.EXE'\n    target:\n        CommandLine|contains:\n            - '\\System32'\n            - '\\SysWOW64'\n            - '\\WinSxS'\n    condition: 1 of selection_* and target\nfalsepositives:\n    - Depend on scripts and administrative tools used in the monitored environment (For example an admin scripts like https://www.itexperience.net/sccm-batch-files-and-32-bits-processes-on-64-bits-os/)\n    - When cmd.exe and xcopy.exe are called directly #  C:\\Windows\\System32\\cmd.exe /c copy file1 file2\n    - When the command contains the keywords but not in the correct order\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1140",
                "atomic_attack_guid": "dc6fe391-69e6-4506-bd06-ea5eeb4082f8",
                "atomic_attack_name": "Deobfuscate/Decode Files Or Information",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Calculator Usage",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_calc_uncommon_exec.yml",
                        "remote_content": "title: Suspicious Calculator Usage\nid: 737e618a-a410-49b5-bec3-9e55ff7fbc15\nstatus: test\ndescription: |\n    Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.\nreferences:\n    - https://twitter.com/ItsReallyNick/status/1094080242686312448\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-02-09\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: '\\calc.exe '\n    selection_2:\n        Image|endswith: '\\calc.exe'\n    filter_main_known_locations:\n        Image|contains:\n            - ':\\Windows\\System32\\'\n            - ':\\Windows\\SysWOW64\\'\n            - ':\\Windows\\WinSxS\\'\n    condition: selection_1 or ( selection_2 and not filter_main_known_locations )\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "5d9b516c-e5f0-4e7c-a958-5d8c0a019371",
                    "3ccef7ae-cb5e-48f6-8302-897105fbf55c",
                    "e011a729-98a6-4139-b5c4-bf6f6dd8239a",
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                    "5da1e411-c430-4fd6-bb05-9c81c0a8ab16",
                    "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                    "234dc5df-40b5-49d1-bf53-0d44ce778eca",
                    "1ddc1472-8e52-4f7d-9f11-eab14fc171f5",
                    "e32d4572-9826-4738-b651-95fa63747e8a",
                    "827e941e-4a99-4e2c-a578-bfcec2d40552",
                    "eb4ee171-8930-4c15-8917-9af8775417fb",
                    "f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd",
                    "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                    "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                    "5dbae98e-7974-4480-86db-44be950d210f",
                    "ba592c6d-6888-43c3-b8c6-689b8fe47337",
                    "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                    "1a0d4aba-7668-4365-9ce4-6d79ab088dfd",
                    "60118dab-1ab8-40b2-b02b-b6f80aba047c",
                    "880973f3-9708-491c-a77b-2a35a1921158",
                    "5ced8da1-0960-40bc-b5dc-2fed0a016219",
                    "5dee2bc3-47ac-4784-a52a-4da2950d210f",
                    "d01f473f-3cdc-4867-9e55-1de9cf1986f0",
                    "fe2f9663-41cb-47e2-b954-8a228f3b9dff",
                    "81fbdce6-ee49-485a-908d-1a728c5dcb09",
                    "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                    "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                    "04b45a8a-d11d-49e4-9acc-4a1b524407a5"
                ],
                "lookup_results": [
                    {
                        "uuid": "5d9b516c-e5f0-4e7c-a958-5d8c0a019371",
                        "lookup_data": {
                            "description": "Operation Ghost - White Paper",
                            "link": "http://www.botvrij.eu/data/feed-osint/5d9b516c-e5f0-4e7c-a958-5d8c0a019371.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1571855044",
                            "uuid": "5d9b516c-e5f0-4e7c-a958-5d8c0a019371",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3ccef7ae-cb5e-48f6-8302-897105fbf55c",
                        "lookup_data": {
                            "mitre-attack-id": "T1140",
                            "mitre-cti:description": "Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\n\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\n\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)",
                            "mitre-cti:name": "Deobfuscate/Decode Files or Information",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Linux', 'macOS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Matthew Demaske, Adaptforward', 'Red Canary'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--3ccef7ae-cb5e-48f6-8302-897105fbf55c', 'created': '2017-12-14T16:46:06.044Z', 'x_mitre_version': '1.1', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1140', 'url': 'https://attack.mitre.org/techniques/T1140'}, {'source_name': 'Volexity PowerDuke November 2016', 'url': 'https://www.volexity.com/blog/2016/11/09/powerduke-post-election-spear-phishing-campaigns-targeting-think-tanks-and-ngos/', 'description': 'Adair, S.. (2016, November 9). PowerDuke: Widespread Post-Election Spear Phishing Campaigns Targeting Think Tanks and NGOs. Retrieved January 11, 2017.'}, {'source_name': 'Malwarebytes Targeted Attack against Saudi Arabia', 'url': 'https://blog.malwarebytes.com/cybercrime/social-engineering-cybercrime/2017/03/new-targeted-attack-saudi-arabia-government/', 'description': 'Malwarebytes Labs. (2017, March 27). New targeted attack against Saudi Arabia Government. Retrieved July 3, 2017.'}, {'source_name': 'Carbon Black Obfuscation Sept 2016', 'url': 'https://www.carbonblack.com/2016/09/23/security-advisory-variants-well-known-adware-families-discovered-include-sophisticated-obfuscation-techniques-previously-associated-nation-state-attacks/', 'description': 'Tedesco, B. (2016, September 23). Security Alert Summary. Retrieved February 12, 2018.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': \"Adversaries may use [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to hide artifacts of an intrusion from analysis. They may require separate mechanisms to decode or deobfuscate that information depending on how they intend to use it. Methods for doing that include built-in functionality of malware or by using utilities present on the system.\\n\\nOne such example is use of [certutil](https://attack.mitre.org/software/S0160) to decode a remote access tool portable executable file that has been hidden inside a certificate file. (Citation: Malwarebytes Targeted Attack against Saudi Arabia) Another example is using the Windows <code>copy /b</code> command to reassemble binary fragments into a malicious payload. (Citation: Carbon Black Obfuscation Sept 2016)\\n\\nSometimes a user's action may be required to open it for deobfuscation or decryption as part of [User Execution](https://attack.mitre.org/techniques/T1204). The user may also be required to input a password to open a password protected compressed/encrypted file that was provided by the adversary. (Citation: Volexity PowerDuke November 2016)\", 'modified': '2022-05-05T04:05:42.508Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Deobfuscate/Decode Files or Information', 'x_mitre_detection': 'Detecting the action of deobfuscating or decoding files or information may be difficult depending on the implementation. If the functionality is contained within malware and uses the Windows API, then attempting to detect malicious behavior before or after the action may yield better results than attempting to perform analysis on loaded libraries or API calls. If scripts are used, then collecting the scripts for analysis may be necessary. Perform process and command-line monitoring to detect potentially malicious behavior related to scripts and system utilities such as [certutil](https://attack.mitre.org/software/S0160).\\n\\nMonitor the execution file paths and command-line arguments for common archive file applications and extensions, such as those for Zip and RAR archive tools, and correlate with other suspicious behavior to reduce false positives from normal user and administrator behavior.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Process: Process Creation', 'File: File Modification', 'Script: Script Execution'], 'x_mitre_defense_bypassed': ['Anti-virus', 'Host Intrusion Prevention Systems', 'Signature-based Detection', 'Network Intrusion Detection System'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e011a729-98a6-4139-b5c4-bf6f6dd8239a",
                        "lookup_data": {
                            "description": "Detects a suspicious Microsoft certutil execution with sub commands like 'decode' sub command, which is sometimes used to decode malicious code",
                            "raw": "author: Florian Roth (Nextron Systems), juju4, keepwatch\ndate: 2019/01/16\ndescription: Detects a suspicious Microsoft certutil execution with sub commands like\n  'decode' sub command, which is sometimes used to decode malicious code\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - ' -decode '\n    - ' -decodehex '\n    - ' -urlcache '\n    - ' -verifyctl '\n    - ' -encode '\n    - ' -exportPFX '\n    - ' /decode '\n    - ' /decodehex '\n    - ' /urlcache '\n    - ' /verifyctl '\n    - ' /encode '\n    - ' /exportPFX '\n  selection_img:\n  - Image|endswith: \\certutil.exe\n  - OriginalFileName: CertUtil.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\nfields:\n- CommandLine\n- ParentCommandLine\nid: e011a729-98a6-4139-b5c4-bf6f6dd8239a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/12\nreferences:\n- https://twitter.com/JohnLaTwC/status/835149808817991680\n- https://blogs.technet.microsoft.com/pki/2006/11/30/basic-crl-checking-with-certutil/\n- https://www.trustedsec.com/2017/07/new-tool-release-nps_payload/\n- https://twitter.com/egre55/status/1087685529016193025\n- https://lolbas-project.github.io/lolbas/Binaries/Certutil/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.command_and_control\n- attack.t1105\n- attack.s0160\n- attack.g0007\n- attack.g0010\n- attack.g0045\n- attack.g0049\n- attack.g0075\n- attack.g0096\ntitle: Suspicious Certutil Command Usage\n",
                            "sigma:id": "e011a729-98a6-4139-b5c4-bf6f6dd8239a",
                            "title": "Suspicious Certutil Command Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5da1e411-c430-4fd6-bb05-9c81c0a8ab16",
                        "lookup_data": {
                            "description": "Mahalo FIN7: Responding to the Criminal Operatorsâ€™ New Tools and Techniques",
                            "link": "http://www.botvrij.eu/data/feed-osint/5da1e411-c430-4fd6-bb05-9c81c0a8ab16.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1570891290",
                            "uuid": "5da1e411-c430-4fd6-bb05-9c81c0a8ab16",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                        "lookup_data": {
                            "description": "Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism",
                            "raw": "author: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)\ndate: 2019/02/22\ndescription: Detection for mshta.exe suspicious execution patterns sometimes involving\n  file polyglotism\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - vbscript\n    - .jpg\n    - .png\n    - .lnk\n    - .xls\n    - .doc\n    - .zip\n    - .dll\n    Image|endswith: \\mshta.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/07\nreferences:\n- http://blog.sevagas.com/?Hacking-around-HTA-files\n- https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n- https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script\n- https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n- https://twitter.com/mattifestation/status/1326228491302563846\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.t1218.005\n- attack.execution\n- attack.t1059.007\n- cve.2020.1599\ntitle: MSHTA Suspicious Execution 01\n",
                            "sigma:id": "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                            "title": "MSHTA Suspicious Execution 01",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "234dc5df-40b5-49d1-bf53-0d44ce778eca",
                        "lookup_data": {
                            "description": "Detects when a built-in utility is used to decode and decrypt a payload after a macOS disk image (DMG) is executed. Malware authors may attempt to evade detection and trick users into executing malicious code by encoding and encrypting their payload and placing it in a disk image file. This behavior is consistent with adware or malware families such as Bundlore and Shlayer.",
                            "raw": "author: Tim Rauch (rule), Elastic (idea)\ndate: 2022/10/17\ndescription: Detects when a built-in utility is used to decode and decrypt a payload\n  after a macOS disk image (DMG) is executed. Malware authors may attempt to evade\n  detection and trick users into executing malicious code by encoding and encrypting\n  their payload and placing it in a disk image file. This behavior is consistent with\n  adware or malware families such as Bundlore and Shlayer.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - /Volumes/\n    - enc\n    - -base64\n    - ' -d '\n    Image|endswith: /openssl\nfalsepositives:\n- Unknown\nid: 234dc5df-40b5-49d1-bf53-0d44ce778eca\nlevel: medium\nlogsource:\n  category: process_creation\n  product: macos\nreferences:\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-5d42c3d772e04f1e8d0eb60f5233bc79def1ea73105a2d8822f44164f77ef823\nstatus: experimental\ntags:\n- attack.t1059\n- attack.t1204\n- attack.execution\n- attack.t1140\n- attack.defense_evasion\n- attack.s0482\n- attack.s0402\ntitle: Payload Decoded and Decrypted via Built-in Utilities\n",
                            "sigma:id": "234dc5df-40b5-49d1-bf53-0d44ce778eca",
                            "title": "Payload Decoded and Decrypted via Built-in Utilities",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1ddc1472-8e52-4f7d-9f11-eab14fc171f5",
                        "lookup_data": {
                            "description": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/05/02\ndescription: A General detection for specific decompress commands in PowerShell logs.\n  This could be an adversary decompressing files.\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|contains: Expand-Archive\nfalsepositives:\n- Unknown\nid: 1ddc1472-8e52-4f7d-9f11-eab14fc171f5\nlevel: informational\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/8\n- https://threathunterplaybook.com/evals/apt29/detections/4.A.3_09F29912-8E93-461E-9E89-3F06F6763383.html\nrelated:\n- id: 81fbdce6-ee49-485a-908d-1a728c5dcb09\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: PowerShell Decompress Commands\n",
                            "sigma:id": "1ddc1472-8e52-4f7d-9f11-eab14fc171f5",
                            "title": "PowerShell Decompress Commands",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e32d4572-9826-4738-b651-95fa63747e8a",
                        "lookup_data": {
                            "description": "Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/01/29\ndescription: Detects usage of the \"FromBase64String\" function in the commandline which\n  is used to decode a base64 encoded string\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: ::FromBase64String(\nfalsepositives:\n- Administrative script libraries\nid: e32d4572-9826-4738-b651-95fa63747e8a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/26\nreferences:\n- https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\nstatus: test\ntags:\n- attack.t1027\n- attack.defense_evasion\n- attack.t1140\n- attack.t1059.001\ntitle: Base64 Encoded PowerShell Command Detected\n",
                            "sigma:id": "e32d4572-9826-4738-b651-95fa63747e8a",
                            "title": "Base64 Encoded PowerShell Command Detected",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                        "lookup_data": {
                            "description": "Malware analysis report on SparrowDoor malware",
                            "link": "http://www.botvrij.eu/data/feed-osint/827e941e-4a99-4e2c-a578-bfcec2d40552.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1650959349",
                            "uuid": "827e941e-4a99-4e2c-a578-bfcec2d40552",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "eb4ee171-8930-4c15-8917-9af8775417fb",
                        "lookup_data": {
                            "description": "CERT-FR report extended - sandworm intrusion set campaign targeting Centreon systems",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/eb4ee171-8930-4c15-8917-9af8775417fb.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1613463604",
                            "uuid": "eb4ee171-8930-4c15-8917-9af8775417fb",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd",
                        "lookup_data": {
                            "description": "Detects suspicious process that use escape characters",
                            "raw": "author: juju4\ndate: 2018/12/11\ndescription: Detects suspicious process that use escape characters\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - h^t^t^p\n    - h\"t\"t\"p\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\nid: f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://twitter.com/vysecurity/status/885545634958385153\n- https://twitter.com/Hexacorn/status/885553465417756673\n- https://twitter.com/Hexacorn/status/885570278637678592\n- https://www.fireeye.com/blog/threat-research/2017/06/obfuscation-in-the-wild.html\n- http://www.windowsinspired.com/understanding-the-command-line-string-and-arguments-received-by-a-windows-program/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: Suspicious Commandline Escape\n",
                            "sigma:id": "f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd",
                            "title": "Suspicious Commandline Escape",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                        "lookup_data": {
                            "description": "The SideWalk may be as dangerous as the CROSSWALK",
                            "link": "http://www.botvrij.eu/data/feed-osint/f35d4a9f-881b-46b7-9d8a-887a40bce133.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1630180802",
                            "uuid": "f35d4a9f-881b-46b7-9d8a-887a40bce133",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                        "lookup_data": {
                            "description": "FontOnLake: Previously unknown malware family targeting Linux",
                            "link": "http://www.botvrij.eu/data/feed-osint/5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1633682506",
                            "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5dbae98e-7974-4480-86db-44be950d210f",
                        "lookup_data": {
                            "description": "OSINT - Dans lâ€™Å“il de notre CyberSOC : la campagne malspam Aggah diversifie ses outils",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5dbae98e-7974-4480-86db-44be950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1575969880",
                            "uuid": "5dbae98e-7974-4480-86db-44be950d210f",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ba592c6d-6888-43c3-b8c6-689b8fe47337",
                        "lookup_data": {
                            "description": "Detects suspicious process command line that uses base64 encoded input for execution with a shell",
                            "raw": "author: pH-T (Nextron Systems)\ndate: 2022/07/26\ndescription: Detects suspicious process command line that uses base64 encoded input\n  for execution with a shell\ndetection:\n  condition: selection_base64 and selection_exec\n  selection_base64:\n    CommandLine|contains: 'base64 -w0 '\n  selection_exec:\n  - CommandLine|contains:\n    - '| bash '\n    - '| sh '\n    - '|bash '\n    - '|sh '\n  - CommandLine|endswith:\n    - '| bash'\n    - '| sh'\n    - '|bash'\n    - ' |sh'\nfalsepositives:\n- Legitimate administration activities\nid: ba592c6d-6888-43c3-b8c6-689b8fe47337\nlevel: medium\nlogsource:\n  category: process_creation\n  product: linux\nreferences:\n- https://github.com/arget13/DDexec\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: Linux Base64 Encoded Pipe to Shell\n",
                            "sigma:id": "ba592c6d-6888-43c3-b8c6-689b8fe47337",
                            "title": "Linux Base64 Encoded Pipe to Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                        "lookup_data": {
                            "description": "Detects presence of a potentially xor encoded powershell command",
                            "raw": "author: Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov,\n  oscd.community, Nasreddine Bencherchali\ndate: 2018/09/05\ndescription: Detects presence of a potentially xor encoded powershell command\ndetection:\n  condition: all of selection_*\n  selection_cli_other:\n    CommandLine|contains:\n    - ForEach\n    - for(\n    - 'for '\n    - '-join '\n    - -join'\n    - -join\"\n    - -join`\n    - ::Join\n    - '[char]'\n  selection_cli_xor:\n    CommandLine|contains: bxor\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  - Description: Windows PowerShell\n  - Product: PowerShell Core 6\nfalsepositives:\n- Unknown\nid: bb780e0c-16cf-4383-8383-1e5471db6cf9\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65\n- https://redcanary.com/blog/yellow-cockatoo/\n- https://zero2auto.com/2020/05/19/netwalker-re/\n- https://mez0.cc/posts/cobaltstrike-powershell-exec/\nrelated:\n- id: 5b572dcf-254b-425c-a8c5-d9af6bea35a6\n  type: obsoletes\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1059.001\n- attack.t1140\n- attack.t1027\ntitle: Suspicious XOR Encoded PowerShell Command\n",
                            "sigma:id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                            "title": "Suspicious XOR Encoded PowerShell Command",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1a0d4aba-7668-4365-9ce4-6d79ab088dfd",
                        "lookup_data": {
                            "description": "Detects a ping command that uses a hex encoded IP address",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/03/23\ndescription: Detects a ping command that uses a hex encoded IP address\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: 0x\n    Image|endswith: \\ping.exe\nfalsepositives:\n- Unlikely, because no sane admin pings IP addresses in a hexadecimal form\nfields:\n- ParentCommandLine\nid: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://github.com/vysecurity/Aggressor-VYSEC/blob/0d61c80387b9432dab64b8b8a9fb52d20cfef80e/ping.cna\n- https://twitter.com/vysecurity/status/977198418354491392\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.t1027\ntitle: Ping Hex IP\n",
                            "sigma:id": "1a0d4aba-7668-4365-9ce4-6d79ab088dfd",
                            "title": "Ping Hex IP",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "60118dab-1ab8-40b2-b02b-b6f80aba047c",
                        "lookup_data": {
                            "description": "[CERT-FR] Sandworm intrusion set campaign targeting Centreon systems",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/60118dab-1ab8-40b2-b02b-b6f80aba047c.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1622552977",
                            "uuid": "60118dab-1ab8-40b2-b02b-b6f80aba047c",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "880973f3-9708-491c-a77b-2a35a1921158",
                        "lookup_data": {
                            "description": "Detects suspicious process command line that starts with a shell that executes something and finally gets piped into another shell",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/03/14\ndescription: Detects suspicious process command line that starts with a shell that\n  executes something and finally gets piped into another shell\ndetection:\n  condition: all of selection*\n  selection:\n    CommandLine|startswith:\n    - 'sh -c '\n    - 'bash -c '\n  selection_exec:\n  - CommandLine|contains:\n    - '| bash '\n    - '| sh '\n    - '|bash '\n    - '|sh '\n  - CommandLine|endswith:\n    - '| bash'\n    - '| sh'\n    - '|bash'\n    - ' |sh'\nfalsepositives:\n- Legitimate software that uses these patterns\nid: 880973f3-9708-491c-a77b-2a35a1921158\nlevel: medium\nlogsource:\n  category: process_creation\n  product: linux\nmodified: 2022/07/26\nreferences:\n- Internal Research\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: Linux Shell Pipe to Shell\n",
                            "sigma:id": "880973f3-9708-491c-a77b-2a35a1921158",
                            "title": "Linux Shell Pipe to Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5ced8da1-0960-40bc-b5dc-2fed0a016219",
                        "lookup_data": {
                            "description": "Turla PowerShell blogpost",
                            "link": "http://www.botvrij.eu/data/feed-osint/5ced8da1-0960-40bc-b5dc-2fed0a016219.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1559232101",
                            "uuid": "5ced8da1-0960-40bc-b5dc-2fed0a016219",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5dee2bc3-47ac-4784-a52a-4da2950d210f",
                        "lookup_data": {
                            "description": "OSINT - BfV Cyber-Brief Nr. 01/2019 - Hinweis auf aktuelle Angriffskampagne -",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5dee2bc3-47ac-4784-a52a-4da2950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1576068623",
                            "uuid": "5dee2bc3-47ac-4784-a52a-4da2950d210f",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d01f473f-3cdc-4867-9e55-1de9cf1986f0",
                        "lookup_data": {
                            "mitre-attack-id": "T1140",
                            "mitre-cti:description": "Identify unnecessary system utilities or potentially malicious software that may be used to deobfuscate or decode files or information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",
                            "mitre-cti:name": "Deobfuscate/Decode Files or Information Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--d01f473f-3cdc-4867-9e55-1de9cf1986f0', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'external_id': 'T1140', 'url': 'https://attack.mitre.org/mitigations/T1140', 'source_name': 'mitre-attack'}, {'source_name': 'Beechey 2010', 'description': 'Beechey, J. (2010, December). Application Whitelisting: Panacea or Propaganda?. Retrieved November 18, 2014.', 'url': 'http://www.sans.org/reading-room/whitepapers/application/application-whitelisting-panacea-propaganda-33599'}, {'url': 'http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html', 'description': 'Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.', 'source_name': 'Windows Commands JPCERT'}, {'url': 'https://apps.nsa.gov/iaarchive/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm', 'description': 'NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016.', 'source_name': 'NSA MS AppLocker'}, {'source_name': 'Corio 2008', 'description': 'Corio, C., & Sayana, D. P. (2008, June). Application Lockdown with Software Restriction Policies. Retrieved November 18, 2014.', 'url': 'http://technet.microsoft.com/en-us/magazine/2008.06.srp.aspx'}, {'source_name': 'TechNet Applocker vs SRP', 'description': 'Microsoft. (2012, June 27). Using Software Restriction Policies and AppLocker Policies. Retrieved April 7, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/ee791851.aspx'}], 'modified': '2020-01-17T16:45:23.686Z', 'name': 'Deobfuscate/Decode Files or Information Mitigation', 'description': 'Identify unnecessary system utilities or potentially malicious software that may be used to deobfuscate or decode files or information, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe2f9663-41cb-47e2-b954-8a228f3b9dff",
                        "lookup_data": {
                            "description": "Detects the presence of a base64 version of the shebang in the commandline, which could indicate a malicious payload about to be decoded",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/09/15\ndescription: Detects the presence of a base64 version of the shebang in the commandline,\n  which could indicate a malicious payload about to be decoded\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - IyEvYmluL2Jhc2\n    - IyEvYmluL2Rhc2\n    - IyEvYmluL3pza\n    - IyEvYmluL2Zpc2\n    - IyEvYmluL3No\nfalsepositives:\n- Legitimate administration activities\nid: fe2f9663-41cb-47e2-b954-8a228f3b9dff\nlevel: medium\nlogsource:\n  category: process_creation\n  product: linux\nreferences:\n- https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html\n- https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: Linux Base64 Encoded Shebang In CLI\n",
                            "sigma:id": "fe2f9663-41cb-47e2-b954-8a228f3b9dff",
                            "title": "Linux Base64 Encoded Shebang In CLI",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "81fbdce6-ee49-485a-908d-1a728c5dcb09",
                        "lookup_data": {
                            "description": "A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/05/02\ndescription: A General detection for specific decompress commands in PowerShell logs.\n  This could be an adversary decompressing files.\ndetection:\n  condition: selection1 or selection2\n  selection1:\n    EventID: 4104\n    ScriptBlockText|contains: Expand-Archive\n  selection2:\n    EventID: 4103\n    Payload|contains: Expand-Archive\nfalsepositives:\n- unknown\nid: 81fbdce6-ee49-485a-908d-1a728c5dcb09\nlevel: informational\nlogsource:\n  product: windows\n  service: powershell\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/8\n- https://threathunterplaybook.com/evals/apt29/detections/4.A.3_09F29912-8E93-461E-9E89-3F06F6763383.html\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1140\ntitle: PowerShell Decompress Commands\n",
                            "sigma:id": "81fbdce6-ee49-485a-908d-1a728c5dcb09",
                            "title": "PowerShell Decompress Commands",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                        "lookup_data": {
                            "description": "Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/08/24\ndescription: Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process\n  command line\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|base64offset|contains: ::FromBase64String\n  - CommandLine|contains:\n    - OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA\n    - oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA\n    - 6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/31\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Base64 Encoded FromBase64String Keyword\n",
                            "sigma:id": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                            "title": "PowerShell Base64 Encoded FromBase64String Keyword",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                        "lookup_data": {
                            "description": "UEFI threats moving to the ESP: Introducing ESPecter bootkit",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5df8df26-fe0e-4858-94a7-6cf71d9519c9.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1637336858",
                            "uuid": "5df8df26-fe0e-4858-94a7-6cf71d9519c9",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "04b45a8a-d11d-49e4-9acc-4a1b524407a5",
                        "lookup_data": {
                            "description": "Detects when a user enables DNS-over-HTTPS.\nThis can be used to hide internet activity or be used to hide the process of exfiltrating data.\nWith this enabled organization will lose visibility into data such as query type, response and originating IP that are used to determine bad actors.\n",
                            "raw": "author: Austin Songer\ndate: 2021/07/22\ndescription: 'Detects when a user enables DNS-over-HTTPS.\n\n  This can be used to hide internet activity or be used to hide the process of exfiltrating\n  data.\n\n  With this enabled organization will lose visibility into data such as query type,\n  response and originating IP that are used to determine bad actors.\n\n  '\ndetection:\n  condition: 1 of selection_*\n  selection_chrome:\n    Details: secure\n    EventType: SetValue\n    TargetObject|endswith: \\SOFTWARE\\Google\\Chrome\\DnsOverHttpsMode\n  selection_edge:\n    Details: DWORD (0x00000001)\n    EventType: SetValue\n    TargetObject|endswith: \\SOFTWARE\\Policies\\Microsoft\\Edge\\BuiltInDnsClientEnabled\n  selection_firefox:\n    Details: DWORD (0x00000001)\n    EventType: SetValue\n    TargetObject|endswith: \\SOFTWARE\\Policies\\Mozilla\\Firefox\\DNSOverHTTPS\\Enabled\nfalsepositives:\n- Unlikely\nid: 04b45a8a-d11d-49e4-9acc-4a1b524407a5\nlevel: medium\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/03/26\nreferences:\n- https://www.tenforums.com/tutorials/151318-how-enable-disable-dns-over-https-doh-microsoft-edge.html\n- https://github.com/elastic/detection-rules/issues/1371\n- https://chromeenterprise.google/policies/?policy=DnsOverHttpsMode\n- https://admx.help/HKLM/Software/Policies/Mozilla/Firefox/DNSOverHTTPS\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.t1112\ntitle: DNS-over-HTTPS Enabled by Registry\n",
                            "sigma:id": "04b45a8a-d11d-49e4-9acc-4a1b524407a5",
                            "title": "DNS-over-HTTPS Enabled by Registry",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1140",
                "display_name": "Deobfuscate/Decode Files or Information",
                "atomic_tests": [
                    {
                        "name": "Deobfuscate/Decode Files Or Information",
                        "auto_generated_guid": "dc6fe391-69e6-4506-bd06-ea5eeb4082f8",
                        "description": "Encode/Decode executable\nUpon execution a file named T1140_calc_decoded.exe will be placed in the temp folder\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "executable": {
                                "description": "name of executable",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\calc.exe"
                            }
                        },
                        "executor": {
                            "command": "certutil -encode #{executable} %temp%\\T1140_calc.txt\ncertutil -decode %temp%\\T1140_calc.txt %temp%\\T1140_calc_decoded.exe\n",
                            "cleanup_command": "del %temp%\\T1140_calc.txt >nul 2>&1\ndel %temp%\\T1140_calc_decoded.exe >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Certutil Rename and Decode",
                        "auto_generated_guid": "71abc534-3c05-4d0c-80f7-cbe93cb2aa94",
                        "description": "Rename certutil and decode a file. This is in reference to latest research by FireEye [here](https://www.fireeye.com/blog/threat-research/2018/09/apt10-targeting-japanese-corporations-using-updated-ttps.html)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "executable": {
                                "description": "name of executable/file to decode",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\calc.exe"
                            }
                        },
                        "executor": {
                            "command": "copy %windir%\\system32\\certutil.exe %temp%\\tcm.tmp\n%temp%\\tcm.tmp -encode #{executable} %temp%\\T1140_calc2.txt\n%temp%\\tcm.tmp -decode %temp%\\T1140_calc2.txt %temp%\\T1140_calc2_decoded.exe\n",
                            "cleanup_command": "del %temp%\\tcm.tmp >nul 2>&1\ndel %temp%\\T1140_calc2.txt >nul 2>&1\ndel %temp%\\T1140_calc2_decoded.exe >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Base64 decoding with Python",
                        "auto_generated_guid": "356dc0e8-684f-4428-bb94-9313998ad608",
                        "description": "Use Python to decode a base64-encoded text string and echo it to the console\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Message to print to the screen",
                                "type": "string",
                                "default": "Hello from Atomic Red Team test T1140!"
                            },
                            "encoded_file": {
                                "description": "File to temporarily save encoded text",
                                "type": "path",
                                "default": "/tmp/T1140.encoded"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Python must be present\n",
                                "prereq_command": "which python3\n",
                                "get_prereq_command": "echo \"Please install Python 3\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "ENCODED=$(python3 -c 'import base64;enc=base64.b64encode(\"#{message}\".encode());print(enc.decode())')\npython3 -c \"import base64;dec=base64.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"import base64 as d;dec=d.b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode;dec=b64decode(\\\"$ENCODED\\\");print(dec.decode())\"\npython3 -c \"from base64 import b64decode as d;dec=d(\\\"$ENCODED\\\");print(dec.decode())\"\necho $ENCODED | python3 -c \"import base64,sys;dec=base64.b64decode(sys.stdin.read());print(dec.decode())\"\necho $ENCODED > #{encoded_file} && python3 -c \"import base64;dec=base64.b64decode(open('#{encoded_file}').read());print(dec.decode())\"\n"
                        }
                    },
                    {
                        "name": "Base64 decoding with Perl",
                        "auto_generated_guid": "6604d964-b9f6-4d4b-8ce8-499829a14d0a",
                        "description": "Use Perl to decode a base64-encoded text string and echo it to the console    \n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Message to print to the screen",
                                "type": "string",
                                "default": "Hello from Atomic Red Team test T1140!"
                            },
                            "encoded_file": {
                                "description": "File to temporarily save encoded text",
                                "type": "path",
                                "default": "/tmp/T1140.encoded"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Perl must be present\n",
                                "prereq_command": "which perl\n",
                                "get_prereq_command": "echo \"Please install Perl\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "ENCODED=$(perl -e \"use MIME::Base64;print(encode_base64('#{message}'));\")\nperl -le \"use MIME::Base64;print(decode_base64('$ENCODED'));\"\necho $ENCODED | perl -le 'use MIME::Base64;print(decode_base64(<STDIN>));'\necho $ENCODED > #{encoded_file} && perl -le 'use MIME::Base64;open($f,\"<\",\"#{encoded_file}\");print(decode_base64(<$f>));'\n"
                        }
                    },
                    {
                        "name": "Base64 decoding with shell utilities",
                        "auto_generated_guid": "b4f6a567-a27a-41e5-b8ef-ac4b4008bb7e",
                        "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Message to print to the screen",
                                "type": "string",
                                "default": "Hello from Atomic Red Team test T1140!"
                            },
                            "encoded_file": {
                                "description": "File to temporarily save encoded text",
                                "type": "path",
                                "default": "/tmp/T1140.encoded"
                            }
                        },
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "ENCODED=$(echo '#{message}' | base64)\nprintf $ENCODED | base64 -d\necho $ENCODED | base64 -d\necho $(echo $ENCODED) | base64 -d\necho $ENCODED > #{encoded_file} && base64 -d #{encoded_file}\necho $ENCODED > #{encoded_file} && base64 -d < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | base64 -d\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | base64 -d\nbash -c \"{echo,\\\"$(echo $ENCODED)\\\"}|{base64,-d}\"\n"
                        }
                    },
                    {
                        "name": "Base64 decoding with shell utilities (freebsd)",
                        "auto_generated_guid": "b6097712-c42e-4174-b8f2-4b1e1a5bbb3d",
                        "description": "Use common shell utilities to decode a base64-encoded text string and echo it to the console\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Message to print to the screen",
                                "type": "string",
                                "default": "Hello from Atomic Red Team test T1140!"
                            },
                            "encoded_file": {
                                "description": "File to temporarily save encoded text",
                                "type": "path",
                                "default": "/tmp/T1140.encoded"
                            }
                        },
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "ENCODED=$(echo '#{message}' | b64encode -r -)\nprintf $ENCODED | b64decode -r\necho $ENCODED | b64decode -r\necho $(echo $ENCODED) | b64decode -r\necho $ENCODED > #{encoded_file} && b64encode -r #{encoded_file}\necho $ENCODED > #{encoded_file} && b64decode -r < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | b64decode -r\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | b64decode -r\n"
                        }
                    },
                    {
                        "name": "FreeBSD b64encode Shebang in CLI",
                        "auto_generated_guid": "18ee2002-66e8-4518-87c5-c0ec9c8299ac",
                        "description": "Using b64decode shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "bash_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "dash_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "fish_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "sh_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "b64decode must be present\n",
                                "prereq_command": "which b64decode\n",
                                "get_prereq_command": "echo \"please install b64decode\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "echo #{bash_encoded} | b64decode -r | sh\necho #{dash_encoded} | b64decode -r | sh\necho #{fish_encoded} | b64decode -r | sh\necho #{sh_encoded} | b64decode -r | sh\n"
                        }
                    },
                    {
                        "name": "Hex decoding with shell utilities",
                        "auto_generated_guid": "005943f9-8dd5-4349-8b46-0313c0a9f973",
                        "description": "Use common shell utilities to decode a hex-encoded text string and echo it to the console\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Message to print to the screen",
                                "type": "string",
                                "default": "Hello from Atomic Red Team test T1140!"
                            },
                            "encoded_file": {
                                "description": "File to temporarily save encoded text",
                                "type": "path",
                                "default": "/tmp/T1140.encoded"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "xxd must be present\n",
                                "prereq_command": "which xxd\n",
                                "get_prereq_command": "echo \"Please install xxd\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "ENCODED=$(echo '#{message}' | xxd -ps -c 256)\nprintf $ENCODED | xxd -r -p\necho $ENCODED | xxd -r -p\necho $(echo $ENCODED) | xxd -r -p\necho $ENCODED > #{encoded_file} && xxd -r -p #{encoded_file}\necho $ENCODED > #{encoded_file} && xxd -r -p < #{encoded_file}\necho $ENCODED > #{encoded_file} && cat #{encoded_file} | xxd -r -p\necho $ENCODED > #{encoded_file} && cat < #{encoded_file} | xxd -r -p\n"
                        }
                    },
                    {
                        "name": "Linux Base64 Encoded Shebang in CLI",
                        "auto_generated_guid": "3a15c372-67c1-4430-ac8e-ec06d641ce4d",
                        "description": "Using Linux Base64 Encoded shell scripts that have Shebang in them. This is commonly how attackers obfuscate passing and executing a shell script. Seen [here](https://www.trendmicro.com/pl_pl/research/20/i/the-evolution-of-malicious-shell-scripts.html) by TrendMicro, as well as [LinPEAS](https://github.com/carlospolop/PEASS-ng/tree/master/linPEAS). Also a there is a great Sigma rule [here](https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_base64_shebang_cli.yml) for it. \n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "bash_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Jhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "dash_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "fish_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL2Rhc2gKZWNobyAiaHR0cHM6Ly93d3cueW91dHViZS5jb20vQGF0b21pY3NvbmFmcmlkYXkgRlRXIgo="
                            },
                            "sh_encoded": {
                                "description": "Encoded",
                                "type": "string",
                                "default": "IyEvYmluL3NoCmVjaG8gImh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL0BhdG9taWNzb25hZnJpZGF5IEZUVyIK"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "base64 must be present\n",
                                "prereq_command": "which base64\n",
                                "get_prereq_command": "echo \"please install base64\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "echo #{bash_encoded} | base64 -d | bash\necho #{dash_encoded} | base64 -d | bash\necho #{fish_encoded} | base64 -d | bash\necho #{sh_encoded} | base64 -d | bash\n"
                        }
                    },
                    {
                        "name": "XOR decoding and command execution using Python",
                        "auto_generated_guid": "c3b65cd5-ee51-4e98-b6a3-6cbdec138efc",
                        "description": "An adversary can obfuscate malicious commands or payloads using XOR and execute them on the victim's machine. This test uses Python to decode and execute commands on the machine.",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "xor_key": {
                                "description": "Key used to decrypt the command ",
                                "type": "string",
                                "default": "waEHleblxiQjoxFJQaIMLdHKz"
                            },
                            "encrypted_command": {
                                "description": "Encrypted command that will be executed",
                                "type": "string",
                                "default": "AAkqKQEM"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Python3 must be installed",
                                "prereq_command": "which python3",
                                "get_prereq_command": "echo \"Install Python3\""
                            }
                        ],
                        "executor": {
                            "command": "python3 -c 'import base64; import subprocess; xor_decrypt = lambda text, key: \"\".join([chr(c ^ ord(k)) for c, k in zip(base64.b64decode(text.encode()), key)]); command = \"#{encrypted_command}\"; key = \"#{xor_key}\"; exec = xor_decrypt(command, key); subprocess.call(exec, shell=True)'",
                            "cleanup_command": null,
                            "name": "bash",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:40:02"
}