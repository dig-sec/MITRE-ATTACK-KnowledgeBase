{
    "id": "T1055.003",
    "name": "Thread Execution Hijacking",
    "description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process.\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as `OpenThread`. At this point the process can be suspended then written to, realigned to the injected code, and resumed via `SuspendThread `, `VirtualAllocEx`, `WriteProcessMemory`, `SetThreadContext`, then `ResumeThread` respectively.(Citation: Elastic Process Injection July 2017)\nThis is very similar to [Process Hollowing](T1055.012) but targets an existing process rather than creating a process in a suspended state.\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process.",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion, Privilege Escalation",
    "data_sources": "Process: Process Modification, Process: OS API Execution, Process: Process Access",
    "detection": "Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as `CreateRemoteThread`, `SuspendThread`/`SetThreadContext`/`ResumeThread`, and those that can be used to modify memory within another process, such as `VirtualAllocEx`/`WriteProcessMemory`, may be used for this technique.(Citation: Elastic Process Injection July 2017)\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior.",
    "url": "https://attack.mitre.org/techniques/T1055/003",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "41d9846c-f6af-4302-a654-24bba2729bc6",
                    "a1a144b7-5c9b-4853-a559-2172be8d4a03",
                    "7bdde3bf-2a42-4c39-aa31-a92b3e17afac"
                ],
                "lookup_results": [
                    {
                        "uuid": "41d9846c-f6af-4302-a654-24bba2729bc6",
                        "lookup_data": {
                            "mitre-attack-id": "T1055.003",
                            "mitre-cti:description": "Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \n\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\n\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \n\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. ",
                            "mitre-cti:name": "Thread Execution Hijacking",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--41d9846c-f6af-4302-a654-24bba2729bc6', 'type': 'attack-pattern', 'created': '2020-01-14T01:28:32.166Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1055.003', 'url': 'https://attack.mitre.org/techniques/T1055/003'}, {'url': 'https://www.endgame.com/blog/technical-blog/ten-process-injection-techniques-technical-survey-common-and-trending-process', 'description': 'Hosseini, A. (2017, July 18). Ten Process Injection Techniques: A Technical Survey Of Common And Trending Process Injection Techniques. Retrieved December 7, 2017.', 'source_name': 'Elastic Process Injection July 2017'}], 'modified': '2021-10-18T12:22:50.800Z', 'name': 'Thread Execution Hijacking', 'description': \"Adversaries may inject malicious code into hijacked processes in order to evade process-based defenses as well as possibly elevate privileges. Thread Execution Hijacking is a method of executing arbitrary code in the address space of a separate live process. \\n\\nThread Execution Hijacking is commonly performed by suspending an existing process then unmapping/hollowing its memory, which can then be replaced with malicious code or the path to a DLL. A handle to an existing victim process is first created with native Windows API calls such as <code>OpenThread</code>. At this point the process can be suspended then written to, realigned to the injected code, and resumed via <code>SuspendThread </code>, <code>VirtualAllocEx</code>, <code>WriteProcessMemory</code>, <code>SetThreadContext</code>, then <code>ResumeThread</code> respectively.(Citation: Elastic Process Injection July 2017)\\n\\nThis is very similar to [Process Hollowing](https://attack.mitre.org/techniques/T1055/012) but targets an existing process rather than creating a process in a suspended state.  \\n\\nRunning code in the context of another process may allow access to the process's memory, system/network resources, and possibly elevated privileges. Execution via Thread Execution Hijacking may also evade detection from security products since the execution is masked under a legitimate process. \", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_detection': 'Monitoring Windows API calls indicative of the various types of code injection may generate a significant amount of data and may not be directly useful for defense unless collected under specific circumstances for known bad sequences of calls, since benign use of API functions may be common and difficult to distinguish from malicious behavior. Windows API calls such as <code>CreateRemoteThread</code>, <code>SuspendThread</code>/<code>SetThreadContext</code>/<code>ResumeThread</code>, and those that can be used to modify memory within another process, such as <code>VirtualAllocEx</code>/<code>WriteProcessMemory</code>, may be used for this technique.(Citation: Elastic Process Injection July 2017)\\n\\nAnalyze process behavior to determine if a process is performing actions it usually does not, such as opening network connections, reading files, or other suspicious actions that could relate to post-compromise behavior. ', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: OS API Execution', 'Process: Process Modification', 'Process: Process Access'], 'x_mitre_defense_bypassed': ['Application control', 'Anti-virus'], 'x_mitre_permissions_required': ['User']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a1a144b7-5c9b-4853-a559-2172be8d4a03",
                        "lookup_data": {
                            "description": "Detects a remote thread creation in suspicious target images",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/03/16\ndescription: Detects a remote thread creation in suspicious target images\ndetection:\n  condition: selection and not 1 of filter*\n  filter:\n    StartFunction: EtwpNotificationThread\n  filter_programfiles:\n    SourceImage|startswith:\n    - C:\\Program Files\\\n    - C:\\Program Files (x86)\\\n  selection:\n    TargetImage|endswith:\n    - \\mspaint.exe\n    - \\calc.exe\n    - \\notepad.exe\n    - \\sethc.exe\n    - \\write.exe\n    - \\wordpad.exe\n    - \\explorer.exe\nfalsepositives:\n- Unknown\nid: a1a144b7-5c9b-4853-a559-2172be8d4a03\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/09/29\nreferences:\n- https://blog.redbluepurple.io/offensive-research/bypassing-injection-detection\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.privilege_escalation\n- attack.t1055.003\ntitle: Remote Thread Creation in Suspicious Targets\n",
                            "sigma:id": "a1a144b7-5c9b-4853-a559-2172be8d4a03",
                            "title": "Remote Thread Creation in Suspicious Targets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
                        "lookup_data": {
                            "description": "Detects the process injection of a LittleCorporal generated Maldoc.",
                            "raw": "author: Christian Burkard (Nextron Systems)\ndate: 2021/08/09\ndescription: Detects the process injection of a LittleCorporal generated Maldoc.\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains|all:\n    - :\\Windows\\Microsoft.NET\\Framework64\\v2.\n    - UNKNOWN\n    SourceImage|endswith: \\winword.exe\nfalsepositives:\n- Unknown\nid: 7bdde3bf-2a42-4c39-aa31-a92b3e17afac\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/06/02\nreferences:\n- https://github.com/connormcgarr/LittleCorporal\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1055.003\ntitle: LittleCorporal Generated Maldoc Injection\n",
                            "sigma:id": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
                            "title": "LittleCorporal Generated Maldoc Injection",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1055.003",
                "display_name": "Thread Execution Hijacking",
                "atomic_tests": [
                    {
                        "name": "Thread Execution Hijacking",
                        "auto_generated_guid": "578025d5-faa9-4f6d-8390-aae527d503e1",
                        "description": "This test injects a MessageBox shellcode generated by msfvenom in Notepad.exe using Thread Execution Hijacking. When successful, a message box will appear with the \"Atomic Red Team\" caption after one or two seconds. ",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$notepad = Start-Process notepad -passthru\nStart-Process \"$PathToAtomicsFolder\\T1055.003\\bin\\InjectContext.exe\"\nStart-Sleep -Seconds 5\nStop-Process $notepad.id",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:48:04"
}