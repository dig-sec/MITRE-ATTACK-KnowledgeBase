{
    "id": "T1053.006",
    "name": "Systemd Timers",
    "description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension `.timer` that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](T1053.003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the `systemctl` command line utility, which operates over [SSH](T1021.004).(Citation: Systemd Remote Control)\nEach `.timer` file must have a corresponding `.service` file with the same name, e.g., `example.timer` and `example.service`. `.service` files are [Systemd Service](T1543.002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to `/etc/systemd/system/` and `/usr/lib/systemd/system` while user level are written to `~/.config/systemd/user/`.\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",
    "platforms": "Linux",
    "kill_chain_phases": "Execution, Persistence, Privilege Escalation",
    "data_sources": "Scheduled Job: Scheduled Job Creation, Command: Command Execution, File: File Modification, Process: Process Creation",
    "detection": "Systemd timer unit files may be detected by auditing file creation and modification events within the `/etc/systemd/system`, `/usr/lib/systemd/system/`, and `~/.config/systemd/user/` directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.\nSuspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: `systemctl list-timers –all`. Analyze the contents of corresponding `.service` files present on the file system and ensure that they refer to legitimate, expected executables.\nAudit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citation: archlinux Systemd Timers Aug 2020)",
    "url": "https://attack.mitre.org/techniques/T1053/006",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1053.006",
                "atomic_attack_guid": "f4983098-bb13-44fb-9b2c-46149961807b",
                "atomic_attack_name": "Create Systemd Service and Timer",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Service Restarted",
                        "rule_link": "https://research.splunk.com/endpoint/084275ba-61b8-11ec-8d64-acde48001122/"
                    },
                    {
                        "rule_name": "Linux Service Started Or Enabled",
                        "rule_link": "https://research.splunk.com/endpoint/e0428212-61b7-11ec-88a3-acde48001122/"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "a542bac9-7bc1-4da7-9a09-96f69e23cc21"
                ],
                "lookup_results": [
                    {
                        "uuid": "a542bac9-7bc1-4da7-9a09-96f69e23cc21",
                        "lookup_data": {
                            "mitre-attack-id": "T1053.006",
                            "mitre-cti:description": "Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\n\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\n\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.",
                            "mitre-cti:name": "Systemd Timers",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['SarathKumar Rajendran, Trimble Inc'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--a542bac9-7bc1-4da7-9a09-96f69e23cc21', 'type': 'attack-pattern', 'created': '2020-10-12T17:50:31.584Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1053.006', 'url': 'https://attack.mitre.org/techniques/T1053/006'}, {'source_name': 'archlinux Systemd Timers Aug 2020', 'url': 'https://wiki.archlinux.org/index.php/Systemd/Timers', 'description': 'archlinux. (2020, August 11). systemd/Timers. Retrieved October 12, 2020.'}, {'source_name': 'Systemd Remote Control', 'url': 'https://www.tecmint.com/control-systemd-services-on-remote-linux-server/', 'description': 'Aaron Kili. (2018, January 16). How to Control Systemd Services on Remote Linux Server. Retrieved July 26, 2021.'}, {'source_name': 'Linux man-pages: systemd January 2014', 'url': 'http://man7.org/linux/man-pages/man1/systemd.1.html', 'description': 'Linux man-pages. (2014, January). systemd(1) - Linux manual page. Retrieved April 23, 2019.'}, {'description': 'Catalin Cimpanu. (2018, July 10). Malware Found in Arch Linux AUR Package Repository. Retrieved April 23, 2019.', 'url': 'https://www.bleepingcomputer.com/news/security/malware-found-in-arch-linux-aur-package-repository/', 'source_name': 'Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018'}, {'description': 'Catalin Cimpanu. (2018, July 10). ~x file downloaded in public Arch package compromise. Retrieved April 23, 2019.', 'url': 'https://gist.github.com/campuscodi/74d0d2e35d8fd9499c76333ce027345a', 'source_name': 'gist Arch package compromise 10JUL2018'}, {'description': 'Eli Schwartz. (2018, June 8). acroread package compromised. Retrieved April 23, 2019.', 'url': 'https://lists.archlinux.org/pipermail/aur-general/2018-July/034153.html', 'source_name': 'acroread package compromised Arch Linux Mail 8JUL2018'}], 'modified': '2021-07-27T16:43:25.027Z', 'name': 'Systemd Timers', 'description': 'Adversaries may abuse systemd timers to perform task scheduling for initial or recurring execution of malicious code. Systemd timers are unit files with file extension <code>.timer</code> that control services. Timers can be set to run on a calendar event or after a time span relative to a starting point. They can be used as an alternative to [Cron](https://attack.mitre.org/techniques/T1053/003) in Linux environments.(Citation: archlinux Systemd Timers Aug 2020) Systemd timers may be activated remotely via the <code>systemctl</code> command line utility, which operates over [SSH](https://attack.mitre.org/techniques/T1021/004).(Citation: Systemd Remote Control)\\n\\nEach <code>.timer</code> file must have a corresponding <code>.service</code> file with the same name, e.g., <code>example.timer</code> and <code>example.service</code>. <code>.service</code> files are [Systemd Service](https://attack.mitre.org/techniques/T1543/002) unit files that are managed by the systemd system and service manager.(Citation: Linux man-pages: systemd January 2014) Privileged timers are written to <code>/etc/systemd/system/</code> and <code>/usr/lib/systemd/system</code> while user level are written to <code>~/.config/systemd/user/</code>.\\n\\nAn adversary may use systemd timers to execute malicious code at system startup or on a scheduled basis for persistence.(Citation: Arch Linux Package Systemd Compromise BleepingComputer 10JUL2018)(Citation: gist Arch package compromise 10JUL2018)(Citation: acroread package compromised Arch Linux Mail 8JUL2018) Timers installed using privileged paths may be used to maintain root level persistence. Adversaries may also install user level timers to achieve user level persistence.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_detection': \"Systemd timer unit files may be detected by auditing file creation and modification events within the <code>/etc/systemd/system</code>, <code>/usr/lib/systemd/system/</code>, and <code>~/.config/systemd/user/</code> directories, as well as associated symbolic links. Suspicious processes or scripts spawned in this manner will have a parent process of ‘systemd’, a parent process ID of 1, and will usually execute as the ‘root’ user.\\n\\nSuspicious systemd timers can also be identified by comparing results against a trusted system baseline. Malicious systemd timers may be detected by using the systemctl utility to examine system wide timers: <code>systemctl list-timers –all</code>. Analyze the contents of corresponding <code>.service</code> files present on the file system and ensure that they refer to legitimate, expected executables.\\n\\nAudit the execution and command-line arguments of the 'systemd-run' utility as it may be used to create timers.(Citation: archlinux Systemd Timers Aug 2020)\", 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: Process Creation', 'File: File Modification', 'Command: Command Execution', 'Scheduled Job: Scheduled Job Creation'], 'x_mitre_permissions_required': ['User', 'root'], 'x_mitre_remote_support': True}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1053.006",
                "display_name": "Scheduled Task/Job: Systemd Timers",
                "atomic_tests": [
                    {
                        "name": "Create Systemd Service and Timer",
                        "auto_generated_guid": "f4983098-bb13-44fb-9b2c-46149961807b",
                        "description": "This test creates Systemd service and timer then starts and enables the Systemd timer \n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "path_to_systemd_service": {
                                "description": "Path to systemd service unit file",
                                "type": "path",
                                "default": "/etc/systemd/system/art-timer.service"
                            },
                            "path_to_systemd_timer": {
                                "description": "Path to service timer file",
                                "type": "path",
                                "default": "/etc/systemd/system/art-timer.timer"
                            },
                            "systemd_service_name": {
                                "description": "Name of systemd service",
                                "type": "string",
                                "default": "art-timer.service"
                            },
                            "systemd_timer_name": {
                                "description": "Name of systemd service timer",
                                "type": "string",
                                "default": "art-timer.timer"
                            }
                        },
                        "executor": {
                            "command": "echo \"[Unit]\" > #{path_to_systemd_service}\necho \"Description=Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_service}\necho \"[Service]\" >> #{path_to_systemd_service}\necho \"Type=simple\" >> #{path_to_systemd_service}\necho \"ExecStart=/bin/touch /tmp/art-systemd-timer-marker\" >> #{path_to_systemd_service}\necho \"[Install]\" >> #{path_to_systemd_service}\necho \"WantedBy=multi-user.target\" >> #{path_to_systemd_service}\necho \"[Unit]\" > #{path_to_systemd_timer}\necho \"Description=Executes Atomic Red Team Systemd Timer Service\" >> #{path_to_systemd_timer}\necho \"Requires=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"[Timer]\" >> #{path_to_systemd_timer}\necho \"Unit=#{systemd_service_name}\" >> #{path_to_systemd_timer}\necho \"OnCalendar=*-*-* *:*:00\" >> #{path_to_systemd_timer}\necho \"[Install]\" >> #{path_to_systemd_timer}\necho \"WantedBy=timers.target\" >> #{path_to_systemd_timer}\nsystemctl start #{systemd_timer_name}\nsystemctl enable #{systemd_timer_name}\nsystemctl daemon-reload\n",
                            "cleanup_command": "systemctl stop #{systemd_timer_name}\nsystemctl disable #{systemd_timer_name}\nrm #{path_to_systemd_service}\nrm #{path_to_systemd_timer}\nsystemctl daemon-reload\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Create a user level transient systemd service and timer",
                        "auto_generated_guid": "3de33f5b-62e5-4e63-a2a0-6fd8808c80ec",
                        "description": "Schedule a user level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if systemd-run exists on the machine\n",
                                "prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"
                            }
                        ],
                        "executor": {
                            "elevation_required": false,
                            "command": "systemd-run --user --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
                            "cleanup_command": "systemctl --user stop Atomic-Red-Team.service\nsystemctl --user stop Atomic-Red-Team.timer\nrm /tmp/log\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Create a system level transient systemd service and timer",
                        "auto_generated_guid": "d3eda496-1fc0-49e9-aff5-3bec5da9fa22",
                        "description": "Schedule a system level transient task (will not survive a reboot) without having to create the .timer or .service files by using the systemd-run command. \n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if systemd-run exists on the machine\n",
                                "prereq_command": "if [ -x \"$(command -v systemd-run)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "echo \"Install systemd on the machine.\"; exit 1;\n"
                            }
                        ],
                        "executor": {
                            "elevation_required": true,
                            "command": "systemd-run --unit=Atomic-Red-Team --on-calendar '*:0/1' /bin/sh -c 'echo \"$(date) $(whoami)\" >>/tmp/log'\n",
                            "cleanup_command": "systemctl stop Atomic-Red-Team.service\nsystemctl stop Atomic-Red-Team.timer\nrm /tmp/log\n",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:43:21"
}