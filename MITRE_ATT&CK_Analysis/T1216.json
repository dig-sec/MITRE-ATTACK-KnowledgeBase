{
    "id": "T1216",
    "name": "Signed Script Proxy Execution",
    "description": "Adversaries may use scripts signed with trusted certificates to proxy execution of malicious files. Several Microsoft signed scripts that are default on Windows installations can be used to proxy execution of other files. This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, Command: Command Execution, Script: Script Execution",
    "detection": "Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.",
    "url": "https://attack.mitre.org/techniques/T1216",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1216",
                "atomic_attack_guid": "275d963d-3f36-476c-8bef-a2a3960ee6eb",
                "atomic_attack_name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_wscript_cscript_script_exec.yml",
                        "remote_content": "title: WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript\nid: 1e33157c-53b1-41ad-bbcc-780b80b58288\nrelated:\n    - id: 23250293-eed5-4c39-b57a-841c8933a57d\n      type: obsolete\n    - id: cea72823-df4d-4567-950c-0b579eaf0846\n      type: derived\nstatus: test\ndescription: Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript\nreferences:\n    - https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/\n    - https://redcanary.com/blog/gootloader/\nauthor: Michael Haag\ndate: 2019-01-16\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059.005\n    - attack.t1059.007\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n              - 'wscript.exe'\n              - 'cscript.exe'\n        - Image|endswith:\n              - '\\wscript.exe'\n              - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tuning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_lolbin_syncappvpublishingserver_vbs_execute_psh.yml",
                        "remote_content": "title: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nstatus: test\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n    - https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nauthor: frack113\ndate: 2021-07-16\nmodified: 2022-06-22\ntags:\n    - attack.defense-evasion\n    - attack.t1218\n    - attack.t1216\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - '\\SyncAppvPublishingServer.vbs'\n            - ';'  # at a minimum, a semi-colon is required\n    condition: selection\nfields:\n    - ComputerName\n    - User\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows System Script Proxy Execution Syncappvpublishingserver",
                        "rule_link": "https://research.splunk.com/endpoint/8dd73f89-682d-444c-8b41-8e679966ad3c/"
                    }
                ]
            },
            {
                "tech_id": "T1216",
                "atomic_attack_guid": "2a8f2d3c-3dec-4262-99dd-150cb2a4d63a",
                "atomic_attack_name": "manage-bde.wsf Signed Script Command Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_wscript_cscript_script_exec.yml",
                        "remote_content": "title: WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript\nid: 1e33157c-53b1-41ad-bbcc-780b80b58288\nrelated:\n    - id: 23250293-eed5-4c39-b57a-841c8933a57d\n      type: obsolete\n    - id: cea72823-df4d-4567-950c-0b579eaf0846\n      type: derived\nstatus: test\ndescription: Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript\nreferences:\n    - https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/\n    - https://redcanary.com/blog/gootloader/\nauthor: Michael Haag\ndate: 2019-01-16\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059.005\n    - attack.t1059.007\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n              - 'wscript.exe'\n              - 'cscript.exe'\n        - Image|endswith:\n              - '\\wscript.exe'\n              - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tuning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Calculator Usage",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_calc_uncommon_exec.yml",
                        "remote_content": "title: Suspicious Calculator Usage\nid: 737e618a-a410-49b5-bec3-9e55ff7fbc15\nstatus: test\ndescription: |\n    Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.\nreferences:\n    - https://twitter.com/ItsReallyNick/status/1094080242686312448\nauthor: Florian Roth (Nextron Systems)\ndate: 2019-02-09\nmodified: 2023-11-09\ntags:\n    - attack.defense-evasion\n    - attack.t1036\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        CommandLine|contains: '\\calc.exe '\n    selection_2:\n        Image|endswith: '\\calc.exe'\n    filter_main_known_locations:\n        Image|contains:\n            - ':\\Windows\\System32\\'\n            - ':\\Windows\\SysWOW64\\'\n            - ':\\Windows\\WinSxS\\'\n    condition: selection_1 or ( selection_2 and not filter_main_known_locations )\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "c363385c-f75d-4753-a108-c1a8e28bdbda",
                    "d353dac0-1b41-46c2-820c-d7d2561fc6ed",
                    "4cd29327-685a-460e-9dac-c3ab96e549dc",
                    "1e0e1a81-e79b-44bc-935b-ddb9c8006b3d",
                    "7d4aaec2-08ed-4430-8b96-28420e030e04",
                    "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
                    "51048ba0-a5aa-41e7-bf5d-993cd217dfb2",
                    "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
                    "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                    "0403d67d-6227-4ea8-8145-4e72db7da120",
                    "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                    "39776c99-1c7b-4ba0-b5aa-641525eee1a4",
                    "a0459f02-ac51-4c09-b511-b8c9203fc429",
                    "f588e69b-0750-46bb-8f87-0e9320d57536",
                    "84b14121-9d14-416e-800b-f3b829c5a14d",
                    "18988e1b-9087-4f8a-82fe-0414dce49878",
                    "99465c8f-f102-4157-b11c-b0cddd53b79a",
                    "6609c444-9670-4eab-9636-fe4755a851ce",
                    "074e0ded-6ced-4ebd-8b4d-53f55908119d",
                    "f6fe9070-7a65-49ea-ae72-76292f42cebe"
                ],
                "lookup_results": [
                    {
                        "uuid": "c363385c-f75d-4753-a108-c1a8e28bdbda",
                        "lookup_data": {
                            "description": "Detects usage of the manage-bde.wsf script that may indicate an attempt of proxy execution from script",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/13\ndescription: Detects usage of the manage-bde.wsf script that may indicate an attempt\n  of proxy execution from script\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - cscript\n    - manage-bde.wsf\nfalsepositives:\n- Unknown\nid: c363385c-f75d-4753-a108-c1a8e28bdbda\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/Manage-bde/\n- https://gist.github.com/bohops/735edb7494fe1bd1010d67823842b712\n- https://twitter.com/bohops/status/980659399495741441\n- https://twitter.com/JohnLaTwC/status/1223292479270600706\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Suspicious Usage of the Manage-bde.wsf Script\n",
                            "sigma:id": "c363385c-f75d-4753-a108-c1a8e28bdbda",
                            "title": "Suspicious Usage of the Manage-bde.wsf Script",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d353dac0-1b41-46c2-820c-d7d2561fc6ed",
                        "lookup_data": {
                            "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/06\ndescription: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via\n  winrm.vbs and copied cscript.exe (can be renamed)\ndetection:\n  condition: system_files and not in_system_folder\n  in_system_folder:\n    TargetFilename|startswith:\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWOW64\\\n  system_files:\n    TargetFilename|endswith:\n    - WsmPty.xsl\n    - WsmTxt.xsl\nfalsepositives:\n- Unlikely\nid: d353dac0-1b41-46c2-820c-d7d2561fc6ed\nlevel: medium\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/11/28\nreferences:\n- https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404\nrelated:\n- id: 074e0ded-6ced-4ebd-8b4d-53f55908119\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File\n",
                            "sigma:id": "d353dac0-1b41-46c2-820c-d7d2561fc6ed",
                            "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4cd29327-685a-460e-9dac-c3ab96e549dc",
                        "lookup_data": {
                            "description": "Detects Execution via SyncInvoke in CL_Invocation.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via SyncInvoke in CL_Invocation.ps1 module\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - CL_Invocation.ps1\n    - SyncInvoke\nfalsepositives:\n- Unknown\nid: 4cd29327-685a-460e-9dac-c3ab96e549dc\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/25\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n- https://twitter.com/bohops/status/948061991012327424\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Invocation.ps1 - Powershell\n",
                            "sigma:id": "4cd29327-685a-460e-9dac-c3ab96e549dc",
                            "title": "Execution via CL_Invocation.ps1 - Powershell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1e0e1a81-e79b-44bc-935b-ddb9c8006b3d",
                        "lookup_data": {
                            "description": "Detects the use of a Microsoft signed script to execute commands",
                            "raw": "author: oscd.community, Natalia Shornikova, frack113\ndate: 2022/05/21\ndescription: Detects the use of a Microsoft signed script to execute commands\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - \\CL_Mutexverifiers.ps1\n    - 'runAfterCancelProcess '\nfalsepositives:\n- Unknown\nid: 1e0e1a81-e79b-44bc-935b-ddb9c8006b3d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/28\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/CL_mutexverifiers/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: CL_Mutexverifiers.ps1 Proxy Execution\n",
                            "sigma:id": "1e0e1a81-e79b-44bc-935b-ddb9c8006b3d",
                            "title": "CL_Mutexverifiers.ps1 Proxy Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7d4aaec2-08ed-4430-8b96-28420e030e04",
                        "lookup_data": {
                            "description": "Detects the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects the execution of sigverif binary as a parent process which could\n  indicate it being used as a LOLBIN to proxy execution\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\sigverif.exe\nfalsepositives:\n- Unknown\nid: 7d4aaec2-08ed-4430-8b96-28420e030e04\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.hexacorn.com/blog/2018/04/27/i-shot-the-sigverif-exe-the-gui-based-lolbin/\n- https://twitter.com/0gtweet/status/1457676633809330184\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Suspicious Sigverif Execution\n",
                            "sigma:id": "7d4aaec2-08ed-4430-8b96-28420e030e04",
                            "title": "Suspicious Sigverif Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
                        "lookup_data": {
                            "description": "Detects an attempt to execute code or create service on remote host via winrm.vbs.",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/07\ndescription: Detects an attempt to execute code or create service on remote host via\n  winrm.vbs.\ndetection:\n  condition: all of selection*\n  selection_cli:\n    CommandLine|contains|all:\n    - winrm\n    - invoke Create wmicimv2/Win32_\n    - -r:http\n  selection_img:\n  - Image|endswith: \\cscript.exe\n  - OriginalFileName: cscript.exe\nfalsepositives:\n- Legitimate use for administartive purposes. Unlikely\nid: 9df0dd3a-1a5c-47e3-a2bc-30ed177646a0\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/13\nreferences:\n- https://twitter.com/bohops/status/994405551751815170\n- https://redcanary.com/blog/lateral-movement-winrm-wmi/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Remote Code Execute via Winrm.vbs\n",
                            "sigma:id": "9df0dd3a-1a5c-47e3-a2bc-30ed177646a0",
                            "title": "Remote Code Execute via Winrm.vbs",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "51048ba0-a5aa-41e7-bf5d-993cd217dfb2",
                        "lookup_data": {
                            "mitre-attack-id": "T1216",
                            "mitre-cti:description": "Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application whitelisting configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries.",
                            "mitre-cti:name": "Signed Script Proxy Execution Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--51048ba0-a5aa-41e7-bf5d-993cd217dfb2', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1216', 'external_id': 'T1216'}], 'modified': '2019-07-25T11:45:01.486Z', 'name': 'Signed Script Proxy Execution Mitigation', 'description': 'Certain signed scripts that can be used to execute other programs may not be necessary within a given environment. Use application whitelisting configured to block execution of these scripts if they are not required for a given system or network to prevent potential misuse by adversaries.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
                        "lookup_data": {
                            "description": "Detects the use of a Microsoft signed script to execute commands and bypassing AppLocker.",
                            "raw": "author: frack113\ndate: 2022/05/21\ndescription: Detects the use of a Microsoft signed script to execute commands and\n  bypassing AppLocker.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - \\CL_LoadAssembly.ps1\n    - 'LoadAssemblyFromPath '\nfalsepositives:\n- Unknown\nid: c57872c7-614f-4d7f-a40d-b78c8df2d30d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://bohops.com/2018/01/07/executing-commands-and-bypassing-applocker-with-powershell-diagnostic-scripts/\n- https://lolbas-project.github.io/lolbas/Scripts/CL_LoadAssembly/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: CL_LoadAssembly.ps1 Proxy Execution\n",
                            "sigma:id": "c57872c7-614f-4d7f-a40d-b78c8df2d30d",
                            "title": "CL_LoadAssembly.ps1 Proxy Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                        "lookup_data": {
                            "description": "Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs",
                            "raw": "author: frack113\ndate: 2021/07/16\ndescription: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - \\SyncAppvPublishingServer.vbs\n    - ;\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/22\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1216/T1216.md\n- https://lolbas-project.github.io/lolbas/Binaries/Syncappvpublishingserver/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.t1216\ntitle: SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code\n",
                            "sigma:id": "36475a7d-0f6d-4dce-9b01-6aeb473bbaf1",
                            "title": "SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0403d67d-6227-4ea8-8145-4e72db7da120",
                        "lookup_data": {
                            "description": "Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.",
                            "raw": "author: frack113\ndate: 2022/05/28\ndescription: Detects the use of a Microsoft signed script executing a managed DLL\n  with PowerShell.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - UtilityFunctions.ps1\n    - 'RegSnapin '\nfalsepositives:\n- Unknown\nid: 0403d67d-6227-4ea8-8145-4e72db7da120\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/UtilityFunctions/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: UtilityFunctions.ps1 Proxy Dll\n",
                            "sigma:id": "0403d67d-6227-4ea8-8145-4e72db7da120",
                            "title": "UtilityFunctions.ps1 Proxy Dll",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                        "lookup_data": {
                            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/08\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for\n  testing)\ndetection:\n  cmd_execution:\n    CommandLine|contains|all:\n    - pester\n    - ;\n    Image|endswith: \\cmd.exe\n  condition: powershell_module or (cmd_execution and get_help)\n  get_help:\n    CommandLine|contains:\n    - help\n    - '?'\n  powershell_module:\n    CommandLine|contains|all:\n    - Pester\n    - Get-Help\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Legitimate use of Pester for writing tests for Powershell scripts and modules\nid: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://twitter.com/Oddvarmoe/status/993383596244258816\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1216\ntitle: Execute Code with Pester.bat\n",
                            "sigma:id": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                            "title": "Execute Code with Pester.bat",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "39776c99-1c7b-4ba0-b5aa-641525eee1a4",
                        "lookup_data": {
                            "description": "Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1\n  module\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - CL_Mutexverifiers.ps1\n    - runAfterCancelProcess\nfalsepositives:\n- Unknown\nid: 39776c99-1c7b-4ba0-b5aa-641525eee1a4\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/CL_mutexverifiers/\n- https://twitter.com/pabraeken/status/995111125447577600\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Mutexverifiers.ps1\n",
                            "sigma:id": "39776c99-1c7b-4ba0-b5aa-641525eee1a4",
                            "title": "Execution via CL_Mutexverifiers.ps1",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a0459f02-ac51-4c09-b511-b8c9203fc429",
                        "lookup_data": {
                            "description": "Detects Execution via SyncInvoke in CL_Invocation.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via SyncInvoke in CL_Invocation.ps1 module\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - CL_Invocation.ps1\n    - SyncInvoke\nfalsepositives:\n- Unknown\nid: a0459f02-ac51-4c09-b511-b8c9203fc429\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n- https://twitter.com/bohops/status/948061991012327424\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Invocation.ps1\n",
                            "sigma:id": "a0459f02-ac51-4c09-b511-b8c9203fc429",
                            "title": "Execution via CL_Invocation.ps1",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f588e69b-0750-46bb-8f87-0e9320d57536",
                        "lookup_data": {
                            "description": "Detects Execution via SyncInvoke in CL_Invocation.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via SyncInvoke in CL_Invocation.ps1 module\ndetection:\n  condition: selection | count(ScriptBlockText) by Computer > 2\n  selection:\n    ScriptBlockText|contains:\n    - CL_Invocation.ps1\n    - SyncInvoke\nfalsepositives:\n- Unknown\nid: f588e69b-0750-46bb-8f87-0e9320d57536\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/Cl_invocation/\n- https://twitter.com/bohops/status/948061991012327424\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Invocation.ps1 (2 Lines)\n",
                            "sigma:id": "f588e69b-0750-46bb-8f87-0e9320d57536",
                            "title": "Execution via CL_Invocation.ps1 (2 Lines)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "84b14121-9d14-416e-800b-f3b829c5a14d",
                        "lookup_data": {
                            "description": "Detects the execution of CustomShellHost binary where the child isn't located in 'C:\\Windows\\explorer.exe'",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/19\ndescription: Detects the execution of CustomShellHost binary where the child isn't\n  located in 'C:\\Windows\\explorer.exe'\ndetection:\n  condition: selection and not filter\n  filter:\n    Image: C:\\Windows\\explorer.exe\n  selection:\n    ParentImage|endswith: \\CustomShellHost.exe\nfalsepositives:\n- Unknown\nid: 84b14121-9d14-416e-800b-f3b829c5a14d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/pull/180\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Suspicious CustomShellHost Execution\n",
                            "sigma:id": "84b14121-9d14-416e-800b-f3b829c5a14d",
                            "title": "Suspicious CustomShellHost Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "18988e1b-9087-4f8a-82fe-0414dce49878",
                        "lookup_data": {
                            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
                            "raw": "author: frack113, Nasreddine Bencherchali\ndate: 2022/08/20\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for\n  testing)\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    ParentCommandLine|contains:\n    - '{ Invoke-Pester -EnableExit ;'\n    - '{ Get-Help \"'\n  selection_module:\n    ParentCommandLine|contains: \\WindowsPowerShell\\Modules\\Pester\\\n    ParentImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Legitimate use of Pester for writing tests for Powershell scripts and modules\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/Oddvarmoe/status/993383596244258816\n- https://twitter.com/_st0pp3r_/status/1560072680887525378\nrelated:\n- id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1216\ntitle: Execute Code with Pester.bat as Parent\n",
                            "sigma:id": "18988e1b-9087-4f8a-82fe-0414dce49878",
                            "title": "Execute Code with Pester.bat as Parent",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "99465c8f-f102-4157-b11c-b0cddd53b79a",
                        "lookup_data": {
                            "description": "Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1\n  module\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - CL_Mutexverifiers.ps1\n    - runAfterCancelProcess\nfalsepositives:\n- Unknown\nid: 99465c8f-f102-4157-b11c-b0cddd53b79a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/05/21\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSScripts/CL_mutexverifiers.yml\n- https://twitter.com/pabraeken/status/995111125447577600\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Mutexverifiers.ps1\n",
                            "sigma:id": "99465c8f-f102-4157-b11c-b0cddd53b79a",
                            "title": "Execution via CL_Mutexverifiers.ps1",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6609c444-9670-4eab-9636-fe4755a851ce",
                        "lookup_data": {
                            "description": "Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1 module",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/14\ndescription: Detects Execution via runAfterCancelProcess in CL_Mutexverifiers.ps1\n  module\ndetection:\n  condition: selection | count(ScriptBlockText) by Computer > 2\n  selection:\n    ScriptBlockText|contains:\n    - CL_Mutexverifiers.ps1\n    - runAfterCancelProcess\nfalsepositives:\n- Unknown\nid: 6609c444-9670-4eab-9636-fe4755a851ce\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://lolbas-project.github.io/lolbas/Scripts/CL_mutexverifiers/\n- https://twitter.com/pabraeken/status/995111125447577600\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: Execution via CL_Mutexverifiers.ps1 (2 Lines)\n",
                            "sigma:id": "6609c444-9670-4eab-9636-fe4755a851ce",
                            "title": "Execution via CL_Mutexverifiers.ps1 (2 Lines)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "074e0ded-6ced-4ebd-8b4d-53f55908119d",
                        "lookup_data": {
                            "description": "Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/06\ndescription: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via\n  winrm.vbs and copied cscript.exe (can be renamed)\ndetection:\n  condition: contains_winrm and (contains_format_pretty_arg and not image_from_system_folder)\n  contains_format_pretty_arg:\n    CommandLine|contains:\n    - format:pretty\n    - format:\"pretty\"\n    - format:\"text\"\n    - format:text\n  contains_winrm:\n    CommandLine|contains: winrm\n  image_from_system_folder:\n    Image|startswith:\n    - C:\\Windows\\System32\\\n    - C:\\Windows\\SysWOW64\\\nfalsepositives:\n- Unlikely\nid: 074e0ded-6ced-4ebd-8b4d-53f55908119d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://posts.specterops.io/application-whitelisting-bypass-and-arbitrary-unsigned-code-execution-technique-in-winrm-vbs-c8c24fb40404\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1216\ntitle: AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl\n",
                            "sigma:id": "074e0ded-6ced-4ebd-8b4d-53f55908119d",
                            "title": "AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f6fe9070-7a65-49ea-ae72-76292f42cebe",
                        "lookup_data": {
                            "mitre-attack-id": "T1216",
                            "mitre-cti:description": "Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)",
                            "mitre-cti:name": "System Script Proxy Execution",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Praetorian', 'Wes Hurd'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--f6fe9070-7a65-49ea-ae72-76292f42cebe', 'created': '2018-04-18T17:59:24.739Z', 'x_mitre_version': '2.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1216', 'url': 'https://attack.mitre.org/techniques/T1216'}, {'source_name': 'GitHub Ultimate AppLocker Bypass List', 'url': 'https://github.com/api0cradle/UltimateAppLockerByPassList', 'description': 'Moe, O. (2018, March 1). Ultimate AppLocker Bypass List. Retrieved April 10, 2018.'}, {'source_name': 'LOLBAS Project', 'url': 'https://github.com/LOLBAS-Project/LOLBAS#criteria', 'description': 'Oddvar Moe et al. (2022, February).  Living Off The Land Binaries, Scripts and Libraries. Retrieved March 7, 2022.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may use trusted scripts, often signed with certificates, to proxy the execution of malicious files. Several Microsoft signed scripts that have been downloaded from Microsoft or are default on Windows installations can be used to proxy execution of other files.(Citation: LOLBAS Project) This behavior may be abused by adversaries to execute malicious files that could bypass application control and signature validation on systems.(Citation: GitHub Ultimate AppLocker Bypass List)', 'modified': '2022-04-18T14:43:46.045Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'System Script Proxy Execution', 'x_mitre_detection': 'Monitor script processes, such as `cscript`, and command-line parameters for scripts like PubPrn.vbs that may be used to proxy execution of malicious files.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Command: Command Execution', 'Script: Script Execution', 'Process: Process Creation'], 'x_mitre_defense_bypassed': ['Application control', 'Digital Certificate Validation'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1216",
                "display_name": "Signed Script Proxy Execution",
                "atomic_tests": [
                    {
                        "name": "SyncAppvPublishingServer Signed Script PowerShell Command Execution",
                        "auto_generated_guid": "275d963d-3f36-476c-8bef-a2a3960ee6eb",
                        "description": "Executes the signed SyncAppvPublishingServer script with options to execute an arbitrary PowerShell command.\nUpon execution, calc.exe will be launched.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "command_to_execute": {
                                "description": "A PowerShell command to execute.",
                                "type": "string",
                                "default": "Start-Process calc"
                            }
                        },
                        "executor": {
                            "command": "C:\\windows\\system32\\SyncAppvPublishingServer.vbs \"\\n;#{command_to_execute}\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "manage-bde.wsf Signed Script Command Execution",
                        "auto_generated_guid": "2a8f2d3c-3dec-4262-99dd-150cb2a4d63a",
                        "description": "Executes the signed manage-bde.wsf script with options to execute an arbitrary command.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "command_to_execute": {
                                "description": "A command to execute.",
                                "type": "path",
                                "default": "%windir%\\System32\\calc.exe"
                            }
                        },
                        "executor": {
                            "command": "set comspec=#{command_to_execute}\ncscript %windir%\\System32\\manage-bde.wsf\n",
                            "cleanup_command": "set comspec=%windir%\\System32\\cmd.exe\n",
                            "name": "command_prompt"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:07:35"
}