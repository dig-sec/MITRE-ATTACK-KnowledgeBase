{
    "id": "T1222.001",
    "name": "Windows File and Directory Permissions Modification",
    "description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](T1059.001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](T1546.008), [Boot or Logon Initialization Scripts](T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](T1574).",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, Command: Command Execution, Active Directory: Active Directory Object Modification, File: File Metadata",
    "detection": "Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)",
    "url": "https://attack.mitre.org/techniques/T1222/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1222.001",
                "atomic_attack_guid": "ac7e6118-473d-41ec-9ac0-ef4f1d1ed2f6",
                "atomic_attack_name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "File or Folder Permissions Modifications",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_susp_file_permission_modifications.yml",
                        "remote_content": "title: File or Folder Permissions Modifications\nid: 37ae075c-271b-459b-8d7b-55ad5f993dd8\nstatus: test\ndescription: Detects a file or folder's permissions being modified or tampered with.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md\n    - https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh750728(v=ws.11)\n    - https://github.com/swagkarna/Defeat-Defender-V1.2.0\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-23\nmodified: 2023-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\cacls.exe'\n            - '\\icacls.exe'\n            - '\\net.exe' # \"grant\" Option available when used with \"net share\"\n            - '\\net1.exe' # \"grant\" Option available when used with \"net share\"\n        CommandLine|contains:\n            - '/grant'\n            - '/setowner'\n            - '/inheritance:r' # Remove all inherited ACEs\n    selection_2:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains: '-r'\n    selection_3:\n        Image|endswith: '\\takeown.exe' # If this generates FP in your environment. Comment it out or add more suspicious flags and locations\n    filter_optional_dynatrace_1:\n        CommandLine|endswith: 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset'\n    filter_optional_dynatrace_2:\n        CommandLine|contains|all:\n            - 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r '\n            - 'S-1-5-19:F'\n    filter_optional_vscode:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Programs\\Microsoft VS Code'\n            - ':\\Program Files\\Microsoft VS Code'\n    filter_optional_avira:\n        CommandLine|contains:\n            - ':\\Program Files (x86)\\Avira'\n            - ':\\Program Files\\Avira'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Users interacting with the files on their own (unlikely unless privileged users).\n    - Dynatrace app\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1222.001",
                "atomic_attack_guid": "32b979da-7b68-42c9-9a99-0e39900fc36c",
                "atomic_attack_name": "attrib - hide file",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Potentially Suspicious CMD Shell Output Redirect",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_cmd_redirection_susp_folder.yml",
                        "remote_content": "title: Potentially Suspicious CMD Shell Output Redirect\nid: 8e0bb260-d4b2-4fff-bb8d-3f82118e6892\nrelated:\n    - id: aa2efee7-34dd-446e-8a37-40790a66efd7\n      type: derived\n    - id: 4f4eaa9f-5ad4-410c-a4be-bc6132b0175a\n      type: similar\nstatus: test\ndescription: |\n    Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.\n    This technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.\nreferences:\n    - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-12\nmodified: 2024-03-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli_1:\n        CommandLine|contains:\n            # Note: Add more suspicious locations as you find them\n            # Note: The space from the start is missing to cover append operations \">>\"\n            # Note: We use the \"?\" to account for both a single and a double quote\n            # Note: If you want to account for more spaces which is still a valid bypass option. Use a regex with \"\\s\"\n            - '>?%APPDATA%\\'\n            - '>?%TEMP%\\'\n            - '>?%TMP%\\'\n            - '>?%USERPROFILE%\\'\n            - '>?C:\\ProgramData\\'\n            - '>?C:\\Temp\\'\n            - '>?C:\\Users\\Public\\'\n            - '>?C:\\Windows\\Temp\\'\n    selection_cli_2:\n        CommandLine|contains:\n            - ' >'\n            - '\">'\n            - \"'>\"\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate admin or third party scripts used for diagnostic collection might generate some false positives\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1222.001",
                "atomic_attack_guid": "bec1e95c-83aa-492e-ab77-60c71bbd21b0",
                "atomic_attack_name": "attrib - Remove read-only attribute",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "File or Folder Permissions Modifications",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_susp_file_permission_modifications.yml",
                        "remote_content": "title: File or Folder Permissions Modifications\nid: 37ae075c-271b-459b-8d7b-55ad5f993dd8\nstatus: test\ndescription: Detects a file or folder's permissions being modified or tampered with.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md\n    - https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh750728(v=ws.11)\n    - https://github.com/swagkarna/Defeat-Defender-V1.2.0\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-23\nmodified: 2023-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\cacls.exe'\n            - '\\icacls.exe'\n            - '\\net.exe' # \"grant\" Option available when used with \"net share\"\n            - '\\net1.exe' # \"grant\" Option available when used with \"net share\"\n        CommandLine|contains:\n            - '/grant'\n            - '/setowner'\n            - '/inheritance:r' # Remove all inherited ACEs\n    selection_2:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains: '-r'\n    selection_3:\n        Image|endswith: '\\takeown.exe' # If this generates FP in your environment. Comment it out or add more suspicious flags and locations\n    filter_optional_dynatrace_1:\n        CommandLine|endswith: 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset'\n    filter_optional_dynatrace_2:\n        CommandLine|contains|all:\n            - 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r '\n            - 'S-1-5-19:F'\n    filter_optional_vscode:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Programs\\Microsoft VS Code'\n            - ':\\Program Files\\Microsoft VS Code'\n    filter_optional_avira:\n        CommandLine|contains:\n            - ':\\Program Files (x86)\\Avira'\n            - ':\\Program Files\\Avira'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Users interacting with the files on their own (unlikely unless privileged users).\n    - Dynatrace app\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1222.001",
                "atomic_attack_guid": "a8206bcc-f282-40a9-a389-05d9c0263485",
                "atomic_attack_name": "cacls - Grant permission to specified user or group recursively",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "File or Folder Permissions Modifications",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_susp_file_permission_modifications.yml",
                        "remote_content": "title: File or Folder Permissions Modifications\nid: 37ae075c-271b-459b-8d7b-55ad5f993dd8\nstatus: test\ndescription: Detects a file or folder's permissions being modified or tampered with.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md\n    - https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh750728(v=ws.11)\n    - https://github.com/swagkarna/Defeat-Defender-V1.2.0\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-23\nmodified: 2023-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\cacls.exe'\n            - '\\icacls.exe'\n            - '\\net.exe' # \"grant\" Option available when used with \"net share\"\n            - '\\net1.exe' # \"grant\" Option available when used with \"net share\"\n        CommandLine|contains:\n            - '/grant'\n            - '/setowner'\n            - '/inheritance:r' # Remove all inherited ACEs\n    selection_2:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains: '-r'\n    selection_3:\n        Image|endswith: '\\takeown.exe' # If this generates FP in your environment. Comment it out or add more suspicious flags and locations\n    filter_optional_dynatrace_1:\n        CommandLine|endswith: 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset'\n    filter_optional_dynatrace_2:\n        CommandLine|contains|all:\n            - 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r '\n            - 'S-1-5-19:F'\n    filter_optional_vscode:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Programs\\Microsoft VS Code'\n            - ':\\Program Files\\Microsoft VS Code'\n    filter_optional_avira:\n        CommandLine|contains:\n            - ':\\Program Files (x86)\\Avira'\n            - ':\\Program Files\\Avira'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Users interacting with the files on their own (unlikely unless privileged users).\n    - Dynatrace app\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1222.001",
                "atomic_attack_guid": "98d34bb4-6e75-42ad-9c41-1dae7dc6a001",
                "atomic_attack_name": "Take ownership using takeown utility",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Recursive Takeown",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_takeown_recursive_own.yml",
                        "remote_content": "title: Suspicious Recursive Takeown\nid: 554601fb-9b71-4bcc-abf4-21a611be4fde\nstatus: test\ndescription: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders\nreferences:\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/takeown\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md#atomic-test-1---take-ownership-using-takeown-utility\nauthor: frack113\ndate: 2022-01-30\nmodified: 2022-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\takeown.exe'\n        CommandLine|contains|all:\n            - '/f '\n            - '/r'\n    condition: selection\nfields:\n    - CommandLine\n    - ParentCommandLine\nfalsepositives:\n    - Scripts created by developers and admins\n    - Administrative activity\nlevel: medium\n"
                    },
                    {
                        "rule_name": "File or Folder Permissions Modifications",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_susp_file_permission_modifications.yml",
                        "remote_content": "title: File or Folder Permissions Modifications\nid: 37ae075c-271b-459b-8d7b-55ad5f993dd8\nstatus: test\ndescription: Detects a file or folder's permissions being modified or tampered with.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md\n    - https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh750728(v=ws.11)\n    - https://github.com/swagkarna/Defeat-Defender-V1.2.0\nauthor: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019-10-23\nmodified: 2023-11-21\ntags:\n    - attack.defense-evasion\n    - attack.t1222.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_1:\n        Image|endswith:\n            - '\\cacls.exe'\n            - '\\icacls.exe'\n            - '\\net.exe' # \"grant\" Option available when used with \"net share\"\n            - '\\net1.exe' # \"grant\" Option available when used with \"net share\"\n        CommandLine|contains:\n            - '/grant'\n            - '/setowner'\n            - '/inheritance:r' # Remove all inherited ACEs\n    selection_2:\n        Image|endswith: '\\attrib.exe'\n        CommandLine|contains: '-r'\n    selection_3:\n        Image|endswith: '\\takeown.exe' # If this generates FP in your environment. Comment it out or add more suspicious flags and locations\n    filter_optional_dynatrace_1:\n        CommandLine|endswith: 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history /reset'\n    filter_optional_dynatrace_2:\n        CommandLine|contains|all:\n            - 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r '\n            - 'S-1-5-19:F'\n    filter_optional_vscode:\n        CommandLine|contains:\n            - '\\AppData\\Local\\Programs\\Microsoft VS Code'\n            - ':\\Program Files\\Microsoft VS Code'\n    filter_optional_avira:\n        CommandLine|contains:\n            - ':\\Program Files (x86)\\Avira'\n            - ':\\Program Files\\Avira'\n    condition: 1 of selection_* and not 1 of filter_optional_*\nfalsepositives:\n    - Users interacting with the files on their own (unlikely unless privileged users).\n    - Dynatrace app\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "34e793de-0274-4982-9c1a-246ed1c19dee",
                    "41d40bff-377a-43e2-8e1b-2e543069e079",
                    "37ae075c-271b-459b-8d7b-55ad5f993dd8",
                    "554601fb-9b71-4bcc-abf4-21a611be4fde",
                    "028c7842-4243-41cd-be6f-12f3cf1a26c7"
                ],
                "lookup_results": [
                    {
                        "uuid": "34e793de-0274-4982-9c1a-246ed1c19dee",
                        "lookup_data": {
                            "mitre-attack-id": "T1222.001",
                            "mitre-cti:description": "Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\n\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\n\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).",
                            "mitre-cti:name": "Windows File and Directory Permissions Modification",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--34e793de-0274-4982-9c1a-246ed1c19dee', 'type': 'attack-pattern', 'created': '2020-02-04T19:17:41.767Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1222.001', 'url': 'https://attack.mitre.org/techniques/T1222/001'}, {'url': 'https://www.hybrid-analysis.com/sample/ef0d2628823e8e0a0de3b08b8eacaf41cf284c086a948bdfd67f4e4373c14e4d?environmentId=100', 'description': 'Hybrid Analysis. (2018, June 12). c9b65b764985dfd7a11d3faf599c56b8.exe. Retrieved August 19, 2018.', 'source_name': 'Hybrid Analysis Icacls1 June 2018'}, {'url': 'https://www.hybrid-analysis.com/sample/22dab012c3e20e3d9291bce14a2bfc448036d3b966c6e78167f4626f5f9e38d6?environmentId=110', 'description': 'Hybrid Analysis. (2018, May 30). 2a8efbfadd798f6111340f7c1c956bee.dll. Retrieved August 19, 2018.', 'source_name': 'Hybrid Analysis Icacls2 May 2018'}, {'url': 'https://docs.microsoft.com/windows/desktop/secauthz/dacls-and-aces', 'description': 'Microsoft. (2018, May 30). DACLs and ACEs. Retrieved August 19, 2018.', 'source_name': 'Microsoft DACL May 2018'}, {'source_name': 'Microsoft Access Control Lists May 2018', 'url': 'https://docs.microsoft.com/en-us/windows/win32/secauthz/access-control-lists', 'description': 'M. Satran, M. Jacobs. (2018, May 30). Access Control Lists. Retrieved February 4, 2020.'}, {'url': 'https://www.eventtracker.com/tech-articles/monitoring-file-permission-changes-windows-security-log/', 'description': 'Netsurion. (2014, February 19). Monitoring File Permission Changes with the Windows Security Log. Retrieved August 19, 2018.', 'source_name': 'EventTracker File Permissions Feb 2014'}], 'modified': '2020-09-01T20:05:05.268Z', 'name': 'Windows File and Directory Permissions Modification', 'description': 'Adversaries may modify file or directory permissions/attributes to evade access control lists (ACLs) and access protected files.(Citation: Hybrid Analysis Icacls1 June 2018)(Citation: Hybrid Analysis Icacls2 May 2018) File and directory permissions are commonly managed by ACLs configured by the file or directory owner, or users with the appropriate permissions. File and directory ACL implementations vary by platform, but generally explicitly designate which users or groups can perform which actions (read, write, execute, etc.).\\n\\nWindows implements file and directory ACLs as Discretionary Access Control Lists (DACLs).(Citation: Microsoft DACL May 2018) Similar to a standard ACL, DACLs identifies the accounts that are allowed or denied access to a securable object. When an attempt is made to access a securable object, the system checks the access control entries in the DACL in order. If a matching entry is found, access to the object is granted. Otherwise, access is denied.(Citation: Microsoft Access Control Lists May 2018)\\n\\nAdversaries can interact with the DACLs using built-in Windows commands, such as `icacls`, `cacls`, `takeown`, and `attrib`, which can grant adversaries higher permissions on specific files and folders. Further, [PowerShell](https://attack.mitre.org/techniques/T1059/001) provides cmdlets that can be used to retrieve or modify file and directory DACLs. Specific file and directory modifications may be a required step for many techniques, such as establishing Persistence via [Accessibility Features](https://attack.mitre.org/techniques/T1546/008), [Boot or Logon Initialization Scripts](https://attack.mitre.org/techniques/T1037), or tainting/hijacking other instrumental binary/configuration files via [Hijack Execution Flow](https://attack.mitre.org/techniques/T1574).', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Monitor and investigate attempts to modify DACLs and file/directory ownership. Many of the commands used to modify DACLs and file/directory ownership are built-in system utilities and may generate a high false positive alert rate, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible.\\n\\nConsider enabling file/directory permission change auditing on folders containing key binary/configuration files. For example, Windows Security Log events (Event ID 4670) are created when DACLs are modified.(Citation: EventTracker File Permissions Feb 2014)', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Active Directory: Active Directory Object Modification', 'File: File Metadata', 'Process: Process Creation', 'Command: Command Execution'], 'x_mitre_permissions_required': ['User', 'Administrator', 'SYSTEM']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "41d40bff-377a-43e2-8e1b-2e543069e079",
                        "lookup_data": {
                            "description": "Detects WannaCry ransomware activity",
                            "raw": "author: Florian Roth (Nextron Systems), Tom U. @c_APT_ure (collection), oscd.community,\n  Jonhnathan Ribeiro\ndate: 2019/01/16\ndescription: Detects WannaCry ransomware activity\ndetection:\n  condition: 1 of selection*\n  selection1:\n  - Image|endswith:\n    - \\tasksche.exe\n    - \\mssecsvc.exe\n    - \\taskdl.exe\n    - \\taskhsvc.exe\n    - \\taskse.exe\n    - \\111.exe\n    - \\lhdfrgui.exe\n    - \\linuxnew.exe\n    - \\wannacry.exe\n  - Image|contains: WanaDecryptor\n  selection2:\n  - CommandLine|contains|all:\n    - icacls\n    - /grant\n    - Everyone:F\n    - /T\n    - /C\n    - /Q\n  - CommandLine|contains|all:\n    - bcdedit\n    - /set\n    - '{default}'\n    - recoveryenabled\n    - 'no'\n  - CommandLine|contains|all:\n    - wbadmin\n    - delete\n    - catalog\n    - -quiet\n  - CommandLine|contains: '@Please_Read_Me@.txt'\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 41d40bff-377a-43e2-8e1b-2e543069e079\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/02/24\nreferences:\n- https://www.hybrid-analysis.com/sample/ed01ebfbc9eb5bbea545af4d01bf5f1071661840480439c6e5babe8e080e41aa?environmentId=100\nstatus: test\ntags:\n- attack.lateral_movement\n- attack.t1210\n- attack.discovery\n- attack.t1083\n- attack.defense_evasion\n- attack.t1222.001\n- attack.impact\n- attack.t1486\n- attack.t1490\ntitle: WannaCry Ransomware\n",
                            "sigma:id": "41d40bff-377a-43e2-8e1b-2e543069e079",
                            "title": "WannaCry Ransomware",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "37ae075c-271b-459b-8d7b-55ad5f993dd8",
                        "lookup_data": {
                            "description": "Detects a file or folder's permissions being modified or tampered with.",
                            "raw": "author: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali\ndate: 2019/10/23\ndescription: Detects a file or folder's permissions being modified or tampered with.\ndetection:\n  condition: 1 of selection* and not 1 of filter*\n  filter_grant:\n    CommandLine|contains|all:\n    - 'ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\config.properties /grant :r '\n    - S-1-5-19:F\n  filter_programs:\n  - CommandLine|contains: \\AppData\\Local\\Programs\\Microsoft VS Code\n  - ParentImage|endswith: \\Microsoft VS Code\\Code.exe\n  filter_reset:\n    CommandLine|endswith: ICACLS C:\\ProgramData\\dynatrace\\gateway\\config\\connectivity.history\n      /reset\n  selection1:\n    CommandLine|contains:\n    - /grant\n    - /setowner\n    - /inheritance:r\n    Image|endswith:\n    - \\cacls.exe\n    - \\icacls.exe\n    - \\net.exe\n    - \\net1.exe\n  selection2:\n    CommandLine|contains: -r\n    Image|endswith: \\attrib.exe\n  selection3:\n    Image|endswith: \\takeown.exe\nfalsepositives:\n- Users interacting with the files on their own (unlikely unless privileged users).\n- Dynatrace app\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 37ae075c-271b-459b-8d7b-55ad5f993dd8\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/18\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md\n- https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/hh750728(v=ws.11)\n- https://github.com/swagkarna/Defeat-Defender-V1.2.0\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1222.001\ntitle: File or Folder Permissions Modifications\n",
                            "sigma:id": "37ae075c-271b-459b-8d7b-55ad5f993dd8",
                            "title": "File or Folder Permissions Modifications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "554601fb-9b71-4bcc-abf4-21a611be4fde",
                        "lookup_data": {
                            "description": "Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders",
                            "raw": "author: frack113\ndate: 2022/01/30\ndescription: Adversaries can interact with the DACLs using built-in Windows commands\n  takeown which can grant adversaries higher permissions on specific files and folders\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - '/f '\n    - /r\n    Image|endswith: \\takeown.exe\nfalsepositives:\n- Scripts created by developers and admins\n- Administrative activity\nfields:\n- CommandLine\n- ParentCommandLine\nid: 554601fb-9b71-4bcc-abf4-21a611be4fde\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/21\nreferences:\n- https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/takeown\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1222.001/T1222.001.md#atomic-test-1---take-ownership-using-takeown-utility\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1222.001\ntitle: Suspicious Recursive Takeown\n",
                            "sigma:id": "554601fb-9b71-4bcc-abf4-21a611be4fde",
                            "title": "Suspicious Recursive Takeown",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "028c7842-4243-41cd-be6f-12f3cf1a26c7",
                        "lookup_data": {
                            "description": "Detects WRITE_DAC access to a domain object",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects WRITE_DAC access to a domain object\ndetection:\n  condition: selection\n  selection:\n    AccessMask: '0x40000'\n    EventID: 4662\n    ObjectServer: DS\n    ObjectType:\n    - 19195a5b-6da0-11d0-afd3-00c04fd930c9\n    - domainDNS\nfalsepositives:\n- Unknown\nid: 028c7842-4243-41cd-be6f-12f3cf1a26c7\nlevel: critical\nlogsource:\n  product: windows\n  service: security\nmodified: 2021/11/27\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/05_defense_evasion/WIN-190101151110.html\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1222.001\ntitle: AD Object WriteDAC Access\n",
                            "sigma:id": "028c7842-4243-41cd-be6f-12f3cf1a26c7",
                            "title": "AD Object WriteDAC Access",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1222.001",
                "display_name": "File and Directory Permissions Modification: Windows File and Directory Permissions Modification",
                "atomic_tests": [
                    {
                        "name": "Take ownership using takeown utility",
                        "auto_generated_guid": "98d34bb4-6e75-42ad-9c41-1dae7dc6a001",
                        "description": "Modifies the filesystem permissions of the specified file or folder to take ownership of the object. Upon execution, \"SUCCESS\" will\nbe displayed for the folder and each file inside of it.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "file_folder_to_own": {
                                "description": "Path of the file or folder for takeown to take ownership.",
                                "type": "path",
                                "default": "%temp%\\T1222.001_takeown_folder"
                            }
                        },
                        "dependency_executor_name": "command_prompt",
                        "dependencies": [
                            {
                                "description": "Test requrires a file to take ownership of to be located at (#{file_folder_to_own})\n",
                                "prereq_command": "IF EXIST #{file_folder_to_own} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
                                "get_prereq_command": "mkdir #{file_folder_to_own}\necho T1222.001_takeown1 >> #{file_folder_to_own}\\T1222.001_takeown1.txt\necho T1222.001_takeown2 >> #{file_folder_to_own}\\T1222.001_takeown2.txt\n"
                            }
                        ],
                        "executor": {
                            "command": "takeown.exe /f #{file_folder_to_own} /r\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "cacls - Grant permission to specified user or group recursively",
                        "auto_generated_guid": "a8206bcc-f282-40a9-a389-05d9c0263485",
                        "description": "Modifies the filesystem permissions of the specified folder and contents to allow the specified user or group Full Control. If \"Access is denied\"\nis displayed it may be because the file or folder doesn't exit. Run the prereq command to create it. Upon successfull execution, \"Successfully processed 3 files\"\nwill be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "file_or_folder": {
                                "description": "Path of the file or folder to change permissions.",
                                "type": "path",
                                "default": "%temp%\\T1222.001_cacls"
                            },
                            "user_or_group": {
                                "description": "User or group to allow full control",
                                "type": "string",
                                "default": "Everyone"
                            }
                        },
                        "dependency_executor_name": "command_prompt",
                        "dependencies": [
                            {
                                "description": "Test requrires a file to modify to be located at (#{file_or_folder})\n",
                                "prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
                                "get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_cacls1 >> #{file_or_folder}\\T1222.001_cacls1.txt\necho T1222.001_cacls2 >> #{file_or_folder}\\T1222.001_cacls2.txt\n"
                            }
                        ],
                        "executor": {
                            "command": "icacls.exe #{file_or_folder} /grant #{user_or_group}:F\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "attrib - Remove read-only attribute",
                        "auto_generated_guid": "bec1e95c-83aa-492e-ab77-60c71bbd21b0",
                        "description": "Removes the read-only attribute from a file or folder using the attrib.exe command. Upon execution, no output will be displayed.\nOpen the file in File Explorer > Right Click - Prperties and observe that the Read Only checkbox is empty.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "file_or_folder": {
                                "description": "Path of the file or folder remove attribute.",
                                "type": "path",
                                "default": "%temp%\\T1222.001_attrib"
                            }
                        },
                        "dependency_executor_name": "command_prompt",
                        "dependencies": [
                            {
                                "description": "Test requrires a file to modify to be located at (#{file_or_folder})\n",
                                "prereq_command": "IF EXIST #{file_or_folder} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
                                "get_prereq_command": "mkdir #{file_or_folder}\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +r #{file_or_folder}\\T1222.001_attrib2.txt\n"
                            }
                        ],
                        "executor": {
                            "command": "attrib.exe -r #{file_or_folder}\\*.* /s\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "attrib - hide file",
                        "auto_generated_guid": "32b979da-7b68-42c9-9a99-0e39900fc36c",
                        "description": "Attackers leverage an existing Windows binary, attrib.exe, to mark specific files or folder as hidden by using specific flags so that\nthe victim does not see the file.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "file_or_folder": {
                                "description": "Path of the files to hide.",
                                "type": "path",
                                "default": "%temp%\\T1222.001_attrib_2"
                            }
                        },
                        "executor": {
                            "command": "mkdir #{file_or_folder} >nul 2>&1\necho T1222.001_attrib1 >> #{file_or_folder}\\T1222.001_attrib1.txt\necho T1222.001_attrib2 >> #{file_or_folder}\\T1222.001_attrib2.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib1.txt\nattrib.exe +h #{file_or_folder}\\T1222.001_attrib2.txt\n",
                            "cleanup_command": "del /A:H #{file_or_folder}\\T1222.001_attrib*.txt >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Grant Full Access to folder for Everyone - Ryuk Ransomware Style",
                        "auto_generated_guid": "ac7e6118-473d-41ec-9ac0-ef4f1d1ed2f6",
                        "description": "Invokes the command line similar to that used by Ryuk Ransomware to grant full access to the entire C:\\ drive for Everyone.\n**icacls \"C:\\*\" /grant Everyone:F /T /C /Q**\nHowever, for this atomic we set the permission on C:\\Users\\Public so it completes faster and doesn't irreversibly affect the host.\nYou can set your own path variable to \"C:\\*\" if you prefer.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "path": {
                                "description": "Path of folder to recursively set permissions on",
                                "type": "path",
                                "default": "C:\\Users\\Public\\*"
                            },
                            "file_path": {
                                "description": "Path of folder permission back",
                                "type": "path",
                                "default": "%temp%\\T1222.001-folder-perms-backup.txt"
                            }
                        },
                        "dependency_executor_name": "command_prompt",
                        "dependencies": [
                            {
                                "description": "Backup of original folder permissions should exist (for use in cleanup commands)\n",
                                "prereq_command": "IF EXIST #{file_path} ( EXIT 0 ) ELSE ( EXIT 1 )\n",
                                "get_prereq_command": "icacls #{path} /save #{file_path} /t /q >nul 2>&1\n"
                            }
                        ],
                        "executor": {
                            "command": "icacls \"#{path}\" /grant Everyone:F /T /C /Q",
                            "cleanup_command": "icacls '#{path}' /restore #{file_path} /q >nul 2>&1\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "SubInAcl Execution",
                        "auto_generated_guid": "a8568b10-9ab9-4140-a523-1c72e0176924",
                        "description": "This test simulates an adversary executing the Windows Resource kit utility SubInAcl. This utility was abused by adversaries in the past in order to modify access permissions. Upon execution, a process creation log should be generated indicating successful execution.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "SubInAclDownloadPath": {
                                "type": "string",
                                "default": "https://web.archive.org/web/20120528222424if_/http://download.microsoft.com/download/1/7/d/17d82b72-bc6a-4dc8-bfaa-98b37b22b367/subinacl.msi",
                                "description": "Download URL for SubInAcl"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Download subinacl\n",
                                "prereq_command": "if (Test-Path \"Test-Path C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Path C:\\Users\\Public\\SubInAcl -ItemType Directory | Out-Null\nInvoke-WebRequest #{SubInAclDownloadPath} -OutFile C:\\Users\\Public\\SubInAcl\\SubInAcl.msi\nmsiexec.exe /i \"C:\\Users\\Public\\SubInAcl\\SubInAcl.msi\" /qn"
                            }
                        ],
                        "executor": {
                            "command": "\"C:\\Program Files (x86)\\Windows Resource Kits\\Tools\\subinacl.exe\"",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:27:05"
}