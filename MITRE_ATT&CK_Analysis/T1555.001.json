{
    "id": "T1555.001",
    "name": "Keychain",
    "description": "Adversaries may collect the keychain storage data from a system to acquire credentials. Keychains are the built-in way for macOS to keep track of users' passwords and credentials for many services and features such as WiFi passwords, websites, secure notes, certificates, and Kerberos. Keychain files are located in `~/Library/Keychains/`,`/Library/Keychains/`, and `/Network/Library/Keychains/`. (Citation: Wikipedia keychain) The `security` command-line utility, which is built into macOS by default, provides a useful way to manage these credentials.\nTo manage their credentials, users have to use additional credentials to access their keychain. If an adversary knows the credentials for the login keychain, then they can get access to all the other credentials stored in this vault. (Citation: External to DA, the OS X Way) By default, the passphrase for the keychain is the user’s logon credentials.",
    "platforms": "macOS",
    "kill_chain_phases": "Credential Access",
    "data_sources": "Command: Command Execution, Process: OS API Execution, File: File Access",
    "detection": "Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.",
    "url": "https://attack.mitre.org/techniques/T1555/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "1eaebf46-e361-4437-bc23-d5d65a3b92e3",
                    "b120b587-a4c2-4b94-875d-99c9807d6955"
                ],
                "lookup_results": [
                    {
                        "uuid": "1eaebf46-e361-4437-bc23-d5d65a3b92e3",
                        "lookup_data": {
                            "mitre-attack-id": "T1555.001",
                            "mitre-cti:description": "Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. \n\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\n\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain –d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  ",
                            "mitre-cti:name": "Keychain",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['macOS'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--1eaebf46-e361-4437-bc23-d5d65a3b92e3', 'created': '2020-02-12T18:55:24.728Z', 'x_mitre_version': '1.1', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1555.001', 'url': 'https://attack.mitre.org/techniques/T1555/001'}, {'source_name': 'External to DA, the OS X Way', 'url': 'http://www.slideshare.net/StephanBorosh/external-to-da-the-os-x-way', 'description': 'Alex Rymdeko-Harvey, Steve Borosh. (2016, May 14). External to DA, the OS X Way. Retrieved July 3, 2017.'}, {'source_name': 'Keychain Services Apple', 'url': 'https://developer.apple.com/documentation/security/keychain_services', 'description': 'Apple. (n.d.). Keychain Services. Retrieved April 11, 2022.'}, {'source_name': 'Empire Keychain Decrypt', 'url': 'https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/python/collection/osx/keychaindump_decrypt.py', 'description': 'Empire. (2018, March 8). Empire keychaindump_decrypt Module. Retrieved April 14, 2022.'}, {'source_name': 'OSX Keychain Schaumann', 'url': 'https://www.netmeister.org/blog/keychain-passwords.html', 'description': 'Jan Schaumann. (2015, November 5). Using the OS X Keychain to store and retrieve passwords. Retrieved March 31, 2022.'}, {'source_name': 'Keychain Decryption Passware', 'url': 'https://support.passware.com/hc/en-us/articles/4573379868567-A-Deep-Dive-into-Apple-Keychain-Decryption', 'description': 'Yana Gourenko. (n.d.). A Deep Dive into Apple Keychain Decryption. Retrieved April 13, 2022.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may acquire credentials from Keychain. Keychain (or Keychain Services) is the macOS credential management system that stores account names, passwords, private keys, certificates, sensitive application data, payment data, and secure notes. There are three types of Keychains: Login Keychain, System Keychain, and Local Items (iCloud) Keychain. The default Keychain is the Login Keychain, which stores user passwords and information. The System Keychain stores items accessed by the operating system, such as items shared among users on a host. The Local Items (iCloud) Keychain is used for items synced with Apple’s iCloud service. \\n\\nKeychains can be viewed and edited through the Keychain Access application or using the command-line utility <code>security</code>. Keychain files are located in <code>~/Library/Keychains/</code>, <code>/Library/Keychains/</code>, and <code>/Network/Library/Keychains/</code>.(Citation: Keychain Services Apple)(Citation: Keychain Decryption Passware)(Citation: OSX Keychain Schaumann)\\n\\nAdversaries may gather user credentials from Keychain storage/memory. For example, the command <code>security dump-keychain –d</code> will dump all Login Keychain credentials from <code>~/Library/Keychains/login.keychain-db</code>. Adversaries may also directly read Login Keychain credentials from the <code>~/Library/Keychains/login.keychain</code> file. Both methods require a password, where the default password for the Login Keychain is the current user’s password to login to the macOS host.(Citation: External to DA, the OS X Way)(Citation: Empire Keychain Decrypt)  ', 'modified': '2022-04-18T20:32:22.122Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Keychain', 'x_mitre_detection': 'Unlocking the keychain and using passwords from it is a very common process, so there is likely to be a lot of noise in any detection technique. Monitoring of system calls to the keychain can help determine if there is a suspicious process trying to access it.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['File: File Access', 'Command: Command Execution', 'Process: OS API Execution', 'Process: Process Creation'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b120b587-a4c2-4b94-875d-99c9807d6955",
                        "lookup_data": {
                            "description": "Detects passwords dumps from Keychain",
                            "raw": "author: Tim Ismilyaev, oscd.community, Florian Roth (Nextron Systems)\ndate: 2020/10/19\ndescription: Detects passwords dumps from Keychain\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains:\n    - find-certificate\n    - ' export '\n    Image: /usr/bin/security\n  selection2:\n    CommandLine|contains:\n    - ' dump-keychain '\n    - ' login-keychain '\nfalsepositives:\n- Legitimate administration activities\nid: b120b587-a4c2-4b94-875d-99c9807d6955\nlevel: medium\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2021/11/27\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1555.001/T1555.001.md\n- https://gist.github.com/Capybara/6228955\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1555.001\ntitle: Credentials from Password Stores - Keychain\n",
                            "sigma:id": "b120b587-a4c2-4b94-875d-99c9807d6955",
                            "title": "Credentials from Password Stores - Keychain",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1555.001",
                "display_name": "Credentials from Password Stores: Keychain",
                "atomic_tests": [
                    {
                        "name": "Keychain Dump",
                        "auto_generated_guid": "88e1fa00-bf63-4e5b-a3e1-e2ea51c8cca6",
                        "description": "This command will dump keychain credential information from login.keychain. \nSource: https://www.loobins.io/binaries/security/\n\n### Keychain File path\n  ~/Library/Keychains/\n  /Library/Keychains/\n  /Network/Library/Keychains/\n  [Security Reference](https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/security.1.html)\n  ",
                        "supported_platforms": [
                            "macos"
                        ],
                        "executor": {
                            "command": "sudo security dump-keychain -d login.keychain",
                            "name": "sh",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Export Certificate Item(s)",
                        "auto_generated_guid": "1864fdec-ff86-4452-8c30-f12507582a93",
                        "description": "This command finds all certificate items and sends the output to local file in pem format.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "cert_export": {
                                "description": "Specify the path of the certificates to export.",
                                "type": "path",
                                "default": "/tmp/certs.pem"
                            }
                        },
                        "executor": {
                            "command": "security find-certificate -a -p > #{cert_export}\n",
                            "cleanup_command": "rm #{cert_export}",
                            "name": "sh",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Import Certificate Item(s) into Keychain",
                        "auto_generated_guid": "e544bbcb-c4e0-4bd0-b614-b92131635f59",
                        "description": "This command will import a certificate pem file into a keychain.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "cert_export": {
                                "description": "Specify the path of the pem certificate file to import.",
                                "type": "path",
                                "default": "/tmp/certs.pem"
                            }
                        },
                        "executor": {
                            "command": "security import #{cert_export} -k\n",
                            "name": "sh",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Copy Keychain using cat utility",
                        "auto_generated_guid": "5c32102a-c508-49d3-978f-288f8a9f6617",
                        "description": "This command will copy the keychain using the cat utility in a manner similar to Atomic Stealer.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "keychain_export": {
                                "description": "Specify the path to copy they keychain into.",
                                "type": "path",
                                "default": "/tmp/keychain"
                            }
                        },
                        "executor": {
                            "command": "cat ~/Library/Keychains/login.keychain-db > #{keychain_export}\n",
                            "cleanup_command": "rm #{keychain_export}",
                            "name": "sh",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:14:24"
}