{
    "id": "T1559.001",
    "name": "Component Object Model",
    "description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](T1021) such as  [Distributed Component Object Model](T1021.003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](T1059.005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
    "platforms": "Windows",
    "kill_chain_phases": "Execution",
    "data_sources": "Module: Module Load, Process: Process Creation, Script: Script Execution",
    "detection": "Monitor for COM objects loading DLLs and other modules not typically associated with the application.(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) Enumeration of COM objects, via [Query Registry](T1012) or [PowerShell](T1059.001), may also proceed malicious use.(Citation: Fireeye Hunting COM June 2019)(Citation: Enigma MMC20 COM Jan 2017)\nMonitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on.",
    "url": "https://attack.mitre.org/techniques/T1559/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                    "cfed2f44-16df-4bf3-833a-79405198b277",
                    "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                    "2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                    "3b4b232a-af90-427c-a22f-30b0c0837b95",
                    "c7e91a02-d771-4a6d-a700-42587e0b1095",
                    "36e037c4-c228-4866-b6a3-48eb292b9955"
                ],
                "lookup_results": [
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cfed2f44-16df-4bf3-833a-79405198b277",
                        "lookup_data": {
                            "description": "Detects Dllhost that communicates with public IP addresses",
                            "raw": "author: bartblaze\ndate: 2020/07/13\ndescription: Detects Dllhost that communicates with public IP addresses\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_ipv4:\n    DestinationIp|startswith:\n    - '10.'\n    - 192.168.\n    - 172.16.\n    - 172.17.\n    - 172.18.\n    - 172.19.\n    - 172.20.\n    - 172.21.\n    - 172.22.\n    - 172.23.\n    - 172.24.\n    - 172.25.\n    - 172.26.\n    - 172.27.\n    - 172.28.\n    - 172.29.\n    - 172.30.\n    - 172.31.\n    - 169.254.\n    - '127.'\n  filter_ipv6:\n    DestinationIp|startswith:\n    - ::1\n    - 0:0:0:0:0:0:0:1\n    - 'fe80:'\n    - fc\n    - fd\n  filter_msrange:\n    DestinationIp|startswith:\n    - 20.184.\n    - 20.185.\n    - 20.186.\n    - 20.187.\n    - 20.188.\n    - 20.189.\n    - 20.190.\n    - 20.191.\n    - 23.79.\n    - 51.10.\n    - 51.103.\n    - 51.104.\n    - 51.105.\n    - 52.239.\n  selection:\n    Image|endswith: \\dllhost.exe\n    Initiated: 'true'\nfalsepositives:\n- Communication to other corporate systems that use IP addresses from public address\n  spaces\nid: cfed2f44-16df-4bf3-833a-79405198b277\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://redcanary.com/blog/child-processes/\n- https://nasbench.medium.com/what-is-the-dllhost-exe-process-actually-running-ef9fe4c19c08\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218\n- attack.execution\n- attack.t1559.001\ntitle: Dllhost Internet Connection\n",
                            "sigma:id": "cfed2f44-16df-4bf3-833a-79405198b277",
                            "title": "Dllhost Internet Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                        "lookup_data": {
                            "description": "Unmasking MirrorFace: Operation LiberalFace targeting Japanese political entities | WeLiveSecurity",
                            "link": "http://www.botvrij.eu/data/feed-osint/7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1671610618",
                            "uuid": "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64",
                        "lookup_data": {
                            "mitre-attack-id": "T1559.001",
                            "mitre-cti:description": "Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\n\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)",
                            "mitre-cti:name": "Component Object Model",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--2f6b4ed7-fef1-44ba-bcb8-1b4beb610b64', 'type': 'attack-pattern', 'created': '2020-02-12T14:09:53.107Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1559.001', 'url': 'https://attack.mitre.org/techniques/T1559/001'}, {'source_name': 'Fireeye Hunting COM June 2019', 'url': 'https://www.fireeye.com/blog/threat-research/2019/06/hunting-com-objects.html', 'description': 'Hamilton, C. (2019, June 4). Hunting COM Objects. Retrieved June 10, 2019.'}, {'url': 'https://msdn.microsoft.com/library/windows/desktop/ms680573.aspx', 'description': 'Microsoft. (n.d.). Component Object Model (COM). Retrieved November 22, 2017.', 'source_name': 'Microsoft COM'}, {'url': 'https://googleprojectzero.blogspot.com/2018/04/windows-exploitation-tricks-exploiting.html', 'description': 'Forshaw, J. (2018, April 18). Windows Exploitation Tricks: Exploiting Arbitrary File Writes for Local Elevation of Privilege. Retrieved May 3, 2018.', 'source_name': 'ProjectZero File Write EoP Apr 2018'}, {'url': 'https://enigma0x3.net/2017/11/16/lateral-movement-using-outlooks-createobject-method-and-dotnettojscript/', 'description': \"Nelson, M. (2017, November 16). Lateral Movement using Outlook's CreateObject Method and DotNetToJScript. Retrieved November 21, 2017.\", 'source_name': 'Enigma Outlook DCOM Lateral Movement Nov 2017'}, {'url': 'https://enigma0x3.net/2017/01/05/lateral-movement-using-the-mmc20-application-com-object/', 'description': 'Nelson, M. (2017, January 5). Lateral Movement using the MMC20 Application COM Object. Retrieved November 21, 2017.', 'source_name': 'Enigma MMC20 COM Jan 2017'}], 'modified': '2021-07-26T22:51:20.448Z', 'name': 'Component Object Model', 'description': 'Adversaries may use the Windows Component Object Model (COM) for local code execution. COM is an inter-process communication (IPC) component of the native Windows application programming interface (API) that enables interaction between software objects, or executable code that implements one or more interfaces.(Citation: Fireeye Hunting COM June 2019) Through COM, a client object can call methods of server objects, which are typically binary Dynamic Link Libraries (DLL) or executables (EXE).(Citation: Microsoft COM) Remote COM execution is facilitated by [Remote Services](https://attack.mitre.org/techniques/T1021) such as  [Distributed Component Object Model](https://attack.mitre.org/techniques/T1021/003) (DCOM).(Citation: Fireeye Hunting COM June 2019)\\n\\nVarious COM interfaces are exposed that can be abused to invoke arbitrary execution via a variety of programming languages such as C, C++, Java, and [Visual Basic](https://attack.mitre.org/techniques/T1059/005).(Citation: Microsoft COM) Specific COM objects also exist to directly perform functions beyond code execution, such as creating a [Scheduled Task/Job](https://attack.mitre.org/techniques/T1053), fileless download/execution, and other adversary behaviors related to privilege escalation and persistence.(Citation: Fireeye Hunting COM June 2019)(Citation: ProjectZero File Write EoP Apr 2018)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_detection': 'Monitor for COM objects loading DLLs and other modules not typically associated with the application.(Citation: Enigma Outlook DCOM Lateral Movement Nov 2017) Enumeration of COM objects, via [Query Registry](https://attack.mitre.org/techniques/T1012) or [PowerShell](https://attack.mitre.org/techniques/T1059/001), may also proceed malicious use.(Citation: Fireeye Hunting COM June 2019)(Citation: Enigma MMC20 COM Jan 2017)\\n\\nMonitor for spawning of processes associated with COM objects, especially those invoked by a user different than the one currently logged on. ', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Script: Script Execution', 'Module: Module Load', 'Process: Process Creation'], 'x_mitre_remote_support': True}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3b4b232a-af90-427c-a22f-30b0c0837b95",
                        "lookup_data": {
                            "description": "Detects various indicators of Microsoft Connection Manager Profile Installer execution",
                            "raw": "author: Nik Seetharaman\ndate: 2018/07/16\ndescription: Detects various indicators of Microsoft Connection Manager Profile Installer\n  execution\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains: cmlua.dll\nfalsepositives:\n- Legitimate CMSTP use (unlikely in modern enterprise environments)\nfields:\n- CommandLine\n- ParentCommandLine\n- Details\nid: 3b4b232a-af90-427c-a22f-30b0c0837b95\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2021/06/27\nreferences:\n- https://web.archive.org/web/20190720093911/http://www.endurant.io/cmstp/detecting-cmstp-enabled-code-execution-and-uac-bypass-with-sysmon/\nstatus: stable\ntags:\n- attack.defense_evasion\n- attack.t1218.003\n- attack.execution\n- attack.t1559.001\n- attack.g0069\n- attack.g0080\n- car.2019-04-001\ntitle: CMSTP Execution Process Access\n",
                            "sigma:id": "3b4b232a-af90-427c-a22f-30b0c0837b95",
                            "title": "CMSTP Execution Process Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c7e91a02-d771-4a6d-a700-42587e0b1095",
                        "lookup_data": {
                            "description": "Detects network connections and DNS queries initiated by Regsvr32.exe",
                            "raw": "author: Dmitriy Lifanov, oscd.community\ndate: 2019/10/25\ndescription: Detects network connections and DNS queries initiated by Regsvr32.exe\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\regsvr32.exe\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- Image\n- DestinationIp\n- DestinationPort\nid: c7e91a02-d771-4a6d-a700-42587e0b1095\nlevel: high\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://pentestlab.blog/2017/05/11/applocker-bypass-regsvr32/\n- https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/\nstatus: test\ntags:\n- attack.execution\n- attack.t1559.001\n- attack.defense_evasion\n- attack.t1218.010\ntitle: Regsvr32 Network Activity\n",
                            "sigma:id": "c7e91a02-d771-4a6d-a700-42587e0b1095",
                            "title": "Regsvr32 Network Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36e037c4-c228-4866-b6a3-48eb292b9955",
                        "lookup_data": {
                            "description": "Detects network connections and DNS queries initiated by Regsvr32.exe",
                            "raw": "author: Dmitriy Lifanov, oscd.community\ndate: 2019/10/25\ndescription: Detects network connections and DNS queries initiated by Regsvr32.exe\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\regsvr32.exe\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- Image\n- DestinationIp\n- DestinationPort\nid: 36e037c4-c228-4866-b6a3-48eb292b9955\nlevel: high\nlogsource:\n  category: dns_query\n  product: windows\nmodified: 2022/11/28\nreferences:\n- https://pentestlab.blog/2017/05/11/applocker-bypass-regsvr32/\n- https://oddvar.moe/2017/12/13/applocker-case-study-how-insecure-is-it-really-part-1/\nrelated:\n- id: c7e91a02-d771-4a6d-a700-42587e0b1095\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1559.001\n- attack.defense_evasion\n- attack.t1218.010\ntitle: Regsvr32 Network Activity - DNS\n",
                            "sigma:id": "36e037c4-c228-4866-b6a3-48eb292b9955",
                            "title": "Regsvr32 Network Activity - DNS",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": []
    },
    "timestamp": "2025-02-28 16:31:48"
}