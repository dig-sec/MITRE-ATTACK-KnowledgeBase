{
    "id": "T1530",
    "name": "Data from Cloud Storage Object",
    "description": "Adversaries may access data objects from improperly secured cloud storage.\nMany cloud service providers offer solutions for online data storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. Solution providers typically offer security guides to help end users configure systems.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019)\nMisconfiguration by end users is a common problem. There have been numerous incidents where cloud storage has been improperly secured (typically by unintentionally allowing public access by unauthenticated users or overly-broad access by all users), allowing open access to credit cards, personally identifiable information, medical records, and other sensitive information.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017) Adversaries may also obtain leaked credentials in source repositories, logs, or other means as a way to gain access to cloud storage objects that have access permission controls.",
    "platforms": "IaaS",
    "kill_chain_phases": "Collection",
    "data_sources": "Cloud Storage: Cloud Storage Access",
    "detection": "Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.",
    "url": "https://attack.mitre.org/techniques/T1530",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "3298ce88-1628-43b1-87d9-0b5336b193d7"
                ],
                "lookup_results": [
                    {
                        "uuid": "3298ce88-1628-43b1-87d9-0b5336b193d7",
                        "lookup_data": {
                            "mitre-attack-id": "T1530",
                            "mitre-cti:description": "Adversaries may access data from improperly secured cloud storage.\n\nMany cloud service providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. \n\nIn other cases, SaaS application providers such as Slack, Confluence, and Salesforce also provide cloud storage solutions as a peripheral use case of their platform. These cloud objects can be extracted directly from their associated application.(Citation: EA Hacked via Slack - June 2021)(Citation: SecureWorld - How Secure Is Your Slack Channel - Dec 2021)(Citation: HackerNews - 3 SaaS App Cyber Attacks - April 2022)(Citation: Dark Clouds_Usenix_Mulazzani_08_2011)\n\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\n\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\n\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.",
                            "mitre-cti:name": "Data from Cloud Storage",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-18T19:10:42.621Z', 'name': 'Data from Cloud Storage', 'description': \"Adversaries may access data from improperly secured cloud storage.\\n\\nMany cloud service providers offer solutions for online data object storage such as Amazon S3, Azure Storage, and Google Cloud Storage. These solutions differ from other storage solutions (such as SQL or Elasticsearch) in that there is no overarching application. Data from these solutions can be retrieved directly using the cloud provider's APIs. \\n\\nIn other cases, SaaS application providers such as Slack, Confluence, and Salesforce also provide cloud storage solutions as a peripheral use case of their platform. These cloud objects can be extracted directly from their associated application.(Citation: EA Hacked via Slack - June 2021)(Citation: SecureWorld - How Secure Is Your Slack Channel - Dec 2021)(Citation: HackerNews - 3 SaaS App Cyber Attacks - April 2022)(Citation: Dark Clouds_Usenix_Mulazzani_08_2011)\\n\\nAdversaries may collect sensitive data from these cloud storage solutions. Providers typically offer security guides to help end users configure systems, though misconfigurations are a common problem.(Citation: Amazon S3 Security, 2019)(Citation: Microsoft Azure Storage Security, 2019)(Citation: Google Cloud Storage Best Practices, 2019) There have been numerous incidents where cloud storage has been improperly secured, typically by unintentionally allowing public access to unauthenticated users, overly-broad access by all users, or even access for any anonymous person outside the control of the Identity Access Management system without even needing basic user permissions.\\n\\nThis open access may expose various types of sensitive data, such as credit cards, personally identifiable information, or medical records.(Citation: Trend Micro S3 Exposed PII, 2017)(Citation: Wired Magecart S3 Buckets, 2019)(Citation: HIPAA Journal S3 Breach, 2017)(Citation: Rclone-mega-extortion_05_2021)\\n\\nAdversaries may also obtain then abuse leaked credentials from source repositories, logs, or other means as a way to gain access to cloud storage objects.\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'collection'}], 'x_mitre_detection': \"Monitor for unusual queries to the cloud provider's storage service. Activity originating from unexpected sources may indicate improper permissions are set that is allowing access to data. Additionally, detecting failed attempts by a user for a certain object, followed by escalation of privileges by the same user, and access to the same object may be an indication of suspicious activity.\", 'x_mitre_platforms': ['IaaS', 'SaaS'], 'x_mitre_is_subtechnique': False, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '2.0', 'x_mitre_contributors': ['Netskope', 'Praetorian', 'AppOmni'], 'x_mitre_data_sources': ['Cloud Storage: Cloud Storage Access'], 'type': 'attack-pattern', 'id': 'attack-pattern--3298ce88-1628-43b1-87d9-0b5336b193d7', 'created': '2019-08-30T18:07:27.741Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1530', 'external_id': 'T1530'}, {'source_name': 'SecureWorld - How Secure Is Your Slack Channel - Dec 2021', 'description': ' Drew Todd. (2021, December 28). How Secure Is Your Slack Channel?. Retrieved May 31, 2022.', 'url': 'https://www.secureworld.io/industry-news/how-secure-is-your-slack-channel#:~:text=Electronic%20Arts%20hacked%20through%20Slack%20channel&text=In%20total%2C%20the%20hackers%20claim,credentials%20over%20a%20Slack%20channel.'}, {'source_name': 'Amazon S3 Security, 2019', 'description': 'Amazon. (2019, May 17). How can I secure the files in my Amazon S3 bucket?. Retrieved October 4, 2019.', 'url': 'https://aws.amazon.com/premiumsupport/knowledge-center/secure-s3-resources/'}, {'source_name': 'Microsoft Azure Storage Security, 2019', 'description': 'Amlekar, M., Brooks, C., Claman, L., et. al.. (2019, March 20). Azure Storage security guide. Retrieved October 4, 2019.', 'url': 'https://docs.microsoft.com/en-us/azure/storage/common/storage-security-guide'}, {'source_name': 'EA Hacked via Slack - June 2021', 'description': 'Anthony Spadafora. (2021, June 11). EA hack reportedly used stolen cookies and Slack to target gaming giant. Retrieved May 31, 2022.', 'url': 'https://www.techradar.com/news/ea-hack-reportedly-used-stolen-cookies-and-slack-to-hack-gaming-giant'}, {'source_name': 'Wired Magecart S3 Buckets, 2019', 'description': 'Barrett, B.. (2019, July 11). Hack Brief: A Card-Skimming Hacker Group Hit 17K Domainsâ€”and Counting. Retrieved October 4, 2019.', 'url': 'https://www.wired.com/story/magecart-amazon-cloud-hacks/'}, {'source_name': 'Google Cloud Storage Best Practices, 2019', 'description': 'Google. (2019, September 16). Best practices for Cloud Storage. Retrieved October 4, 2019.', 'url': 'https://cloud.google.com/storage/docs/best-practices'}, {'source_name': 'HackerNews - 3 SaaS App Cyber Attacks - April 2022', 'description': 'Hananel Livneh. (2022, April 7). Into the Breach: Breaking Down 3 SaaS App Cyber Attacks in 2022. Retrieved May 31, 2022.', 'url': 'https://thehackernews.com/2022/04/into-breach-breaking-down-3-saas-app.html'}, {'source_name': 'HIPAA Journal S3 Breach, 2017', 'description': 'HIPAA Journal. (2017, October 11). 47GB of Medical Records and Test Results Found in Unsecured Amazon S3 Bucket. Retrieved October 4, 2019.', 'url': 'https://www.hipaajournal.com/47gb-medical-records-unsecured-amazon-s3-bucket/'}, {'source_name': 'Rclone-mega-extortion_05_2021', 'description': 'Justin Schoenfeld, Aaron Didier. (2021, May 4). Transferring leverage in a ransomware attack. Retrieved July 14, 2022.', 'url': 'https://redcanary.com/blog/rclone-mega-extortion/'}, {'source_name': 'Dark Clouds_Usenix_Mulazzani_08_2011', 'description': 'Martin Mulazzani, Sebastian Schrittwieser, Manuel Leithner, Markus Huber, and Edgar Weippl. (2011, August). Dark Clouds on the Horizon: Using Cloud Storage as Attack Vector and Online Slack Space. Retrieved July 14, 2022.', 'url': 'https://www.usenix.org/conference/usenix-security-11/dark-clouds-horizon-using-cloud-storage-attack-vector-and-online-slack'}, {'source_name': 'Trend Micro S3 Exposed PII, 2017', 'description': 'Trend Micro. (2017, November 6). A Misconfigured Amazon S3 Exposed Almost 50 Thousand PII in Australia. Retrieved October 4, 2019.', 'url': 'https://www.trendmicro.com/vinfo/us/security/news/virtualization-and-cloud/a-misconfigured-amazon-s3-exposed-almost-50-thousand-pii-in-australia'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1530",
                "display_name": "Data from Cloud Storage Object",
                "atomic_tests": [
                    {
                        "name": "Azure - Enumerate Azure Blobs with MicroBurst",
                        "auto_generated_guid": "3dab4bcc-667f-4459-aea7-4162dd2d6590",
                        "description": "Upon successful execution, this test will utilize a wordlist to enumerate the public facing containers and blobs of a specified Azure storage account. \nSee https://www.netspi.com/blog/technical/cloud-penetration-testing/anonymously-enumerating-azure-file-resources/ . \n",
                        "supported_platforms": [
                            "iaas:azure"
                        ],
                        "input_arguments": {
                            "base": {
                                "description": "Azure blob keyword to enumerate (Example, storage account name)",
                                "type": "string",
                                "default": "secure"
                            },
                            "output_file": {
                                "description": "File to output results to",
                                "type": "string",
                                "default": "$env:temp\\T1530Test1.txt"
                            },
                            "wordlist": {
                                "description": "File path to keywords for search permutations",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\permutations.txt"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "The Invoke-EnumerateAzureBlobs module must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
                                "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/Invoke-EnumerateAzureBlobs.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\n"
                            },
                            {
                                "description": "The wordlist file for search permutations must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
                                "prereq_command": "if (test-path \"#{wordlist}\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "invoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/156c4e9f4253b482b2b68eda4651116b9f0f2e17/Misc/permutations.txt\" -outfile \"#{wordlist}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Invoke-EnumerateAzureBlobs.ps1\"\nInvoke-EnumerateAzureBlobs -base #{base} -permutations \"#{wordlist}\" -outputfile \"#{output_file}\"\n",
                            "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Azure - Scan for Anonymous Access to Azure Storage (Powershell)",
                        "auto_generated_guid": "146af1f1-b74e-4aa7-9895-505eb559b4b0",
                        "description": "Upon successful execution, this test will test for anonymous access to Azure storage containers by invoking a web request and outputting the results to a file. \nThe corresponding response could then be interpreted to determine whether or not the resource/container exists, as well as other information. \nSee https://ninocrudele.com/the-three-most-effective-and-dangerous-cyberattacks-to-azure-and-countermeasures-part-2-attack-the-azure-storage-service     \n",
                        "supported_platforms": [
                            "iaas:azure"
                        ],
                        "input_arguments": {
                            "base_name": {
                                "description": "Azure storage account name to test",
                                "type": "string",
                                "default": "T1530Test2"
                            },
                            "output_file": {
                                "description": "File to output results to",
                                "type": "string",
                                "default": "$env:temp\\T1530Test2.txt"
                            },
                            "container_name": {
                                "description": "Container name to search for (optional)",
                                "type": "string",
                                "default": null
                            },
                            "blob_name": {
                                "description": "Blob name to search for (optional)",
                                "type": "string",
                                "default": null
                            }
                        },
                        "executor": {
                            "command": "try{$response = invoke-webrequest \"https://#{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}\" -method \"GET\"}\ncatch [system.net.webexception]\n{if($_.Exception.Response -ne $null)\n{$Response = $_.Exception.Response.GetResponseStream()\n$ReadResponse = New-Object System.IO.StreamReader($Response)\n$ReadResponse.BaseStream.Position = 0\n$responseBody = $ReadResponse.ReadToEnd()}\nelse {$responseBody = \"The storage account could not be anonymously accessed.\"}}\n\"Response received for #{base_name}.blob.core.windows.net/#{container_name}/#{blob_name}: $responsebody\" | out-file -filepath #{output_file} -append\n",
                            "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "AWS - Scan for Anonymous Access to S3",
                        "auto_generated_guid": "979356b9-b588-4e49-bba4-c35517c484f5",
                        "description": "Upon successful execution, this test will test for anonymous access to AWS S3 buckets and dumps all the files to a local folder. \n",
                        "supported_platforms": [
                            "iaas:aws"
                        ],
                        "input_arguments": {
                            "s3_bucket_name": {
                                "description": "Name of the bucket",
                                "type": "string",
                                "default": "redatomic-test2"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Check if ~/.aws/credentials file has a default stanza is configured\n",
                                "prereq_command": "cat ~/.aws/credentials | grep \"default\"\naws s3api create-bucket --bucket #{s3_bucket_name}\naws s3api put-bucket-policy --bucket #{s3_bucket_name} --policy file://$PathToAtomicsFolder/T1530/src/policy.json\ntouch /tmp/T1530.txt\naws s3 cp /tmp/T1530.txt s3://#{s3_bucket_name}\n",
                                "get_prereq_command": "echo Please install the aws-cli and configure your AWS default profile using: aws configure\n"
                            }
                        ],
                        "executor": {
                            "command": "aws --no-sign-request s3 cp --recursive s3://#{s3_bucket_name} /tmp/#{s3_bucket_name}\n",
                            "cleanup_command": "aws s3 rb s3://#{s3_bucket_name} --force \nrm -rf /tmp/#{s3_bucket_name}\n",
                            "name": "sh",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 15:04:33"
}