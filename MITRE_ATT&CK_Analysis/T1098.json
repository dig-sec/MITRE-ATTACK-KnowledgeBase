{
    "id": "T1098",
    "name": "Account Manipulation",
    "description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. In order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain.",
    "platforms": "Windows, Azure AD, Office 365, IaaS, Linux, macOS, Google Workspace",
    "kill_chain_phases": "Persistence",
    "data_sources": "File: File Modification, Command: Command Execution, Process: Process Creation, Group: Group Modification, User Account: User Account Modification, Active Directory: Active Directory Object Modification",
    "detection": "Collect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.(Citation: Microsoft User Modified Event)(Citation: Microsoft Security Event 4670)(Citation: Microsoft Security Event 4670) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ(Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password.(Citation: GitHub Mimikatz Issue 92 June 2017)\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\nMonitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts.",
    "url": "https://attack.mitre.org/techniques/T1098",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "3940b5f1-3f46-44aa-b746-ebe615b879e0",
                    "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                    "0ac15ec3-d24f-4246-aa2a-3077bb1cf90e",
                    "2c99737c-585d-4431-b61a-c911d86ff32f",
                    "d2d901db-7a75-45a1-bc39-0cbf00812192",
                    "c265cf08-3f99-46c1-8d59-328247057d57",
                    "300bac00-e041-4ee2-9c36-e262656a6ecc",
                    "4fdc44df-bfe9-4fcc-b041-68f5a2d3031c",
                    "0a5177f4-6ca9-44c2-aacf-d3f3d8b6e4d2",
                    "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
                    "a10641f4-87b4-45a3-a906-92a149cb2c27",
                    "6d844f0f-1c18-41af-8f19-33e7654edfc3",
                    "311b6ce2-7890-4383-a8c2-663a9f6b43cd",
                    "2d1b83e4-17c6-4896-a37b-29140b40a788",
                    "b056de1a-6e6e-4e40-a67e-97c9808cf41b",
                    "102e11e3-2db5-4c9e-bc26-357d42585d21",
                    "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
                    "055fb148-60f8-462d-ad16-26926ce050f1",
                    "0255a820-e564-4e40-af2b-6ac61160335c",
                    "4d78a000-ab52-4564-88a5-7ab5242b20c7",
                    "04e2a23a-9b29-4a5c-be3a-3542e3f982ba"
                ],
                "lookup_results": [
                    {
                        "uuid": "3940b5f1-3f46-44aa-b746-ebe615b879e0",
                        "lookup_data": {
                            "description": "Detects when a transfer lock was removed from a Route 53 domain. It is recommended to refrain from performing this action unless intending to transfer the domain to a different registrar.",
                            "raw": "author: Elastic, Austin Songer @austinsonger\ndate: 2021/07/22\ndescription: Detects when a transfer lock was removed from a Route 53 domain. It is\n  recommended to refrain from performing this action unless intending to transfer\n  the domain to a different registrar.\ndetection:\n  condition: selection\n  selection:\n    eventName: DisableDomainTransferLock\n    eventSource: route53.amazonaws.com\nfalsepositives:\n- A domain transfer lock may be disabled by a system or network administrator. Verify\n  whether the user identity, user agent, and/or hostname should be making changes\n  in your environment. Activity from unfamiliar users or hosts should be investigated.\n  If known behavior is causing false positives, it can be exempted from the rule.\nid: 3940b5f1-3f46-44aa-b746-ebe615b879e0\nlevel: low\nlogsource:\n  product: aws\n  service: cloudtrail\nmodified: 2022/10/09\nreferences:\n- https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/integrations/aws/persistence_route_53_domain_transfer_lock_disabled.toml\n- https://docs.aws.amazon.com/Route53/latest/APIReference/API_Operations_Amazon_Route_53.html\n- https://docs.aws.amazon.com/Route53/latest/APIReference/API_domains_DisableDomainTransferLock.html\nstatus: test\ntags:\n- attack.persistence\n- attack.credential_access\n- attack.t1098\ntitle: AWS Route 53 Domain Transfer Lock Disabled\n",
                            "sigma:id": "3940b5f1-3f46-44aa-b746-ebe615b879e0",
                            "title": "AWS Route 53 Domain Transfer Lock Disabled",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                        "lookup_data": {
                            "description": "SectorJ04 Groupâ€™s Increased Activity in 2019",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5d6e7aa3-aca4-46cc-b96a-46ac950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1568039252",
                            "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0ac15ec3-d24f-4246-aa2a-3077bb1cf90e",
                        "lookup_data": {
                            "description": "Detects the addition of a new user to a privileged group such as \"root\" or \"sudo\"",
                            "raw": "author: Pawel Mazur\ndate: 2022/12/21\ndescription: Detects the addition of a new user to a privileged group such as \"root\"\n  or \"sudo\"\ndetection:\n  condition: all of selection_*\n  selection_new_user:\n  - new user\n  selection_uids_gids:\n  - GID=0\n  - UID=0\n  - GID=10\n  - GID=27\nfalsepositives:\n- Administrative activity\nid: 0ac15ec3-d24f-4246-aa2a-3077bb1cf90e\nlevel: high\nlogsource:\n  definition: /var/log/secure on REHL systems or /var/log/auth.log on debian like\n    Systems needs to be collected in order for this detection to work\n  product: linux\nreferences:\n- https://digital.nhs.uk/cyber-alerts/2018/cc-2825\n- https://linux.die.net/man/8/useradd\n- https://github.com/redcanaryco/atomic-red-team/blob/25acadc0b43a07125a8a5b599b28bbc1a91ffb06/atomics/T1136.001/T1136.001.md#atomic-test-5---create-a-new-user-in-linux-with-root-uid-and-gid\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1136.001\n- attack.t1098\ntitle: Privileged User Has Been Created\n",
                            "sigma:id": "0ac15ec3-d24f-4246-aa2a-3077bb1cf90e",
                            "title": "Privileged User Has Been Created",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2c99737c-585d-4431-b61a-c911d86ff32f",
                        "lookup_data": {
                            "description": "Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer",
                            "raw": "author: Samir Bousseaden; Roberto Rodriguez @Cyb3rWard0g; oscd.community; Tim Shelton;\n  Maxence Fossat\ndate: 2019/04/03\ndescription: Backdooring domain object to grant the rights associated with DCSync\n  to a regular user or machine account using Powerview\\Add-DomainObjectAcl DCSync\n  Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    ObjectClass:\n    - dnsNode\n    - dnsZoneScope\n    - dnsZone\n  selection:\n    AttributeLDAPDisplayName: ntSecurityDescriptor\n    AttributeValue|contains:\n    - 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\n    - 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\n    - 89e95b76-444d-4c62-991a-0facbeda640c\n    EventID: 5136\nfalsepositives:\n- New Domain Controller computer account, check user SIDs within the value attribute\n  of event 5136 and verify if it's a regular user or DC computer account.\nid: 2c99737c-585d-4431-b61a-c911d86ff32f\nlevel: high\nlogsource:\n  definition: The \"Audit Directory Service Changes\" logging policy must be configured\n    in order to receive events. Audit events are generated only for objects with configured\n    system access control lists (SACLs). Audit events are generated only for objects\n    with configured system access control lists (SACLs) and only when accessed in\n    a manner that matches their SACL settings. This policy covers the following events\n    ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover\n    User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\n  product: windows\n  service: security\nmodified: 2022/08/16\nreferences:\n- https://twitter.com/menasec1/status/1111556090137903104\n- https://www.specterops.io/assets/resources/an_ace_up_the_sleeve.pdf\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Powerview Add-DomainObjectAcl DCSync AD Extend Right\n",
                            "sigma:id": "2c99737c-585d-4431-b61a-c911d86ff32f",
                            "title": "Powerview Add-DomainObjectAcl DCSync AD Extend Right",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d2d901db-7a75-45a1-bc39-0cbf00812192",
                        "lookup_data": {
                            "description": "Number of VM creations or deployment activities occur in Azure via the azureactivity log.",
                            "raw": "author: sawwinnnaung\ndate: 2020/05/07\ndescription: Number of VM creations or deployment activities occur in Azure via the\n  azureactivity log.\ndetection:\n  condition: keywords\n  keywords:\n  - Microsoft.Compute/virtualMachines/write\n  - Microsoft.Resources/deployments/write\nfalsepositives:\n- Valid change\nid: d2d901db-7a75-45a1-bc39-0cbf00812192\nlevel: medium\nlogsource:\n  product: azure\n  service: azureactivity\nmodified: 2021/11/27\nreferences:\n- https://github.com/Azure/Azure-Sentinel/blob/e534407884b1ec5371efc9f76ead282176c9e8bb/Detections/AzureActivity/Creating_Anomalous_Number_Of_Resources_detection.yaml\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Number Of Resource Creation Or Deployment Activities\n",
                            "sigma:id": "d2d901db-7a75-45a1-bc39-0cbf00812192",
                            "title": "Number Of Resource Creation Or Deployment Activities",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c265cf08-3f99-46c1-8d59-328247057d57",
                        "lookup_data": {
                            "description": "This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/14\ndescription: This rule triggers on user accounts that are added to the local Administrators\n  group, which could be legitimate activity or a sign of privilege escalation activity\ndetection:\n  condition: selection and (1 of selection_group*) and not filter\n  filter:\n    SubjectUserName|endswith: $\n  selection:\n    EventID: 4732\n    Provider_Name: Microsoft-Windows-Security-Auditing\n  selection_group1:\n    TargetUserName|startswith: Administr\n  selection_group2:\n    TargetSid: S-1-5-32-544\nfalsepositives:\n- Legitimate administrative activity\nid: c265cf08-3f99-46c1-8d59-328247057d57\nlevel: medium\nlogsource:\n  product: windows\n  service: security\nmodified: 2021/01/17\nstatus: stable\ntags:\n- attack.privilege_escalation\n- attack.t1078\n- attack.persistence\n- attack.t1098\ntitle: User Added to Local Administrators\n",
                            "sigma:id": "c265cf08-3f99-46c1-8d59-328247057d57",
                            "title": "User Added to Local Administrators",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "300bac00-e041-4ee2-9c36-e262656a6ecc",
                        "lookup_data": {
                            "description": "Detects scenarios where one can control another users or computers account without having to use their credentials.",
                            "raw": "author: '@neu5ron'\ndate: 2017/04/13\ndescription: Detects scenarios where one can control another users or computers account\n  without having to use their credentials.\ndetection:\n  condition: (selection1 and not filter_null) or 1 of selection_5136_*\n  filter_null:\n  - AllowedToDelegateTo: '-'\n  - AllowedToDelegateTo: null\n  selection1:\n    EventID: 4738\n  selection_5136_1:\n    AttributeLDAPDisplayName: msDS-AllowedToDelegateTo\n    EventID: 5136\n  selection_5136_2:\n    AttributeLDAPDisplayName: servicePrincipalName\n    EventID: 5136\n    ObjectClass: user\n  selection_5136_3:\n    AttributeLDAPDisplayName: msDS-AllowedToActOnBehalfOfOtherIdentity\n    EventID: 5136\nfalsepositives:\n- Unknown\nid: 300bac00-e041-4ee2-9c36-e262656a6ecc\nlevel: high\nlogsource:\n  definition: 'Requirements: Audit Policy : Account Management > Audit User Account\n    Management, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced\n    Audit Policy Configuration\\Audit Policies\\Account Management\\Audit User Account\n    Management, DS Access > Audit Directory Service Changes, Group Policy : Computer\n    Configuration\\Windows Settings\\Security Settings\\Advanced Audit Policy Configuration\\Audit\n    Policies\\DS Access\\Audit Directory Service Changes'\n  product: windows\n  service: security\nmodified: 2021/11/27\nreferences:\n- https://msdn.microsoft.com/en-us/library/cc220234.aspx\n- https://adsecurity.org/?p=3466\n- https://www.harmj0y.net/blog/redteaming/another-word-on-delegation/\nstatus: test\ntags:\n- attack.t1098\n- attack.persistence\ntitle: Active Directory User Backdoors\n",
                            "sigma:id": "300bac00-e041-4ee2-9c36-e262656a6ecc",
                            "title": "Active Directory User Backdoors",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4fdc44df-bfe9-4fcc-b041-68f5a2d3031c",
                        "lookup_data": {
                            "description": "Adversaries may manipulate accounts to maintain access to victim systems.\nAccount manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups\n",
                            "raw": "author: frack113\ndate: 2021/12/28\ndescription: 'Adversaries may manipulate accounts to maintain access to victim systems.\n\n  Account manipulation may consist of any action that preserves adversary access to\n  a compromised account, such as modifying credentials or permission groups\n\n  '\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Disable-LocalUser\n    - Enable-LocalUser\n    - Get-LocalUser\n    - Set-LocalUser\n    - New-LocalUser\n    - Rename-LocalUser\n    - Remove-LocalUser\nfalsepositives:\n- Legitimate administrative script\nid: 4fdc44df-bfe9-4fcc-b041-68f5a2d3031c\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1098/T1098.md#atomic-test-1---admin-account-manipulate\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.localaccounts/?view=powershell-5.1\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Powershell LocalAccount Manipulation\n",
                            "sigma:id": "4fdc44df-bfe9-4fcc-b041-68f5a2d3031c",
                            "title": "Powershell LocalAccount Manipulation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0a5177f4-6ca9-44c2-aacf-d3f3d8b6e4d2",
                        "lookup_data": {
                            "description": "Detects AWS API key creation for a user by another user.\nBackdoored users can be used to obtain persistence in the AWS environment.\nAlso with this alert, you can detect a flow of AWS keys in your org.\n",
                            "raw": "author: faloker\ndate: 2020/02/12\ndescription: 'Detects AWS API key creation for a user by another user.\n\n  Backdoored users can be used to obtain persistence in the AWS environment.\n\n  Also with this alert, you can detect a flow of AWS keys in your org.\n\n  '\ndetection:\n  condition: selection_source and not filter\n  filter:\n    userIdentity.arn|contains: responseElements.accessKey.userName\n  selection_source:\n    eventName: CreateAccessKey\n    eventSource: iam.amazonaws.com\nfalsepositives:\n- Adding user keys to their own accounts (the filter cannot cover all possible variants\n  of user naming)\n- AWS API keys legitimate exchange workflows\nfields:\n- userIdentity.arn\n- responseElements.accessKey.userName\n- errorCode\n- errorMessage\nid: 0a5177f4-6ca9-44c2-aacf-d3f3d8b6e4d2\nlevel: medium\nlogsource:\n  product: aws\n  service: cloudtrail\nmodified: 2022/10/09\nreferences:\n- https://github.com/RhinoSecurityLabs/pacu/blob/866376cd711666c775bbfcde0524c817f2c5b181/pacu/modules/iam__backdoor_users_keys/main.py\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: AWS IAM Backdoor Users Keys\n",
                            "sigma:id": "0a5177f4-6ca9-44c2-aacf-d3f3d8b6e4d2",
                            "title": "AWS IAM Backdoor Users Keys",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
                        "lookup_data": {
                            "description": "The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.",
                            "raw": "author: Thomas Patzke\ndate: 2017/02/19\ndescription: The Directory Service Restore Mode (DSRM) account is a local administrator\n  account on Domain Controllers. Attackers may change the password to gain persistence.\ndetection:\n  condition: selection\n  selection:\n    EventID: 4794\nfalsepositives:\n- Initial installation of a domain controller\nid: 53ad8e36-f573-46bf-97e4-15ba5bf4bb51\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2020/08/23\nreferences:\n- https://adsecurity.org/?p=1714\nstatus: stable\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Password Change on Directory Service Restore Mode (DSRM) Account\n",
                            "sigma:id": "53ad8e36-f573-46bf-97e4-15ba5bf4bb51",
                            "title": "Password Change on Directory Service Restore Mode (DSRM) Account",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a10641f4-87b4-45a3-a906-92a149cb2c27",
                        "lookup_data": {
                            "mitre-attack-id": "T1098",
                            "mitre-cti:description": "Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \n\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).",
                            "mitre-cti:name": "Account Manipulation",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-18T15:50:24.811Z', 'name': 'Account Manipulation', 'description': 'Adversaries may manipulate accounts to maintain access to victim systems. Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups. These actions could also include account activity designed to subvert security policies, such as performing iterative password updates to bypass password duration policies and preserve the life of compromised credentials. \\n\\nIn order to create or manipulate accounts, the adversary must already have sufficient permissions on systems or the domain. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078).', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}], 'x_mitre_detection': 'Collect events that correlate with changes to account objects and/or permissions on systems and the domain, such as event IDs 4738, 4728 and 4670.(Citation: Microsoft User Modified Event)(Citation: Microsoft Security Event 4670)(Citation: Microsoft Security Event 4670) Monitor for modification of accounts in correlation with other suspicious activity. Changes may occur at unusual times or from unusual systems. Especially flag events where the subject and target accounts differ(Citation: InsiderThreat ChangeNTLM July 2017) or that include additional flags such as changing a password without knowledge of the old password.(Citation: GitHub Mimikatz Issue 92 June 2017)\\n\\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.\\n\\nMonitor for unusual permissions changes that may indicate excessively broad permissions being granted to compromised accounts. However, account manipulation may also lead to privilege escalation where modifications grant access to additional roles, permissions, or higher-privileged [Valid Accounts](https://attack.mitre.org/techniques/T1078)', 'x_mitre_platforms': ['Windows', 'Azure AD', 'Office 365', 'IaaS', 'Linux', 'macOS', 'Google Workspace', 'SaaS'], 'x_mitre_is_subtechnique': False, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '2.4', 'x_mitre_contributors': ['Jannie Li, Microsoft Threat Intelligence\\u202fCenter\\u202f(MSTIC)', 'Praetorian', 'Tim MalcomVetter', 'Wojciech Lesicki'], 'x_mitre_data_sources': ['User Account: User Account Modification', 'Group: Group Modification', 'Process: Process Creation', 'Active Directory: Active Directory Object Modification', 'Command: Command Execution', 'File: File Modification'], 'type': 'attack-pattern', 'id': 'attack-pattern--a10641f4-87b4-45a3-a906-92a149cb2c27', 'created': '2017-05-31T21:31:12.196Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1098', 'external_id': 'T1098'}, {'source_name': 'Microsoft Security Event 4670', 'description': 'Franklin Smith, R. (n.d.). Windows Security Log Event ID 4670. Retrieved November 4, 2019.', 'url': 'https://www.ultimatewindowssecurity.com/securitylog/encyclopedia/event.aspx?eventID=4670'}, {'source_name': 'Microsoft User Modified Event', 'description': 'Lich, B., Miroshnikov, A. (2017, April 5). 4738(S): A user account was changed. Retrieved June 30, 2017.', 'url': 'https://docs.microsoft.com/en-us/windows/security/threat-protection/auditing/event-4738'}, {'source_name': 'InsiderThreat ChangeNTLM July 2017', 'description': 'Warren, J. (2017, July 11). Manipulating User Passwords with Mimikatz. Retrieved December 4, 2017.', 'url': 'https://blog.stealthbits.com/manipulating-user-passwords-with-mimikatz-SetNTLM-ChangeNTLM'}, {'source_name': 'GitHub Mimikatz Issue 92 June 2017', 'description': 'Warren, J. (2017, June 22). lsadump::changentlm and lsadump::setntlm work, but generate Windows events #92. Retrieved December 4, 2017.', 'url': 'https://github.com/gentilkiwi/mimikatz/issues/92'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6d844f0f-1c18-41af-8f19-33e7654edfc3",
                        "lookup_data": {
                            "description": "Find local accounts being created or modified as well as remote authentication configurations",
                            "raw": "author: Austin Clark\ndate: 2019/08/12\ndescription: Find local accounts being created or modified as well as remote authentication\n  configurations\ndetection:\n  condition: keywords\n  keywords:\n  - username\n  - aaa\nfalsepositives:\n- When remote authentication is in place, this should not change often\nfields:\n- CmdSet\nid: 6d844f0f-1c18-41af-8f19-33e7654edfc3\nlevel: high\nlogsource:\n  product: cisco\n  service: aaa\nmodified: 2023/01/04\nstatus: test\ntags:\n- attack.persistence\n- attack.t1136.001\n- attack.t1098\ntitle: Cisco Local Accounts\n",
                            "sigma:id": "6d844f0f-1c18-41af-8f19-33e7654edfc3",
                            "title": "Cisco Local Accounts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "311b6ce2-7890-4383-a8c2-663a9f6b43cd",
                        "lookup_data": {
                            "description": "Detects scenario where if a user is assigned the SeEnableDelegationPrivilege right in Active Directory it would allow control of other AD user objects.",
                            "raw": "author: '@neu5ron'\ndate: 2017/07/30\ndescription: Detects scenario where if a user is assigned the SeEnableDelegationPrivilege\n  right in Active Directory it would allow control of other AD user objects.\ndetection:\n  condition: all of selection*\n  selection_base:\n    EventID: 4704\n  selection_keywords:\n    PrivilegeList|contains: SeEnableDelegationPrivilege\nfalsepositives:\n- Unknown\nid: 311b6ce2-7890-4383-a8c2-663a9f6b43cd\nlevel: high\nlogsource:\n  definition: 'Requirements: Audit Policy : Policy Change > Audit Authorization Policy\n    Change, Group Policy : Computer Configuration\\Windows Settings\\Security Settings\\Advanced\n    Audit Policy Configuration\\Audit Policies\\Policy Change\\Audit Authorization Policy\n    Change'\n  product: windows\n  service: security\nmodified: 2021/12/02\nreferences:\n- https://www.harmj0y.net/blog/activedirectory/the-most-dangerous-user-right-you-probably-have-never-heard-of/\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Enabled User Right in AD to Control User Objects\n",
                            "sigma:id": "311b6ce2-7890-4383-a8c2-663a9f6b43cd",
                            "title": "Enabled User Right in AD to Control User Objects",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2d1b83e4-17c6-4896-a37b-29140b40a788",
                        "lookup_data": {
                            "description": "Detects when an Google Workspace user is granted admin privileges.",
                            "raw": "author: Austin Songer\ndate: 2021/08/23\ndescription: Detects when an Google Workspace user is granted admin privileges.\ndetection:\n  condition: selection\n  selection:\n    eventName:\n    - GRANT_DELEGATED_ADMIN_PRIVILEGES\n    - GRANT_ADMIN_PRIVILEGE\n    eventService: admin.googleapis.com\nfalsepositives:\n- Google Workspace admin role privileges, may be modified by system administrators.\nid: 2d1b83e4-17c6-4896-a37b-29140b40a788\nlevel: medium\nlogsource:\n  product: google_workspace\n  service: google_workspace.admin\nmodified: 2022/10/09\nreferences:\n- https://cloud.google.com/logging/docs/audit/gsuite-audit-logging#3\n- https://developers.google.com/admin-sdk/reports/v1/appendix/activity/admin-user-settings#GRANT_ADMIN_PRIVILEGE\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Google Workspace User Granted Admin Privileges\n",
                            "sigma:id": "2d1b83e4-17c6-4896-a37b-29140b40a788",
                            "title": "Google Workspace User Granted Admin Privileges",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b056de1a-6e6e-4e40-a67e-97c9808cf41b",
                        "lookup_data": {
                            "description": "Detects when a request has been made to transfer a Route 53 domain to another AWS account.",
                            "raw": "author: Elastic, Austin Songer @austinsonger\ndate: 2021/07/22\ndescription: Detects when a request has been made to transfer a Route 53 domain to\n  another AWS account.\ndetection:\n  condition: selection\n  selection:\n    eventName: TransferDomainToAnotherAwsAccount\n    eventSource: route53.amazonaws.com\nfalsepositives:\n- A domain may be transferred to another AWS account by a system or network administrator.\n  Verify whether the user identity, user agent, and/or hostname should be making changes\n  in your environment. Domain transfers from unfamiliar users or hosts should be investigated.\n  If known behavior is causing false positives, it can be exempted from the rule.\nid: b056de1a-6e6e-4e40-a67e-97c9808cf41b\nlevel: low\nlogsource:\n  product: aws\n  service: cloudtrail\nmodified: 2022/10/09\nreferences:\n- https://github.com/elastic/detection-rules/blob/c76a39796972ecde44cb1da6df47f1b6562c9770/rules/integrations/aws/persistence_route_53_domain_transferred_to_another_account.toml\nstatus: test\ntags:\n- attack.persistence\n- attack.credential_access\n- attack.t1098\ntitle: AWS Route 53 Domain Transferred to Another Account\n",
                            "sigma:id": "b056de1a-6e6e-4e40-a67e-97c9808cf41b",
                            "title": "AWS Route 53 Domain Transferred to Another Account",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "102e11e3-2db5-4c9e-bc26-357d42585d21",
                        "lookup_data": {
                            "description": "Detects when a user is removed from a privileged role. Bulk changes should be investigated.",
                            "raw": "author: Mark Morowczynski '@markmorow', Yochana Henderson, '@Yochana-H'\ndate: 2022/08/05\ndescription: Detects when a user is removed from a privileged role. Bulk changes should\n  be investigated.\ndetection:\n  condition: selection\n  selection:\n    properties.message:\n    - Remove eligible member (permanent)\n    - Remove eligible member (eligible)\nfalsepositives:\n- Legtimate administrator actions of removing members from a role\nid: 102e11e3-2db5-4c9e-bc26-357d42585d21\nlevel: high\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-privileged-identity-management#azure-ad-roles-assignment\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Bulk Deletion Changes To Privileged Account Permissions\n",
                            "sigma:id": "102e11e3-2db5-4c9e-bc26-357d42585d21",
                            "title": "Bulk Deletion Changes To Privileged Account Permissions",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
                        "lookup_data": {
                            "description": "Detects suspicious command line that adds an account to the local administrators/administrateurs group",
                            "raw": "author: Florian Roth (Nextron Systems), Nasreddine Bencherchali\ndate: 2022/08/12\ndescription: Detects suspicious command line that adds an account to the local administrators/administrateurs\n  group\ndetection:\n  condition: all of selection_*\n  selection_group:\n    CommandLine|contains:\n    - ' administrators '\n    - ' administrateur'\n  selection_main:\n  - CommandLine|contains|all:\n    - 'localgroup '\n    - ' /add'\n  - CommandLine|contains|all:\n    - 'Add-LocalGroupMember '\n    - ' -Group '\nfalsepositives:\n- Administrative activity\nid: ad720b90-25ad-43ff-9b5e-5c841facc8e5\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/09\nreferences:\n- https://blog.talosintelligence.com/2022/08/recent-cyber-attack.html?m=1\nrelated:\n- id: ffa28e60-bdb1-46e0-9f82-05f7a61cc06e\n  type: similar\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Add User to Local Administrators\n",
                            "sigma:id": "ad720b90-25ad-43ff-9b5e-5c841facc8e5",
                            "title": "Add User to Local Administrators",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "055fb148-60f8-462d-ad16-26926ce050f1",
                        "lookup_data": {
                            "description": "An attacker with the iam:UpdateLoginProfile permission on other users can change the password used to login to the AWS console on any user that already has a login profile setup.\nWith this alert, it is used to detect anyone is changing password on behalf of other users.\n",
                            "raw": "author: toffeebr33k\ndate: 2021/08/09\ndescription: 'An attacker with the iam:UpdateLoginProfile permission on other users\n  can change the password used to login to the AWS console on any user that already\n  has a login profile setup.\n\n  With this alert, it is used to detect anyone is changing password on behalf of other\n  users.\n\n  '\ndetection:\n  condition: selection_source and not filter\n  filter:\n    userIdentity.arn|contains: requestParameters.userName\n  selection_source:\n    eventName: UpdateLoginProfile\n    eventSource: iam.amazonaws.com\nfalsepositives:\n- Legit User Account Administration\nfields:\n- userIdentity.arn\n- requestParameters.userName\n- errorCode\n- errorMessage\nid: 055fb148-60f8-462d-ad16-26926ce050f1\nlevel: high\nlogsource:\n  product: aws\n  service: cloudtrail\nmodified: 2022/10/09\nreferences:\n- https://github.com/RhinoSecurityLabs/AWS-IAM-Privilege-Escalation\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: AWS User Login Profile Was Modified\n",
                            "sigma:id": "055fb148-60f8-462d-ad16-26926ce050f1",
                            "title": "AWS User Login Profile Was Modified",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0255a820-e564-4e40-af2b-6ac61160335c",
                        "lookup_data": {
                            "description": "Addition of domains is seldom and should be verified for legitimacy.",
                            "raw": "author: Thomas Patzke\ndate: 2019/12/03\ndescription: Addition of domains is seldom and should be verified for legitimacy.\ndetection:\n  condition: selection\n  selection:\n    EventID: 4706\nfalsepositives:\n- Legitimate extension of domain structure\nid: 0255a820-e564-4e40-af2b-6ac61160335c\nlevel: medium\nlogsource:\n  product: windows\n  service: security\nstatus: stable\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Addition of Domain Trusts\n",
                            "sigma:id": "0255a820-e564-4e40-af2b-6ac61160335c",
                            "title": "Addition of Domain Trusts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4d78a000-ab52-4564-88a5-7ab5242b20c7",
                        "lookup_data": {
                            "description": "Change to authentication method could be an indicator of an attacker adding an auth method to the account so they can have continued access.",
                            "raw": "author: AlertIQ\ndate: 2021/10/10\ndescription: Change to authentication method could be an indicator of an attacker\n  adding an auth method to the account so they can have continued access.\ndetection:\n  condition: selection\n  selection:\n    Category: UserManagement\n    LoggedByService: Authentication Methods\n    OperationName: User registered security info\nfalsepositives:\n- Unknown\nid: 4d78a000-ab52-4564-88a5-7ab5242b20c7\nlevel: medium\nlogsource:\n  product: azure\n  service: auditlogs\nmodified: 2022/12/25\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-privileged-accounts\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1556\n- attack.persistence\n- attack.defense_evasion\n- attack.t1098\ntitle: Change to Authentication Method\n",
                            "sigma:id": "4d78a000-ab52-4564-88a5-7ab5242b20c7",
                            "title": "Change to Authentication Method",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "04e2a23a-9b29-4a5c-be3a-3542e3f982ba",
                        "lookup_data": {
                            "description": "Detects when an API access service account is granted domain authority.",
                            "raw": "author: Austin Songer\ndate: 2021/08/23\ndescription: Detects when an API access service account is granted domain authority.\ndetection:\n  condition: selection\n  selection:\n    eventName: AUTHORIZE_API_CLIENT_ACCESS\n    eventService: admin.googleapis.com\nfalsepositives:\n- Unknown\nid: 04e2a23a-9b29-4a5c-be3a-3542e3f982ba\nlevel: medium\nlogsource:\n  product: google_workspace\n  service: google_workspace.admin\nmodified: 2022/10/09\nreferences:\n- https://cloud.google.com/logging/docs/audit/gsuite-audit-logging#3\n- https://developers.google.com/admin-sdk/reports/v1/appendix/activity/admin-domain-settings#AUTHORIZE_API_CLIENT_ACCESS\nstatus: test\ntags:\n- attack.persistence\n- attack.t1098\ntitle: Google Workspace Granted Domain API Access\n",
                            "sigma:id": "04e2a23a-9b29-4a5c-be3a-3542e3f982ba",
                            "title": "Google Workspace Granted Domain API Access",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1098",
                "display_name": "Account Manipulation",
                "atomic_tests": [
                    {
                        "name": "Admin Account Manipulate",
                        "auto_generated_guid": "5598f7cb-cf43-455e-883a-f6008c5d46af",
                        "description": "Manipulate Admin Account Name\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$x = Get-Random -Minimum 2 -Maximum 9999\n$y = Get-Random -Minimum 2 -Maximum 9999\n$z = Get-Random -Minimum 2 -Maximum 9999\n$w = Get-Random -Minimum 2 -Maximum 9999\nWrite-Host HaHa_$x$y$z\n\n$fmm = Get-LocalGroupMember -Group Administrators |?{ $_.ObjectClass -match \"User\" -and $_.PrincipalSource -match \"Local\"} | Select Name\n\nforeach($member in $fmm) {\n    if($member -like \"*Administrator*\") {\n        $account = $member.Name.Split(\"\\\")[-1] # strip computername\\\n        $originalDescription = (Get-LocalUser -Name $account).Description\n        Set-LocalUser -Name $account -Description \"atr:$account;$originalDescription\".Substring(0,48) # Keep original name in description\n        Rename-LocalUser -Name $account -NewName \"HaHa_$x$y$z\" # Required due to length limitation\n        Write-Host \"Successfully Renamed $account Account on \" $Env:COMPUTERNAME\n        }\n    }\n",
                            "cleanup_command": "$list = Get-LocalUser |?{$_.Description -like \"atr:*\"}\nforeach($u in $list) {\n  $u.Description -match \"atr:(?<Name>[^;]+);(?<Description>.*)\"\n  Set-LocalUser -Name $u.Name -Description $Matches.Description\n  Rename-LocalUser -Name $u.Name -NewName $Matches.Name\n  Write-Host \"Successfully Reverted Account $($u.Name) to $($Matches.Name) on \" $Env:COMPUTERNAME\n}\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Domain Account and Group Manipulate",
                        "auto_generated_guid": "a55a22e9-a3d3-42ce-bd48-2653adb8f7a9",
                        "description": "Create a random atr-nnnnnnnn account and add it to a domain group (by default, Domain Admins). \n\nThe quickest way to run it is against a domain controller, using `-Session` of `Invoke-AtomicTest`. Alternatively,\nyou need to install PS Module ActiveDirectory (in prereqs) and run the script with appropriare AD privileges to \ncreate the user and alter the group. Automatic installation of the dependency requires an elevated session, \nand is unlikely to work with Powershell Core (untested).\n\nIf you consider running this test against a production Active Directory, the good practise is to create a dedicated\nservice account whose delegation is given onto a dedicated OU for user creation and deletion, as well as delegated\nas group manager of the target group.\n\nExample: `Invoke-AtomicTest -Session $session 'T1098' -TestNames \"Domain Account and Group Manipulate\" -InputArgs @{\"group\" = \"DNSAdmins\" }`\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "account_prefix": {
                                "description": "Prefix string of the random username (by default, atr-). Because the cleanup deletes such account based on\na match `(&(samaccountname=#{account_prefix}-*)(givenName=Test))`, if you are to change it, be careful.\n",
                                "type": "string",
                                "default": "atr-"
                            },
                            "group": {
                                "description": "Name of the group to alter",
                                "type": "string",
                                "default": "Domain Admins"
                            },
                            "create_args": {
                                "description": "Additional string appended to New-ADUser call",
                                "type": "string",
                                "default": ""
                            }
                        },
                        "dependencies": [
                            {
                                "description": "PS Module ActiveDirectory\n",
                                "prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n",
                                "get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"
                            }
                        ],
                        "executor": {
                            "command": "$x = Get-Random -Minimum 2 -Maximum 99\n$y = Get-Random -Minimum 2 -Maximum 99\n$z = Get-Random -Minimum 2 -Maximum 99\n$w = Get-Random -Minimum 2 -Maximum 99\n\nImport-Module ActiveDirectory\n$account = \"#{account_prefix}-$x$y$z\"\nNew-ADUser -Name $account -GivenName \"Test\" -DisplayName $account -SamAccountName $account -Surname $account -Enabled:$False #{create_args}\nAdd-ADGroupMember \"#{group}\" $account\n",
                            "cleanup_command": "Get-ADUser -LDAPFilter \"(&(samaccountname=#{account_prefix}-*)(givenName=Test))\" | Remove-ADUser -Confirm:$False\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "AWS - Create a group and add a user to that group",
                        "auto_generated_guid": "8822c3b0-d9f9-4daf-a043-49f110a31122",
                        "description": "Adversaries create AWS group, add users to specific to that group to elevate their privileges to gain more accesss\n",
                        "supported_platforms": [
                            "iaas:aws"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Name of the AWS group to create",
                                "type": "string",
                                "default": "atomicredteam"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Check if the user exists, we can only add a user to a group if the user exists.\n",
                                "prereq_command": "aws iam list-users | grep #{username}\n",
                                "get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic test\n"
                            }
                        ],
                        "executor": {
                            "command": "aws iam create-group --group-name #{username}\naws iam add-user-to-group --user-name #{username} --group-name #{username}\n",
                            "cleanup_command": "aws iam remove-user-from-group --user-name #{username} --group-name #{username}\naws iam delete-group --group-name #{username}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Azure AD - adding user to Azure AD role",
                        "auto_generated_guid": "0e65ae27-5385-46b4-98ac-607a8ee82261",
                        "description": "The adversaries want to add user to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to the user principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see User as a type.\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "user_principal_name": {
                                "description": "Display Name, or User Principal Name, of the targeted user principal",
                                "type": "string",
                                "default": "SuperUser"
                            },
                            "role_name": {
                                "description": "Name of the targeted Azure AD role",
                                "type": "string",
                                "default": "Global Reader"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was added to $($role.DisplayName) role\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzureADUser -Filter \"DisplayName eq '#{user_principal_name}' or UserPrincipalName eq '#{user_principal_name}'\"\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $user.ObjectId\nWrite-Host \"User $($user.DisplayName) was removed from $($role.DisplayName) role\"\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Azure AD - adding service principal to Azure AD role",
                        "auto_generated_guid": "92c40b3f-c406-4d1f-8d2b-c039bf5009e4",
                        "description": "The adversaries want to add service principal to some Azure AD role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Global Administrator, Application Administrator, \nPrivileged Authentication Administrator (this role can reset Global Administrator password!).\nBy default, the role Global Reader is assigned to service principal in this test.\n\nThe account you use to run the PowerShell command should have Privileged Role Administrator or Global Administrator role in your Azure AD.\n\nDetection hint - check Activity \"Add member to role\" in Azure AD Audit Logs. In targer you will also see Service Principal as a type.\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "service_principal_name": {
                                "description": "Name of the service principal",
                                "type": "string",
                                "default": "SuperSP"
                            },
                            "role_name": {
                                "description": "Name of the targeted Azure AD role",
                                "type": "string",
                                "default": "Global Reader"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\nAdd-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -RefObjectId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.DisplayName)\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzureADServicePrincipal -Filter \"DisplayName eq '#{service_principal_name}'\"\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$role = Get-AzureADDirectoryRole -Filter \"DisplayName eq '#{role_name}'\"\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzureADDirectoryRoleMember -ObjectId $role.ObjectId -MemberId $sp.ObjectId\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.DisplayName) role\"\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Azure - adding user to Azure role in subscription",
                        "auto_generated_guid": "1a94b3fc-b080-450a-b3d8-6d9b57b472ea",
                        "description": "The adversaries want to add user to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to user in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
                        "supported_platforms": [
                            "iaas:azure"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "user_principal_name": {
                                "description": "Display Name, or User Principal Name, of the targeted user principal",
                                "type": "string",
                                "default": "SuperUser"
                            },
                            "role_name": {
                                "description": "Name of the targeted Azure role",
                                "type": "string",
                                "default": "Reader"
                            },
                            "subscription": {
                                "description": "Name of the targeted subscription",
                                "type": "string",
                                "default": "Azure subscription 1"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Az.Resources module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name Az.Resources -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User $($user.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$user = Get-AzADUser | where-object {$_.DisplayName -eq \"#{user_principal_name}\" -or $_.UserPrincipalName -eq \"#{user_principal_name}\" }\nif ($user -eq $null) { Write-Warning \"User not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"}\nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $user.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"User Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Azure - adding service principal to Azure role in subscription",
                        "auto_generated_guid": "c8f4bc29-a151-48da-b3be-4680af56f404",
                        "description": "The adversaries want to add service principal to some Azure role, also called Azure resource role. Threat actor \nmay be interested primarily in highly privileged roles, e.g. Owner, Contributor.\nBy default, the role Reader is assigned to service principal in this test.\n\nNew-AzRoleAssignment cmdlet could be also use to assign user/service principal to resource, resource group and management group.\n\nThe account you use to run the PowerShell command must have Microsoft.Authorization/roleAssignments/write \n(e.g. such as User Access Administrator or Owner) and the Azure Active Directory Graph Directory.Read.All \nand Microsoft Graph Directory.Read.All permissions.\n\nDetection hint - check Operation Name \"Create role assignment\" in subscriptions Activity Logs.\n",
                        "supported_platforms": [
                            "iaas:azure"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "service_principal_name": {
                                "description": "Name of the service principal",
                                "type": "string",
                                "default": "SuperSP"
                            },
                            "role_name": {
                                "description": "Name of the targeted Azure role",
                                "type": "string",
                                "default": "Reader"
                            },
                            "subscription": {
                                "description": "Name of the targeted subscription",
                                "type": "string",
                                "default": "Azure subscription 1"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Az.Resources module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name Az.Resources -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name Az.Resources -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name Az.Resources\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nNew-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was added to $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzAccount -Credential $Credential -ErrorAction Ignore\n\n$sp = Get-AzADServicePrincipal | where-object {$_.DisplayName -eq \"#{service_principal_name}\"}\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n$subscription = Get-AzSubscription | where-object {$_.Name -eq \"#{subscription}\"} \nif ($subscription -eq $null) { Write-Warning \"Subscription not found\"; exit }\n$role = Get-AzRoleDefinition | where-object {$_.Name -eq \"#{role_name}\"}\nif ($role -eq $null) { Write-Warning \"Role not found\"; exit }\n\nRemove-AzRoleAssignment -ObjectId $sp.id -RoleDefinitionId $role.id -Scope /subscriptions/$subscription\nWrite-Host \"Service Principal $($sp.DisplayName) was removed from $($role.Name) role in subscriptions $($subscriptions.Name)\"\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Azure AD - adding permission to application",
                        "auto_generated_guid": "94ea9cc3-81f9-4111-8dde-3fb54f36af4b",
                        "description": "The adversaries want to add permission to newly created application. Application could be then used for persistence or for further operation in the attacked infrastructure. Permissions like AppRoleAssignment.ReadWrite.All or RoleManagement.ReadWrite.Directory in particular can be a valuable target for a threat actor.\nThis technique will create a new app, with the provided name, and give it the provided permission. But if you prefer to add credentials to an existing app, replace in the code: \"Get-AzureADApplication\" instead of \"New-AzureADServicePrincipal\".\nThe DirectoryRecommendations.Read.All permissions has been selected as the default.\n\nThe account you use to run the PowerShell command should have Global Administrator/Application Administrator/Cloud Application Administrator role in your Azure AD.\n\nDetection hint - check Operation Name \"Add app role assignment to service principal\" in subscriptions Activity Logs.\nYou can also take a look at the materials:\nhttps://learnsentinel.blog/2022/01/04/azuread-privesc-sentinel/\nhttps://github.com/reprise99/Sentinel-Queries\nhttps://docs.google.com/presentation/d/1AWx1w0Xcq8ENvOmSjAJswEgEio-il09QWZlGg9PbHqE/edit#slide=id.g10460eb209c_0_2766\nhttps://gist.github.com/andyrobbins/7c3dd62e6ed8678c97df9565ff3523fb\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "application_name": {
                                "description": "Name of the targeted application that will be created",
                                "type": "string",
                                "default": "test_app"
                            },
                            "application_permission": {
                                "description": "Permission from Microsoft Graph Resource API that will be added to application",
                                "type": "string",
                                "default": "DirectoryRecommendations.Read.All"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = New-AzureADApplication -DisplayName \"#{application_name}\"\n$servicePrincipal = New-AzureADServicePrincipal -AppId $aadApplication.AppId\n#$aadApplication = Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\"\n\n#Get Service Principal of Microsoft Graph Resource API \n$graphSP = Get-AzureADServicePrincipal -Filter \"DisplayName eq 'Microsoft Graph'\"\n\n#Initialize RequiredResourceAccess for Microsoft Graph Resource API \n$requiredGraphAccess = New-Object Microsoft.Open.AzureAD.Model.RequiredResourceAccess\n$requiredGraphAccess.ResourceAppId = $graphSP.AppId\n$requiredGraphAccess.ResourceAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.ResourceAccess]\n\n#Set Application Permissions\n$ApplicationPermissions = @('#{application_permission}')\n\n$reqPermission = $graphSP.AppRoles | Where-Object {$_.Value -eq $ApplicationPermissions}\nif($reqPermission)\n{\n$resourceAccess = New-Object Microsoft.Open.AzureAD.Model.ResourceAccess\n$resourceAccess.Type = \"Role\"\n$resourceAccess.Id = $reqPermission.Id    \n#Add required app permission\n$requiredGraphAccess.ResourceAccess.Add($resourceAccess)\n}\nelse\n{\nWrite-Host \"App permission $permission not found in the Graph Resource API\" -ForegroundColor Red\n}\n\n#Add required resource accesses\n$requiredResourcesAccess = New-Object System.Collections.Generic.List[Microsoft.Open.AzureAD.Model.RequiredResourceAccess]\n$requiredResourcesAccess.Add($requiredGraphAccess)\n\n#Set permissions in existing Azure AD App\nSet-AzureADApplication -ObjectId $aadApplication.ObjectId -RequiredResourceAccess $requiredResourcesAccess\n\n$servicePrincipal = Get-AzureADServicePrincipal -Filter \"AppId eq '$($aadApplication.AppId)'\"\n\nNew-AzureADServiceAppRoleAssignment -ObjectId $servicePrincipal.ObjectId -PrincipalId $servicePrincipal.ObjectId -ResourceId $graphSP.ObjectId -Id $reqPermission.Id\n",
                            "cleanup_command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential\n\n$aadApplication = @(Get-AzureADApplication -Filter \"DisplayName eq '#{application_name}'\")\nIf ($aadApplication.Count -eq 0)\n{\n  Write-Host \"App not found: cannot delete it\"\n  exit\n}\nElseIf ($aadApplication.Count -gt 1)\n{\n  Write-Host \"Found several app with name '#{application_name}': one is likely the one this technique created, but as a precaution, none will be deleted. Manual cleanup is required.\"\n  exit\n}\nElse\n{\n  Remove-AzureADApplication -ObjectId $aadApplication[0].ObjectId\n  Write-Host \"Successfully deleted app\"\n}\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Password Change on Directory Service Restore Mode (DSRM) Account",
                        "auto_generated_guid": "d5b886d9-d1c7-4b6e-a7b0-460041bf2823",
                        "description": "Change the password on the Directory Service Restore Mode (DSRM) account using ntdsutil by syncing to existing account\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "sync_account": {
                                "description": "Account to sync password from",
                                "type": "string",
                                "default": "%username%"
                            }
                        },
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": true,
                            "command": "ntdsutil \"set dsrm password\" \"sync from domain account #{sync_account}\" \"q\" \"q\"\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: Short Password",
                        "auto_generated_guid": "fc5f9414-bd67-4f5f-a08e-e5381e29cbd1",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password.  You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default value is 7 characters)",
                                "type": "string",
                                "default": "Uplow-1"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: No Number in Password",
                        "auto_generated_guid": "68190529-069b-4ffc-a942-919704158065",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default is long and has upper and lower case and special character but no number)",
                                "type": "string",
                                "default": "UpperLowerLong-special"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: No Special Character in Password",
                        "auto_generated_guid": "7d984ef2-2db2-4cec-b090-e637e1698f61",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default is long and has upper and lower case and number but no special character)",
                                "type": "string",
                                "default": "UpperLowerLong333noSpecialChar"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: No Uppercase Character in Password",
                        "auto_generated_guid": "b299c120-44a7-4d68-b8e2-8ba5a28511ec",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default is long and has and lower case and special character and number but no uppercase)",
                                "type": "string",
                                "default": "lower-long-special-333"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: No Lowercase Character in Password",
                        "auto_generated_guid": "945da11e-977e-4dab-85d2-f394d03c5887",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default is long and has and upper case and special character and number but no lowercase)",
                                "type": "string",
                                "default": "UPPER-LONG-SPECIAL-333"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: Only Two Character Classes",
                        "auto_generated_guid": "784d1349-5a26-4d20-af5e-d6af53bae460",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default has only upper and lower case characters)",
                                "type": "string",
                                "default": "onlyUPandLowChars"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "Domain Password Policy Check: Common Password Use",
                        "auto_generated_guid": "81959d03-c51f-49a1-bb24-23f1ec885578",
                        "description": "Attempt to change the password of the current domain user in order to check password policy. Ideally, you would only run this atomic test to verify that your password policy is blocking the use of the new password.\nIf the password is succesfully changed to the new password, the credential file will be updated to reflect the new password. You can then run the atomic manually and specify a new password of your choosing, however the\npassword policy will likely prevent you from setting the password back to what it was. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "new_password": {
                                "description": "The password to set for the current domain user (default is Season and current year combo)",
                                "type": "string",
                                "default": "Spring$((Get-Date).Year)!"
                            },
                            "cred_file": {
                                "description": "A file containing the password of the current user",
                                "type": "path",
                                "default": "$env:LOCALAPPDATA\\AtomicRedTeam\\$env:USERNAME.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Password for current user must be stored in a credential file\n",
                                "prereq_command": "if (Test-Path #{cred_file}) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{cred_file}\") -ErrorAction Ignore | Out-Null\n$cred = Get-Credential -UserName  $env:USERNAME -message \"Enter password for $env:USERNAME to use during password change attempt\"\n$cred.Password | ConvertFrom-SecureString | Out-File \"#{cred_file}\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "$credFile = \"#{cred_file}\"\nif (Test-Path $credFile) {\n    $cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $env:USERNAME, (Get-Content $credFile | ConvertTo-SecureString)\n    if($cred.GetNetworkCredential().Password -eq \"#{new_password}\"){\n      Write-Host -ForegroundColor Yellow \"The new password is the same as the password stored in the credential file. Please specify a different new password.\"; exit -1\n    }\n    try {\n        $newPassword = ConvertTo-SecureString #{new_password} -AsPlainText -Force\n        Set-ADAccountPassword -Identity $env:USERNAME -OldPassword $cred.password -NewPassword $newPassword\n    }\n    catch { \n        $_.Exception\n        $errCode = $_.Exception.ErrorCode\n        Write-Host \"Error code: $errCode\"\n        if ($errCode -eq 86) {\n            Write-Host -ForegroundColor Yellow \"The stored password for the current user is incorrect. Please run the prereq commands to set the correct credentials\"\n            Remove-Item $credFile\n        }\n        exit $errCode\n    }\n    Write-Host -ForegroundColor Cyan \"Successfully changed the password to #{new_password}\"\n    $newCred = New-Object System.Management.Automation.PSCredential ($env:USERNAME, $(ConvertTo-SecureString \"#{new_password}\" -AsPlainText -Force))\n    $newCred.Password | ConvertFrom-SecureString | Out-File $credFile\n}\nelse {\n    Write-Host -ForegroundColor Yellow \"You must store the password of the current user by running the prerequisite commands first\"\n}\n"
                        }
                    },
                    {
                        "name": "GCP - Delete Service Account Key",
                        "auto_generated_guid": "7ece1dea-49f1-4d62-bdcc-5801e3292510",
                        "description": "This Atomic will: \n  - Create a service account\n  - Create a service account key, \n  - Store the result of retrieving a single key for that service account as a variable\n  - Pass that variable for deletion\n  - Delete the service account\n\nThe idea for this Atomic came from a Rule published by the Elastic team.\n\nIdentifies the deletion of an Identity and Access Management (IAM) service account key in Google Cloud Platform (GCP).\nEach service account is associated with two sets of public/private RSA key pairs that are used to authenticate. \nIf a key is deleted, the application will no longer be able to access Google Cloud resources using that key. A security best practice is to rotate your service account keys regularly.\n\nReference: https://github.com/elastic/detection-rules/blob/main/rules/integrations/gcp/impact_gcp_storage_bucket_deleted.toml\n",
                        "supported_platforms": [
                            "iaas:gcp"
                        ],
                        "input_arguments": {
                            "project_id": {
                                "description": "ID of the GCP Project you to execute the command against.",
                                "type": "string",
                                "default": "atomic-test-1"
                            },
                            "service_name": {
                                "description": "The name of the service account.",
                                "type": "string",
                                "default": "atomic-service-account"
                            }
                        },
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "gcloud config set project #{project_id}\nKEY=`gcloud iam service-accounts keys list --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --format=\"value(KEY_ID)\" --limit=1`\ngcloud iam service-accounts keys delete $KEY --iam-account=#{service_name}@#{project_id}.iam.gserviceaccount.com --quiet\n",
                            "cleanup_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform state rm google_service_account_key.key\nterraform destroy -auto-approve\n"
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Requires gcloud\n",
                                "prereq_command": "if [ -x \"$(command -v gcloud)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "echo \"Please Install Google Cloud SDK before running this atomic test : https://cloud.google.com/sdk/docs/install\"\n"
                            },
                            {
                                "description": "Check if user is logged in \n",
                                "prereq_command": "gcloud config get-value account\n",
                                "get_prereq_command": "gcloud auth login --no-launch-browser\n"
                            },
                            {
                                "description": "Check if terraform is installed.\n",
                                "prereq_command": "terraform version\n",
                                "get_prereq_command": "echo Please install the terraform.\n"
                            },
                            {
                                "description": "Create dependency resources using terraform\n",
                                "prereq_command": "stat \"$PathToAtomicsFolder/T1098/src/T1098-17/terraform.tfstate\"\n",
                                "get_prereq_command": "cd \"$PathToAtomicsFolder/T1098/src/T1098-17/\"\nterraform init\nterraform apply -auto-approve\n"
                            }
                        ]
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:49:51"
}