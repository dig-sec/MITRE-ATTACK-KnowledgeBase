{
    "id": "T1528",
    "name": "Steal Application Access Token",
    "description": "Adversaries can steal user application access tokens as a means of acquiring credentials to access remote systems and resources. This can occur through social engineering and typically requires user action to grant access.\nApplication access tokens are used to make authorized API requests on behalf of a user and are commonly used as a way to access resources in cloud-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials.\nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token. The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a link through [Spearphishing Link](T1566.002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](T1550.001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\nAdversaries have been seen targeting Gmail, Microsoft Outlook, and Yahoo Mail users.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017)",
    "platforms": "SaaS, Office 365, Azure AD, Google Workspace",
    "kill_chain_phases": "Credential Access",
    "data_sources": "User Account: User Account Modification",
    "detection": "Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a “High severity app permissions” policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.\nSecurity analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old “Last authorized” fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.\nAdministrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.",
    "url": "https://attack.mitre.org/techniques/T1528",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                    "9b2cc4c4-2ad4-416d-8e8e-ee6aa6f5035a",
                    "e06ac91d-b9e6-443d-8e5b-af749e7aa6b6",
                    "d2eb17db-1d39-41dc-b57f-301f6512fa75",
                    "a6355fbe-f36f-45d8-8efc-ab42465cbc52",
                    "25cde13e-8e20-4c29-b949-4e795b76f16f",
                    "0055ad1f-be85-4798-83cf-a6da17c993b3",
                    "6902955a-01b7-432c-b32a-6f5f81d8f624",
                    "7091372f-623c-4293-bc37-20c32b3492be",
                    "c1d147ae-a951-48e5-8b41-dcd0170c7213",
                    "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                    "890c9858-598c-401d-a4d5-c67ebcdd703a",
                    "6d3a3952-6530-44a3-8554-cf17c116c615",
                    "8a4519e8-e64a-40b6-ae85-ba8ad2177559"
                ],
                "lookup_results": [
                    {
                        "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                        "lookup_data": {
                            "description": "Prynt Stealer Spotted In the Wild - A New Info Stealer Performing Clipper And Keylogger Activities",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/4b1c186d-8bf2-4297-9cbc-f8f00192770b.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1666601854",
                            "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9b2cc4c4-2ad4-416d-8e8e-ee6aa6f5035a",
                        "lookup_data": {
                            "description": "Detects when an end user consents to an application",
                            "raw": "author: Bailey Bercik '@baileybercik', Mark Morowczynski '@markmorow'\ndate: 2022/07/28\ndescription: Detects when an end user consents to an application\ndetection:\n  condition: selection\n  selection:\n    ConsentContext.IsAdminConsent: 'false'\nfalsepositives:\n- Unknown\nid: 9b2cc4c4-2ad4-416d-8e8e-ee6aa6f5035a\nlevel: low\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#end-user-consent\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: End User Consent\n",
                            "sigma:id": "9b2cc4c4-2ad4-416d-8e8e-ee6aa6f5035a",
                            "title": "End User Consent",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e06ac91d-b9e6-443d-8e5b-af749e7aa6b6",
                        "lookup_data": {
                            "description": "Detects URL pattern used by iOS Implant",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/08/30\ndescription: Detects URL pattern used by iOS Implant\ndetection:\n  condition: selection\n  selection:\n    c-uri|contains: /list/suc\\?name=\nfalsepositives:\n- Unknown\nfields:\n- ClientIP\n- c-uri\n- c-useragent\nid: e06ac91d-b9e6-443d-8e5b-af749e7aa6b6\nlevel: critical\nlogsource:\n  category: proxy\nmodified: 2022/08/15\nreferences:\n- https://googleprojectzero.blogspot.com/2019/08/implant-teardown.html\n- https://twitter.com/craiu/status/1167358457344925696\nstatus: test\ntags:\n- attack.execution\n- attack.t1203\n- attack.collection\n- attack.t1005\n- attack.t1119\n- attack.credential_access\n- attack.t1528\n- attack.t1552.001\ntitle: iOS Implant URL Pattern\n",
                            "sigma:id": "e06ac91d-b9e6-443d-8e5b-af749e7aa6b6",
                            "title": "iOS Implant URL Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
                        "lookup_data": {
                            "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
                            "raw": "author: '@SerkinValery'\ndate: 2022/09/16\ndescription: Detects an access to authentication tokens and accounts of Microsoft\n  Teams desktop application.\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith: \\Microsoft\\Teams\\current\\Teams.exe\n  selection:\n    CommandLine|contains:\n    - \\Microsoft\\Teams\\Cookies\n    - \\Microsoft\\Teams\\Local Storage\\leveldb\nfalsepositives:\n- Unknown\nid: d2eb17db-1d39-41dc-b57f-301f6512fa75\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/27\nreferences:\n- https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/\n- https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: Suspicious Command With Teams Objects Pathes\n",
                            "sigma:id": "d2eb17db-1d39-41dc-b57f-301f6512fa75",
                            "title": "Suspicious Command With Teams Objects Pathes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a6355fbe-f36f-45d8-8efc-ab42465cbc52",
                        "lookup_data": {
                            "description": "Detects when highly privileged delegated permissions are granted on behalf of all users",
                            "raw": "author: Bailey Bercik '@baileybercik', Mark Morowczynski '@markmorow'\ndate: 2022/07/28\ndescription: Detects when highly privileged delegated permissions are granted on behalf\n  of all users\ndetection:\n  condition: selection\n  selection:\n    properties.message: Add delegated permission grant\nfalsepositives:\n- When the permission is legitimately needed for the app\nid: a6355fbe-f36f-45d8-8efc-ab42465cbc52\nlevel: high\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#application-granted-highly-privileged-permissions\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: Delegated Permissions Granted For All Users\n",
                            "sigma:id": "a6355fbe-f36f-45d8-8efc-ab42465cbc52",
                            "title": "Delegated Permissions Granted For All Users",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "25cde13e-8e20-4c29-b949-4e795b76f16f",
                        "lookup_data": {
                            "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
                            "raw": "author: '@SerkinValery'\ndate: 2022/09/16\ndescription: Detects an access to authentication tokens and accounts of Microsoft\n  Teams desktop application.\ndetection:\n  condition: selection and not filter\n  filter:\n    ProcessName|contains: \\Microsoft\\Teams\\current\\Teams.exe\n  selection:\n    EventID: 4663\n    ObjectName|contains:\n    - \\Microsoft\\Teams\\Cookies\n    - \\Microsoft\\Teams\\Local Storage\\leveldb\nfalsepositives:\n- Unknown\nid: 25cde13e-8e20-4c29-b949-4e795b76f16f\nlevel: high\nlogsource:\n  product: windows\n  service: security\nreferences:\n- https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/\n- https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: Suspicious Teams Application Related ObjectAcess Event\n",
                            "sigma:id": "25cde13e-8e20-4c29-b949-4e795b76f16f",
                            "title": "Suspicious Teams Application Related ObjectAcess Event",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0055ad1f-be85-4798-83cf-a6da17c993b3",
                        "lookup_data": {
                            "description": "Detects when a configuration change is made to an applications URI.\nURIs for domain names that no longer exist (dangling URIs), not using HTTPS, wildcards at the end of the domain, URIs that are no unique to that app, or URIs that point to domains you do not control should be investigated.\n",
                            "raw": "author: Mark Morowczynski '@markmorow', Bailey Bercik '@baileybercik'\ndate: 2022/06/02\ndescription: 'Detects when a configuration change is made to an applications URI.\n\n  URIs for domain names that no longer exist (dangling URIs), not using HTTPS, wildcards\n  at the end of the domain, URIs that are no unique to that app, or URIs that point\n  to domains you do not control should be investigated.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    properties.message: Update Application Sucess- Property Name AppAddress\nfalsepositives:\n- When and administrator is making legitimate URI configuration changes to an application.\n  This should be a planned event.\nid: 0055ad1f-be85-4798-83cf-a6da17c993b3\nlevel: high\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#application-configuration-changes\nstatus: experimental\ntags:\n- attack.t1528\n- attack.t1078.004\n- attack.persistence\n- attack.credential_access\n- attack.privilege_escalation\ntitle: Application URI Configuration Changes\n",
                            "sigma:id": "0055ad1f-be85-4798-83cf-a6da17c993b3",
                            "title": "Application URI Configuration Changes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6902955a-01b7-432c-b32a-6f5f81d8f624",
                        "lookup_data": {
                            "description": "Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.",
                            "raw": "author: '@SerkinValery'\ndate: 2022/09/16\ndescription: Detects an access to authentication tokens and accounts of Microsoft\n  Teams desktop application.\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|contains: \\Microsoft\\Teams\\current\\Teams.exe\n  selection:\n    TargetFilename|contains:\n    - \\Microsoft\\Teams\\Cookies\n    - \\Microsoft\\Teams\\Local Storage\\leveldb\nfalsepositives:\n- Unknown\nid: 6902955a-01b7-432c-b32a-6f5f81d8f624\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://www.bleepingcomputer.com/news/security/microsoft-teams-stores-auth-tokens-as-cleartext-in-windows-linux-macs/\n- https://www.vectra.ai/blogpost/undermining-microsoft-teams-security-by-mining-tokens\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: Suspicious File Event With Teams Objects\n",
                            "sigma:id": "6902955a-01b7-432c-b32a-6f5f81d8f624",
                            "title": "Suspicious File Event With Teams Objects",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7091372f-623c-4293-bc37-20c32b3492be",
                        "lookup_data": {
                            "description": "Detects when end user consent is blocked due to risk-based consent.",
                            "raw": "author: Bailey Bercik '@baileybercik', Mark Morowczynski '@markmorow'\ndate: 2022/07/10\ndescription: Detects when end user consent is blocked due to risk-based consent.\ndetection:\n  condition: selection\n  selection:\n    failure_status_reason: Microsoft.online.Security.userConsentBlockedForRiskyAppsExceptions\nfalsepositives:\n- Unknown\nid: 7091372f-623c-4293-bc37-20c32b3492be\nlevel: medium\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#end-user-stopped-due-to-risk-based-consent\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: End User Consent Blocked\n",
                            "sigma:id": "7091372f-623c-4293-bc37-20c32b3492be",
                            "title": "End User Consent Blocked",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c1d147ae-a951-48e5-8b41-dcd0170c7213",
                        "lookup_data": {
                            "description": "Detects when an application is granted delegated or app role permissions for Microsoft Graph, Exchange, Sharepoint, or Azure AD",
                            "raw": "author: Bailey Bercik '@baileybercik', Mark Morowczynski '@markmorow'\ndate: 2022/07/10\ndescription: Detects when an application is granted delegated or app role permissions\n  for Microsoft Graph, Exchange, Sharepoint, or Azure AD\ndetection:\n  condition: selection\n  selection:\n    properties.message:\n    - Add delegated permission grant\n    - Add app role assignment to service principal\nfalsepositives:\n- When the permission is legitimately needed for the app\nid: c1d147ae-a951-48e5-8b41-dcd0170c7213\nlevel: high\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#application-granted-highly-privileged-permissions\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: App Granted Microsoft Permissions\n",
                            "sigma:id": "c1d147ae-a951-48e5-8b41-dcd0170c7213",
                            "title": "App Granted Microsoft Permissions",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                        "lookup_data": {
                            "description": "Detects creation of default named pipes used by the Koh tool",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/08\ndescription: Detects creation of default named pipes used by the Koh tool\ndetection:\n  condition: selection\n  selection:\n    PipeName|contains:\n    - \\imposecost\n    - \\imposingcost\nfalsepositives:\n- Unlikely\nid: 0adc67e0-a68f-4ffd-9c43-28905aad5d6a\nlevel: critical\nlogsource:\n  category: pipe_created\n  definition: Note that you have to configure logging for Named Pipe Events in Sysmon\n    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon\n    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth\n    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,\n    https://github.com/olafhartong/sysmon-modular. How to test detection? You can\n    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575\n  product: windows\nreferences:\n- https://github.com/GhostPack/Koh/blob/0283d9f3f91cf74732ad377821986cfcb088e20a/Clients/BOF/KohClient.c#L12\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.credential_access\n- attack.t1528\n- attack.t1134.001\ntitle: Koh Default Named Pipes\n",
                            "sigma:id": "0adc67e0-a68f-4ffd-9c43-28905aad5d6a",
                            "title": "Koh Default Named Pipes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "890c9858-598c-401d-a4d5-c67ebcdd703a",
                        "lookup_data": {
                            "mitre-attack-id": "T1528",
                            "mitre-cti:description": "Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\n\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\n\nIn Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container’s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)\n\nToken theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \n \nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\n\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \n\n",
                            "mitre-cti:name": "Steal Application Access Token",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['SaaS', 'Office 365', 'Azure AD', 'Google Workspace', 'Containers'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Suzy Schapperle - Microsoft Azure Red Team', 'Shailesh Tiwary (Indian Army)', 'Mark Wee', 'Jeff Sakowicz, Microsoft Identity Developer Platform Services (IDPM Services)', 'Saisha Agrawal, Microsoft Threat Intelligent Center (MSTIC)', 'Ram Pliskin, Microsoft Azure Security Center', 'Jen Burns, HubSpot'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--890c9858-598c-401d-a4d5-c67ebcdd703a', 'created': '2019-09-04T15:54:25.684Z', 'x_mitre_version': '1.2', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1528', 'url': 'https://attack.mitre.org/techniques/T1528'}, {'source_name': 'Amnesty OAuth Phishing Attacks, August 2019', 'url': 'https://www.amnesty.org/en/latest/research/2019/08/evolving-phishing-attacks-targeting-journalists-and-human-rights-defenders-from-the-middle-east-and-north-africa/', 'description': 'Amnesty International. (2019, August 16). Evolving Phishing Attacks Targeting Journalists and Human Rights Defenders from the Middle-East and North Africa. Retrieved October 8, 2019.'}, {'source_name': 'Auth0 Understanding Refresh Tokens', 'url': 'https://auth0.com/learn/refresh-tokens/', 'description': 'Auth0 Inc.. (n.d.). Understanding Refresh Tokens. Retrieved December 16, 2021.'}, {'source_name': 'Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019', 'url': 'https://auth0.com/blog/why-should-use-accesstokens-to-secure-an-api/', 'description': 'Auth0. (n.d.). Why You Should Always Use Access Tokens to Secure APIs. Retrieved September 12, 2019.'}, {'source_name': 'Trend Micro Pawn Storm OAuth 2017', 'url': 'https://blog.trendmicro.com/trendlabs-security-intelligence/pawn-storm-abuses-open-authentication-advanced-social-engineering-attacks', 'description': 'Hacquebord, F.. (2017, April 25). Pawn Storm Abuses Open Authentication in Advanced Social Engineering Attacks. Retrieved October 4, 2019.'}, {'source_name': 'Kubernetes Service Accounts', 'url': 'https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/', 'description': 'Kubernetes. (2022, February 26). Configure Service Accounts for Pods. Retrieved April 1, 2022.'}, {'source_name': 'Microsoft - Azure AD Identity Tokens - Aug 2019', 'url': 'https://docs.microsoft.com/en-us/azure/active-directory/develop/access-tokens', 'description': 'Microsoft. (2019, August 29). Microsoft identity platform access tokens. Retrieved September 12, 2019.'}, {'source_name': 'Microsoft - Azure AD App Registration - May 2019', 'url': 'https://docs.microsoft.com/en-us/azure/active-directory/develop/quickstart-register-app', 'description': 'Microsoft. (2019, May 8). Quickstart: Register an application with the Microsoft identity platform. Retrieved September 12, 2019.'}, {'source_name': 'Microsoft - OAuth Code Authorization flow - June 2019', 'url': 'https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow', 'description': 'Microsoft. (n.d.). Microsoft identity platform and OAuth 2.0 authorization code flow. Retrieved September 12, 2019.'}, {'source_name': 'Microsoft Identity Platform Protocols May 2019', 'url': 'https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-v2-protocols', 'description': 'Microsoft. (n.d.). Retrieved September 12, 2019.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': \"Adversaries can steal application access tokens as a means of acquiring credentials to access remote systems and resources.\\n\\nApplication access tokens are used to make authorized API requests on behalf of a user or service and are commonly used as a way to access resources in cloud and container-based applications and software-as-a-service (SaaS).(Citation: Auth0 - Why You Should Always Use Access Tokens to Secure APIs Sept 2019) OAuth is one commonly implemented framework that issues tokens to users for access to systems. Adversaries who steal account API tokens in cloud and containerized environments may be able to access data and perform actions with the permissions of these accounts, which can lead to privilege escalation and further compromise of the environment.\\n\\nIn Kubernetes environments, processes running inside a container communicate with the Kubernetes API server using service account tokens. If a container is compromised, an attacker may be able to steal the container’s token and thereby gain access to Kubernetes API commands.(Citation: Kubernetes Service Accounts)\\n\\nToken theft can also occur through social engineering, in which case user action may be required to grant access. An application desiring access to cloud-based services or protected APIs can gain entry using OAuth 2.0 through a variety of authorization protocols. An example commonly-used sequence is Microsoft's Authorization Code Grant flow.(Citation: Microsoft Identity Platform Protocols May 2019)(Citation: Microsoft - OAuth Code Authorization flow - June 2019) An OAuth access token enables a third-party application to interact with resources containing user data in the ways requested by the application without obtaining user credentials. \\n \\nAdversaries can leverage OAuth authorization by constructing a malicious application designed to be granted access to resources with the target user's OAuth token.(Citation: Amnesty OAuth Phishing Attacks, August 2019)(Citation: Trend Micro Pawn Storm OAuth 2017) The adversary will need to complete registration of their application with the authorization server, for example Microsoft Identity Platform using Azure Portal, the Visual Studio IDE, the command-line interface, PowerShell, or REST API calls.(Citation: Microsoft - Azure AD App Registration - May 2019) Then, they can send a [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002) to the target user to entice them to grant access to the application. Once the OAuth access token is granted, the application can gain potentially long-term access to features of the user account through [Application Access Token](https://attack.mitre.org/techniques/T1550/001).(Citation: Microsoft - Azure AD Identity Tokens - Aug 2019)\\n\\nApplication access tokens may function within a limited lifetime, limiting how long an adversary can utilize the stolen token. However, in some cases, adversaries can also steal application refresh tokens(Citation: Auth0 Understanding Refresh Tokens), allowing them to obtain new access tokens without prompting the user.  \\n\\n\", 'modified': '2022-04-21T16:25:11.482Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Steal Application Access Token', 'x_mitre_detection': 'Administrators should set up monitoring to trigger automatic alerts when policy criteria are met. For example, using a Cloud Access Security Broker (CASB), admins can create a “High severity app permissions” policy that generates alerts if apps request high severity permissions or send permissions requests for too many users.\\n\\nSecurity analysts can hunt for malicious apps using the tools available in their CASB, identity provider, or resource provider (depending on platform.) For example, they can filter for apps that are authorized by a small number of users, apps requesting high risk permissions, permissions incongruous with the app’s purpose, or apps with old “Last authorized” fields. A specific app can be investigated using an activity log displaying activities the app has performed, although some activities may be mis-logged as being performed by the user. App stores can be useful resources to further investigate suspicious apps.\\n\\nAdministrators can set up a variety of logs and leverage audit tools to monitor actions that can be conducted as a result of OAuth 2.0 access. For instance, audit reports enable admins to identify privilege escalation actions such as role creations or policy modifications, which could be actions performed after initial access.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['User Account: User Account Modification'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6d3a3952-6530-44a3-8554-cf17c116c615",
                        "lookup_data": {
                            "description": "Detects possible search for office tokens via CLI by looking for the string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/10/25\ndescription: Detects possible search for office tokens via CLI by looking for the\n  string \"eyJ0eX\". This string is used as an anchor to look for the start of the JWT\n  token used by office and similar apps.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - eyJ0eXAiOi\n    - ' eyJ0eX'\n    - ' \"eyJ0eX\"'\n    - ' ''eyJ0eX'''\nfalsepositives:\n- Legitimate command-lines containing the string mentioned in the command-line\nid: 6d3a3952-6530-44a3-8554-cf17c116c615\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://mrd0x.com/stealing-tokens-from-office-applications/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1528\ntitle: Suspicious Office Token Search Via CLI\n",
                            "sigma:id": "6d3a3952-6530-44a3-8554-cf17c116c615",
                            "title": "Suspicious Office Token Search Via CLI",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8a4519e8-e64a-40b6-ae85-ba8ad2177559",
                        "lookup_data": {
                            "description": "Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)",
                            "raw": "author: Max Altgelt (Nextron Systems)\ndate: 2022/06/02\ndescription: Detects process creation with a renamed BrowserCore.exe (used to extract\n  Azure tokens)\ndetection:\n  condition: selection and not 1 of filter*\n  filter_realbrowsercore:\n    Image|endswith: \\BrowserCore.exe\n  selection:\n    OriginalFileName: BrowserCore.exe\nfalsepositives:\n- Unknown\nid: 8a4519e8-e64a-40b6-ae85-ba8ad2177559\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/mariuszbit/status/1531631015139102720\nstatus: experimental\ntags:\n- attack.t1528\n- attack.t1036.003\ntitle: Process Creation with Renamed BrowserCore.exe\n",
                            "sigma:id": "8a4519e8-e64a-40b6-ae85-ba8ad2177559",
                            "title": "Process Creation with Renamed BrowserCore.exe",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1528",
                "display_name": "Steal Application Access Token",
                "atomic_tests": [
                    {
                        "name": "Azure - Dump All Azure Key Vaults with Microburst",
                        "auto_generated_guid": "1b83cddb-eaa7-45aa-98a5-85fb0a8807ea",
                        "description": "Upon successful execution of this test, the names, locations, and contents of key vaults within an Azure account will be output to a file.\nSee - https://www.netspi.com/blog/technical/cloud-penetration-testing/a-beginners-guide-to-gathering-azure-passwords/",
                        "supported_platforms": [
                            "iaas:azure"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": null
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "T1082Az"
                            },
                            "output_file": {
                                "description": "File to dump results to",
                                "type": "string",
                                "default": "$env:temp\\T1528Test1.txt"
                            },
                            "subscription_id": {
                                "description": "Azure subscription id to search",
                                "type": "string",
                                "default": null
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "The Get-AzurePasswords script must exist in PathToAtomicsFolder\\..\\ExternalPayloads.\n",
                                "prereq_command": "if (test-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"){exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\ninvoke-webrequest \"https://raw.githubusercontent.com/NetSPI/MicroBurst/c771c665a2c71f9c5ba474869cd1c211ebee68fd/AzureRM/Get-AzurePasswords.ps1\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n"
                            },
                            {
                                "description": "The Azure RM module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureRM -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureRM -Force -allowclobber\n"
                            },
                            {
                                "description": "The Azure module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name Azure -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name Azure -Force -allowclobber\n"
                            }
                        ],
                        "executor": {
                            "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\Get-AzurePasswords.ps1\"\n$Password = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Password\nConnect-AzureRmAccount -Credential $Credential\nGet-AzurePasswords -subscription '#{subscription_id}' > #{output_file}\ncat #{output_file}\n",
                            "cleanup_command": "remove-item #{output_file} -force -erroraction silentlycontinue\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 15:02:37"
}