{
    "id": "T1553.001",
    "name": "Gatekeeper Bypass",
    "description": "Adversaries may modify file attributes that signify programs are from untrusted sources to subvert Gatekeeper controls in macOS. When documents, applications, or programs are downloaded an extended attribute (xattr) called `com.apple.quarantine` can be set on the file by the application performing the download. This attribute, also known as a quarantine flag, is read by Apple's Gatekeeper defense program when the file is run and provides a prompt to the user to allow or deny execution. Gatekeeper also monitors an application's usage of dynamic libraries (dylibs) loaded outside the application folder on any quarantined binary, often using the `dlopen` function. If the quarantine flag is set in macOS 10.15+, Gatekeeper also checks for a notarization ticket and sends a cryptographic hash to Apple's servers to check for validity for all unsigned executables.(Citation: TheEclecticLightCompany apple notarization )(Citation: Bypassing Gatekeeper)\nThe quarantine flag is an opt-in system and not imposed by macOS. If an application opts-in, a file downloaded from the Internet will be given a quarantine flag before being saved to disk. Any application or user with write permissions to the file can change or strip the quarantine flag. With elevated permission (sudo), this attribute can be removed from any file. The presence of the `com.apple.quarantine` quarantine flag can be checked with the xattr command `xattr -l /path/to/examplefile`. Similarly, this attribute can be recursively removed from all files in a folder using xattr, `sudo xattr -d com.apple.quarantine /path/to/folder`.(Citation: 20 macOS Common Tools and Techniques)(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: theevilbit gatekeeper bypass 2021)\nApps and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the `curl` command do not set this flag. Additionally, it is possible to avoid setting this flag using [Drive-by Compromise](T1189), which may bypass Gatekeeper. (Citation: Methods of Mac Malware Persistence)(Citation: Clearing quarantine attribute)(Citation: OceanLotus for OS X)",
    "platforms": "macOS",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "File: File Metadata, File: File Modification, Process: Process Creation, Command: Command Execution",
    "detection": "The removal of the `com.apple.quarantine` flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as `xattr`. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the `com.apple.quarantine` flag when performing updates.\nReview `false` values under the `LSFileQuarantineEnabled` entry in an application's `Info.plist` file (required by every application). `false` under `LSFileQuarantineEnabled` indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified `LSFileQuarantineEnabled` entry will default to not setting the quarantine flag.\nQuarantineEvents is a SQLite database containing a list of all files assigned the `com.apple.quarantine` attribute, located at `~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2`. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citation: TheEclecticLightCompany Quarantine and the flag)",
    "url": "https://attack.mitre.org/techniques/T1553/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "f5141b6d-9f42-41c6-a7bf-2a780678b29b",
                    "31a0a2ac-c67c-4a7e-b9ed-6a96477d4e8e"
                ],
                "lookup_results": [
                    {
                        "uuid": "f5141b6d-9f42-41c6-a7bf-2a780678b29b",
                        "lookup_data": {
                            "description": "Detects macOS Gatekeeper bypass via xattr utility",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2020/10/19\ndescription: Detects macOS Gatekeeper bypass via xattr utility\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - -r\n    - com.apple.quarantine\n    Image|endswith: /xattr\nfalsepositives:\n- Legitimate activities\nid: f5141b6d-9f42-41c6-a7bf-2a780678b29b\nlevel: low\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2021/11/27\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1553.001/T1553.001.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1553.001\ntitle: Gatekeeper Bypass via Xattr\n",
                            "sigma:id": "f5141b6d-9f42-41c6-a7bf-2a780678b29b",
                            "title": "Gatekeeper Bypass via Xattr",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "31a0a2ac-c67c-4a7e-b9ed-6a96477d4e8e",
                        "lookup_data": {
                            "mitre-attack-id": "T1553.001",
                            "mitre-cti:description": "Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )\n\nBased on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:\n\n1. Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)\n\n2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.\n\n3. Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID.\n\n4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an “unauthorized app” and the security policy will be modified.\n\nAdversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)\n\nApplications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).",
                            "mitre-cti:name": "Gatekeeper Bypass",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-21T19:30:58.414Z', 'name': 'Gatekeeper Bypass', 'description': 'Adversaries may modify file attributes and subvert Gatekeeper functionality to evade user prompts and execute untrusted programs. Gatekeeper is a set of technologies that act as layer of Apple’s security model to ensure only trusted applications are executed on a host. Gatekeeper was built on top of File Quarantine in Snow Leopard (10.6, 2009) and has grown to include Code Signing, security policy compliance, Notarization, and more. Gatekeeper also treats applications running for the first time differently than reopened applications.(Citation: TheEclecticLightCompany Quarantine and the flag)(Citation: TheEclecticLightCompany apple notarization )\\n\\nBased on an opt-in system, when files are downloaded an extended attribute (xattr) called `com.apple.quarantine` (also known as a quarantine flag) can be set on the file by the application performing the download. Launch Services opens the application in a suspended state. For first run applications with the quarantine flag set, Gatekeeper executes the following functions:\\n\\n1. Checks extended attribute – Gatekeeper checks for the quarantine flag, then provides an alert prompt to the user to allow or deny execution.(Citation: OceanLotus for OS X)(Citation: 20 macOS Common Tools and Techniques)\\n\\n2. Checks System Policies - Gatekeeper checks the system security policy, allowing execution of apps downloaded from either just the App Store or the App Store and identified developers.\\n\\n3. Code Signing – Gatekeeper checks for a valid code signature from an Apple Developer ID.\\n\\n4. Notarization - Using the `api.apple-cloudkit.com` API, Gatekeeper reaches out to Apple servers to verify or pull down the notarization ticket and ensure the ticket is not revoked. Users can override notarization, which will result in a prompt of executing an “unauthorized app” and the security policy will be modified.\\n\\nAdversaries can subvert one or multiple security controls within Gatekeeper checks through logic errors (e.g. [Exploitation for Defense Evasion](https://attack.mitre.org/techniques/T1211)), unchecked file types, and external libraries. For example, prior to macOS 13 Ventura, code signing and notarization checks were only conducted on first launch, allowing adversaries to write malicious executables to previously opened applications in order to bypass Gatekeeper security checks.(Citation: theevilbit gatekeeper bypass 2021)(Citation: Application Bundle Manipulation Brandon Dalton)\\n\\nApplications and files loaded onto the system from a USB flash drive, optical disk, external hard drive, from a drive shared over the local network, or using the curl command may not set the quarantine flag. Additionally, it is possible to avoid setting the quarantine flag using [Drive-by Compromise](https://attack.mitre.org/techniques/T1189).', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': \"The removal of the <code>com.apple.quarantine</code> flag by a user instead of the operating system is a suspicious action and should be examined further. Monitor and investigate attempts to modify extended file attributes with utilities such as <code>xattr</code>. Built-in system utilities may generate high false positive alerts, so compare against baseline knowledge for how systems are typically used and correlate modification events with other indications of malicious activity where possible. Monitor software update frameworks that strip the <code>com.apple.quarantine</code> flag when performing updates. \\n\\nReview <code>false</code> values under the <code>LSFileQuarantineEnabled</code> entry in an application's <code>Info.plist</code> file (required by every application). <code>false</code> under <code>LSFileQuarantineEnabled</code> indicates that an application does not use the quarantine flag. Unsandboxed applications with an unspecified <code>LSFileQuarantineEnabled</code> entry will default to not setting the quarantine flag. \\n\\nQuarantineEvents is a SQLite database containing a list of all files assigned the <code>com.apple.quarantine</code> attribute, located at <code>~/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2</code>. Each event contains the corresponding UUID, timestamp, application, Gatekeeper score, and decision if it was allowed.(Citation: TheEclecticLightCompany Quarantine and the flag)\", 'x_mitre_platforms': ['macOS'], 'x_mitre_is_subtechnique': True, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '1.2', 'x_mitre_contributors': ['Brandon Dalton @PartyD0lphin', 'Swasti Bhushan Deb, IBM India Pvt. Ltd.'], 'x_mitre_data_sources': ['Command: Command Execution', 'File: File Modification', 'Process: Process Creation', 'File: File Metadata'], 'x_mitre_defense_bypassed': ['Anti-virus', 'Application Control'], 'type': 'attack-pattern', 'id': 'attack-pattern--31a0a2ac-c67c-4a7e-b9ed-6a96477d4e8e', 'created': '2020-02-05T16:16:08.471Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1553/001', 'external_id': 'T1553.001'}, {'source_name': 'Application Bundle Manipulation Brandon Dalton', 'description': 'Brandon Dalton. (2022, August 9). A bundle of nerves: Tweaking macOS security controls to thwart application bundle manipulation. Retrieved September 27, 2022.', 'url': 'https://redcanary.com/blog/mac-application-bundles/'}, {'source_name': 'theevilbit gatekeeper bypass 2021', 'description': 'Csaba Fitzl. (2021, June 29). GateKeeper - Not a Bypass (Again). Retrieved September 22, 2021.', 'url': 'https://theevilbit.github.io/posts/gatekeeper_not_a_bypass/'}, {'source_name': 'OceanLotus for OS X', 'description': 'Eddie Lee. (2016, February 17). OceanLotus for OS X - an Application Bundle Pretending to be an Adobe Flash Update. Retrieved July 5, 2017.', 'url': 'https://www.alienvault.com/blogs/labs-research/oceanlotus-for-os-x-an-application-bundle-pretending-to-be-an-adobe-flash-update'}, {'source_name': 'TheEclecticLightCompany Quarantine and the flag', 'description': 'hoakley. (2020, October 29). Quarantine and the quarantine flag. Retrieved September 13, 2021.', 'url': 'https://eclecticlight.co/2020/10/29/quarantine-and-the-quarantine-flag/'}, {'source_name': 'TheEclecticLightCompany apple notarization ', 'description': 'How Notarization Works. (2020, August 28). How notarization works. Retrieved September 13, 2021.', 'url': 'https://eclecticlight.co/2020/08/28/how-notarization-works/'}, {'source_name': '20 macOS Common Tools and Techniques', 'description': 'Phil Stokes. (2021, February 16). 20 Common Tools & Techniques Used by macOS Threat Actors & Malware. Retrieved August 23, 2021.', 'url': 'https://labs.sentinelone.com/20-common-tools-techniques-used-by-macos-threat-actors-malware/'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1553.001",
                "display_name": "Subvert Trust Controls: Gatekeeper Bypass",
                "atomic_tests": [
                    {
                        "name": "Gatekeeper Bypass",
                        "auto_generated_guid": "fb3d46c6-9480-4803-8d7d-ce676e1f1a9b",
                        "description": "Gatekeeper Bypass via command line\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "app_path": {
                                "description": "Path to app to be used",
                                "type": "path",
                                "default": "myapp.app"
                            }
                        },
                        "executor": {
                            "command": "sudo xattr -d com.apple.quarantine #{app_path}\n",
                            "elevation_required": true,
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:07:10"
}