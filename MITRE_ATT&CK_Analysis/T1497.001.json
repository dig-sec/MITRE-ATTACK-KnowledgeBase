{
    "id": "T1497.001",
    "name": "System Checks",
    "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](T1047), [PowerShell](T1059.001), [System Information Discovery](T1082), and [Query Registry](T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment.\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size.\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output.\nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Defense Evasion, Discovery",
    "data_sources": "Process: Process Creation, Command: Command Execution, Process: OS API Execution",
    "detection": "Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.",
    "url": "https://attack.mitre.org/techniques/T1497/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                    "02a470d8-493e-41d9-8367-622460dddbe8",
                    "29be378d-262d-4e99-b00d-852d573628e6",
                    "d93129cd-1ee0-479f-bc03-ca6f129882e3"
                ],
                "lookup_results": [
                    {
                        "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                        "lookup_data": {
                            "description": "Prynt Stealer Spotted In the Wild - A New Info Stealer Performing Clipper And Keylogger Activities",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/4b1c186d-8bf2-4297-9cbc-f8f00192770b.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1666601854",
                            "uuid": "4b1c186d-8bf2-4297-9cbc-f8f00192770b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02a470d8-493e-41d9-8367-622460dddbe8",
                        "lookup_data": {
                            "description": "Ransomware Attack Irish on Health Sector",
                            "link": "http://www.botvrij.eu/data/feed-osint/02a470d8-493e-41d9-8367-622460dddbe8.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1621676993",
                            "uuid": "02a470d8-493e-41d9-8367-622460dddbe8",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "29be378d-262d-4e99-b00d-852d573628e6",
                        "lookup_data": {
                            "mitre-attack-id": "T1497.001",
                            "mitre-cti:description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\n\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \n\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \n\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \n \nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)",
                            "mitre-cti:name": "System Checks",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Deloitte Threat Library Team'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--29be378d-262d-4e99-b00d-852d573628e6', 'type': 'attack-pattern', 'created': '2020-03-06T20:57:37.959Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1497.001', 'url': 'https://attack.mitre.org/techniques/T1497/001'}, {'source_name': 'Deloitte Environment Awareness', 'url': 'https://drive.google.com/file/d/1t0jn3xr4ff2fR30oQAUn_RsWSnMpOAQc', 'description': 'Torello, A. & Guibernau, F. (n.d.). Environment Awareness. Retrieved May 18, 2021.'}, {'source_name': 'McAfee Virtual Jan 2017', 'url': 'https://securingtomorrow.mcafee.com/other-blogs/mcafee-labs/stopping-malware-fake-virtual-machine/', 'description': 'Roccia, T. (2017, January 19). Stopping Malware With a Fake Virtual Machine. Retrieved April 17, 2019.'}, {'source_name': 'Unit 42 OilRig Sept 2018', 'description': 'Falcone, R., et al. (2018, September 04). OilRig Targets a Middle Eastern Government and Adds Evasion Techniques to OopsIE. Retrieved September 24, 2018.', 'url': 'https://researchcenter.paloaltonetworks.com/2018/09/unit42-oilrig-targets-middle-eastern-government-adds-evasion-techniques-oopsie/'}], 'modified': '2021-10-18T14:57:07.973Z', 'name': 'System Checks', 'description': 'Adversaries may employ various system checks to detect and avoid virtualization and analysis environments. This may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox. If the adversary detects a VME, they may alter their malware to disengage from the victim or conceal the core functions of the implant. They may also search for VME artifacts before dropping secondary or additional payloads. Adversaries may use the information learned from [Virtualization/Sandbox Evasion](https://attack.mitre.org/techniques/T1497) during automated discovery to shape follow-on behaviors.(Citation: Deloitte Environment Awareness)\\n\\nSpecific checks will vary based on the target and/or adversary, but may involve behaviors such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047), [PowerShell](https://attack.mitre.org/techniques/T1059/001), [System Information Discovery](https://attack.mitre.org/techniques/T1082), and [Query Registry](https://attack.mitre.org/techniques/T1012) to obtain system information and search for VME artifacts. Adversaries may search for VME artifacts in memory, processes, file system, hardware, and/or the Registry. Adversaries may use scripting to automate these checks  into one script and then have the program exit if it determines the system to be a virtual environment. \\n\\nChecks could include generic system properties such as host/domain name and samples of network traffic. Adversaries may also check the network adapters addresses, CPU core count, and available memory/drive size. \\n\\nOther common checks may enumerate services running that are unique to these applications, installed programs on the system, manufacturer/product fields for strings relating to virtual machine applications, and VME-specific hardware/processor instructions.(Citation: McAfee Virtual Jan 2017) In applications like VMWare, adversaries can also use a special I/O port to send commands and receive output. \\n \\nHardware checks, such as the presence of the fan, temperature, and audio devices, could also be used to gather evidence that can be indicative a virtual environment. Adversaries may also query for specific readings from these devices.(Citation: Unit 42 OilRig Sept 2018)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_detection': \"Virtualization/sandbox related system checks will likely occur in the first steps of an operation but may also occur throughout as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as lateral movement, based on the information obtained. Detecting actions related to virtualization and sandbox identification may be difficult depending on the adversary's implementation and monitoring required. Monitoring for suspicious processes being spawned that gather a variety of system information or perform other forms of Discovery, especially in a short period of time, may aid in detection.\", 'x_mitre_is_subtechnique': True, 'x_mitre_version': '2.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: OS API Execution', 'Command: Command Execution', 'Process: Process Creation'], 'x_mitre_defense_bypassed': ['Static File Analysis', 'Signature-based detection', 'Host forensic analysis', 'Anti-virus']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d93129cd-1ee0-479f-bc03-ca6f129882e3",
                        "lookup_data": {
                            "description": "Adversaries may employ various system checks to detect and avoid virtualization and analysis environments.\nThis may include changing behaviors based on the results of checks for the presence of artifacts indicative of a virtual machine environment (VME) or sandbox\n",
                            "raw": "author: frack113, Duc.Le-GTSC\ndate: 2021/08/03\ndescription: 'Adversaries may employ various system checks to detect and avoid virtualization\n  and analysis environments.\n\n  This may include changing behaviors based on the results of checks for the presence\n  of artifacts indicative of a virtual machine environment (VME) or sandbox\n\n  '\ndetection:\n  condition: all of selection*\n  selection_action:\n    ScriptBlockText|contains:\n    - Get-WmiObject\n    - gwmi\n  selection_module:\n    ScriptBlockText|contains:\n    - MSAcpi_ThermalZoneTemperature\n    - Win32_ComputerSystem\nfalsepositives:\n- Unknown\nid: d93129cd-1ee0-479f-bc03-ca6f129882e3\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/03/03\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1497.001/T1497.001.md\n- https://techgenix.com/malicious-powershell-scripts-evade-detection/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1497.001\ntitle: Powershell Detect Virtualization Environment\n",
                            "sigma:id": "d93129cd-1ee0-479f-bc03-ca6f129882e3",
                            "title": "Powershell Detect Virtualization Environment",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1497.001",
                "display_name": "Virtualization/Sandbox Evasion: System Checks",
                "atomic_tests": [
                    {
                        "name": "Detect Virtualization Environment (Linux)",
                        "auto_generated_guid": "dfbd1a21-540d-4574-9731-e852bd6fe840",
                        "description": "systemd-detect-virt detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "if (systemd-detect-virt) then echo \"Virtualization Environment detected\"; fi;\nif (sudo dmidecode | egrep -i 'manufacturer|product|vendor' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo \"Virtualization Environment detected\"; fi;\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment (FreeBSD)",
                        "auto_generated_guid": "e129d73b-3e03-4ae9-bf1e-67fc8921e0fd",
                        "description": "Detects execution in a virtualized environment.\nAt boot, dmesg stores a log if a hypervisor is detected.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "if [ \"$(sysctl -n hw.hv_vendor)\" != \"\" ]; then echo \"Virtualization Environment detected\"; fi\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment (Windows)",
                        "auto_generated_guid": "502a7dc4-9d6f-4d28-abf2-f0e84692562d",
                        "description": "Windows Management Instrumentation(WMI) objects contains system information which helps to detect virtualization. This command will specifically attempt to get the CurrentTemperature value from this object and will check to see if the attempt results in an error that contains the word supported. This is meant to find the result of Not supported, which is the result if run in a virtual machine\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "$error.clear()\nGet-WmiObject -Query \"SELECT * FROM MSAcpi_ThermalZoneTemperature\" -ErrorAction SilentlyContinue\nif($error) {echo \"Virtualization Environment detected\"}\n",
                            "cleanup_command": "$error.clear()\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment via ioreg",
                        "auto_generated_guid": "a960185f-aef6-4547-8350-d1ce16680d09",
                        "description": "ioreg contains registry entries for all the device drivers in the system. If it's a virtual machine, one of the device manufacturer will be a Virtualization Software.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "if (ioreg -l | grep -e Manufacturer -e 'Vendor Name' | grep -iE 'Oracle|VirtualBox|VMWare|Parallels') then echo 'Virtualization Environment detected'; fi;\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment via WMI Manufacturer/Model Listing (Windows)",
                        "auto_generated_guid": "4a41089a-48e0-47aa-82cb-5b81a463bc78",
                        "description": "Windows Management Instrumentation(WMI) objects contain system information which helps to detect virtualization. This test will get the model and manufacturer of the machine to determine if it is a virtual machine, such as through VMware or VirtualBox. \n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "$Manufacturer = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Manufacturer\"\n$Model = Get-WmiObject -Class Win32_ComputerSystem | select-object -expandproperty \"Model\"\nif((($Manufacturer.ToLower() -eq \"microsoft corporation\") -and ($Model.ToLower().contains(\"virtual\"))) -or ($Manufacturer.ToLower().contains(\"vmware\")) -or ($Model.ToLower() -eq \"virtualbox\")) {write-host \"Virtualization environment detected!\"} else {write-host \"No virtualization environment detected!\"}\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment using sysctl (hw.model)",
                        "auto_generated_guid": "6beae646-eb4c-4730-95be-691a4094408c",
                        "description": "sysctl hw.model will return the model name of the hardware(Macmini8,1, MacBookAir10,1, etc.) in case of native Apple hardware\nbut will return the hypervisor name (VMware7,0).\nReference: https://evasions.checkpoint.com/src/MacOS/macos.html#hardware-model\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "executor": {
                            "name": "sh",
                            "command": "if [ \"$(sysctl -n hw.model | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n"
                        }
                    },
                    {
                        "name": "Check if System Integrity Protection is enabled",
                        "auto_generated_guid": "2b73cd9b-b2fb-4357-b9d7-c73c41d9e945",
                        "description": "The latest versions of macOS have the System Integrity Protection feature (SIP). If a sandbox uses a non-signed \nkernel extension for monitoring purposes the, SIP feature must be disabled to load this kind of kernel extension.\nMalware may check if the SIP is enabled.\nReference: https://evasions.checkpoint.com/src/MacOS/macos.html#sip\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "executor": {
                            "name": "sh",
                            "command": "if [ \"$(csrutil status | grep -v 'enabled')\" != \"\" ]; then echo 'Possible Virtualization Environment detected'; fi;\n"
                        }
                    },
                    {
                        "name": "Detect Virtualization Environment using system_profiler",
                        "auto_generated_guid": "e04d2e89-de15-4d90-92f9-a335c7337f0f",
                        "description": "system_profiler provides system hardware and software configuration and the Model Identifier should provide the value similar to (sysctl -n hw.model). \nWe should be able to find whether virtualization is enabled by checking whether the Model Identifier does not contain \"Mac\".\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "executor": {
                            "name": "sh",
                            "command": "if [ \"$(system_profiler SPHardwareDataType | grep \"Model Identifier\" | grep -v 'Mac')\" != \"\" ]; then echo 'Virtualization Environment detected'; fi;\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:43:38"
}