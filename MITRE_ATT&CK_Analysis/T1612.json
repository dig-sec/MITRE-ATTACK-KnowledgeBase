{
    "id": "T1612",
    "name": "Build Image on Host",
    "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote `build` request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)\nAn adversary may take advantage of that `build` API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize [Deploy Container](T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment.",
    "platforms": "Containers",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Image: Image Creation, Network Traffic: Network Connection Creation, Network Traffic: Network Traffic Flow, Network Traffic: Network Traffic Content",
    "detection": "Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.",
    "url": "https://attack.mitre.org/techniques/T1612",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "800f9819-7007-4540-a520-40e655876800"
                ],
                "lookup_results": [
                    {
                        "uuid": "800f9819-7007-4540-a520-40e655876800",
                        "lookup_data": {
                            "mitre-attack-id": "T1612",
                            "mitre-cti:description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)\n\nAn adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. ",
                            "mitre-cti:name": "Build Image on Host",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Containers'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Assaf Morag, @MoragAssaf, Team Nautilus Aqua Security', 'Roi Kol, @roykol1, Team Nautilus Aqua Security', 'Michael Katchinskiy, @michael64194968, Team Nautilus Aqua Security', 'Vishwas Manral, McAfee'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--800f9819-7007-4540-a520-40e655876800', 'type': 'attack-pattern', 'created': '2021-03-30T17:54:03.944Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1612', 'url': 'https://attack.mitre.org/techniques/T1612'}, {'source_name': 'Docker Build Image', 'url': 'https://docs.docker.com/engine/api/v1.41/#operation/ImageBuild', 'description': 'Docker. ( null). Docker Engine API v1.41 Reference - Build an Image. Retrieved March 30, 2021.'}, {'source_name': 'Aqua Build Images on Hosts', 'url': 'https://blog.aquasec.com/malicious-container-image-docker-container-host', 'description': 'Assaf Morag. (2020, July 15). Threat Alert: Attackers Building Malicious Images on Your Hosts. Retrieved March 29, 2021.'}, {'source_name': 'Aqua Security Cloud Native Threat Report June 2021', 'url': 'https://info.aquasec.com/hubfs/Threat%20reports/AquaSecurity_Cloud_Native_Threat_Report_2021.pdf?utm_campaign=WP%20-%20Jun2021%20Nautilus%202021%20Threat%20Research%20Report&utm_medium=email&_hsmi=132931006&_hsenc=p2ANqtz-_8oopT5Uhqab8B7kE0l3iFo1koirxtyfTehxF7N-EdGYrwk30gfiwp5SiNlW3G0TNKZxUcDkYOtwQ9S6nNVNyEO-Dgrw&utm_content=132931006&utm_source=hs_automation', 'description': 'Team Nautilus. (2021, June). Attacks in the Wild on the Container Supply Chain and Infrastructure. Retrieved August 26, 2021.'}], 'modified': '2022-04-01T13:04:00.946Z', 'name': 'Build Image on Host', 'description': 'Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. A remote <code>build</code> request may be sent to the Docker API that includes a Dockerfile that pulls a vanilla base image, such as alpine, from a public or local registry and then builds a custom image upon it.(Citation: Docker Build Image)\\n\\nAn adversary may take advantage of that <code>build</code> API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize [Deploy Container](https://attack.mitre.org/techniques/T1610) using that custom image.(Citation: Aqua Build Images on Hosts)(Citation: Aqua Security Cloud Native Threat Report June 2021) If the base image is pulled from a public registry, defenses will likely not detect the image as malicious since it’s a vanilla image. If the base image already resides in a local registry, the pull may be considered even less suspicious since the image is already in the environment. ', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Monitor for unexpected Docker image build requests to the Docker daemon on hosts in the environment. Additionally monitor for subsequent network communication with anomalous IPs that have never been seen before in the environment that indicate the download of malicious code.', 'x_mitre_version': '1.2', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Network Traffic: Network Traffic Content', 'Image: Image Creation', 'Network Traffic: Network Traffic Flow', 'Network Traffic: Network Connection Creation'], 'x_mitre_permissions_required': ['User', 'root'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1612",
                "display_name": "Build Image on Host",
                "atomic_tests": [
                    {
                        "name": "Build Image On Host",
                        "auto_generated_guid": "2db30061-589d-409b-b125-7b473944f9b3",
                        "description": "Adversaries may build a container image directly on a host to bypass defenses that monitor for the retrieval of malicious images from a public registry. An adversary may take advantage of that build API to build a custom image on the host that includes malware downloaded from their C2 server, and then they then may utilize Deploy Container using that custom image.",
                        "supported_platforms": [
                            "containers"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify docker is installed.",
                                "prereq_command": "which docker\n",
                                "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
                            },
                            {
                                "description": "Verify docker service is running.",
                                "prereq_command": "sudo systemctl status docker  --no-pager\n",
                                "get_prereq_command": "sudo systemctl start docker\n"
                            }
                        ],
                        "executor": {
                            "command": "docker build -t t1612  $PathtoAtomicsFolder/T1612/src/\ndocker run --name t1612_container --rm -d -t t1612\ndocker exec t1612_container ./test.sh",
                            "cleanup_command": "docker stop t1612_container\ndocker rmi -f t1612",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 19:04:01"
}