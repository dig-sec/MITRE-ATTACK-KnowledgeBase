{
    "id": "T1562.003",
    "name": "Impair Command History Logging",
    "description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done.\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable `HISTFILE`. When a user logs off a system, this information is flushed to a file in the user's home directory called `~/.bash_history`. The `HISTCONTROL` environment variable keeps track of what should be saved by the `history` command and eventually into the `~/.bash_history` file when a user logs out. `HISTCONTROL` does not exist by default on macOS, but can be set by the user and will be respected.\nAdversaries may clear the history environment variable (`unset HISTFILE`) or set the command history size to zero (`export HISTFILESIZE=0`) to prevent logging of commands. Additionally, `HISTCONTROL` can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". `HISTCONTROL` can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands.\nOn Windows systems, the `PSReadLine` module tracks commands used in all PowerShell sessions and writes them to a file (`$env:APPDATAMicrosoftWindowsPowerShellPSReadLineConsoleHost_history.txt` by default). Adversaries may change where these logs are saved using `Set-PSReadLineOption -HistorySavePath {File Path}`. This will cause `ConsoleHost_history.txt` to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command `Set-PSReadlineOption -HistorySaveStyle SaveNothing`.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Sensor Health: Host Status, Command: Command Execution",
    "detection": "Correlating a user session with a distinct lack of new commands in their `.bash_history` can be a clue to suspicious behavior. Additionally, users checking or changing their `HISTCONTROL`, `HISTFILE`, or `HISTFILESIZE` environment variables may be suspicious.\nMonitor for modification of PowerShell command history settings through processes being created with `-HistorySaveStyle SaveNothing` command-line arguments and use of the PowerShell commands `Set-PSReadlineOption -HistorySaveStyle SaveNothing` and `Set-PSReadLineOption -HistorySavePath {File Path}`.",
    "url": "https://attack.mitre.org/techniques/T1562/003",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "8f504411-cb96-4dac-a537-8d2bb7679c59"
                ],
                "lookup_results": [
                    {
                        "uuid": "8f504411-cb96-4dac-a537-8d2bb7679c59",
                        "lookup_data": {
                            "capec": "CAPEC-13",
                            "mitre-attack-id": "T1562.003",
                            "mitre-cti:description": "Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they've done. \n\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user's home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\n\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \n\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\n\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).",
                            "mitre-cti:name": "Impair Command History Logging",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows', 'Network'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Vikas Singh, Sophos', 'Emile Kenning, Sophos', 'Austin Clark, @c2defense'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--8f504411-cb96-4dac-a537-8d2bb7679c59', 'created': '2020-02-21T20:56:06.498Z', 'x_mitre_version': '2.2', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1562.003', 'url': 'https://attack.mitre.org/techniques/T1562/003'}, {'source_name': 'Sophos PowerShell command audit', 'url': 'https://community.sophos.com/products/intercept/early-access-program/f/live-discover-response-queries/121529/live-discover---powershell-command-audit', 'description': 'jak. (2020, June 27). Live Discover - PowerShell command audit. Retrieved August 21, 2020.'}, {'source_name': 'Microsoft PowerShell Command History', 'url': 'https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_history?view=powershell-7', 'description': 'Microsoft. (2020, May 13). About History. Retrieved September 4, 2020.'}, {'source_name': 'Sophos PowerShell Command History Forensics', 'url': 'https://community.sophos.com/products/malware/b/blog/posts/powershell-command-history-forensics', 'description': 'Vikas, S. (2020, August 26). PowerShell Command History Forensics. Retrieved September 4, 2020.'}, {'url': 'https://capec.mitre.org/data/definitions/13.html', 'source_name': 'capec', 'external_id': 'CAPEC-13'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may impair command history logging to hide commands they run on a compromised system. Various command interpreters keep track of the commands users type in their terminal so that users can retrace what they\\'ve done. \\n\\nOn Linux and macOS, command history is tracked in a file pointed to by the environment variable <code>HISTFILE</code>. When a user logs off a system, this information is flushed to a file in the user\\'s home directory called <code>~/.bash_history</code>. The <code>HISTCONTROL</code> environment variable keeps track of what should be saved by the <code>history</code> command and eventually into the <code>~/.bash_history</code> file when a user logs out. <code>HISTCONTROL</code> does not exist by default on macOS, but can be set by the user and will be respected.\\n\\nAdversaries may clear the history environment variable (<code>unset HISTFILE</code>) or set the command history size to zero (<code>export HISTFILESIZE=0</code>) to prevent logging of commands. Additionally, <code>HISTCONTROL</code> can be configured to ignore commands that start with a space by simply setting it to \"ignorespace\". <code>HISTCONTROL</code> can also be set to ignore duplicate commands by setting it to \"ignoredups\". In some Linux systems, this is set by default to \"ignoreboth\" which covers both of the previous examples. This means that “ ls” will not be saved, but “ls” would be saved by history. Adversaries can abuse this to operate without leaving traces by simply prepending a space to all of their terminal commands. \\n\\nOn Windows systems, the <code>PSReadLine</code> module tracks commands used in all PowerShell sessions and writes them to a file (<code>$env:APPDATA\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt</code> by default). Adversaries may change where these logs are saved using <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. This will cause <code>ConsoleHost_history.txt</code> to stop receiving logs. Additionally, it is possible to turn off logging to this file using the PowerShell command <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code>.(Citation: Microsoft PowerShell Command History)(Citation: Sophos PowerShell command audit)(Citation: Sophos PowerShell Command History Forensics)\\n\\nAdversaries may also leverage a [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) on network devices to disable historical command logging (e.g. <code>no logging</code>).', 'modified': '2022-09-01T20:48:29.785Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Impair Command History Logging', 'x_mitre_detection': 'Correlating a user session with a distinct lack of new commands in their <code>.bash_history</code> can be a clue to suspicious behavior. Additionally, users checking or changing their <code>HISTCONTROL</code>, <code>HISTFILE</code>, or <code>HISTFILESIZE</code> environment variables may be suspicious.\\n\\nMonitor for modification of PowerShell command history settings through processes being created with <code>-HistorySaveStyle SaveNothing</code> command-line arguments and use of the PowerShell commands <code>Set-PSReadlineOption -HistorySaveStyle SaveNothing</code> and <code>Set-PSReadLineOption -HistorySavePath {File Path}</code>. Further, [Network Device CLI](https://attack.mitre.org/techniques/T1059/008) commands may also be used to clear or disable historical log data with built-in features native to the network device platform.  Monitor such command activity for unexpected or unauthorized use of commands being run by non-standard users from non-standard locations.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['Sensor Health: Host Status', 'Command: Command Execution'], 'x_mitre_defense_bypassed': ['Host forensic analysis', 'Log analysis'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1562.003",
                "display_name": "Impair Defenses: Impair Command History Logging",
                "atomic_tests": [
                    {
                        "name": "Disable history collection",
                        "auto_generated_guid": "4eafdb45-0f79-4d66-aa86-a3e2c08791f5",
                        "description": "Disables history collection in shells\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "evil_command": {
                                "description": "Command to run after shell history collection is disabled",
                                "type": "string",
                                "default": "whoami"
                            }
                        },
                        "executor": {
                            "command": "export HISTCONTROL=ignoreboth\n#{evil_command}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Disable history collection (freebsd)",
                        "auto_generated_guid": "cada55b4-8251-4c60-819e-8ec1b33c9306",
                        "description": "Disables history collection in shells\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "evil_command": {
                                "description": "Command to run after shell history collection is disabled",
                                "type": "string",
                                "default": "whoami"
                            }
                        },
                        "executor": {
                            "command": "export HISTSIZE=0\n#{evil_command}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Mac HISTCONTROL",
                        "auto_generated_guid": "468566d5-83e5-40c1-b338-511e1659628d",
                        "description": "The HISTCONTROL variable is set to ignore (not write to the history file) command that are a duplicate of something already in the history \nand commands that start with a space. This atomic sets this variable in the current session and also writes it to the current user's ~/.bash_profile \nso that it will apply to all future settings as well.\nhttps://www.linuxjournal.com/content/using-bash-history-more-efficiently-histcontrol\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "executor": {
                            "steps": "1. export HISTCONTROL=ignoreboth\n2. echo export \"HISTCONTROL=ignoreboth\" >> ~/.bash_profile\n3. ls\n4. whoami > recon.txt\n",
                            "name": "manual"
                        }
                    },
                    {
                        "name": "Clear bash history",
                        "auto_generated_guid": "878794f7-c511-4199-a950-8c28b3ed8e5b",
                        "description": "An attacker may clear the bash history cache and the history file as their last act before logging off to remove the record of their command line activities. \n\nIn this test we use the $HISTFILE variable throughout to 1. confirms the $HISTFILE variable is set 2. echo \"\" into it 3..5 confirm the file is empty 6 clear the history cache 7. confirm the history cache is empty. This is when the attacker would logoff.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": false,
                            "command": "cp $HISTFILE $HISTFILE.OLD\nif ((${#HISTFILE[@]})); then echo $HISTFILE; fi\necho \"\" > $HISTFILE\nif [ $(wc -c <$HISTFILE) -gt 1 ]; then echo \"$HISTFILE is larger than 1k\"; fi\nls -la $HISTFILE \ncat $HISTFILE\nhistory -c \nif [ $(history |wc -l) -eq 1 ]; then echo \"History cache cleared\"; fi\n",
                            "cleanup_command": "mv -f $HISTFILE.OLD $HISTFILE \n"
                        }
                    },
                    {
                        "name": "Setting the HISTCONTROL environment variable",
                        "auto_generated_guid": "10ab786a-028e-4465-96f6-9e83ca6c5f24",
                        "description": "An attacker may exploit the space before a command (e.g. \" ls\") or the duplicate command suppression feature in Bash history to prevent their commands from being recorded in the history file or to obscure the order of commands used. \n\nIn this test we 1. sets $HISTCONTROL to ignoreboth 2. clears the history cache 3. executes ls -la with a space in-front of it 4. confirms that ls -la is not in the history cache 5. sets $HISTCONTROL to erasedups 6. clears the history cache 7..9 executes ls -la $HISTFILE 3 times 10. confirms that their is only one command in history\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": false,
                            "command": "TEST=$(echo $HISTCONTROL)\nif [ \"$HISTCONTROL\" != \"ignoreboth\" ]; then export HISTCONTROL=\"ignoreboth\"; fi\nhistory -c \nls -la $HISTFILE # \" ls -la $HISTFILE\"\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls -la is not in history cache\"; fi\nif [ \"$HISTCONTROL\" != \"erasedups\" ]; then export HISTCONTROL=\"erasedups\"; fi\nhistory -c \nls -la $HISTFILE\nls -la $HISTFILE\nls -la $HISTFILE\nif [ $(history |wc -l) -eq 2 ]; then echo \"Their is only one entry for ls -la $HISTFILE\"; fi\n",
                            "cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"
                        }
                    },
                    {
                        "name": "Setting the HISTFILESIZE environment variable",
                        "auto_generated_guid": "5cafd6c1-2f43-46eb-ac47-a5301ba0a618",
                        "description": "An Adversary may set the bash history files size environment variable (HISTFILESIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILESIZE. In this test we 1. echo HISTFILESIZE 2. set it to zero 3. confirm that HISTFILESIZE is set to zero.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": false,
                            "command": "TEST=$(echo $HISTFILESIZE)\necho $HISTFILESIZE\nexport HISTFILESIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILESIZE) -eq 0 ]; then echo \"\\$HISTFILESIZE is zero\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILESIZE is not zero, history lenght is $HIST_LENGHT\";  fi\n",
                            "cleanup_command": "export HISTCONTROL=$(echo $TEST)\n"
                        }
                    },
                    {
                        "name": "Setting the HISTSIZE environment variable",
                        "auto_generated_guid": "386d3850-2ce7-4508-b56b-c0558922c814",
                        "description": "An Adversary may set the sh history files size environment variable (HISTSIZE) to zero to prevent the logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTSIZE. In this test we 1. echo HISTSIZE 2. set it to zero 3. confirm that HISTSIZE is set to zero.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "echo $HISTSIZE\nexport HISTSIZE=0\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTSIZE) -eq 0 ]; then echo \"\\$HISTSIZE is zero\"; else HIST_LENGTH=$(wc -l $HISTFILE); echo \"\\$HISTSIZE is not zero, history size is $HIST_LENGTH\";  fi\n",
                            "cleanup_command": "export HISTSIZE=100\n"
                        }
                    },
                    {
                        "name": "Setting the HISTFILE environment variable",
                        "auto_generated_guid": "b3dacb6c-a9e3-44ec-bf87-38db60c5cad1",
                        "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": false,
                            "command": "TEST=$(echo $HISTFILE)\necho $HISTFILE\nexport HISTFILE=\"/dev/null\"\necho \"runnning some commands to populate the history\"\nwhoami\ngroups\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; else HIST_LENGHT=$(wc -l $HISTFILE); echo \"\\$HISTFILE is not /dev/null, history lenght is $HIST_LENGHT\";  fi\n",
                            "cleanup_command": "export HISTFILE=$(echo $TEST)\n"
                        }
                    },
                    {
                        "name": "Setting the HISTFILE environment variable (freebsd)",
                        "auto_generated_guid": "f7308845-6da8-468e-99f2-4271f2f5bb67",
                        "description": "An Adversary may clear, unset or redirect the history environment variable HISTFILE to prevent logging of commands to the history file after they log out of the system.\n\nNote: we don't wish to log out, so we are just confirming the value of HISTFILE. In this test we 1. echo HISTFILE 2. set it to /dev/null 3. confirm that HISTFILE is set to /dev/null.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": false,
                            "command": "echo $HISTFILE\nexport HISTFILE=\"/dev/null\"\nif [ $(echo $HISTFILE) == \"/dev/null\" ]; then echo \"\\$HISTFILE is /dev/null\"; fi\n",
                            "cleanup_command": "export HISTFILE=~/.sh_history\n"
                        }
                    },
                    {
                        "name": "Setting the HISTIGNORE environment variable",
                        "auto_generated_guid": "f12acddb-7502-4ce6-a146-5b62c59592f1",
                        "description": "An Adversary may take advantage of the HISTIGNORE environment variable either to ignore particular commands or all commands. \n\nIn this test we 1. set HISTIGNORE to ignore ls, rm and ssh commands 2. clear this history cache 3..4 execute ls commands 5. confirm that the ls commands are not in the history cache 6. unset HISTIGNORE variable 7.. same again, but ignoring ALL commands.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "executor": {
                            "name": "bash",
                            "elevation_required": false,
                            "command": "if ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='ls*:rm*:ssh*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\nhistory -c \nls -la $HISTFILE\nls -la ~/.bash_logout\nif [ $(history |wc -l) -eq 1 ]; then echo \"ls commands are not in history\"; fi\nunset HISTIGNORE\nif ((${#HISTIGNORE[@]})); then echo \"\\$HISTIGNORE = $HISTIGNORE\"; else export HISTIGNORE='*'; echo \"\\$HISTIGNORE = $HISTIGNORE\"; fi\nhistory -c \nwhoami\ngroups\nif [ $(history |wc -l) -eq 0 ]; then echo \"History cache is empty\"; fi\n",
                            "cleanup_command": "unset HISTIGNORE\n"
                        }
                    },
                    {
                        "name": "Disable Windows Command Line Auditing using reg.exe",
                        "auto_generated_guid": "1329d5ab-e10e-4e5e-93d1-4d907eb656e5",
                        "description": "In Windows operating systems, command line auditing is controlled through the following registry value:\n\n  Registry Path: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\n  \n  Registry Value: ProcessCreationIncludeCmdLine_Enabled\n\nWhen command line auditing is enabled, the system records detailed information about command execution, including the command executed, the user account responsible for executing the command, and the timestamp of the execution.\nThis information is crucial for security monitoring and forensic analysis, as it helps organizations detect and investigate unauthorized or malicious activities within their systems.\nBy default, command line auditing may not be enabled in Windows systems, and administrators must manually configure the appropriate registry settings to activate it.\nConversely, attackers may attempt to tamper with these registry keys to disable command line auditing, as part of their efforts to evade detection and cover their tracks while perpetrating malicious activities.\n\nBecause this attack executes reg.exe using a command prompt, this attack can be detected by monitoring both:\n  Process Creation events for reg.exe (Windows Event ID 4688, Sysmon Event ID 1)\n  Registry events (Windows Event ID 4657, Sysmon Event ID 13)\n\nRead more here:\nhttps://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-220703123711.html\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "command_prompt",
                            "elevation_required": true,
                            "command": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 0 /f\n",
                            "cleanup_command": "reg add HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1 /f\n"
                        }
                    },
                    {
                        "name": "Disable Windows Command Line Auditing using Powershell Cmdlet",
                        "auto_generated_guid": "95f5c72f-6dfe-45f3-a8c1-d8faa07176fa",
                        "description": "In Windows operating systems, command line auditing is controlled through the following registry value:\n\n  Registry Path: HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\n  \n  Registry Value: ProcessCreationIncludeCmdLine_Enabled\n\nWhen command line auditing is enabled, the system records detailed information about command execution, including the command executed, the user account responsible for executing the command, and the timestamp of the execution.\nThis information is crucial for security monitoring and forensic analysis, as it helps organizations detect and investigate unauthorized or malicious activities within their systems.\nBy default, command line auditing may not be enabled in Windows systems, and administrators must manually configure the appropriate registry settings to activate it.\nConversely, attackers may attempt to tamper with these registry keys to disable command line auditing, as part of their efforts to evade detection and cover their tracks while perpetrating malicious activities.\n\nBecause this attack runs a Powershell cmdlet, this attack can be detected by monitoring both:\n  Powershell Logging (Windows Powershell Event ID 400, 800, 4103, 4104)\n  Registry events (Windows Event ID 4657, Sysmon Event ID 13)\n\nRead more here:\nhttps://securitydatasets.com/notebooks/atomic/windows/defense_evasion/SDWIN-220703123711.html\nhttps://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.management/new-itemproperty?view=powershell-7.4#example-2-add-a-registry-entry-to-a-key\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 0 -PropertyType DWORD -Force -ErrorAction Ignore\n",
                            "cleanup_command": "New-ItemProperty -Path \"HKLM:Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\Audit\" -Name \"ProcessCreationIncludeCmdLine_Enabled\" -Value 1 -PropertyType DWORD -Force -ErrorAction Ignore\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:42:53"
}