{
    "id": "T1127.001",
    "name": "MSBuild",
    "description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, Command: Command Execution",
    "detection": "Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.",
    "url": "https://attack.mitre.org/techniques/T1127/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "c92e3d68-2349-49e4-a341-7edca2deff96",
                    "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                    "50e54b8d-ad73-43f8-96a1-5191685b17a4"
                ],
                "lookup_results": [
                    {
                        "uuid": "c92e3d68-2349-49e4-a341-7edca2deff96",
                        "lookup_data": {
                            "mitre-attack-id": "T1127.001",
                            "mitre-cti:description": "Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\n\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)",
                            "mitre-cti:name": "MSBuild",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['@ionstorm', 'Carrie Roberts, @OrOneEqualsOne'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--c92e3d68-2349-49e4-a341-7edca2deff96', 'type': 'attack-pattern', 'created': '2020-03-27T21:50:26.042Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1127.001', 'url': 'https://attack.mitre.org/techniques/T1127/001'}, {'url': 'https://msdn.microsoft.com/library/dd393574.aspx', 'description': 'Microsoft. (n.d.). MSBuild1. Retrieved November 30, 2016.', 'source_name': 'MSDN MSBuild'}, {'source_name': 'Microsoft MSBuild Inline Tasks 2017', 'url': 'https://docs.microsoft.com/en-us/visualstudio/msbuild/msbuild-inline-tasks?view=vs-2019#code-element', 'description': 'Microsoft. (2017, September 21). MSBuild inline tasks. Retrieved March 5, 2021.'}, {'source_name': 'LOLBAS Msbuild', 'url': 'https://lolbas-project.github.io/lolbas/Binaries/Msbuild/', 'description': 'LOLBAS. (n.d.). Msbuild.exe. Retrieved July 31, 2019.'}], 'modified': '2021-10-15T23:57:07.973Z', 'name': 'MSBuild', 'description': 'Adversaries may use MSBuild to proxy execution of code through a trusted Windows utility. MSBuild.exe (Microsoft Build Engine) is a software build platform used by Visual Studio. It handles XML formatted project files that define requirements for loading and building various platforms and configurations.(Citation: MSDN MSBuild)\\n\\nAdversaries can abuse MSBuild to proxy execution of malicious code. The inline task capability of MSBuild that was introduced in .NET version 4 allows for C# or Visual Basic code to be inserted into an XML project file.(Citation: MSDN MSBuild)(Citation: Microsoft MSBuild Inline Tasks 2017) MSBuild will compile and execute the inline task. MSBuild.exe is a signed Microsoft binary, so when it is used this way it can execute arbitrary code and bypass application control defenses that are configured to allow MSBuild.exe execution.(Citation: LOLBAS Msbuild)', 'kill_chain_phases': [{'phase_name': 'defense-evasion', 'kill_chain_name': 'mitre-attack'}], 'x_mitre_detection': 'Use process monitoring to monitor the execution and arguments of MSBuild.exe. Compare recent invocations of those binaries with prior history of known good arguments and executed binaries to determine anomalous and potentially adversarial activity. Command arguments used before and after invocation of the utilities may also be useful in determining the origin and purpose of the binary being executed.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.2', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'Process: Process Creation'], 'x_mitre_system_requirements': ['.NET Framework version 4 or higher']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                        "lookup_data": {
                            "description": "Detects execution of executables that can be used to bypass Applocker whitelisting",
                            "raw": "author: juju4\ndate: 2019/01/16\ndescription: Detects execution of executables that can be used to bypass Applocker\n  whitelisting\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - \\msdt.exe\n    - \\installutil.exe\n    - \\regsvcs.exe\n    - \\regasm.exe\n    - \\msbuild.exe\n    - \\ieexec.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\n- Using installutil to add features for .NET applications (primarily would occur in\n  developer environments)\nid: 82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt\n- https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1118\n- attack.t1218.004\n- attack.t1121\n- attack.t1218.009\n- attack.t1127\n- attack.t1127.001\n- attack.t1170\n- attack.t1218.005\n- attack.t1218\ntitle: Possible Applocker Bypass\n",
                            "sigma:id": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                            "title": "Possible Applocker Bypass",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "50e54b8d-ad73-43f8-96a1-5191685b17a4",
                        "lookup_data": {
                            "description": "Detects a possible remote connections to Silenttrinity c2",
                            "raw": "author: Kiran kumar s, oscd.community\ndate: 2020/10/11\ndescription: Detects a possible remote connections to Silenttrinity c2\ndetection:\n  condition: selection and filter\n  filter:\n    DestinationPort:\n    - 80\n    - 443\n    Initiated: 'true'\n  selection:\n    Image|endswith: \\msbuild.exe\nfalsepositives:\n- Unknown\nid: 50e54b8d-ad73-43f8-96a1-5191685b17a4\nlevel: high\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2022/10/05\nreferences:\n- https://www.blackhillsinfosec.com/my-first-joyride-with-silenttrinity/\nstatus: test\ntags:\n- attack.execution\n- attack.t1127.001\ntitle: Silenttrinity Stager Msbuild Activity\n",
                            "sigma:id": "50e54b8d-ad73-43f8-96a1-5191685b17a4",
                            "title": "Silenttrinity Stager Msbuild Activity",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1127.001",
                "display_name": "Trusted Developer Utilities Proxy Execution: MSBuild",
                "atomic_tests": [
                    {
                        "name": "MSBuild Bypass Using Inline Tasks (C#)",
                        "auto_generated_guid": "58742c0f-cb01-44cd-a60b-fb26e8871c93",
                        "description": "Executes the code in a project file using msbuild.exe. The default C# project example file (T1127.001.csproj) will simply print \"Hello From a Code Fragment\" and \"Hello From a Class.\" to the screen.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "filename": {
                                "description": "Location of the project file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1127.001\\src\\T1127.001.csproj"
                            },
                            "msbuildpath": {
                                "description": "Default location of MSBuild",
                                "type": "path",
                                "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
                            },
                            "msbuildname": {
                                "description": "Default name of MSBuild",
                                "type": "path",
                                "default": "msbuild.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Project file must exist on disk at specified location (#{filename})\n",
                                "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/T1127.001.csproj\" -OutFile \"#{filename}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "MSBuild Bypass Using Inline Tasks (VB)",
                        "auto_generated_guid": "ab042179-c0c5-402f-9bc8-42741f5ce359",
                        "description": "Executes the code in a project file using msbuild.exe. The default Visual Basic example file (vb.xml) will simply print \"Hello from a Visual Basic inline task!\" to the screen.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "filename": {
                                "description": "Location of the project file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1127.001\\src\\vb.xml"
                            },
                            "msbuildpath": {
                                "description": "Default location of MSBuild",
                                "type": "path",
                                "default": "C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319"
                            },
                            "msbuildname": {
                                "description": "Default name of MSBuild",
                                "type": "path",
                                "default": "msbuild.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Project file must exist on disk at specified location (#{filename})\n",
                                "prereq_command": "if (Test-Path \"#{filename}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{filename}\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1127.001/src/vb.xml\" -OutFile \"#{filename}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "#{msbuildpath}\\#{msbuildname} \"#{filename}\"\n",
                            "name": "command_prompt"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 13:18:07"
}