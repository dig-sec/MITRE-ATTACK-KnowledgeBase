{
    "id": "T1021.006",
    "name": "Windows Remote Management",
    "description": "Adversaries may use [Valid Accounts](T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](T1047).(Citation: MSDN WMI)",
    "platforms": "Windows",
    "kill_chain_phases": "Lateral Movement",
    "data_sources": "Service: Service Metadata, Process: Process Creation, Network Traffic: Network Connection Creation, Logon Session: Logon Session Creation, Command: Command Execution",
    "detection": "Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior.  Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.(Citation: Medium Detecting Lateral Movement) Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).",
    "url": "https://attack.mitre.org/techniques/T1021/006",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "60d0c01d-e2bf-49dd-a453-f8a9c9fa6f65",
                    "ab6b1a39-a9ee-4ab4-b075-e83acf6e346b",
                    "a197e378-d31b-41c0-9635-cfdf1c1bb423",
                    "7b836d7f-179c-4ba4-90a7-a7e60afb48e6",
                    "991a9744-f2f0-44f2-bd33-9092eba17dc3",
                    "96b9f619-aa91-478f-bacb-c3e50f8df575",
                    "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                    "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                    "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                    "60167e5c-84b2-4c95-a7ac-86281f27c445"
                ],
                "lookup_results": [
                    {
                        "uuid": "60d0c01d-e2bf-49dd-a453-f8a9c9fa6f65",
                        "lookup_data": {
                            "mitre-attack-id": "T1021.006",
                            "mitre-cti:description": "Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\n\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI)",
                            "mitre-cti:name": "Windows Remote Management",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--60d0c01d-e2bf-49dd-a453-f8a9c9fa6f65', 'type': 'attack-pattern', 'created': '2020-02-11T18:29:47.757Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1021.006', 'url': 'https://attack.mitre.org/techniques/T1021/006'}, {'url': 'http://msdn.microsoft.com/en-us/library/aa384426', 'description': 'Microsoft. (n.d.). Windows Remote Management. Retrieved November 12, 2014.', 'source_name': 'Microsoft WinRM'}, {'url': 'https://www.slideshare.net/kieranjacobsen/lateral-movement-with-power-shell-2', 'description': 'Jacobsen, K. (2014, May 16). Lateral Movement with PowerShell&#91;slides&#93;. Retrieved November 12, 2014.', 'source_name': 'Jacobsen 2014'}, {'url': 'https://msdn.microsoft.com/en-us/library/aa394582.aspx', 'description': 'Microsoft. (n.d.). Windows Management Instrumentation. Retrieved April 27, 2016.', 'source_name': 'MSDN WMI'}, {'source_name': 'Medium Detecting Lateral Movement', 'url': 'https://medium.com/threatpunter/detecting-lateral-movement-using-sysmon-and-splunk-318d3be141bc', 'description': 'French, D. (2018, September 30). Detecting Lateral Movement Using Sysmon and Splunk. Retrieved October 11, 2019.'}], 'modified': '2021-06-23T19:22:52.870Z', 'name': 'Windows Remote Management', 'description': 'Adversaries may use [Valid Accounts](https://attack.mitre.org/techniques/T1078) to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.\\n\\nWinRM is the name of both a Windows service and a protocol that allows a user to interact with a remote system (e.g., run an executable, modify the Registry, modify services).(Citation: Microsoft WinRM) It may be called with the `winrm` command or by any number of programs such as PowerShell.(Citation: Jacobsen 2014) WinRM  can be used as a method of remotely interacting with [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047).(Citation: MSDN WMI)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'lateral-movement'}], 'x_mitre_detection': 'Monitor use of WinRM within an environment by tracking service execution. If it is not normally used or is disabled, then this may be an indicator of suspicious behavior.  Monitor processes created and actions taken by the WinRM process or a WinRM invoked script to correlate it with other related events.(Citation: Medium Detecting Lateral Movement) Also monitor for remote WMI connection attempts (typically over port 5985 when using HTTP and 5986 for HTTPS).', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Logon Session: Logon Session Creation', 'Service: Service Metadata', 'Process: Process Creation', 'Network Traffic: Network Connection Creation', 'Command: Command Execution'], 'x_mitre_permissions_required': ['User', 'Administrator']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ab6b1a39-a9ee-4ab4-b075-e83acf6e346b",
                        "lookup_data": {
                            "description": "Detects the exploitation of OMIGOD (CVE-2021-38647) which allows remote execute (RCE) commands as root with just a single unauthenticated HTTP request.\nVerify, successful, exploitation by viewing the HTTP client (request) body to see what was passed to the server (using PCAP).\nWithin the client body is where the code execution would occur. Additionally, check the endpoint logs to see if suspicious commands or activity occurred within the timeframe of this HTTP request.\n",
                            "raw": "author: Nate Guagenti (neu5ron)\ndate: 2021/09/20\ndescription: 'Detects the exploitation of OMIGOD (CVE-2021-38647) which allows remote\n  execute (RCE) commands as root with just a single unauthenticated HTTP request.\n\n  Verify, successful, exploitation by viewing the HTTP client (request) body to see\n  what was passed to the server (using PCAP).\n\n  Within the client body is where the code execution would occur. Additionally, check\n  the endpoint logs to see if suspicious commands or activity occurred within the\n  timeframe of this HTTP request.\n\n  '\ndetection:\n  auth_header:\n    client_header_names|contains: AUTHORIZATION\n  condition: selection and not auth_header and not too_small_http_client_body\n  selection:\n    method: POST\n    status_code: 200\n    uri: /wsman\n  too_small_http_client_body:\n    request_body_len: 0\nfalsepositives:\n- Exploits that were attempted but unsuccessful.\n- Scanning attempts with the abnormal use of the HTTP POST method with no indication\n  of code execution within the HTTP Client (Request) body. An example would be vulnerability\n  scanners trying to identify unpatched versions while not actually exploiting the\n  vulnerability. See description for investigation tips.\nfields:\n- id.orig_h\n- id.resp_h\n- id.resp_p\n- status_code\n- method\n- uri\n- request_body_len\n- response_body_len\n- user_agent\nid: ab6b1a39-a9ee-4ab4-b075-e83acf6e346b\nlevel: high\nlogsource:\n  definition: Enable the builtin Zeek script that logs all HTTP header names by adding\n    \"@load policy/protocols/http/header-names\" to your local.zeek config file. The\n    script can be seen here for reference https://github.com/zeek/zeek/blob/d957f883df242ef159cfd846884e673addeea7a5/scripts/policy/protocols/http/header-names.zeek\n  product: zeek\n  service: http\nmodified: 2019/09/20\nreferences:\n- https://www.wiz.io/blog/omigod-critical-vulnerabilities-in-omi-azure\n- https://twitter.com/neu5ron/status/1438987292971053057?s=20\nstatus: stable\ntags:\n- attack.privilege_escalation\n- attack.initial_access\n- attack.execution\n- attack.lateral_movement\n- attack.t1068\n- attack.t1190\n- attack.t1203\n- attack.t1021.006\n- attack.t1210\ntitle: OMIGOD HTTP No Authentication RCE\n",
                            "sigma:id": "ab6b1a39-a9ee-4ab4-b075-e83acf6e346b",
                            "title": "OMIGOD HTTP No Authentication RCE",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "a197e378-d31b-41c0-9635-cfdf1c1bb423",
                        "lookup_data": {
                            "description": "Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.",
                            "raw": "author: frack113\ndate: 2022/01/07\ndescription: Adversaries may use Valid Accounts to log into a computer using the Remote\n  Desktop Protocol (RDP). The adversary may then perform actions as the logged-on\n  user.\ndetection:\n  condition: 1 of selection_*\n  selection_mstsc:\n    CommandLine|contains|all:\n    - '-i '\n    - '-u '\n    - '-p '\n    Image|endswith: \\ruby.exe\nfalsepositives:\n- Unknown\nid: a197e378-d31b-41c0-9635-cfdf1c1bb423\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-3---winrm-access-with-evil-winrm\n- https://github.com/Hackplayers/evil-winrm\nstatus: test\ntags:\n- attack.lateral_movement\n- attack.t1021.006\ntitle: WinRM Access with Evil-WinRM\n",
                            "sigma:id": "a197e378-d31b-41c0-9635-cfdf1c1bb423",
                            "title": "WinRM Access with Evil-WinRM",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7b836d7f-179c-4ba4-90a7-a7e60afb48e6",
                        "lookup_data": {
                            "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
                            "raw": "author: frack113\ndate: 2022/01/07\ndescription: Adversaries may use Valid Accounts to interact with remote systems using\n  Windows Remote Management (WinRM). The adversary may then perform actions as the\n  logged-on user.\ndetection:\n  condition: selection_cmdlet\n  selection_cmdlet:\n    ScriptBlockText|contains|all:\n    - 'invoke-command '\n    - ' -ComputerName '\nfalsepositives:\n- Legitimate script\nid: 7b836d7f-179c-4ba4-90a7-a7e60afb48e6\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-2---invoke-command\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/invoke-command?view=powershell-7.2\nstatus: test\ntags:\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Execute Invoke-command on Remote Host\n",
                            "sigma:id": "7b836d7f-179c-4ba4-90a7-a7e60afb48e6",
                            "title": "Execute Invoke-command on Remote Host",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "991a9744-f2f0-44f2-bd33-9092eba17dc3",
                        "lookup_data": {
                            "description": "Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.",
                            "raw": "author: frack113\ndate: 2022/01/07\ndescription: Adversaries may use Valid Accounts to interact with remote systems using\n  Windows Remote Management (WinRM). The adversary may then perform actions as the\n  logged-on user.\ndetection:\n  condition: selection_cmdlet\n  selection_cmdlet:\n    ScriptBlockText|contains: 'Enable-PSRemoting '\nfalsepositives:\n- Legitimate script\nid: 991a9744-f2f0-44f2-bd33-9092eba17dc3\nlevel: medium\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.006/T1021.006.md#atomic-test-1---enable-windows-remote-management\n- https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/enable-psremoting?view=powershell-7.2\nstatus: test\ntags:\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Enable Windows Remote Management\n",
                            "sigma:id": "991a9744-f2f0-44f2-bd33-9092eba17dc3",
                            "title": "Enable Windows Remote Management",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "96b9f619-aa91-478f-bacb-c3e50f8df575",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sessions",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton\ndate: 2019/08/10\ndescription: Detects remote PowerShell sessions\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_pwsh_archive:\n    ContextInfo|contains: \\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\Microsoft.PowerShell.Archive\\Microsoft.PowerShell.Archive.psm1\n  selection:\n    ContextInfo|contains|all:\n    - ' = ServerRemoteHost '\n    - wsmprovhost.exe\nfalsepositives:\n- Legitimate use remote PowerShell sessions\nid: 96b9f619-aa91-478f-bacb-c3e50f8df575\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/20\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (PS Module)\n",
                            "sigma:id": "96b9f619-aa91-478f-bacb-c3e50f8df575",
                            "title": "Remote PowerShell Session (PS Module)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                        "lookup_data": {
                            "description": "Detects usage of mimikatz through WinRM protocol by monitoring access to lsass process by wsmprovhost.exe.",
                            "raw": "author: Patryk Prauze - ING Tech\ndate: 2019/05/20\ndescription: Detects usage of mimikatz through WinRM protocol by monitoring access\n  to lsass process by wsmprovhost.exe.\ndetection:\n  condition: selection and not filter\n  filter:\n    GrantedAccess: '0x80000000'\n  selection:\n    SourceImage: C:\\Windows\\system32\\wsmprovhost.exe\n    TargetImage|endswith: \\lsass.exe\nfalsepositives:\n- Unlikely\nid: aa35a627-33fb-4d04-a165-d33b4afca3e8\nlevel: high\nlogsource:\n  category: process_access\n  product: windows\nmodified: 2021/06/21\nreferences:\n- https://pentestlab.blog/2018/05/15/lateral-movement-winrm/\nstatus: stable\ntags:\n- attack.credential_access\n- attack.execution\n- attack.t1003.001\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\n- attack.s0002\ntitle: Mimikatz through Windows Remote Management\n",
                            "sigma:id": "aa35a627-33fb-4d04-a165-d33b4afca3e8",
                            "title": "Mimikatz through Windows Remote Management",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM\n  host process) as a parent or child process (sign of an active PowerShell remote\n  session).\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\wsmprovhost.exe\n  - ParentImage|endswith: \\wsmprovhost.exe\nfalsepositives:\n- Legitimate usage of remote Powershell, e.g. for monitoring purposes.\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.t1021.006\ntitle: Remote PowerShell Session Host Process (WinRM)\n",
                            "sigma:id": "734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8",
                            "title": "Remote PowerShell Session Host Process (WinRM)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                        "lookup_data": {
                            "description": "Detects remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/09/12\ndescription: Detects remote PowerShell connections by monitoring network outbound\n  connections to ports 5985 or 5986 from a non-network service account.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_generic:\n  - User|contains:\n    - NETWORK SERVICE\n    - NETZWERKDIENST\n    - SERVIZIO DI RETE\n    - SERVICIO DE RED\n  - User|contains|all:\n    - SERVICE R\n    - SEAU\n  - SourceIp|startswith: '0:0:'\n  - Image:\n    - C:\\Program Files\\Avast Software\\Avast\\AvastSvc.exe\n    - C:\\Program Files (x86)\\Avast Software\\Avast\\AvastSvc.exe\n  filter_localhost:\n    DestinationIp:\n    - ::1\n    - 127.0.0.1\n    SourceIp:\n    - ::1\n    - 127.0.0.1\n  selection:\n    DestinationPort:\n    - 5985\n    - 5986\n    Initiated: 'true'\nfalsepositives:\n- Legitimate usage of remote PowerShell, e.g. remote administration and monitoring.\n- Network Service user name of a not-covered localization\nid: c539afac-c12a-46ed-b1bd-5a5567c9f045\nlevel: high\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (Network)\n",
                            "sigma:id": "c539afac-c12a-46ed-b1bd-5a5567c9f045",
                            "title": "Remote PowerShell Session (Network)",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "60167e5c-84b2-4c95-a7ac-86281f27c445",
                        "lookup_data": {
                            "description": "Detects remote PowerShell sessions",
                            "raw": "author: Roberto Rodriguez @Cyb3rWard0g\ndate: 2019/08/10\ndescription: Detects remote PowerShell sessions\ndetection:\n  condition: selection\n  selection:\n    HostApplication|contains: wsmprovhost.exe\n    HostName: ServerRemoteHost\nfalsepositives:\n- Legitimate use remote PowerShell sessions\nid: 60167e5c-84b2-4c95-a7ac-86281f27c445\nlevel: high\nlogsource:\n  category: ps_classic_start\n  definition: fields have to be extract from event\n  product: windows\nmodified: 2022/06/20\nreferences:\n- https://threathunterplaybook.com/notebooks/windows/02_execution/WIN-190511223310.html\nrelated:\n- id: 96b9f619-aa91-478f-bacb-c3e50f8df575\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.lateral_movement\n- attack.t1021.006\ntitle: Remote PowerShell Session (PS Classic)\n",
                            "sigma:id": "60167e5c-84b2-4c95-a7ac-86281f27c445",
                            "title": "Remote PowerShell Session (PS Classic)",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1021.006",
                "display_name": "Remote Services: Windows Remote Management",
                "atomic_tests": [
                    {
                        "name": "Enable Windows Remote Management",
                        "auto_generated_guid": "9059e8de-3d7d-4954-a322-46161880b9cf",
                        "description": "Powershell Enable WinRM\n\nUpon successful execution, powershell will \"Enable-PSRemoting\" allowing for remote PS access.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Enable-PSRemoting -Force\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Remote Code Execution with PS Credentials Using Invoke-Command",
                        "auto_generated_guid": "5295bd61-bd7e-4744-9d52-85962a4cf2d6",
                        "description": "Simulate lateral movement with PowerShell Remoting on the local host. \nUpon successful execution, PowerShell will execute `whoami` using `Invoke-Command`, targeting the \nlocal machine as remote target.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Enable-PSRemoting -Force\nInvoke-Command -ComputerName $env:COMPUTERNAME -ScriptBlock {whoami}",
                            "cleanup_command": "Disable-PSRemoting -Force",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinRM Access with Evil-WinRM",
                        "auto_generated_guid": "efe86d95-44c4-4509-ae42-7bfd9d1f5b3d",
                        "description": "An adversary may attempt to use Evil-WinRM with a valid account to interact with remote systems that have WinRM enabled",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user_name": {
                                "description": "Username",
                                "type": "string",
                                "default": "Domain\\Administrator"
                            },
                            "destination_address": {
                                "description": "Remote Host IP or Hostname",
                                "type": "string",
                                "default": "Target"
                            },
                            "password": {
                                "description": "Password",
                                "type": "string",
                                "default": "P@ssw0rd1"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Computer must have Ruby Installed",
                                "prereq_command": "try {if (ruby -v) {exit 0} else {exit 1}} catch {exit 1}",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest  -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\" https://github.com/oneclick/rubyinstaller2/releases/download/RubyInstaller-2.7.1-1/rubyinstaller-2.7.1-1-x64.exe\n$file1= \"PathToAtomicsFolder\\..\\ExternalPayloads\\rubyinstaller-2.7.1-1-x64.exe\"\nStart-Process $file1 /S;"
                            },
                            {
                                "description": "Computer must have Evil-WinRM installed",
                                "prereq_command": "try {if (evil-winrm -h) {exit 0} else {exit 1}} catch {exit 1}",
                                "get_prereq_command": "gem install evil-winrm"
                            }
                        ],
                        "executor": {
                            "command": "evil-winrm -i #{destination_address} -u #{user_name} -p #{password}",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:03:17"
}