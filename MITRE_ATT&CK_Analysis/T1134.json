{
    "id": "T1134",
    "name": "Access Token Manipulation",
    "description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](T1134.001)) or used to spawn a new process (i.e. [Create Process with Token](T1134.002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\nAny standard user can use the `runas` command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion, Privilege Escalation",
    "data_sources": "Process: Process Creation, Process: Process Metadata, Process: OS API Execution, User Account: User Account Metadata, Active Directory: Active Directory Object Modification, Command: Command Execution",
    "detection": "If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the `runas` command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior.\nThere are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., `LogonUser` (Citation: Microsoft LogonUser), `DuplicateTokenEx`(Citation: Microsoft DuplicateTokenEx), and `ImpersonateLoggedOnUser`(Citation: Microsoft ImpersonateLoggedOnUser)). Please see the referenced Windows API pages for more information.\nQuery systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.(Citation: BlackHat Atkinson Winchester Token Manipulation)\nLook for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.",
    "url": "https://attack.mitre.org/techniques/T1134",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "0319b483-5973-4932-91ea-5a44c2975b24",
                    "6c5808ee-85a2-4e56-8137-72e5876a5096",
                    "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                    "dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                    "c61fee9f-16fb-4f8c-bbf0-869093fcd4a6",
                    "15619216-e993-4721-b590-4c520615a67d"
                ],
                "lookup_results": [
                    {
                        "uuid": "0319b483-5973-4932-91ea-5a44c2975b24",
                        "lookup_data": {
                            "description": "Conti Ransomware",
                            "link": "http://www.botvrij.eu/data/feed-osint/0319b483-5973-4932-91ea-5a44c2975b24.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1621181463",
                            "uuid": "0319b483-5973-4932-91ea-5a44c2975b24",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "6c5808ee-85a2-4e56-8137-72e5876a5096",
                        "lookup_data": {
                            "description": "Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE privileges",
                            "raw": "author: Teymur Kheirkhabarov\ndate: 2019/10/26\ndescription: Detection of child processes spawned with SYSTEM privileges by parents\n  with LOCAL SERVICE or NETWORK SERVICE privileges\ndetection:\n  condition: selection and not rundllexception\n  rundllexception:\n    CommandLine|contains: DavSetCookie\n    Image|endswith: \\rundll32.exe\n  selection:\n    ParentUser:\n    - NT AUTHORITY\\NETWORK SERVICE\n    - NT AUTHORITY\\LOCAL SERVICE\n    User: NT AUTHORITY\\SYSTEM\nenrichment:\n- EN_0001_cache_sysmon_event_id_1_info\n- EN_0002_enrich_sysmon_event_id_1_with_parent_info\nfalsepositives:\n- Unknown\nid: 6c5808ee-85a2-4e56-8137-72e5876a5096\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://foxglovesecurity.com/2016/09/26/rotten-potato-privilege-escalation-from-service-accounts-to-system/\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1134\n- attack.t1134.002\ntitle: Detection of Possible Rotten Potato\n",
                            "sigma:id": "6c5808ee-85a2-4e56-8137-72e5876a5096",
                            "title": "Detection of Possible Rotten Potato",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                        "lookup_data": {
                            "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation",
                            "raw": "author: Teymur Kheirkhabarov, Ecco, Florian Roth\ndate: 2019/10/26\ndescription: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting\n  a specific service installation\ndetection:\n  condition: selection_id and selection\n  selection:\n  - ImagePath|contains|all:\n    - cmd\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - '%COMSPEC%'\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - cmd.exe\n    - /c\n    - echo\n    - \\pipe\\\n  - ImagePath|contains|all:\n    - rundll32\n    - .dll,a\n    - '/p:'\n  - ImagePath|startswith: \\\\\\\\127.0.0.1\\\\ADMIN$\\\n  selection_id:\n    EventID: 7045\n    Provider_Name: Service Control Manager\nfalsepositives:\n- Highly unlikely\nfields:\n- ComputerName\n- SubjectDomainName\n- SubjectUserName\n- ImagePath\nid: 843544a7-56e0-4dcc-a44f-5cc266dd97d6\nlevel: critical\nlogsource:\n  product: windows\n  service: system\nmodified: 2022/11/29\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1134.001\n- attack.t1134.002\ntitle: Meterpreter or Cobalt Strike Getsystem Service Installation - System\n",
                            "sigma:id": "843544a7-56e0-4dcc-a44f-5cc266dd97d6",
                            "title": "Meterpreter or Cobalt Strike Getsystem Service Installation - System",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dcaa092b-7de9-4a21-977f-7fcb77e89c48",
                        "lookup_data": {
                            "capec": "CAPEC-633",
                            "mitre-attack-id": "T1134",
                            "mitre-cti:description": "Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\n\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\n\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.",
                            "mitre-cti:name": "Access Token Manipulation",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Tom Ueltschi @c_APT_ure', 'Travis Smith, Tripwire', 'Robby Winchester, @robwinchester3', 'Jared Atkinson, @jaredcatkinson'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--dcaa092b-7de9-4a21-977f-7fcb77e89c48', 'created': '2017-12-14T16:46:06.044Z', 'x_mitre_version': '2.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1134', 'url': 'https://attack.mitre.org/techniques/T1134'}, {'source_name': 'BlackHat Atkinson Winchester Token Manipulation', 'url': 'https://www.blackhat.com/docs/eu-17/materials/eu-17-Atkinson-A-Process-Is-No-One-Hunting-For-Token-Manipulation.pdf', 'description': 'Atkinson, J., Winchester, R. (2017, December 7). A Process is No One: Hunting for Token Manipulation. Retrieved December 21, 2017.'}, {'source_name': 'Microsoft Command-line Logging', 'url': 'https://technet.microsoft.com/en-us/windows-server-docs/identity/ad-ds/manage/component-updates/command-line-process-auditing', 'description': 'Mathers, B. (2017, March 7). Command line process auditing. Retrieved April 21, 2017.'}, {'source_name': 'Microsoft LogonUser', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa378184(v=vs.85).aspx', 'description': 'Microsoft TechNet. (n.d.). Retrieved April 25, 2017.'}, {'source_name': 'Microsoft DuplicateTokenEx', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa446617(v=vs.85).aspx', 'description': 'Microsoft TechNet. (n.d.). Retrieved April 25, 2017.'}, {'source_name': 'Microsoft ImpersonateLoggedOnUser', 'url': 'https://msdn.microsoft.com/en-us/library/windows/desktop/aa378612(v=vs.85).aspx', 'description': 'Microsoft TechNet. (n.d.). Retrieved April 25, 2017.'}, {'source_name': 'Pentestlab Token Manipulation', 'url': 'https://pentestlab.blog/2017/04/03/token-manipulation/', 'description': 'netbiosX. (2017, April 3). Token Manipulation. Retrieved April 21, 2017.'}, {'url': 'https://capec.mitre.org/data/definitions/633.html', 'source_name': 'capec', 'external_id': 'CAPEC-633'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may modify access tokens to operate under a different user or system security context to perform actions and bypass access controls. Windows uses access tokens to determine the ownership of a running process. A user can manipulate access tokens to make a running process appear as though it is the child of a different process or belongs to someone other than the user that started the process. When this occurs, the process also takes on the security context associated with the new token.\\n\\nAn adversary can use built-in Windows API functions to copy access tokens from existing processes; this is known as token stealing. These token can then be applied to an existing process (i.e. [Token Impersonation/Theft](https://attack.mitre.org/techniques/T1134/001)) or used to spawn a new process (i.e. [Create Process with Token](https://attack.mitre.org/techniques/T1134/002)). An adversary must already be in a privileged user context (i.e. administrator) to steal a token. However, adversaries commonly use token stealing to elevate their security context from the administrator level to the SYSTEM level. An adversary can then use a token to authenticate to a remote system as the account for that token if the account has appropriate permissions on the remote system.(Citation: Pentestlab Token Manipulation)\\n\\nAny standard user can use the <code>runas</code> command, and the Windows API functions, to create impersonation tokens; it does not require access to an administrator account. There are also other mechanisms, such as Active Directory fields, that can be used to modify access tokens.', 'modified': '2022-05-03T02:14:43.557Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Access Token Manipulation', 'x_mitre_detection': 'If an adversary is using a standard command-line shell, analysts can detect token manipulation by auditing command-line activity. Specifically, analysts should look for use of the <code>runas</code> command. Detailed command-line logging is not enabled by default in Windows.(Citation: Microsoft Command-line Logging)\\n\\nIf an adversary is using a payload that calls the Windows token APIs directly, analysts can detect token manipulation only through careful analysis of user network activity, examination of running processes, and correlation with other endpoint and network behavior. \\n\\nThere are many Windows API calls a payload can take advantage of to manipulate access tokens (e.g., <code>LogonUser</code> (Citation: Microsoft LogonUser), <code>DuplicateTokenEx</code>(Citation: Microsoft DuplicateTokenEx), and <code>ImpersonateLoggedOnUser</code>(Citation: Microsoft ImpersonateLoggedOnUser)). Please see the referenced Windows API pages for more information.\\n\\nQuery systems for process and thread token information and look for inconsistencies such as user owns processes impersonating the local SYSTEM account.(Citation: BlackHat Atkinson Winchester Token Manipulation)\\n\\nLook for inconsistencies between the various fields that store PPID information, such as the EventHeader ProcessId from data collected via Event Tracing for Windows (ETW), Creator Process ID/Name from Windows event logs, and the ProcessID and ParentProcessID (which are also produced from ETW and other utilities such as Task Manager and Process Explorer). The ETW provided EventHeader ProcessId identifies the actual parent process.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Process: Process Metadata', 'Process: OS API Execution', 'User Account: User Account Metadata', 'Process: Process Creation', 'Command: Command Execution', 'Active Directory: Active Directory Object Modification'], 'x_mitre_permissions_required': ['User', 'Administrator'], 'x_mitre_effective_permissions': ['SYSTEM'], 'x_mitre_defense_bypassed': ['Windows User Account Control', 'Heuristic Detection', 'System Access Controls', 'Host Forensic Analysis'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c61fee9f-16fb-4f8c-bbf0-869093fcd4a6",
                        "lookup_data": {
                            "mitre-attack-id": "T1134",
                            "mitre-cti:description": "Access tokens are an integral part of the security system within Windows and cannot be turned off. However, an attacker must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require to do their job.\n\nAny user can also spoof access tokens if they have legitimate credentials. Follow mitigation guidelines for preventing adversary use of [Valid Accounts](https://attack.mitre.org/techniques/T1078). Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object. (Citation: Microsoft Create Token) Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token. (Citation: Microsoft Replace Process Token)\n\nAlso limit opportunities for adversaries to increase privileges by limiting Privilege Escalation opportunities.",
                            "mitre-cti:name": "Access Token Manipulation Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--c61fee9f-16fb-4f8c-bbf0-869093fcd4a6', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1134', 'external_id': 'T1134'}, {'source_name': 'Microsoft Create Token', 'description': 'Brower, N., Lich, B. (2017, April 19). Create a token object. Retrieved December 19, 2017.', 'url': 'https://docs.microsoft.com/windows/device-security/security-policy-settings/create-a-token-object'}, {'source_name': 'Microsoft Replace Process Token', 'description': 'Brower, N., Lich, B. (2017, April 19). Replace a process level token. Retrieved December 19, 2017.', 'url': 'https://docs.microsoft.com/windows/device-security/security-policy-settings/replace-a-process-level-token'}], 'modified': '2019-07-24T14:29:27.367Z', 'name': 'Access Token Manipulation Mitigation', 'description': 'Access tokens are an integral part of the security system within Windows and cannot be turned off. However, an attacker must already have administrator level access on the local system to make full use of this technique; be sure to restrict users and accounts to the least privileges they require to do their job.\\n\\nAny user can also spoof access tokens if they have legitimate credentials. Follow mitigation guidelines for preventing adversary use of [Valid Accounts](https://attack.mitre.org/techniques/T1078). Limit permissions so that users and user groups cannot create tokens. This setting should be defined for the local system account only. GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Create a token object. (Citation: Microsoft Create Token) Also define who can create a process level token to only the local and network service through GPO: Computer Configuration > [Policies] > Windows Settings > Security Settings > Local Policies > User Rights Assignment: Replace a process level token. (Citation: Microsoft Replace Process Token)\\n\\nAlso limit opportunities for adversaries to increase privileges by limiting Privilege Escalation opportunities.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "15619216-e993-4721-b590-4c520615a67d",
                        "lookup_data": {
                            "description": "Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting",
                            "raw": "author: Teymur Kheirkhabarov, Ecco, Florian Roth\ndate: 2019/10/26\ndescription: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting\n  a specific service starting\ndetection:\n  condition: selection_1 and selection_2 and not filter1\n  filter1:\n    CommandLine|contains: MpCmdRun\n  selection_1:\n    ParentImage|endswith: \\services.exe\n  selection_2:\n  - CommandLine|contains|all:\n    - cmd\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - '%COMSPEC%'\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - cmd.exe\n    - /c\n    - echo\n    - \\pipe\\\n  - CommandLine|contains|all:\n    - rundll32\n    - .dll,a\n    - '/p:'\nfalsepositives:\n- Commandlines containing components like cmd accidentally\n- Jobs and services started with cmd\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 15619216-e993-4721-b590-4c520615a67d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://speakerdeck.com/heirhabarov/hunting-for-privilege-escalation-in-windows-environment\n- https://blog.cobaltstrike.com/2014/04/02/what-happens-when-i-type-getsystem/\nstatus: test\ntags:\n- attack.privilege_escalation\n- attack.t1134.001\n- attack.t1134.002\ntitle: Meterpreter or Cobalt Strike Getsystem Service Start\n",
                            "sigma:id": "15619216-e993-4721-b590-4c520615a67d",
                            "title": "Meterpreter or Cobalt Strike Getsystem Service Start",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": []
    },
    "timestamp": "2025-02-28 13:23:38"
}