{
    "id": "T1547.010",
    "name": "Port Monitors",
    "description": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the `AddMonitor` API call to set a DLL to be loaded at startup. (Citation: AddMonitor) This DLL can be located in `C:WindowsSystem32` and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions. (Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to `HKLMSYSTEMCurrentControlSetControlPrintMonitors`.\nThe Registry key contains entries for the following:\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",
    "platforms": "Windows",
    "kill_chain_phases": "Persistence, Privilege Escalation",
    "data_sources": "File: File Creation, Process: OS API Execution, Module: Module Load, Windows Registry: Windows Registry Key Modification",
    "detection": "Monitor process API calls to `AddMonitor`.(Citation: AddMonitor) Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious.\nMonitor Registry writes to `HKLMSYSTEMCurrentControlSetControlPrintMonitors`. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism (Citation: TechNet Autoruns)",
    "url": "https://attack.mitre.org/techniques/T1547/010",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "43881e51-ac74-445b-b4c6-f9f9e9bf23fe",
                    "944e8941-f6f6-4ee8-ac05-1c224e923c0e",
                    "674202d0-b22a-4af4-ae5f-2eda1f3da1af",
                    "c2c76b77-32be-4d1f-82c9-7e544bdfe0eb",
                    "509e84b9-a71a-40e0-834f-05470369bd1e"
                ],
                "lookup_results": [
                    {
                        "uuid": "43881e51-ac74-445b-b4c6-f9f9e9bf23fe",
                        "lookup_data": {
                            "mitre-attack-id": "T1547.010",
                            "mitre-cti:description": "Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\Windows\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.(Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\SYSTEM\\CurrentControlSet\\Control\\Print\\Monitors</code>. \n\nThe Registry key contains entries for the following:\n\n* Local Port\n* Standard TCP/IP Port\n* USB Monitor\n* WSD Port\n\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.",
                            "mitre-cti:name": "Port Monitors",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Stefan Kanthak', 'Travis Smith, Tripwire'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--43881e51-ac74-445b-b4c6-f9f9e9bf23fe', 'created': '2020-01-24T19:46:27.750Z', 'x_mitre_version': '1.1', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1547.010', 'url': 'https://attack.mitre.org/techniques/T1547/010'}, {'source_name': 'Bloxham', 'url': 'https://www.defcon.org/images/defcon-22/dc-22-presentations/Bloxham/DEFCON-22-Brady-Bloxham-Windows-API-Abuse-UPDATED.pdf', 'description': 'Bloxham, B. (n.d.). Getting Windows to Play with Itself &#91;PowerPoint slides&#93;. Retrieved November 12, 2014.'}, {'source_name': 'AddMonitor', 'url': 'http://msdn.microsoft.com/en-us/library/dd183341', 'description': 'Microsoft. (n.d.). AddMonitor function. Retrieved November 12, 2014.'}, {'source_name': 'TechNet Autoruns', 'url': 'https://technet.microsoft.com/en-us/sysinternals/bb963902', 'description': 'Russinovich, M. (2016, January 4). Autoruns for Windows v13.51. Retrieved June 6, 2016.'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may use port monitors to run an adversary supplied DLL during system boot for persistence or privilege escalation. A port monitor can be set through the <code>AddMonitor</code> API call to set a DLL to be loaded at startup.(Citation: AddMonitor) This DLL can be located in <code>C:\\\\Windows\\\\System32</code> and will be loaded by the print spooler service, spoolsv.exe, on boot. The spoolsv.exe process also runs under SYSTEM level permissions.(Citation: Bloxham) Alternatively, an arbitrary DLL can be loaded if permissions allow writing a fully-qualified pathname for that DLL to <code>HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Print\\\\Monitors</code>. \\n\\nThe Registry key contains entries for the following:\\n\\n* Local Port\\n* Standard TCP/IP Port\\n* USB Monitor\\n* WSD Port\\n\\nAdversaries can use this technique to load malicious code at startup that will persist on system reboot and execute as SYSTEM.', 'modified': '2022-04-20T16:36:31.835Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Port Monitors', 'x_mitre_detection': 'Monitor process API calls to <code>AddMonitor</code>.(Citation: AddMonitor) Monitor DLLs that are loaded by spoolsv.exe for DLLs that are abnormal. New DLLs written to the System32 directory that do not correlate with known good software or patching may be suspicious. \\n\\nMonitor Registry writes to <code>HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Print\\\\Monitors</code>. Run the Autoruns utility, which checks for this Registry key as a persistence mechanism.(Citation: TechNet Autoruns)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}], 'x_mitre_is_subtechnique': True, 'x_mitre_data_sources': ['File: File Creation', 'Process: OS API Execution', 'Module: Module Load', 'Windows Registry: Windows Registry Key Modification'], 'x_mitre_permissions_required': ['SYSTEM', 'Administrator'], 'x_mitre_effective_permissions': ['SYSTEM'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "944e8941-f6f6-4ee8-ac05-1c224e923c0e",
                        "lookup_data": {
                            "description": "Adversaries may use port monitors to run an attacker supplied DLL during system boot for persistence or privilege escalation.\nA port monitor can be set through the AddMonitor API call to set a DLL to be loaded at startup.\n",
                            "raw": "author: frack113\ndate: 2021/12/30\ndescription: 'Adversaries may use port monitors to run an attacker supplied DLL during\n  system boot for persistence or privilege escalation.\n\n  A port monitor can be set through the AddMonitor API call to set a DLL to be loaded\n  at startup.\n\n  '\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_cutepdf:\n    Details: cpwmon64_v40.dll\n    Image: C:\\Windows\\System32\\spoolsv.exe\n    TargetObject|contains: \\System\\CurrentControlSet\\Control\\Print\\Monitors\\CutePDF\n      Writer Monitor v4.0\\Driver\n    User|contains:\n    - AUTHORI\n    - AUTORI\n  filter_leg1:\n    TargetObject|contains: Control\\Print\\Monitors\\MONVNC\\Driver\n  filter_leg2:\n    TargetObject|contains|all:\n    - Control\\Print\\Environments\\\n    - \\Drivers\\\n    - \\VNC Printer\n  selection:\n    Details|endswith: .dll\n    EventType: SetValue\n    TargetObject|startswith: HKLM\\System\\CurrentControlSet\\Control\\Print\\Monitors\\\nfalsepositives:\n- Unknown\nid: 944e8941-f6f6-4ee8-ac05-1c224e923c0e\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/09/18\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1547.010/T1547.010.md\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1547.010\ntitle: Add Port Monitor Persistence in Registry\n",
                            "sigma:id": "944e8941-f6f6-4ee8-ac05-1c224e923c0e",
                            "title": "Add Port Monitor Persistence in Registry",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "674202d0-b22a-4af4-ae5f-2eda1f3da1af",
                        "lookup_data": {
                            "description": "Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification",
                            "raw": "author: frack113\ndate: 2022/01/05\ndescription: Bypasses User Account Control using Event Viewer and a relevant Windows\n  Registry modification\ndetection:\n  condition: selection and not filter\n  filter:\n    Details|startswith: '%SystemRoot%\\system32\\mmc.exe \"%1\" %'\n  selection:\n    EventType: SetValue\n    TargetObject|endswith: _Classes\\mscfile\\shell\\open\\command\\(Default)\nfalsepositives:\n- Unknown\nid: 674202d0-b22a-4af4-ae5f-2eda1f3da1af\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/10/05\nreferences:\n- https://enigma0x3.net/2016/08/15/fileless-uac-bypass-using-eventvwr-exe-and-registry-hijacking/\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1548.002/T1548.002.md#atomic-test-1---bypass-uac-using-event-viewer-cmd\nstatus: experimental\ntags:\n- attack.persistence\n- attack.t1547.010\ntitle: Bypass UAC Using Event Viewer\n",
                            "sigma:id": "674202d0-b22a-4af4-ae5f-2eda1f3da1af",
                            "title": "Bypass UAC Using Event Viewer",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c2c76b77-32be-4d1f-82c9-7e544bdfe0eb",
                        "lookup_data": {
                            "description": "Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy",
                            "raw": "author: Janantha Marasinghe\ndate: 2022/11/18\ndescription: Detects potential suspicious behaviour using secedit.exe. Such as exporting\n  or modifying the security policy\ndetection:\n  condition: selection_img and (1 of selection_flags_*)\n  selection_flags_configure:\n    CommandLine|contains|all:\n    - /configure\n    - /db\n  selection_flags_discovery:\n    CommandLine|contains|all:\n    - /export\n    - /cfg\n  selection_img:\n  - Image|endswith: \\secedit.exe\n  - OriginalFileName: SeCEdit\nfalsepositives:\n- Legitimate administrative use\nid: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://blueteamops.medium.com/secedit-and-i-know-it-595056dee53d\n- https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/secedit\nstatus: experimental\ntags:\n- attack.discovery\n- attack.persistence\n- attack.defense_evasion\n- attack.credential_access\n- attack.privilege_escalation\n- attack.t1562.002\n- attack.t1547.001\n- attack.t1505.005\n- attack.t1556.002\n- attack.t1562\n- attack.t1574.007\n- attack.t1564.002\n- attack.t1546.008\n- attack.t1546.007\n- attack.t1547.014\n- attack.t1547.010\n- attack.t1547.002\n- attack.t1557\n- attack.t1082\ntitle: Potential Suspicious Activity Using SeCEdit\n",
                            "sigma:id": "c2c76b77-32be-4d1f-82c9-7e544bdfe0eb",
                            "title": "Potential Suspicious Activity Using SeCEdit",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "509e84b9-a71a-40e0-834f-05470369bd1e",
                        "lookup_data": {
                            "description": "Remote desktop is a common feature in operating systems.\nIt allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.\nMicrosoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).\n",
                            "raw": "author: frack113\ndate: 2022/01/01\ndescription: 'Remote desktop is a common feature in operating systems.\n\n  It allows a user to log into an interactive session with a system desktop graphical\n  user interface on a remote system.\n\n  Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote\n  Desktop Services (RDS).\n\n  '\ndetection:\n  condition: selection and not filter\n  filter:\n    Details: DWORD (0x00000d3d)\n  selection:\n    EventType: SetValue\n    TargetObject: HKLM\\System\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\PortNumber\nfalsepositives:\n- Unknown\nid: 509e84b9-a71a-40e0-834f-05470369bd1e\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/03/26\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1021.001/T1021.001.md#atomic-test-1---rdp-to-domaincontroller\nstatus: test\ntags:\n- attack.persistence\n- attack.t1547.010\ntitle: Changing RDP Port to Non Standard Number\n",
                            "sigma:id": "509e84b9-a71a-40e0-834f-05470369bd1e",
                            "title": "Changing RDP Port to Non Standard Number",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1547.010",
                "display_name": "Boot or Logon Autostart Execution: Port Monitors",
                "atomic_tests": [
                    {
                        "name": "Add Port Monitor persistence in Registry",
                        "auto_generated_guid": "d34ef297-f178-4462-871e-9ce618d44e50",
                        "description": "Add key-value pair to a Windows Port Monitor registry. On the subsequent reboot DLL will be execute under spoolsv with NT AUTHORITY/SYSTEM privilege.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "monitor_dll": {
                                "description": "Addition to port monitor registry key. Normally refers to a DLL name in C:\\Windows\\System32 but an arbitrary DLL can be specified with the absolute path.",
                                "type": "path",
                                "default": "$PathToAtomicsFolder\\T1547.010\\bin\\PortMonitor.dll"
                            }
                        },
                        "executor": {
                            "command": "reg add \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /v \"Driver\" /d \"#{monitor_dll}\" /t REG_SZ /f\n",
                            "cleanup_command": "reg delete \"hklm\\system\\currentcontrolset\\control\\print\\monitors\\AtomicRedTeam\" /f >nul 2>&1\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 15:44:18"
}