{
    "id": "T1040",
    "name": "Network Sniffing",
    "description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](T1557.001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.",
    "platforms": "Linux, macOS, Windows, Network",
    "kill_chain_phases": "Credential Access, Discovery",
    "data_sources": "Process: Process Creation, Command: Command Execution",
    "detection": "Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a [Adversary-in-the-Middle](T1557) attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.",
    "url": "https://attack.mitre.org/techniques/T1040",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "b1cbdf8b-6078-48f5-a890-11ea19d7f8e9",
                "atomic_attack_name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "515575ab-d213-42b1-aa64-ef6a2dd4641b",
                "atomic_attack_name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "7a0895f0-84c1-4adf-8491-a21510b1d4c1",
                "atomic_attack_name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "10c710c9-9104-4d5f-8829-5b65391e2a29",
                "atomic_attack_name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "a3a0d4c9-c068-4563-a08d-583bd05b884c",
                "atomic_attack_name": "Filtered Packet Capture FreeBSD using /dev/bpfN with sudo",
                "platform": "Linux",
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "e2028771-1bfb-48f5-b5e6-e50ee0942a14",
                "atomic_attack_name": "Packet Capture FreeBSD using /dev/bpfN with sudo",
                "platform": "Linux",
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "855fb8b4-b8ab-4785-ae77-09f5df7bff55",
                "atomic_attack_name": "Windows Internal pktmon set filter",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PktMon.EXE Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_pktmon_execution.yml",
                        "remote_content": "title: PktMon.EXE Execution\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nstatus: test\ndescription: Detects execution of PktMon, a tool that captures network packets.\nreferences:\n    - https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nauthor: frack113\ndate: 2022-03-17\nmodified: 2023-06-23\ntags:\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        - Image|endswith: '\\pktmon.exe'\n        - OriginalFileName: 'PktMon.exe'\n    condition: selection\nfalsepositives:\n    - Legitimate use\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1040",
                "atomic_attack_guid": "b5656f67-d67f-4de8-8e62-b5581630f528",
                "atomic_attack_name": "Windows Internal Packet Capture",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "New Network Trace Capture Started Via Netsh.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_netsh_packet_capture.yml",
                        "remote_content": "title: New Network Trace Capture Started Via Netsh.EXE\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nstatus: test\ndescription: Detects the execution of netsh with the \"trace\" flag in order to start a network capture\nreferences:\n    - https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\n    - https://klausjochem.me/2016/02/03/netsh-the-cyber-attackers-tool-of-choice/\nauthor: Kutepov Anton, oscd.community\ndate: 2019-10-24\nmodified: 2023-02-13\ntags:\n    - attack.discovery\n    - attack.credential-access\n    - attack.t1040\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\netsh.exe'\n        - OriginalFileName: 'netsh.exe'\n    selection_cli:\n        CommandLine|contains|all:\n            - 'trace'\n            - 'start'\n    condition: all of selection_*\nfalsepositives:\n    - Legitimate administration activity\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "ba1f7802-adc7-48b4-9ecb-81e227fddfd5",
                    "42b1a5b8-353f-4f10-b256-39de4467faff",
                    "adc9bcc4-c39c-4f6b-a711-1884017bf043",
                    "f4d3748a-65d1-4806-bd23-e25728081d01",
                    "46b7ef91-4e1d-43c5-a2eb-00fa9444f6f4",
                    "d3c3861d-c504-4c77-ba55-224ba82d0118",
                    "b9e1f193-d236-4451-aaae-2f3d2102120d",
                    "f956c7c1-0f60-4bc5-b7d7-b39ab3c08908",
                    "3257eb21-f9a7-4430-8de1-d8b6e288f529",
                    "7b687634-ab20-11ea-bb37-0242ac130002"
                ],
                "lookup_results": [
                    {
                        "uuid": "ba1f7802-adc7-48b4-9ecb-81e227fddfd5",
                        "lookup_data": {
                            "description": "Detects potential network sniffing via use of network tools such as \"tshark\", \"windump\" or \"netsh\".\nNetwork sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
                            "raw": "author: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)\ndate: 2019/10/21\ndescription: 'Detects potential network sniffing via use of network tools such as\n  \"tshark\", \"windump\" or \"netsh\".\n\n  Network sniffing refers to using the network interface on a system to monitor or\n  capture information sent over a wired or wireless connection.\n\n  An adversary may place a network interface into promiscuous mode to passively access\n  data in transit over the network, or use span ports to capture a larger amount of\n  data.\n\n  '\ndetection:\n  condition: 1 of selection_*\n  selection_netsh:\n    CommandLine|contains|all:\n    - ' trace '\n    - ' start '\n    - ' capture'\n    - 'yes'\n    Image|endswith: \\netsh.exe\n  selection_tshark:\n    CommandLine|contains: -i\n    Image|endswith: \\tshark.exe\n  selection_windump:\n    Image|endswith: \\windump.exe\nfalsepositives:\n- Legitimate adminstration activity to troubleshoot network issues\nid: ba1f7802-adc7-48b4-9ecb-81e227fddfd5\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/02/01\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nstatus: test\ntags:\n- attack.credential_access\n- attack.discovery\n- attack.t1040\ntitle: Potential Network Sniffing Activity Using Network Tools\n",
                            "sigma:id": "ba1f7802-adc7-48b4-9ecb-81e227fddfd5",
                            "title": "Potential Network Sniffing Activity Using Network Tools",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "42b1a5b8-353f-4f10-b256-39de4467faff",
                        "lookup_data": {
                            "description": "Detect the harvesting of wifi credentials using netsh.exe",
                            "raw": "author: Andreas Hunkeler (@Karneades), oscd.community\ndate: 2020/04/20\ndescription: Detect the harvesting of wifi credentials using netsh.exe\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - wlan\n    - ' s'\n    - ' p'\n    - ' k'\n    - =clear\n    Image|endswith: \\netsh.exe\nfalsepositives:\n- Legitimate administrator or user uses netsh.exe wlan functionality for legitimate\n  reason\nid: 42b1a5b8-353f-4f10-b256-39de4467faff\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://blog.malwarebytes.com/threat-analysis/2020/04/new-agenttesla-variant-steals-wifi-credentials/\nstatus: test\ntags:\n- attack.discovery\n- attack.credential_access\n- attack.t1040\ntitle: Harvesting of Wifi Credentials Using netsh.exe\n",
                            "sigma:id": "42b1a5b8-353f-4f10-b256-39de4467faff",
                            "title": "Harvesting of Wifi Credentials Using netsh.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "adc9bcc4-c39c-4f6b-a711-1884017bf043",
                        "lookup_data": {
                            "description": "Detects the usage of tooling to sniff network traffic.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
                            "raw": "author: Alejandro Ortuno, oscd.community\ndate: 2020/10/14\ndescription: 'Detects the usage of tooling to sniff network traffic.\n\n  An adversary may place a network interface into promiscuous mode to passively access\n  data in transit over the network, or use span ports to capture a larger amount of\n  data.\n\n  '\ndetection:\n  condition: selection\n  selection:\n    Image|endswith:\n    - /tcpdump\n    - /tshark\nfalsepositives:\n- Legitimate administration activities\nid: adc9bcc4-c39c-4f6b-a711-1884017bf043\nlevel: informational\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2022/11/26\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nstatus: test\ntags:\n- attack.discovery\n- attack.credential_access\n- attack.t1040\ntitle: Network Sniffing - MacOs\n",
                            "sigma:id": "adc9bcc4-c39c-4f6b-a711-1884017bf043",
                            "title": "Network Sniffing - MacOs",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f4d3748a-65d1-4806-bd23-e25728081d01",
                        "lookup_data": {
                            "description": "Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.\nAn adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n",
                            "raw": "author: Timur Zinniatullin, oscd.community\ndate: 2019/10/21\ndescription: 'Network sniffing refers to using the network interface on a system to\n  monitor or capture information sent over a wired or wireless connection.\n\n  An adversary may place a network interface into promiscuous mode to passively access\n  data in transit over the network, or use span ports to capture a larger amount of\n  data.\n\n  '\ndetection:\n  condition: 1 of selection_*\n  selection_1:\n    a0: tcpdump\n    a1: -c\n    a3|contains: -i\n    type: execve\n  selection_2:\n    a0: tshark\n    a1: -c\n    a3: -i\n    type: execve\nfalsepositives:\n- Legitimate administrator or user uses network sniffing tool for legitimate reasons.\nid: f4d3748a-65d1-4806-bd23-e25728081d01\nlevel: low\nlogsource:\n  product: linux\n  service: auditd\nmodified: 2022/12/18\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1040/T1040.md\nstatus: test\ntags:\n- attack.credential_access\n- attack.discovery\n- attack.t1040\ntitle: Network Sniffing - Linux\n",
                            "sigma:id": "f4d3748a-65d1-4806-bd23-e25728081d01",
                            "title": "Network Sniffing - Linux",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "46b7ef91-4e1d-43c5-a2eb-00fa9444f6f4",
                        "lookup_data": {
                            "mitre-attack-id": "T1040",
                            "mitre-cti:description": "Ensure that all wireless traffic is encrypted appropriately. Use Kerberos, SSL, and multifactor authentication wherever possible. Monitor switches and network for span port usage, ARP/DNS poisoning, and router reconfiguration.\n\nIdentify and block potentially malicious software that may be used to sniff or analyze network traffic by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",
                            "mitre-cti:name": "Network Sniffing Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--46b7ef91-4e1d-43c5-a2eb-00fa9444f6f4', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'external_id': 'T1040', 'url': 'https://attack.mitre.org/mitigations/T1040', 'source_name': 'mitre-attack'}, {'source_name': 'Beechey 2010', 'description': 'Beechey, J. (2010, December). Application Whitelisting: Panacea or Propaganda?. Retrieved November 18, 2014.', 'url': 'http://www.sans.org/reading-room/whitepapers/application/application-whitelisting-panacea-propaganda-33599'}, {'url': 'http://blog.jpcert.or.jp/2016/01/windows-commands-abused-by-attackers.html', 'description': 'Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.', 'source_name': 'Windows Commands JPCERT'}, {'url': 'https://apps.nsa.gov/iaarchive/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm', 'description': 'NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016.', 'source_name': 'NSA MS AppLocker'}, {'source_name': 'Corio 2008', 'description': 'Corio, C., & Sayana, D. P. (2008, June). Application Lockdown with Software Restriction Policies. Retrieved November 18, 2014.', 'url': 'http://technet.microsoft.com/en-us/magazine/2008.06.srp.aspx'}, {'source_name': 'TechNet Applocker vs SRP', 'description': 'Microsoft. (2012, June 27). Using Software Restriction Policies and AppLocker Policies. Retrieved April 7, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/ee791851.aspx'}], 'modified': '2020-01-17T16:45:23.909Z', 'name': 'Network Sniffing Mitigation', 'description': 'Ensure that all wireless traffic is encrypted appropriately. Use Kerberos, SSL, and multifactor authentication wherever possible. Monitor switches and network for span port usage, ARP/DNS poisoning, and router reconfiguration.\\n\\nIdentify and block potentially malicious software that may be used to sniff or analyze network traffic by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d3c3861d-c504-4c77-ba55-224ba82d0118",
                        "lookup_data": {
                            "description": "Detects capture a network trace via netsh.exe trace functionality",
                            "raw": "author: Kutepov Anton, oscd.community\ndate: 2019/10/24\ndescription: Detects capture a network trace via netsh.exe trace functionality\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains|all:\n    - netsh\n    - trace\n    - start\nfalsepositives:\n- Legitimate administrator or user uses netsh.exe trace functionality for legitimate\n  reason\nid: d3c3861d-c504-4c77-ba55-224ba82d0118\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://blogs.msdn.microsoft.com/canberrapfe/2012/03/30/capture-a-network-trace-without-installing-anything-capture-a-network-trace-of-a-reboot/\nstatus: test\ntags:\n- attack.discovery\n- attack.credential_access\n- attack.t1040\ntitle: Capture a Network Trace with netsh.exe\n",
                            "sigma:id": "d3c3861d-c504-4c77-ba55-224ba82d0118",
                            "title": "Capture a Network Trace with netsh.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b9e1f193-d236-4451-aaae-2f3d2102120d",
                        "lookup_data": {
                            "description": "Show when a monitor or a span/rspan is setup or modified",
                            "raw": "author: Austin Clark\ndate: 2019/08/11\ndescription: Show when a monitor or a span/rspan is setup or modified\ndetection:\n  condition: keywords\n  keywords:\n  - monitor capture point\n  - set span\n  - set rspan\nfalsepositives:\n- Admins may setup new or modify old spans, or use a monitor for troubleshooting\nfields:\n- CmdSet\nid: b9e1f193-d236-4451-aaae-2f3d2102120d\nlevel: medium\nlogsource:\n  product: cisco\n  service: aaa\nmodified: 2023/01/04\nstatus: test\ntags:\n- attack.credential_access\n- attack.discovery\n- attack.t1040\ntitle: Cisco Sniffing\n",
                            "sigma:id": "b9e1f193-d236-4451-aaae-2f3d2102120d",
                            "title": "Cisco Sniffing",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f956c7c1-0f60-4bc5-b7d7-b39ab3c08908",
                        "lookup_data": {
                            "description": "Tools to Capture Network Packets on the windows 10 with October 2018 Update or later.",
                            "raw": "author: frack113\ndate: 2022/03/17\ndescription: Tools to Capture Network Packets on the windows 10 with October 2018\n  Update or later.\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith: \\pktmon.exe\n  - OriginalFileName: PktMon.exe\nfalsepositives:\n- Legitimate use\nid: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/31\nreferences:\n- https://lolbas-project.github.io/lolbas/Binaries/Pktmon/\nstatus: test\ntags:\n- attack.credential_access\n- attack.t1040\ntitle: Use of PktMon.exe\n",
                            "sigma:id": "f956c7c1-0f60-4bc5-b7d7-b39ab3c08908",
                            "title": "Use of PktMon.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3257eb21-f9a7-4430-8de1-d8b6e288f529",
                        "lookup_data": {
                            "capec": "CAPEC-158",
                            "mitre-attack-id": "T1040",
                            "mitre-cti:description": "Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\n\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\n\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\n\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring) (Citation: GCP Packet Mirroring) (Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring) (Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic. (Citation: Rhino Security Labs AWS VPC Traffic Mirroring)",
                            "mitre-cti:name": "Network Sniffing",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows', 'Network', 'IaaS'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Oleg Kolesnikov, Securonix', 'Tiago Faria, 3CORESec'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--3257eb21-f9a7-4430-8de1-d8b6e288f529', 'created': '2017-05-31T21:30:41.399Z', 'x_mitre_version': '1.3', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1040', 'url': 'https://attack.mitre.org/techniques/T1040'}, {'source_name': 'AWS Traffic Mirroring', 'url': 'https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-how-it-works.html', 'description': 'Amazon Web Services. (n.d.). How Traffic Mirroring works. Retrieved March 17, 2022.'}, {'source_name': 'GCP Packet Mirroring', 'url': 'https://cloud.google.com/vpc/docs/packet-mirroring', 'description': 'Google Cloud. (n.d.). Packet Mirroring overview. Retrieved March 17, 2022.'}, {'source_name': 'SpecterOps AWS Traffic Mirroring', 'url': 'https://posts.specterops.io/through-the-looking-glass-part-1-f539ae308512', 'description': 'Luke Paine. (2020, March 11). Through the Looking Glass — Part 1. Retrieved March 17, 2022.'}, {'source_name': 'Azure Virtual Network TAP', 'url': 'https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview', 'description': 'Microsoft. (2022, February 9). Virtual network TAP. Retrieved March 17, 2022.'}, {'source_name': 'Rhino Security Labs AWS VPC Traffic Mirroring', 'url': 'https://rhinosecuritylabs.com/aws/abusing-vpc-traffic-mirroring-in-aws/', 'description': 'Spencer Gietzen. (2019, September 17). Abusing VPC Traffic Mirroring in AWS. Retrieved March 17, 2022.'}, {'url': 'https://capec.mitre.org/data/definitions/158.html', 'source_name': 'capec', 'external_id': 'CAPEC-158'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may sniff network traffic to capture information about an environment, including authentication material passed over the network. Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection. An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.\\n\\nData captured via this technique may include user credentials, especially those sent over an insecure, unencrypted protocol. Techniques for name service resolution poisoning, such as [LLMNR/NBT-NS Poisoning and SMB Relay](https://attack.mitre.org/techniques/T1557/001), can also be used to capture credentials to websites, proxies, and internal systems by redirecting traffic to an adversary.\\n\\nNetwork sniffing may also reveal configuration details, such as running services, version numbers, and other network characteristics (e.g. IP addresses, hostnames, VLAN IDs) necessary for subsequent Lateral Movement and/or Defense Evasion activities.\\n\\nIn cloud-based environments, adversaries may still be able to use traffic mirroring services to sniff network traffic from virtual machines. For example, AWS Traffic Mirroring, GCP Packet Mirroring, and Azure vTap allow users to define specified instances to collect traffic from and specified targets to send collected traffic to.(Citation: AWS Traffic Mirroring) (Citation: GCP Packet Mirroring) (Citation: Azure Virtual Network TAP) Often, much of this traffic will be in cleartext due to the use of TLS termination at the load balancer level to reduce the strain of encrypting and decrypting traffic.(Citation: Rhino Security Labs AWS VPC Traffic Mirroring) (Citation: SpecterOps AWS Traffic Mirroring) The adversary can then use exfiltration techniques such as Transfer Data to Cloud Account in order to access the sniffed traffic. (Citation: Rhino Security Labs AWS VPC Traffic Mirroring)', 'modified': '2022-05-20T17:32:27.146Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Network Sniffing', 'x_mitre_detection': 'Detecting the events leading up to sniffing network traffic may be the best method of detection. From the host level, an adversary would likely need to perform a [Adversary-in-the-Middle](https://attack.mitre.org/techniques/T1557) attack against other devices on a wired network in order to capture traffic that was not to or from the current compromised system. This change in the flow of information is detectable at the enclave network level. Monitor for ARP spoofing and gratuitous ARP broadcasts. Detecting compromised network devices is a bit more challenging. Auditing administrator logins, configuration changes, and device images is required to detect malicious changes.\\n\\nIn cloud-based environments, monitor for the creation of new traffic mirrors or modification of existing traffic mirrors.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Command: Command Execution', 'Process: Process Creation'], 'x_mitre_system_requirements': ['Network interface access and packet capture driver'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7b687634-ab20-11ea-bb37-0242ac130002",
                        "lookup_data": {
                            "description": "Detects Windows Pcap driver installation based on a list of associated .sys files.",
                            "raw": "author: Cian Heasley\ndate: 2020/06/10\ndescription: Detects Windows Pcap driver installation based on a list of associated\n  .sys files.\ndetection:\n  condition: selection\n  selection:\n    EventID: 4697\n    ServiceFileName|contains:\n    - pcap\n    - npcap\n    - npf\n    - nm3\n    - ndiscap\n    - nmnt\n    - windivert\n    - USBPcap\n    - pktmon\nfalsepositives:\n- Unknown\nfields:\n- EventID\n- ServiceFileName\n- Account_Name\n- Computer_Name\n- Originating_Computer\n- ServiceName\nid: 7b687634-ab20-11ea-bb37-0242ac130002\nlevel: medium\nlogsource:\n  definition: The 'System Security Extension' audit subcategory need to be enabled\n    to log the EID 4697\n  product: windows\n  service: system\nmodified: 2022/12/22\nreferences:\n- https://ragged-lab.blogspot.com/2020/06/capturing-pcap-driver-installations.html#more\nstatus: test\ntags:\n- attack.discovery\n- attack.credential_access\n- attack.t1040\ntitle: Windows Pcap Drivers\n",
                            "sigma:id": "7b687634-ab20-11ea-bb37-0242ac130002",
                            "title": "Windows Pcap Drivers",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1040",
                "display_name": "Network Sniffing",
                "atomic_tests": [
                    {
                        "name": "Packet Capture Linux using tshark or tcpdump",
                        "auto_generated_guid": "7fe741f7-b265-4951-a7c7-320889083b3e",
                        "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "interface": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "ens33"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Check if at least one of tcpdump or tshark is installed.\n",
                                "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
                            }
                        ],
                        "executor": {
                            "command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture FreeBSD using tshark or tcpdump",
                        "auto_generated_guid": "c93f2492-9ebe-44b5-8b45-36574cccfe67",
                        "description": "Perform a PCAP. Wireshark will be required for tshark. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface ens33.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "interface": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "em0"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if at least one of tcpdump or tshark is installed.\n",
                                "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "(which pkg && pkg install -y wireshark-nox11)\n"
                            }
                        ],
                        "executor": {
                            "command": "tcpdump -c 5 -nnni #{interface}\ntshark -c 5 -i #{interface}\n",
                            "name": "sh",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture macOS using tcpdump or tshark",
                        "auto_generated_guid": "9d04efee-eff5-4240-b8d2-07792b873608",
                        "description": "Perform a PCAP on macOS. This will require Wireshark/tshark to be installed. TCPdump may already be installed.\n\nUpon successful execution, tshark or tcpdump will execute and capture 5 packets on interface en0A.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "interface": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "en0A"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "Check if at least one of tcpdump or tshark is installed.\n",
                                "prereq_command": "if [ ! -x \"$(command -v tcpdump)\" ] && [ ! -x \"$(command -v tshark)\" ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "(which yum && yum -y install epel-release tcpdump tshark)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y tcpdump tshark)\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo tcpdump -c 5 -nnni #{interface}    \nif [ -x \"$(command -v tshark)\" ]; then sudo tshark -c 5 -i #{interface}; fi;\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture Windows Command Prompt",
                        "auto_generated_guid": "a5b2f6a0-24b4-493e-9590-c699f75723ca",
                        "description": "Perform a packet capture using the windows command prompt. This will require a host that has Wireshark/Tshark\ninstalled.\n\nUpon successful execution, tshark will execute and capture 5 packets on interface \"Ethernet\".\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "interface": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "Ethernet"
                            },
                            "wireshark_url": {
                                "description": "wireshark installer download URL",
                                "type": "url",
                                "default": "https://1.eu.dl.wireshark.org/win64/Wireshark-latest-x64.exe"
                            },
                            "tshark_path": {
                                "description": "path to tshark.exe",
                                "type": "path",
                                "default": "c:\\program files\\wireshark\\tshark.exe"
                            },
                            "npcap_url": {
                                "description": "npcap installed download URL",
                                "type": "url",
                                "default": "https://nmap.org/npcap/dist/npcap-1.31.exe"
                            },
                            "npcap_path": {
                                "description": "path to npcap.sys",
                                "type": "path",
                                "default": "C:\\Program Files\\Npcap\\npcap.sys"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "tshark must be installed and in the default path of \"c:\\Program Files\\Wireshark\\Tshark.exe\".\n",
                                "prereq_command": "if (test-path \"#{tshark_path}\") {exit 0} else {exit 1}",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" #{wireshark_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\wireshark_installer.exe\" /S\n"
                            },
                            {
                                "description": "npcap must be installed.\n",
                                "prereq_command": "if (test-path \"#{npcap_path}\") {exit 0} else {exit 1}",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\" #{npcap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\npcap_installer.exe\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"c:\\Program Files\\Wireshark\\tshark.exe\" -i #{interface} -c 5\n",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Windows Internal Packet Capture",
                        "auto_generated_guid": "b5656f67-d67f-4de8-8e62-b5581630f528",
                        "description": "Uses the built-in Windows packet capture\nAfter execution you should find a file named trace.etl and trace.cab in the temp directory",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "netsh trace start capture=yes tracefile=%temp%\\trace.etl maxsize=10",
                            "cleanup_command": "netsh trace stop >nul 2>&1\nTIMEOUT /T 5 >nul 2>&1\ndel %temp%\\trace.etl >nul 2>&1\ndel %temp%\\trace.cab >nul 2>&1",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Windows Internal pktmon capture",
                        "auto_generated_guid": "c67ba807-f48b-446e-b955-e4928cd1bf91",
                        "description": "Will start a packet capture and store log file as t1040.etl.\nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "pktmon.exe start --etw  -f %TEMP%\\t1040.etl\nTIMEOUT /T 5 >nul 2>&1\npktmon.exe stop\n",
                            "cleanup_command": "del %TEMP%\\t1040.etl",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Windows Internal pktmon set filter",
                        "auto_generated_guid": "855fb8b4-b8ab-4785-ae77-09f5df7bff55",
                        "description": "Select Desired ports for packet capture \nhttps://lolbas-project.github.io/lolbas/Binaries/Pktmon/",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "pktmon.exe filter add -p 445\n",
                            "cleanup_command": "pktmon filter remove",
                            "name": "command_prompt",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture macOS using /dev/bpfN with sudo",
                        "auto_generated_guid": "e6fe5095-545d-4c8b-a0ae-e863914be3aa",
                        "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "ifname": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "en0"
                            },
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_macos_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "exit 1\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -i #{ifname} -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Filtered Packet Capture macOS using /dev/bpfN with sudo",
                        "auto_generated_guid": "e2480aee-23f3-4f34-80ce-de221e27cd19",
                        "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
                        "supported_platforms": [
                            "macos"
                        ],
                        "input_arguments": {
                            "ifname": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "en0"
                            },
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/macos_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_macos_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "exit 1\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -f -i #{ifname} -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture FreeBSD using /dev/bpfN with sudo",
                        "auto_generated_guid": "e2028771-1bfb-48f5-b5e6-e50ee0942a14",
                        "description": "Opens a /dev/bpf file (O_RDONLY) and captures packets for a few seconds.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "ifname": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "em0"
                            },
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_freebsd_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "exit 1\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -i #{ifname} -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "sh",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Filtered Packet Capture FreeBSD using /dev/bpfN with sudo",
                        "auto_generated_guid": "a3a0d4c9-c068-4563-a08d-583bd05b884c",
                        "description": "Opens a /dev/bpf file (O_RDONLY), sets BPF filter for 'udp' and captures packets for a few seconds.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "ifname": {
                                "description": "Specify interface to perform PCAP on.",
                                "type": "string",
                                "default": "em0"
                            },
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/freebsd_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_freebsd_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "exit 1\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -f -i #{ifname} -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "sh",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with sudo",
                        "auto_generated_guid": "10c710c9-9104-4d5f-8829-5b65391e2a29",
                        "description": "Captures packets with domain=AF_PACKET, type=SOCK_RAW for a few seconds.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_linux_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -a -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture Linux socket AF_INET,SOCK_RAW,TCP with sudo",
                        "auto_generated_guid": "7a0895f0-84c1-4adf-8491-a21510b1d4c1",
                        "description": "Captures packets with domain=AF_INET,type=SOCK_RAW,protocol=TCP for a few seconds.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_linux_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -4 -p 6 -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture Linux socket AF_INET,SOCK_PACKET,UDP with sudo",
                        "auto_generated_guid": "515575ab-d213-42b1-aa64-ef6a2dd4641b",
                        "description": "Captures packets with domain=AF_INET,type=SOCK_PACKET,protocol=UDP for a few seconds.\nSOCK_PACKET is \"obsolete\" according to the man page, but still works on Ubuntu 20.04\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_linux_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -4 -P -p 17 -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Packet Capture Linux socket AF_PACKET,SOCK_RAW with BPF filter for UDP with sudo",
                        "auto_generated_guid": "b1cbdf8b-6078-48f5-a890-11ea19d7f8e9",
                        "description": "Captures packets with domain=AF_PACKET,type=SOCK_RAW for a few seconds.\nSets a BPF filter on the socket to filter for UDP traffic.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "csource_path": {
                                "description": "Path to C program source",
                                "type": "string",
                                "default": "PathToAtomicsFolder/T1040/src/linux_pcapdemo.c"
                            },
                            "program_path": {
                                "description": "Path to compiled C program",
                                "type": "string",
                                "default": "/tmp/t1040_linux_pcapdemo"
                            }
                        },
                        "dependency_executor_name": "bash",
                        "dependencies": [
                            {
                                "description": "compile C program\n",
                                "prereq_command": "if [ -f \"#{program_path}\" ]; then exit 0; else exit 1; fi\n",
                                "get_prereq_command": "cc #{csource_path} -o #{program_path}\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{program_path} -a -f -t 3\n",
                            "cleanup_command": "rm -f #{program_path}\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "PowerShell Network Sniffing",
                        "auto_generated_guid": "9c15a7de-de14-46c3-bc2a-6d94130986ae",
                        "description": "PowerShell Built-in Cmdlets to capture network traffic.\nhttps://learn.microsoft.com/en-us/powershell/module/neteventpacketcapture/new-neteventsession?view=windowsserver2022-ps",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "New-NetEventSession -Name Capture007 -LocalFilePath \"$ENV:Temp\\sniff.etl\"\nAdd-NetEventPacketCaptureProvider -SessionName Capture007 -TruncationLength 100\nStart-NetEventSession -Name Capture007\nStop-NetEventSession -Name Capture007\nRemove-NetEventSession -Name Capture007\n",
                            "cleanup_command": "del $ENV:Temp\\sniff.etl",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:28:31"
}