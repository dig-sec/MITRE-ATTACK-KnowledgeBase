{
    "id": "T1546.005",
    "name": "Trap",
    "description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The `trap` command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like `ctrl+c` and `ctrl+d`.\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format `trap 'command list' signals` where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
    "platforms": "macOS, Linux",
    "kill_chain_phases": "Privilege Escalation, Persistence",
    "data_sources": "Process: Process Creation, Command: Command Execution, File: File Creation, File: File Modification",
    "detection": "Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.",
    "url": "https://attack.mitre.org/techniques/T1546/005",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1546.005",
                "atomic_attack_guid": "ade10242-1eac-43df-8412-be0d4c704ada",
                "atomic_attack_name": "Trap SIGINT (freebsd)",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Nohup Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_nohup.yml",
                        "remote_content": "title: Nohup Execution\nid: e4ffe466-6ff8-48d4-94bd-e32d1a6061e2\nstatus: test\ndescription: Detects usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\nreferences:\n    - https://gtfobins.github.io/gtfobins/nohup/\n    - https://en.wikipedia.org/wiki/Nohup\n    - https://www.computerhope.com/unix/unohup.htm\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-06\ntags:\n    - attack.execution\n    - attack.t1059.004\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1546.005",
                "atomic_attack_guid": "a547d1ba-1d7a-4cc5-a9cb-8d65e8809636",
                "atomic_attack_name": "Trap SIGINT",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Nohup Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_nohup.yml",
                        "remote_content": "title: Nohup Execution\nid: e4ffe466-6ff8-48d4-94bd-e32d1a6061e2\nstatus: test\ndescription: Detects usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\nreferences:\n    - https://gtfobins.github.io/gtfobins/nohup/\n    - https://en.wikipedia.org/wiki/Nohup\n    - https://www.computerhope.com/unix/unohup.htm\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-06\ntags:\n    - attack.execution\n    - attack.t1059.004\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1546.005",
                "atomic_attack_guid": "be1a5d70-6865-44aa-ab50-42244c9fd16f",
                "atomic_attack_name": "Trap EXIT (freebsd)",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Nohup Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_nohup.yml",
                        "remote_content": "title: Nohup Execution\nid: e4ffe466-6ff8-48d4-94bd-e32d1a6061e2\nstatus: test\ndescription: Detects usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\nreferences:\n    - https://gtfobins.github.io/gtfobins/nohup/\n    - https://en.wikipedia.org/wiki/Nohup\n    - https://www.computerhope.com/unix/unohup.htm\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-06\ntags:\n    - attack.execution\n    - attack.t1059.004\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n"
                    }
                ]
            },
            {
                "tech_id": "T1546.005",
                "atomic_attack_guid": "a74b2e07-5952-4c03-8b56-56274b076b61",
                "atomic_attack_name": "Trap EXIT",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Nohup Execution",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_nohup.yml",
                        "remote_content": "title: Nohup Execution\nid: e4ffe466-6ff8-48d4-94bd-e32d1a6061e2\nstatus: test\ndescription: Detects usage of nohup which could be leveraged by an attacker to keep a process running or break out from restricted environments\nreferences:\n    - https://gtfobins.github.io/gtfobins/nohup/\n    - https://en.wikipedia.org/wiki/Nohup\n    - https://www.computerhope.com/unix/unohup.htm\nauthor: 'Christopher Peacock @SecurePeacock, SCYTHE @scythe_io'\ndate: 2022-06-06\ntags:\n    - attack.execution\n    - attack.t1059.004\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection:\n        Image|endswith: '/nohup'\n    condition: selection\nfalsepositives:\n    - Administrators or installed processes that leverage nohup\nlevel: medium\n"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "63220765-d418-44de-8fae-694b3912317d"
                ],
                "lookup_results": [
                    {
                        "uuid": "63220765-d418-44de-8fae-694b3912317d",
                        "lookup_data": {
                            "mitre-attack-id": "T1546.005",
                            "mitre-cti:description": "Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\n\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap 'command list' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)",
                            "mitre-cti:name": "Trap",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['macOS', 'Linux'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--63220765-d418-44de-8fae-694b3912317d', 'type': 'attack-pattern', 'created': '2020-01-24T14:17:43.906Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1546.005', 'url': 'https://attack.mitre.org/techniques/T1546/005'}, {'source_name': 'Trap Manual', 'url': 'https://ss64.com/bash/trap.html', 'description': 'ss64. (n.d.). trap. Retrieved May 21, 2019.'}, {'source_name': 'Cyberciti Trap Statements', 'url': 'https://bash.cyberciti.biz/guide/Trap_statement', 'description': 'Cyberciti. (2016, March 29). Trap statement. Retrieved May 21, 2019.'}], 'modified': '2020-03-24T16:43:02.273Z', 'name': 'Trap', 'description': 'Adversaries may establish persistence by executing malicious content triggered by an interrupt signal. The <code>trap</code> command allows programs and shells to specify commands that will be executed upon receiving interrupt signals. A common situation is a script allowing for graceful termination and handling of common keyboard interrupts like <code>ctrl+c</code> and <code>ctrl+d</code>.\\n\\nAdversaries can use this to register code to be executed when the shell encounters specific interrupts as a persistence mechanism. Trap commands are of the following format <code>trap \\'command list\\' signals</code> where \"command list\" will be executed when \"signals\" are received.(Citation: Trap Manual)(Citation: Cyberciti Trap Statements)', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'privilege-escalation'}, {'kill_chain_name': 'mitre-attack', 'phase_name': 'persistence'}], 'x_mitre_detection': 'Trap commands must be registered for the shell or programs, so they appear in files. Monitoring files for suspicious or overly broad trap commands can narrow down suspicious behavior during an investigation. Monitor for suspicious processes executed through trap interrupts.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['Command: Command Execution', 'File: File Modification', 'Process: Process Creation', 'File: File Creation'], 'x_mitre_permissions_required': ['User', 'Administrator']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1546.005",
                "display_name": "Event Triggered Execution: Trap",
                "atomic_tests": [
                    {
                        "name": "Trap EXIT",
                        "auto_generated_guid": "a74b2e07-5952-4c03-8b56-56274b076b61",
                        "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "executor": {
                            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
                            "cleanup_command": "rm -f /tmp/art-fish.txt\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Trap EXIT (freebsd)",
                        "auto_generated_guid": "be1a5d70-6865-44aa-ab50-42244c9fd16f",
                        "description": "Launch bash shell with command arg to create TRAP on EXIT.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if bash is installed.\n",
                                "prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "(which pkg && pkg install -y bash)\n"
                            }
                        ],
                        "executor": {
                            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" EXIT'\n",
                            "cleanup_command": "rm -f /tmp/art-fish.txt\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Trap SIGINT",
                        "auto_generated_guid": "a547d1ba-1d7a-4cc5-a9cb-8d65e8809636",
                        "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
                        "supported_platforms": [
                            "macos",
                            "linux"
                        ],
                        "executor": {
                            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
                            "cleanup_command": "rm -f /tmp/art-fish.txt\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Trap SIGINT (freebsd)",
                        "auto_generated_guid": "ade10242-1eac-43df-8412-be0d4c704ada",
                        "description": "Launch bash shell with command arg to create TRAP on SIGINT (CTRL+C), then send SIGINT signal.\nThe trap executes script that writes to /tmp/art-fish.txt\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if bash is installed.\n",
                                "prereq_command": "if [ ! -x \"$(command -v bash)\" ]; then exit 1; else exit 0; fi;\n",
                                "get_prereq_command": "(which pkg && pkg install -y bash)\n"
                            }
                        ],
                        "executor": {
                            "command": "bash -c 'trap \"nohup sh $PathToAtomicsFolder/T1546.005/src/echo-art-fish.sh\" SIGINT && kill -SIGINT $$'\n",
                            "cleanup_command": "rm -f /tmp/art-fish.txt\n",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 15:25:21"
}