{
    "id": "T1027.001",
    "name": "Binary Padding",
    "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations.\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ)",
    "platforms": "Linux, macOS, Windows",
    "kill_chain_phases": "Defense Evasion",
    "data_sources": "File: File Metadata",
    "detection": "Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file.",
    "url": "https://attack.mitre.org/techniques/T1027/001",
    "enrichments": {
        "attack_rule_map": [],
        "cycat": {
            "cycat": {
                "cycat_related_uuids": [
                    "95361ce5-c891-4b0a-87ca-e24607884a96",
                    "470ec5fa-7b4e-4071-b200-4c753100f49b",
                    "c52a914f-3d8b-4b2a-bb75-b3991e75f8ba",
                    "5bfccc3f-2326-4112-86cc-c1ece9d8a2b5"
                ],
                "lookup_results": [
                    {
                        "uuid": "95361ce5-c891-4b0a-87ca-e24607884a96",
                        "lookup_data": {
                            "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This rule detect using dd and truncate to add a junk data to file.",
                            "raw": "author: Igor Fits, Mikhail Larin, oscd.community\ndate: 2020/10/19\ndescription: Adversaries may use binary padding to add junk data and change the on-disk\n  representation of malware. This rule detect using dd and truncate to add a junk\n  data to file.\ndetection:\n  condition: selection1 or (selection2 and not filter)\n  filter:\n    CommandLine|contains: of=\n  selection1:\n    CommandLine|contains: -s\n    Image|endswith: /truncate\n  selection2:\n    CommandLine|contains: if=\n    Image|endswith: /dd\nfalsepositives:\n- Legitimate script work\nid: 95361ce5-c891-4b0a-87ca-e24607884a96\nlevel: high\nlogsource:\n  category: process_creation\n  product: macos\nmodified: 2022/11/26\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1027.001/T1027.001.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027.001\ntitle: Binary Padding - MacOS\n",
                            "sigma:id": "95361ce5-c891-4b0a-87ca-e24607884a96",
                            "title": "Binary Padding - MacOS",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "470ec5fa-7b4e-4071-b200-4c753100f49b",
                        "lookup_data": {
                            "description": "Detects code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.",
                            "raw": "author: Thomas Patzke\ndate: 2019/12/03\ndescription: Detects code integrity failures such as missing page hashes or corrupted\n  drivers due unauthorized modification. This could be a sign of tampered binaries.\ndetection:\n  condition: selection\n  selection:\n    EventID:\n    - 5038\n    - 6281\nfalsepositives:\n- Disk device errors\nid: 470ec5fa-7b4e-4071-b200-4c753100f49b\nlevel: low\nlogsource:\n  product: windows\n  service: security\nmodified: 2020/08/23\nstatus: stable\ntags:\n- attack.defense_evasion\n- attack.t1027.001\ntitle: Failed Code Integrity Checks\n",
                            "sigma:id": "470ec5fa-7b4e-4071-b200-4c753100f49b",
                            "title": "Failed Code Integrity Checks",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "c52a914f-3d8b-4b2a-bb75-b3991e75f8ba",
                        "lookup_data": {
                            "description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware.\nThis rule detect using dd and truncate to add a junk data to file.\n",
                            "raw": "author: Igor Fits, oscd.community\ndate: 2020/10/13\ndescription: 'Adversaries may use binary padding to add junk data and change the on-disk\n  representation of malware.\n\n  This rule detect using dd and truncate to add a junk data to file.\n\n  '\ndetection:\n  condition: selection_execve and (all of keywords_truncate or (all of keywords_dd\n    and not keywords_filter))\n  keywords_dd:\n  - dd\n  - if=\n  keywords_filter:\n  - of=\n  keywords_truncate:\n  - truncate\n  - -s\n  selection_execve:\n    type: EXECVE\nfalsepositives:\n- Unknown\nid: c52a914f-3d8b-4b2a-bb75-b3991e75f8ba\nlevel: high\nlogsource:\n  product: linux\n  service: auditd\nmodified: 2023/01/06\nreferences:\n- https://github.com/redcanaryco/atomic-red-team/blob/f339e7da7d05f6057fdfcdd3742bfcf365fee2a9/atomics/T1027.001/T1027.001.md\nstatus: test\ntags:\n- attack.defense_evasion\n- attack.t1027.001\ntitle: Binary Padding - Linux\n",
                            "sigma:id": "c52a914f-3d8b-4b2a-bb75-b3991e75f8ba",
                            "title": "Binary Padding - Linux",
                            "_cycat_type": "Item"
                        }
                    },
                    {
                        "uuid": "5bfccc3f-2326-4112-86cc-c1ece9d8a2b5",
                        "lookup_data": {
                            "capec": "CAPEC-655",
                            "mitre-attack-id": "T1027.001",
                            "mitre-cti:description": "Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \n\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) ",
                            "mitre-cti:name": "Binary Padding",
                            "mitre-cti:type": "attack-pattern",
                            "raw": "{'x_mitre_platforms': ['Linux', 'macOS', 'Windows'], 'x_mitre_domains': ['enterprise-attack'], 'x_mitre_contributors': ['Martin Jirkal, ESET'], 'object_marking_refs': ['marking-definition--fa42a846-8d90-4e51-bc29-71d5b4802168'], 'id': 'attack-pattern--5bfccc3f-2326-4112-86cc-c1ece9d8a2b5', 'type': 'attack-pattern', 'created': '2020-02-05T14:04:25.865Z', 'created_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'external_references': [{'source_name': 'mitre-attack', 'external_id': 'T1027.001', 'url': 'https://attack.mitre.org/techniques/T1027/001'}, {'external_id': 'CAPEC-572', 'source_name': 'capec', 'url': 'https://capec.mitre.org/data/definitions/572.html'}, {'external_id': 'CAPEC-655', 'source_name': 'capec', 'url': 'https://capec.mitre.org/data/definitions/655.html'}, {'source_name': 'ESET OceanLotus', 'description': 'Folt√Ωn, T. (2018, March 13). OceanLotus ships new backdoor using old tricks. Retrieved May 22, 2018.', 'url': 'https://www.welivesecurity.com/2018/03/13/oceanlotus-ships-new-backdoor/'}, {'source_name': 'Securelist Malware Tricks April 2017', 'url': 'https://securelist.com/old-malware-tricks-to-bypass-detection-in-the-age-of-big-data/78010/', 'description': 'Ishimaru, S.. (2017, April 13). Old Malware Tricks To Bypass Detection in the Age of Big Data. Retrieved May 30, 2019.'}, {'source_name': 'VirusTotal FAQ', 'url': 'https://www.virustotal.com/en/faq/', 'description': 'VirusTotal. (n.d.). VirusTotal FAQ. Retrieved May 23, 2019.'}], 'modified': '2021-10-15T13:53:02.135Z', 'name': 'Binary Padding', 'description': 'Adversaries may use binary padding to add junk data and change the on-disk representation of malware. This can be done without affecting the functionality or behavior of a binary, but can increase the size of the binary beyond what some security tools are capable of handling due to file size limitations. \\n\\nBinary padding effectively changes the checksum of the file and can also be used to avoid hash-based blocklists and static anti-virus signatures.(Citation: ESET OceanLotus) The padding used is commonly generated by a function to create junk data and then appended to the end or applied to sections of malware.(Citation: Securelist Malware Tricks April 2017) Increasing the file size may decrease the effectiveness of certain tools and detection capabilities that are not designed or configured to scan large files. This may also reduce the likelihood of being collected for analysis. Public file scanning services, such as VirusTotal, limits the maximum size of an uploaded file to be analyzed.(Citation: VirusTotal FAQ) ', 'kill_chain_phases': [{'kill_chain_name': 'mitre-attack', 'phase_name': 'defense-evasion'}], 'x_mitre_detection': 'Depending on the method used to pad files, a file-based signature may be capable of detecting padding using a scanning or on-access based tool.  When executed, the resulting process from padded files may also exhibit other behavior characteristics of being used to conduct an intrusion such as system and network information Discovery or Lateral Movement, which could be used as event indicators that point to the source file. ', 'x_mitre_is_subtechnique': True, 'x_mitre_version': '1.2', 'x_mitre_modified_by_ref': 'identity--c78cb6e5-0c4b-4611-8297-d1b8b55e40b5', 'x_mitre_data_sources': ['File: File Metadata'], 'x_mitre_defense_bypassed': ['Anti-virus', 'Signature-based detection']}",
                            "_cycat_type": "Item"
                        }
                    }
                ]
            }
        },
        "atomics": [
            {
                "attack_technique": "T1027.001",
                "display_name": "Obfuscated Files or Information: Binary Padding",
                "atomic_tests": [
                    {
                        "name": "Pad Binary to Change Hash - Linux/macOS dd",
                        "auto_generated_guid": "ffe2346c-abd5-4b45-a713-bf5f1ebd573a",
                        "description": "Uses dd to add a zero byte, high-quality random data, and low-quality random data to the binary to change the hash.\n\nUpon successful execution, dd will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "file_to_pad": {
                                "description": "Path of binary to be padded",
                                "type": "path",
                                "default": "/tmp/evil-binary"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "The binary must exist on disk at specified location (#{file_to_pad})\n",
                                "prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "cp /bin/ls #{file_to_pad}\n"
                            }
                        ],
                        "executor": {
                            "command": "dd if=/dev/zero bs=1 count=1 >> #{file_to_pad} #adds null bytes\ndd if=/dev/random bs=1 count=1 >> #{file_to_pad} #adds high-quality random data\ndd if=/dev/urandom bs=1 count=1 >> #{file_to_pad} #adds low-quality random data\n",
                            "cleanup_command": "rm #{file_to_pad}\n",
                            "name": "sh"
                        }
                    },
                    {
                        "name": "Pad Binary to Change Hash using truncate command - Linux/macOS",
                        "auto_generated_guid": "e22a9e89-69c7-410f-a473-e6c212cd2292",
                        "description": "Uses truncate to add a byte to the binary to change the hash.\n\nUpon successful execution, truncate will modify `/tmp/evil-binary`, therefore the expected hash will change.\n",
                        "supported_platforms": [
                            "linux",
                            "macos"
                        ],
                        "input_arguments": {
                            "file_to_pad": {
                                "description": "Path of binary to be padded",
                                "type": "path",
                                "default": "/tmp/evil-binary"
                            }
                        },
                        "dependency_executor_name": "sh",
                        "dependencies": [
                            {
                                "description": "The binary must exist on disk at specified location (#{file_to_pad})\n",
                                "prereq_command": "if [ -f #{file_to_pad} ]; then exit 0; else exit 1; fi;\n",
                                "get_prereq_command": "cp /bin/ls #{file_to_pad}\n"
                            }
                        ],
                        "executor": {
                            "command": "truncate -s +1 #{file_to_pad} #adds a byte to the file size\n",
                            "cleanup_command": "rm #{file_to_pad}\n",
                            "name": "sh"
                        }
                    }
                ]
            }
        ]
    },
    "timestamp": "2025-02-28 11:06:31"
}